ccopy_reg
_reconstructor
p0
(c__main__
Model
p1
c__builtin__
object
p2
Ntp3
Rp4
(dp5
S'test_output'
p6
g0
(ctheano.tensor.var
TensorVariable
p7
g2
Ntp8
Rp9
(dp10
S'auto_name'
p11
S'auto_1258'
p12
sS'index'
p13
I0
sS'tag'
p14
g0
(ctheano.gof.utils
scratchpad
p15
g2
Ntp16
Rp17
(dp18
S'trace'
p19
(lp20
(lp21
(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/runpy.py'
p22
I174
S'_run_module_as_main'
p23
S'"__main__", fname, loader, pkg_name)'
p24
tp25
a(g22
I72
S'_run_code'
p26
S'exec code in run_globals'
p27
tp28
a(S'/work/04864/mvasic/projects/crnTranslation/src/crn/mnist.py'
p29
I249
S'<module>'
p30
S'Model(hyperparams).train()'
p31
tp32
a(S'/work/04864/mvasic/projects/crnTranslation/src/crn/mnist.py'
p33
I70
S'__init__'
p34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p35
tp36
a(S'binary_connect/mlp_model.py'
p37
I90
S'make_model'
p38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p39
tp40
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/lasagne/layers/helper.py'
p41
I197
S'get_output'
p42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p43
tp44
a(S'binary_connect/binary_connect.py'
p45
I140
S'get_output_for'
p46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p47
tp48
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/lasagne/layers/dense.py'
p49
I123
g46
S'activation = activation + self.b'
p50
tp51
aasbsS'name'
p52
NsS'owner'
p53
g0
(ctheano.gof.graph
Apply
p54
g2
Ntp55
Rp56
(dp57
S'inputs'
p58
(lp59
g0
(g7
g2
Ntp60
Rp61
(dp62
g11
S'auto_1253'
p63
sg13
I0
sg14
g0
(g15
g2
Ntp64
Rp65
(dp66
g19
(lp67
(lp68
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p69
tp70
a(g22
I72
g26
S'exec code in run_globals'
p71
tp72
a(g29
I249
g30
S'Model(hyperparams).train()'
p73
tp74
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p75
tp76
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p77
tp78
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p79
tp80
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p81
tp82
a(g49
I121
g46
S'activation = T.dot(input, self.W)'
p83
tp84
aasbsg52
Nsg53
g0
(g54
g2
Ntp85
Rp86
(dp87
g58
(lp88
g0
(g7
g2
Ntp89
Rp90
(dp91
g11
S'auto_1226'
p92
sg13
I0
sg14
g0
(g15
g2
Ntp93
Rp94
(dp95
g19
(lp96
(lp97
(g22
I72
g26
S'exec code in run_globals'
p98
tp99
a(g29
I249
g30
S'Model(hyperparams).train()'
p100
tp101
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p102
tp103
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p104
tp105
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p106
tp107
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p108
tp109
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p110
tp111
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p112
I157
S'rectify'
p113
S'return theano.tensor.nnet.relu(x)'
p114
tp115
aasbsg52
Nsg53
g0
(g54
g2
Ntp116
Rp117
(dp118
g58
(lp119
g0
(g7
g2
Ntp120
Rp121
(dp122
g11
S'auto_1225'
p123
sg13
I0
sg14
g0
(g15
g2
Ntp124
Rp125
(dp126
g19
(lp127
(lp128
(g22
I72
g26
S'exec code in run_globals'
p129
tp130
a(g29
I249
g30
S'Model(hyperparams).train()'
p131
tp132
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p133
tp134
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p135
tp136
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p137
tp138
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p139
tp140
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p141
tp142
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p143
tp144
aasbsg52
Nsg53
g0
(g54
g2
Ntp145
Rp146
(dp147
g58
(lp148
g0
(ctheano.tensor.var
TensorConstant
p149
g2
Ntp150
Rp151
(dp152
g11
S'auto_53'
p153
sg13
Nsg14
g0
(g15
g2
Ntp154
Rp155
(dp156
g19
(lp157
(lp158
(g22
I72
g26
S'exec code in run_globals'
p159
tp160
a(g29
I249
g30
S'Model(hyperparams).train()'
p161
tp162
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p163
tp164
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p165
tp166
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p167
tp168
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p169
tp170
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p171
tp172
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p173
tp174
aasS'unique_value'
p175
Nsbsg52
NsS'cached'
p176
I01
sS'type'
p177
g0
(ctheano.tensor.type
TensorType
p178
g2
Ntp179
Rp180
(dp181
S'broadcastable'
p182
(tsS'dtype'
p183
S'float32'
p184
sS'numpy_dtype'
p185
cnumpy
dtype
p186
(S'f4'
p187
I0
I1
tp188
Rp189
(I3
S'<'
p190
NNNI-1
I-1
I0
tp191
bsS'sparse_grad'
p192
I00
sg52
NsbsS'data'
p193
cnumpy.core.multiarray
_reconstruct
p194
(cnumpy
ndarray
p195
(I0
tp196
S'b'
p197
tp198
Rp199
(I1
(tg189
I00
S'\x00\x00\x00?'
p200
tp201
bsbasg14
g0
(g15
g2
Ntp202
Rp203
sS'outputs'
p204
(lp205
g121
asS'op'
p206
g0
(ctheano.tensor.elemwise
DimShuffle
p207
g2
Ntp208
Rp209
(dp210
S'drop'
p211
(lp212
sS'shuffle'
p213
(lp214
sS'augment'
p215
(lp216
I0
aI1
asS'func_name'
p217
S'APPLY_SPECIFIC(cpu_dimshuffle)'
p218
sS'input_broadcastable'
p219
(tsS'func_files'
p220
(lp221
S'c_code/dimshuffle.c'
p222
asS'inplace'
p223
I01
sS'new_order'
p224
(S'x'
p225
g225
tp226
sS'code_sections'
p227
(dp228
S'support_code_apply'
p229
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p230
ssS'view_map'
p231
(dp232
I0
(lp233
I0
assS'func_codes'
p234
(lp235
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p236
asbsbsg177
g0
(g178
g2
Ntp237
Rp238
(dp239
g182
(I01
I01
tp240
sg183
g184
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp241
Rp242
(dp243
g11
S'auto_1221'
p244
sg13
I0
sg14
g0
(g15
g2
Ntp245
Rp246
(dp247
g19
(lp248
(lp249
(g22
I72
g26
S'exec code in run_globals'
p250
tp251
a(g29
I249
g30
S'Model(hyperparams).train()'
p252
tp253
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p254
tp255
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p256
tp257
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p258
tp259
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p260
tp261
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p262
tp263
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p264
tp265
aasbsg52
Nsg53
g0
(g54
g2
Ntp266
Rp267
(dp268
g58
(lp269
g0
(g7
g2
Ntp270
Rp271
(dp272
g11
S'auto_1214'
p273
sg13
I0
sg14
g0
(g15
g2
Ntp274
Rp275
(dp276
g19
(lp277
(lp278
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p279
tp280
a(g22
I72
g26
S'exec code in run_globals'
p281
tp282
a(g29
I249
g30
S'Model(hyperparams).train()'
p283
tp284
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p285
tp286
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p287
tp288
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p289
tp290
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p291
tp292
a(g49
I123
g46
S'activation = activation + self.b'
p293
tp294
aasbsg52
Nsg53
g0
(g54
g2
Ntp295
Rp296
(dp297
g58
(lp298
g0
(g7
g2
Ntp299
Rp300
(dp301
g11
S'auto_1209'
p302
sg13
I0
sg14
g0
(g15
g2
Ntp303
Rp304
(dp305
g19
(lp306
(lp307
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p308
tp309
a(g22
I72
g26
S'exec code in run_globals'
p310
tp311
a(g29
I249
g30
S'Model(hyperparams).train()'
p312
tp313
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p314
tp315
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p316
tp317
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p318
tp319
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p320
tp321
a(g49
I121
g46
S'activation = T.dot(input, self.W)'
p322
tp323
aasbsg52
Nsg53
g0
(g54
g2
Ntp324
Rp325
(dp326
g58
(lp327
g0
(g7
g2
Ntp328
Rp329
(dp330
g11
S'auto_3'
p331
sg13
Nsg14
g0
(g15
g2
Ntp332
Rp333
(dp334
g19
(lp335
(lp336
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p337
tp338
a(g22
I72
g26
S'exec code in run_globals'
p339
tp340
a(g29
I249
g30
S'Model(hyperparams).train()'
p341
tp342
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p343
tp344
a(g37
I11
g38
S"input = T.matrix('inputs')"
p345
tp346
aasbsg52
g58
sg53
Nsg177
g0
(g178
g2
Ntp347
Rp348
(dp349
g182
(I00
I00
tp350
sg183
S'float32'
p351
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp352
Rp353
(dp354
g11
S'auto_1208'
p355
sg13
I0
sg14
g0
(g15
g2
Ntp356
Rp357
(dp358
g19
(lp359
(lp360
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p361
tp362
a(g22
I72
g26
S'exec code in run_globals'
p363
tp364
a(g29
I249
g30
S'Model(hyperparams).train()'
p365
tp366
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p367
tp368
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p369
tp370
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p371
tp372
a(g45
I136
g46
S'self.zero_threshold)'
p373
tp374
a(S'binary_connect/binary_connect.py'
p375
I82
S'binarization'
p376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p377
tp378
aasbsg52
Nsg53
g0
(g54
g2
Ntp379
Rp380
(dp381
g58
(lp382
g0
(g7
g2
Ntp383
Rp384
(dp385
g11
S'auto_1190'
p386
sg13
I0
sg14
g0
(g15
g2
Ntp387
Rp388
(dp389
g19
(lp390
(lp391
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p392
tp393
a(g22
I72
g26
S'exec code in run_globals'
p394
tp395
a(g29
I249
g30
S'Model(hyperparams).train()'
p396
tp397
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p398
tp399
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p400
tp401
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p402
tp403
a(g45
I136
g46
S'self.zero_threshold)'
p404
tp405
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p406
tp407
aasbsg52
Nsg53
g0
(g54
g2
Ntp408
Rp409
(dp410
g58
(lp411
g0
(g7
g2
Ntp412
Rp413
(dp414
g11
S'auto_1185'
p415
sg13
I0
sg14
g0
(g15
g2
Ntp416
Rp417
(dp418
g19
(lp419
(lp420
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p421
tp422
a(g22
I72
g26
S'exec code in run_globals'
p423
tp424
a(g29
I249
g30
S'Model(hyperparams).train()'
p425
tp426
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p427
tp428
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p429
tp430
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p431
tp432
a(g45
I136
g46
S'self.zero_threshold)'
p433
tp434
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p435
tp436
aasbsg52
Nsg53
g0
(g54
g2
Ntp437
Rp438
(dp439
g58
(lp440
g0
(ctheano.tensor.sharedvar
TensorSharedVariable
p441
g2
Ntp442
Rp443
(dp444
g11
S'auto_6'
p445
sg13
Nsg14
g0
(g15
g2
Ntp446
Rp447
(dp448
g19
(lp449
(lp450
(g22
I72
g26
S'exec code in run_globals'
p451
tp452
a(g29
I249
g30
S'Model(hyperparams).train()'
p453
tp454
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p455
tp456
a(g37
I32
g38
S'num_units=hyperparams.HIDDEN_LAYERS_DIMS[k])'
p457
tp458
a(S'binary_connect/binary_connect.py'
p459
I120
g34
S'super(DenseLayer, self).__init__(incoming, num_units, W=lasagne.init.Uniform((-self.H,self.H)), **kwargs)'
p460
tp461
a(g49
I103
g34
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
p462
tp463
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/lasagne/layers/base.py'
p464
I234
S'add_param'
p465
S'param = utils.create_param(spec, shape, name)'
p466
tp467
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/lasagne/utils.py'
p468
I393
S'create_param'
p469
S'spec = theano.shared(spec, broadcastable=bcast)'
p470
tp471
aasbsS'container'
p472
g0
(ctheano.gof.link
Container
p473
g2
Ntp474
Rp475
(dp476
g52
NsS'storage'
p477
(lp478
g194
(g195
(I0
tp479
g197
tp480
Rp481
(I1
(I196
I64
tp482
g189
I00
S'*\x14z>3\x11\xff\xbd\x85\x1a\x12?\xfdX\x0f?|\xdd\xe8\xbe\x8e\xe6\xe4\xbe\xfd\x8e\x1a?>\x91j?>z@?Y\x98\x91\xbe\xdfn\x02;\xb5\xdd\xbb>\x8f\xce\xd9>\xfc\xdc\x84\xbe\xda\xa8\xfa=\xee\x0e\xca;W\xf3x\xbf\xee\xaf\x0b?\x8c\xe9C?T[\x8a\xbe\xd5Tl>\xa1gY\xbf\x00S\x86\xbe\x8a\xc4]?\xdf\x02\x9b>t\x87R\xbep\xd4\x13?P\x8f\xbb\xbeNw\x0b>D\xfe<?\x82\xb7\x02\xbe\x19\xb3\x1a?2d6\xbf\xca)\xd1>\xc3}\xd1>{\xfa\x0f\xbf@\x88Y?\xd1\xfd\xec\xbd\xdd\x91Q?\xb0`a\xbf \xa5!\xbf\r\xc1g\xbf\xfd\x13\xb3>\xa3\xcaA>=p\x88=n\xd1i\xbfA\xa1\xfb=ek\xae\xbe3o\xc2;\xca\xb5F\xbf`\x88[>\xfc\r\x07>l\x89|\xbfG\x85p>\xc5\x01S?\x94\xbf\x14?\x1a\xf2{?\x11\xe8j?S|\x15?,\xe7\xdb\xbeT\xd4\x7f>\xa4t3\xbdw\xd0\x1b\xbf\x8c\x03q\xbe\xabjd\xbfR\x0c\xc6\xbdS\xc9v?\x95\x8a@\xbf\x82\xe0B\xbfc?\xf4>?\xcc2>\xe3bh\xbd\xac&I\xbf\xdd\xa3\n\xbf=\xc8L?\x1f}*\xbe1\xd9\x92==\xd2|\xbf\x95$\xcc\xbe\'>\x01\xbe`\xaee>\x0f\x1eV?\x1d\xc1\x80>\x07\xf1\xd2>\xffH3\xbf\x0c\xf8\xfb>\xc0y)?h\xef\x88>\xc7\xae\xfc\xbd\xfb\xe11\xbfW\x1a\x0c>\x9a6g=\xac!g?\xca\xe5 \xbdY\xbe\xa7;\x97\r\x97=tn#?\xbd\xc1b\xbf\xe5|\xad>\x83\xc3\x08?2\x1c\xd5>\xfa\xfe\x17?\x9e\x96\xec= \x82n?\xda\xa74\xbf\x1c\xd2p\xbf;K@>.\x99E\xbf\x8c\xd0f?\xc1y\xb2\xbe\x03\xde\x1c\xbf\xb1\xcd\xac\xbd\x01?W?Z\x15B?LR\xfd\xbe\x95\xa3\x9b\xbe\xbb\x83"\xbf6\xb8M?\x1e|\xd3>(\x19\xe8>P\xd8L?\x8f\xee\x0e?\xa9\x11K>D\xe3\xd5\xbeR|2\xbf\xf9\xc7\xa8\xbeAU\xa1>\xd9rZ\xbf!\xff\x7f?\xe2\xff\x7f?\xed\xfb\x7f?\xa4\xf5\x7f?\xa1\xfe\x7f?^\xfe\x7f?\xf3\xff\x7f?\x17\xff\x7f?\x00\x00\x80?f\xff\x7f?\x00\x00\x80?y\xafr?\x05\xfb\x7f?\x00\x00\x80?`\xff\x7f?T\xff\x7f?#\xff\x7f?\xd7\xff\x7f?\xd1\xfe\x7f?\xa5\xff\x7f?\x16\xb6\x7f?\xb0\xda\x7f?\x00\x00\x80?\x0e\xff\x7f?r\xfd\x7f?\xab\xff\x7f?\xef\xff\x7f?\r\xc2|?z\xff\x7f?\x15\xfe\x7f?\xe7\xde\x7f?\x00\x00\x80?\x8e\xfe\x7f?\xe8\xfe\x7f?\xf2\xff\x7f?\xbc\xfe\x7f?\xb6\xff\x7f?\xfe\xff\x7f?\x84\xff\x7f?s\xff\x7f?F\xff\x7f?\x0f\xda\x7f?\xaf\xff\x7f?\xd7\xff\x7f?.\xb4%?\xe8\xdb\x7f?`\xfd\x7f?\x90\xff\x7f?\x87\xfe\x7f?\xce\xff\x7f?\x10\xff\x7f?\xd7{|?\x91\xff\x7f?\xeb\xfe\x7f?N.d?\xfb\xff\x7f?\xd0\xff\x7f?\xf5\xfd\x7f?\xe5\xff\x7f?\xca\xfd\x7f?\x00\x00\x80?\xb4\xff\x7f?\x80\xfb\x7f?\xcc\xfe\x7f?\x8b\xfb\x7f?\xa3\xff\x7f?R\xeb\x7f?\x93\x95I\xbf\xf5\xf8\x7f?\xb7\xf6\x7f?\xdd\xff\x7f?O\xfb\x7f?\x00\x00\x80?\xfd\xb1>?\x00\x00\x80?\xfc:;?\xbe\xe5\x7f?i\xe1\x7f?\x00\x00\x80?\x9c\xfb\x7f?\xc2\xd0\x7f?\x15\xff\x7f?\xac\xf9\x7f?\x07\xfe\x7f?\x00\x00\x80\xbf\x01\xbe~?\x00\x00\x80?\x00\x00\x80?M\xf2\x7f?D\xfe\x7f?\xa7\xff\x7f?\x00\x00\x80\xbf)\xfd\x7f?\xe7\xf7\x7f?)\x0b\x0e?\x00\x00\x80?K\xf9\x7f?\xbb\xf9\x7f?\n\xe3u?Q\xf9\x7f?\x83\xfe\x7f?\xf8\xff\x7f?Xe\x7f?\x16\xfd\x7f? \xfc\x7f?\xdf\x14\x7f?\x9d\xfe\x7f?<\xff\x7f?\x00\x00\x80\xbf~\xc1~?\xaf\xef\x7f?\x03\xfe\x7f?\xea)\xa0>\xd6\xfe\x7f?!\xfc\x7f?\x93Ix?\x00\x00\x80?w\xc5\x7f?\x85\x14\xaa>\x80\xff\x7f?3\xe0\x7f?\x13\x7f{?j\xff\x7f?\xf4\xef|\xbd\x00\x00\x80?T\xfe\x7f?\xe1\xe4\x7f?\xb5\xf9\x7f?\x00\xfb\x7f?\xfb\xff\x7f?\xdf\xe8\x7f?\x7f\xf0J?!\xf8\x7f?\x86\xf5\x7f?\x00\x00\x80?\xdb\xfa\x7f?\x00\x00\x80?\x0e\xfd\x7f?c\x7f{?\xea\xd2:?\x99\xe2\x7f?\xaba\n?\xdd\xff\x7f?\xe2\xfa\x7f?\xa3^\x7f??\xf9\x7f?\xe4\xf8\x7f?\xc9\xfd\x7f?\xd0\xfd\x7f\xbf%\x85~?\x00\x00\x80?\xba\xff\x7f?\x99\xf0\x7f?v\xff\x7f?\x9d\xff\x7f?:\x80{?\xbd\xfc\x7f?.\xf7\x7f?\r3\x14?\x84`z?\x9e\xf8\x7f?\xe3\xf8\x7f?\xb7\xff\x7f?\xa4\xf8\x7f?W\xfe\x7f?\xf7\xff\x7f?Y\xfd\x7f?\xc1\xfc\x7f?u\xc5\x7f?\x1eH\x7f?r\xfe\x7f?%\xff\x7f?D\xff\x7f\xbf2\x86~?\x99\xed\x7f?\xd9\xfd\x7f?\xe0#\xcc;\xab\xfe\x7f?\xcd\xfb\x7f?P\x1a\xcd>\xc2\xff\x7f?Z\xc0\x7f?=\xa0v>\x1f\xff\x7f?\xe5\xff\x7f\xbfq\xc1u?W\xff\x7f?\xba\xea\xb0>\x00\x00\x80?\x1c\xfe\x7f?\xe6\xe0\x7f?\xed\xf8\x7f?\xd9\xfa\x7f?\xca\xff\x7f?\xd5\xff\x7f?\x9d\xfb\x7f?\x9e\xff\x7f\xbf\x15\xf5\x7f?\x0f\xc0\x7f\xbfi\x19y?\x00\x00\x80?\t\xfd\x7f?\x00\x00\x80?\xe0\xfc\x7f?\xbe\xe1\x7f?\xa6\xdb\x7f?\x9f\xfe\x7f?\xb1\xfb\x7f?t\xfc\x7f?\x01\xd3\x7f?\xa5\xf8\x7f?\xb2\xfd\x7f?A,\xc8>[s~?\x00\x00\x80?=\xfc\x7f?\x03\xf0\x7f?J\xff\x7f?\x9b\xff\x7f?\xcd\xff\x7f\xbf\x19\xc1\x7f?\xe4\xf6\x7f?\x15$z?\xf3\xe4h?V\xf8\x7f?\x9b\xf8\x7f?\xb6\xff\x7f?h\xf8\x7f?G\xfe\x7f?\xf7\xff\x7f?G\xfd\x7f?\xa2\xfc\x7f?\xc3\xee\x7f?\x82a\x7f?r\xfe\x7f?\x1f\xff\x7f?\xf9\x9dD\xbf\xdfr~?\x8b\xed\x7f?\xc8\xfd\x7f?\xd1B\x0c?\x9e\xfe\x7f?\xa8\xfb\x7f?\xd7\xfd\x7f\xbf\x0c\xff\x7f?\xc4\xfa\x7f?\xf8\xfe\x7f\xbf$\xff\x7f?\x89\xc5??\x96q~?\xa5`<\xbe:\xf5t?\x00\x00\x80?\x0c\xfe\x7f?.\xa9y?\xae\xf8\x7f?\xcd\xfa\x7f?-\x18(?\xec\xff\x7f?fD\x08\xbe\xd9\xff\x7f\xbf\x0c\xf5\x7f?s\xfc\x7f\xbf\xa5\xcd\t?\x00\x00\x80?W\xfd\x7f?I\x01|?\x97\xfe\x7f?\x87\xe1\x7f?\x00\x00\x80?\xee\xff\x7f?\xef\x04\x9c\xbe*\xfc\x7f?\x93\x11~?\x99\xf8\x7f?\xad\xfd\x7f?\x876\x1f?\xe2p~?\x9e\xb5^?\x9f\xff\x7f?\xa7\xfdK?\xde\xff\x7f?\x97\xff\x7f?\xec\xff\x7f\xbf\xeb\x88\x0c?\xec\xf6\x7f?\x16<\xfd>A\xb95?X\xf8\x7f?\x93\xf8\x7f?\xe5\xdcA?X\xf8\x7f?F\xfe\x7f?\xf7\xff\x7f?C\xfd\x7f?\xa7\xfc\x7f?{\xfb\x7f?\x8dL\x7f?\xe89\x1c>\x1d\xff\x7f?\xb7\xcd\xcc>Mp~?T\xed\x7f?\xc9\xfd\x7f?\x14~P\xbf\x9c\xfe\x7f?\xa7\xfb\x7f?\xc6\xfe\x7f\xbf\xbd\xfe\x7f?\xbe\xfa\x7f?\xaf\xff\x7f\xbfC\xbf\x7f?\x1b\xff\x7f?yT\xb1\xbd\xad\x1f\xf3\xbe\xa9\xff\x7f\xbf\x00\x00\x80?\t\xfe\x7f?\xe1\x8aY?\xaa\xf8\x7f?\x8a#~?\xf1\xf7\x7f?\xa9x\x7f?\x91\xff\x7f\xbf\x8f\xec\x7f?\r\xf5\x7f?\x0b\x1fm?\x94\xfa\x7f?\x00\x00\x80?\xb2\xc1\x7f?v\xd5\x1b>\x91\x91g?\x84\xe1\x7f?\x00\x00\x80?\xdd\xff\x7f?\x9b\xfa\x7f?\x83\xfay>\x03\x10\x9e\xbd\x99\xf8\x7f?\xa9\xff\x7f?\xfb\xff\x7f\xbf\x00\xef~\xbfA\xf8r=\x9c \xb3\xbe\xfb\xef\x7f?\x1b\xc3\x7f?L\xe4\xfd>\xc1\xff\x7f\xbf\xa0\xfc\x7f?\xeb\xf6\x7f?\xe00\x1c?\xa7\xcc\xfa>X\xf8\x7f?\x94\xf8\x7f?\x18\xb4u?Y\xf8\x7f?\x87\x93\x9b>\xf7\xff\x7f?\xb0\x89\xdf\xbd\xa4\xfc\x7f? \xfc\x7f?\x9d\x0f\x9e>r\xfe\x7f?\x1e\xff\x7f?\x00\x00\x80? g~?d\xed\x7f?\x00\x00\x80?\xa0\xf4\x7f?\x9c\xfe\x7f?\xa8\xfb\x7f?a\xe3\x7f?j\xfb\x7f?\xbe\xbc\x7f?\xfa\xfa\x7f\xbf\t\xa8o?\xf5\xff\x7f?\x00\x00\x80?N\xff\x7f?\xcc8\xee\xbe\xcf\xfc\x7f?k\xff\x7f?c\x92\xe6\xbe"\xfd\x7f?\xe8\xfa^?U\xff\x7f?.W\x7f?r\\H\xbf\xce\xf7\x7f?\x06\xf5\x7f?\xfb\xff\x7f?\x97\xfa\x7f?\x00\x00\x80?\xd6\xc9\x96>,\xb0\xb3=\xe9{~?\xfd\xebL?~\xf7\xc3\xbe\x87\xfd\x7f?\xa1\xfa\x7f?t\xff\x7f\xbf\x1e{\xbd>\x9c\xf8\x7f?\x07\xff\x7f?\xf8\xff\x7f\xbfI\xfe\x7f\xbfsQ.\xbeD\xf2\x7f?\xfc\xef\x7f?!\xf9\xb3\xbe\x9f\xb7\x7f?\xea\xff\x7f\xbf\xa2\xfc\x7f?\xe9\xf6\x7f?\xf8\x13\x1e?\x87\xdb\xd4\xbdY\xf8\x7f?\x93\xf8\x7f?\xb6\xff\x7f?X\xf8\x7f?\xf4=v?\xf7\xff\x7f?k\xf4\x7f\xbf\xaa\xfc\x7f?\xd4t}?U:~?q\xfe\x7f?\x1d\xff\x7f?\xa5\xe6\x7f?5K~?h\xed\x7f?\xfd\xff\x7f?\xae\xf4\x7f?\x9d\xfe\x7f?\xa8\xfb\x7f?\x0c\xd4\x7f?\x00\x00\x80?sh\xb0>\x7f\xff\x7f\xbfu\xf2\x7f?|\xbb\x7f?\x00\x00\x80?N\xff\x7f?\xcf\xff\x7f?\xc3\x82\x9a>\xd9\xff\x7f?\x00\n\xc2>\x8b\xfa\x7f?\xae\xef\x7f?\xed\xd8`>\x9c\xe8\x7f?\xe2i\xb0>\xe9\xf7\x7f?7\xf5\x7f?:\xff\x7f\xbf\xc6\xfe\x7f\xbf\x00\x00\x80?\x01\xfd\x7f?\x00\x00\x80?\t\xaf1?5\xe2\x7f?\x00\x00\x80?\xb5\xff\x7f?\xc1\xfa\x7f?\x15\xfc\x7f?\xf2\xfe\x7f?\xbe\xf8\x7f?\xe4\xff\x7f?\x1cm \xbf\x0b{~?\x9a\x8d\x7f?\xd6\xff\x7f?L\xf0\x7f?\xdc\xff\x7f?\x98\xff\x7f?\xde\xff\x7f\xbf\xab\xfc\x7f?\xfd\xf6\x7f?3\xdb~?\x00\x00\x80?r\xf8\x7f?\xb4\xf8\x7f?\xb6\xff\x7f?~\xf8\x7f?M\xfe\x7f?\xf7\xff\x7f?s\xfd\x7f?\xa5\xfc\x7f?\x8e\xfb\x7f?L\xeb~?r\xfe\x7f? \xff\x7f?|\xe8\x7f?\x0fv~?\x93\xed\x7f?\xcb\xfd\x7f?\xe4\xa4\x7f?\xa5\xfe\x7f?\xbb\xfb\x7f?\xce\xff\x7f\xbf\xa9\xff\x7f?\xcd\xfa\x7f?\xcdW ?<\xff\x7f?\x10\xff\x7f?\xcf\xff\x7f\xbfT\xff\x7f??\xf3\x7f?\x00\x00\x80?\x12\xfe\x7f?\xa7\xf91\xbf\xd9\xf8\x7f?\x0f\xe1\x7f?\xb6)\x9c\xbez\xe9\x7f?Z8\xfc\xbdG\xf8\x7f?\xbd\xf5\x7f?\xd7\xff\x7f\xbf\xa7\xff\x7f\xbf\x00\x00\x80? \xfd\x7f?\xca\x97u?\x01\xed4?t\xe3\x7f?\x00\x00\x80?\xf3\xff\x7f?\x0b\xfb\x7f?0\xfc\x7f?\xfe\xfe\x7f?\x0e\xf9\x7f?\xeb\xff\x7f?\x07\xff\x7f\xbfv\x92~?\xe4P\x7f?\xfe\xff\x7f?\xee\xf0\x7f?\xfe\xff\x7f?\x9f\xff\x7f?\xfd\xff\x7f\xbf\xd8\xfc\x7f?T\xf7\x7f?\xb9\xff\x7f\xbfAn\xe2>\xd5\xf8\x7f?\x0f\xf9\x7f?\xb9\xff\x7f?\xcc\xf8\x7f?]\xfe\x7f?\xf7\xff\x7f?\x99\xef\x7f?\xc9\xfc\x7f?\xc0\xfb\x7f?6\xf9~?~\xfe\x7f?+\xff\x7f?x\xff\x7f\xbfR\x93~?\xfc\xed\x7f?\xdd\xfd\x7f?\x911\x86>\xb6\xfe\x7f?\xd6\xfb\x7f?\x00\x00\x80\xbf\xca\xff\x7f?\x0b\x9a\x10\xbf\xf7\xff\x7f\xbf9\xff\x7f?\x16\xff\x7f?\xf0\xff\x7f\xbf\\\xff\x7f?\x94%E?\x00\x00\x80?*\xfe\x7f?\xb7\xf9w\xbf \xf9\x7f?\\\xfc\x7f?Y\xff\x7f?A\xef\x7f?\x0f\xa5\xce\xbe;\xfa\x7f?\x9a\xf8\x7f?e\xe2\x7f\xbf\xd6\xff\x7f\xbf\x00\x00\x80?\xb2\xfd\x7f?\x01\xa3v?\x83\xbdG?\x9a\xea\x7f?\x00\x00\x80?\x00\x00\x80?\xa1\xfc\x7f?\xf8\xfc\x7f?I\xff\x7f?\xe0\xfa\x7f?\xcc\xff\x7f?\xbb\xff\x7f\xbfh\x0f\x7f?\x00\x00\x80?\x00\x00\x80?\xe0\xf4\x7f?\x00\x00\x80?\xba\xff\x7f?\x00\x00\x80\xbf\xb4\xfd\x7f?\t\xf9\x7f?\x00\x00\x80\xbfg\xbf\xc5\xbeU\xfa\x7f?\x05\xfb\x7f?\xc8\xff\x7f?\x9a\xfa\x7f?\xc8\xfe\x7f?\xf9\xff\x7f?@]z?\xb0\xfd\x7f?7U\x7f?\x1fG\x7f?\xd1\xfe\x7f?_\xff\x7f?\x00\x00\x80\xbf\x06\x14\x7f?\x9d\xf2\x7f?R\xfe\x7f?U\xd4$<\x14\xff\x7f?\xb3\xfc\x7f?\x0e.S\xber\xfc\x7f?Iv[\xbf\xfd\xff\x7f\xbf\xab\xff\x7f?H\xff\x7f?\x11\x7f\xee>\x86\xff\x7f?X\xf5\x7f?\x00\x00\x80?\xa7\xfe\x7f?>\xeb\x7f?\xe0\xfa\x7f?\xf1\xf2\xa7>\xf0\xd6\x19\xbd\xe1\x1bn\xbf\xb68G\xbf\xdbmJ?{\xc1H?\xfb\x8fT?\x7f8\xc5\xbe\x16k\xce\xbe\xeb\x12\xa3>\x91\xd7B>7\xffw?]\xcbl>\x06\xc90\xbf^\xb6)?\x0c\xa3!?\xe3\xdfP\xbff\x8cF?M\x95w\xbf\x0cU:?\xac+L??c3?\xc9\x89\x9c>\xc9Z\xaf\xbe\xad\xdf\xb9=]-\x06\xbf\x8fZ>?(\x83%\xbf\x08x\x84\xbeC\xe8\x04?\xbaw\xc6\xbek\xdam>\x11\xb9\x0f\xbfl\xbb>?\xe6i\x97>\xee(]\xbd5\x18\x08\xbf\xb1\xea*?E\x8fM\xbf\xb8\x06\x17\xbfe\xd1\x07\xbf/\x9aF>\xff\x8c\x83>\n\x1ew?\xd2\xb9%\xbf\xa4\x96\x19?<\x810\xbf X\x8e\xbe\xa0\xffh?\xe2[=\xbf\xe8\x9a\xe8\xbe\xb2D\x1e?\x9ajn?\x0b\xaeP\xbfX\xda*>\xda\xafA\xbe8tL?D\x97T\xbf\x1bB#\xbf-\x0ff\xbf\x96}\xcb\xbe9\xa0\x1e\xbf\x13\x98{\xbfR\xb5>\xbf\x986F\xbf\xc4\xf1\xeb>\xa3p\x05\xbf\x99\x9aM?\x0b\x9a\xaf\xbe\x87\x82??\x9a\xe5\x06\xbf\xcb\xecx\xbe\xdd8\xad=bb\x01=\x84\x880\xbe\xe7\x99c\xbeQ\x80\xa3\xbe69H\xbe\x88\xad\xaf\xbdb\xa2o\xbeF\xe2\xa1>\x82.C?]\xd5\x14>\x86_\x13\xbe\xc6k\xf7\xbe\x98\x04;?\x11H\'\xbfN\xbe#>\xa6\xd5\xe8>\x97\xee\xeb>\xd7\x9dD\xbe\x03\x9fC\xbf\xe0\xf5\x06?7\xe0\x89=\x1b]\xe3>v\xf3G>r\xf8\x1d\xbe\xe3\xf1]?\xc4\xe9|?\xa9\xf2\xc3=\x9d\xc2\xeb>\x0b\xacq\xbf\xa3(:?\x88L\x7f?\xfb\xe1\xb2\xbecU3?\xfbUd>i3\xf1\xbd(\xdc^=\xa6D\x0f?\x0e\x9e\xfe\xbe9\xfe\x97\xbdt\xc21?\xd1K\xb6>\x1bO\x87\xbeJZ9\xbf\xd7\x0bG\xbe\xf9\xd2\\?\x96Q\xb1>\xd7j%\xbe\x15\xa1\x0c>\xe6\xa4j\xbf\xc2\xc3}?|\xb8s>/\x16\x0f?k\xd8\\?\xbe.\xa2\xbe\x9cb\x1f?\xd2\xd3>?\xd1\xf8\xa9>\xb9\xd55>xeI?\x90\x99\xd2\xbd(\xe0\x02\xbfG\xdb ?\x88\xe1\xc9>A!9\xbe\xea\x12}\xbf\x92th?\xad\x8eW>\xf7\xa5|\xbf0vE\xbbT\x01J>&\xa6\xcc\xbe,\xa4\x9c\xbd\xb6/\x10\xbc\x0fn/>1A=?\xa7\x19*?\xd1\x9f\x0e?\xcba\xc6=\x80Yh>g\xe4\xef>\x85\xec\x07>X\xe8\x0c?\x81\x1cy?\xc5\x12\x14?\xfc(j>T\xf5.\xbf}qA\xbd\x12\x8b\xdd\xbe\x85?1\xbf\xd6\xef\r?\x96\xcfa\xbfA}W\xbf!.\xa8>\xf9=?=s\x84\xdb\xbd=\xce\xc5\xbeh&w\xbf\xb3m\xd3\xbek\xc7\xed\xbeM2m\xbf\x13\xab\x1b?s0\xaa\xbe_\xa5H?\x9e\xe6\x1e?\xac\x9em?\x7fYj?\xfb\xb4:>F\x05\xc1\xbe>;V?%\x11f\xbfuk\x0c\xbf\xc6\x96\x8c\xbeH\xb33\xbeg\xa5c?Q\x93">\xf9` \xbf\xc1\x99E>N\x15^??R;\xbf\x9e\xfc\x7f?^\xff\x7f?\x00\x00\x80?\x8d\xe9~?\x00\x00\x80\xbf\xf7\xf8\x7f?\xca\xff\x7f?\x00\x00\x80\xbf\x00\x00\x80?\xdd\xfd\x7f?\x00\x00\x80?\xf3\xff\x7f?L\xec\x7f?\x00\x00\x80?$\xfc\x7f?\xf2\xfc\x7f?#\xfd\x7f?Z\xff\x7f?=\xfb\x7f?\x8a\xfe\x7f?\x1d\xfd\x7f?o\'\x7f?\x00\x00\x80?c\xf9\x7f?\xb3\xf5\x7f?\xb6\xfe\x7f?\xc0\xff\x7f?\xdf\xff\x7f\xbf\xea\x06\x15\xbeu\xf9\x7f?\x00\x00\x80\xbf\x16sb?\xbc\xfa\x7f?k\xfb\x7f?\xcc\xff\x7f?\t\xfb\x7f?\xdf\xfe\x7f?\xfa\xff\x7f?(\xfe\x7f?\xd5\xfd\x7f?\x18\xfd\x7f?\x95V\x7f?\xec\xfe\x7f?j\xff\x7f?o\xe5~\xbfG,\x7f?\xa5\xf3\x7f?o\xfe\x7f?\xdd\xd3\x7f?#\xff\x7f?\xe5\xfc\x7f?\xe0\xffi?\xc0\xfc\x7f?D\xfc\x7f?\xf2\xff\x7f\xbf\xb6\xff\x7f?U\xff\x7f?7\xf6\x7f?\x90\xff\x7f?W\xf6\x7f?\x00\x00\x80?\xc4\xfe\x7f?\x02\xed\x7f?8\xfb\x7f?\t\xfb\x7f?\xf9\xff\x7f?\x00\x00\x80?\x94\xf9\x7f?m\xff\x7f\xbfq\xfc\x7f?\xf1\xff\x7f?\xbe\xff\x7f\xbf\xaf\x04.?\x17\xb1\x7f?\x00\x00\x80?\xfa\xfe\x7f\xbf\xcc\xc8\x7f?\xbce\xec>\xf7\t\x7f?\xec\xf8\x7f?\xae\xef\x7f?0\xff\x7f?3\xe8\x7f?\xcb\xfd\x7f?/\xfc\x7f?\x08v6?\xc6\x1e\x7f?\xd4\xf6\x7f\xbf\x9e\xf3\x7f?\x0f\xfe\x7f?\x9c\xff\x7f?^\xfb\x7f\xbf\xcc\xe4\x7f??\xf7\x7f?\x00\x00\x80\xbf\x00\x00\x80?\xa6\xf8\x7f?\xc8\xff\x7f?\xb7\xff\x7f?\xb3\xf8\x7f?}\xff\x7f?\xf7\xff\x7f?^\xfd\x7f?\xbf\xfc\x7f?_\x8a\xda=\x9a\xfc\x7f?\x1e\xf6\x7f?w\xff\x7f?\x1eD~\xbf!\xbb\x7f?\xaa\xe6\x7f?\xd9\xfd\x7f?\xbf\xff\x7f?\x9e8Y>\xc9\xfb\x7f?\x1b\x9f}?\x00\x00\x80?\'\xfb\x7f?\xb8\xfe\x7f\xbf\x00\x00\x80?\x15\xff\x7f?\xb2\xf0\x7f?W\xff\x7f?\xf9\xff\x7f?\x00\x00\x80?(\xff\x7f?\x10\xe1\x7f?\xa1V\x7f?\xd0\xfa\x7f?+\xff\x7f?\xf2\xd8\xa2>\x86mL\xbebg\xb4\xbdMoy?\xe6\xff\x7f?\x8a\xfa\x7f?\xa3\xfc\x7f?\xac\xa6\x7f?Hfu?\xabs\x9a\xbdo\xa5\x7f?\xd0\x9d\xb0\xbe\xf1\xff\x7f?\xc8\xfa\x05?!\xd6\x7f?\x92\xda\x7f?\x00\x00\x80?\xd9\xfd\x7f?\xfb\xff\x7f\xbf\x08\x8f\x7f\xbf(\xceR?\xd5\xff\x7f?\xdai\x1b?q\xff\x7f?\x95\xff\x7f?\xc6\xff\x7f\xbfB\xb9T\xbf\xd5\xf6\x7f?c\xcf~?\x18\xa9>?M\xf8\x7f?\x18\xff\x7f?\xd5\xc7\xb4>$\xfa\x7f?\x02\xff\x7f?\xf6\xff\x7f?\x06\xff\x7f?8\xff\x7f?g\xd2\xcf>,\xf0\x7f?k\xfe\x7f?\x9a\xff\x7f?\xd8\xff\x7f\xbf\xb8HO=d\xef\x7f?\xc5\xfd\x7f?\x86 6?\x13\x05\x98>R\xe9\x7f?\xa5\xff\x7f?\x00\x00\x80?z\xdb\x7f?\xcb\x8c\xea\xbd\x00\x00\x80?\xdc\xe3\x7f?\xf7\xc3\x7f?@\xe7\x7f?G8\xbe\xbe\x00\x00\x80?\xce\xfe\x7f?\x80\xf2\x7f\xbf\xd7\xc8\x7f?\xd8\x8f\xc3>\xc2\xfd\x7f?b\xfe\x7f\xbf\xf4\xf0~?J\x8f\x7f?\x8b\xf5\x7f?\x00\x00\x80?d\xf2\x7f?\xfb\xf7\x7f\xbf\x95u\x9a>\xf4\xcf\xf6>\x9b\xfb\x7f\xbfn\xa5U?\xa4b\x90>\x80\x9d\xb3\xbe!%\xb4\xbe|\x0c\\?\xb8\xd3\x7f\xbf\xef\xff\x7f?D|p\xbf\xf9\xff\x7f\xbfsI\x7f\xbf\xf1\x91\xac>\xb7\xbd\x1c\xbfCJ\xb3>\x00\x00\x80\xbf\xb1\xbd\x95>\xb7\xf6\x7f\xbf\x05\xf8L\xbe<Qw?\xf7c\x8e>\x86\xae\xf5>\x1c\xf8\x7f?\xeb\xd33\xbfo\xf6\x7f\xbf\x8d\xfb\x7f?\x1c\xfd\x7f?\xf6\xff\x7f?B\xfd\x7f?\xce\xf7L?\x02\xdb\x7f?\xf2\x19]?\x80\xfe\x7f?\x00\x00\x80\xbf\x83\xff\x7f\xbf\xe1\x15\xa3>\xd5|e?\n\xf7\x7f\xbf[\xfb\x7f?9\xf0\x7f?\xc3\xef\x7f?l\xc4\x7f\xbf\x00\x00\x80?\xc4\xf4\x7f?B\xff\x7f\xbf\xe67\x96>\xa6\xfaN\xbf_\xf5\x00?\xa4\xfb\x7f\xbf\x00\x00\x80?M\xde\x7f?\x86K|?\xee\xfd\x7f\xbf\x17^\xeb\xbe\xa0\xfe\x7f\xbf\xa3\xfe\x7f?Z\xd2[\xbd=\x1b\x08\xbf\xaaIy?\x00\x00\x80\xbf\xff\xfb\x7f?\x98\xfa\x7f?\xd6\xfb\x7f\xbfp\xf6\x7f?\x98(\xb0>9\xfe\x7f\xbf\x0e\xc5\x7f\xbfi\xdf\x7f?a\xfb\x7f?K\xfd\x7f\xbf"\xd3\x7f?>\xec\xae>\xf3\xe4\x7f?\x0b\xff\x7f\xbf\xda\xff\x7f\xbf\xa4\x0c\xaf\xbeAo\x01?\x8d\xe9\x7f?X\xc1\xb5>\x7f\xef\x7f?\xfd\xad\xb3\xbe\x90f\xf2>d\xe7\xdb>}\xf2\x7f\xbf&F\xb3>\xd2o\xa6>x\xe5\x7f?A\x8b\xb3\xbe\x82\xe4\x94\xbd(a\x7f?\xfa\xfc\x7f\xbf\xb8\xa5\x9c>y\xd6\x7f\xbfh\xf8\xb2>f-\xb1>\x00\x00\x80?\xb0\xcc\xb3>E\xfc\x7f?\xc5\xfb\x7f\xbf|\xfd\x7f\xbf\xad\xef\x7f\xbf\xa1\xff\x7f\xbf\xe1\xbd\x7f\xbf\xe5\xff\x7f?1\xfb\x7f?\xf4\xb3\x7f\xbf\x00\x00\x80?\xb7\xfa\x7f?i\xff\x7f\xbfk\xdc\xb2\xbe\x88\xd5\x7f?\xa0Qc?\xa0\r\xa6\xbeB\xd9\x7f?\x9a\xea\x7f?\x00\x00\x80?\x9e\xfd\x7f\xbf\xb6@&>9\xe9\x7f\xbf\x0e/E\xbfx\xfe\x7f?\xd8\xff\x7f\xbf1\xcfl\xbe\xf6\xf6J>\x00\x00\x80?*\xdd}?/\xf0\x7f?q^\xb3>b\xa5\xb0>\xf8\xcb~\xbf{\xa9\xdc\xbey=\xb3\xbe\x92\xfe\x7f\xbf\x9b\x9e\xca\xbei\xb7r?\x1a\x00[?\x1d\xfc\x7f?\xaa9W\xbfm\x94~\xbf"\xeb\x7f\xbf\x02\xebe?\xda\xe2\x7f?\x86\x98k?\xcf^\xde>-\xf8\x7f\xbf\t\xff\x7f\xbf\xc2\xc1\xb3\xbev\xfd\x7f\xbfI\xfc\x7f\xbf8i\x93>\x00\xec\x7f?W\xfe\x7f\xbf\xb3\xff\x7f?\x94\xfb\x7f\xbfU\xf4\x7f?_\x1d\xcd\xbe\x07\x7f\xbd\xbe\x8f;\xbd\xbe!\x95\xbf\xbe\xa3q\xe6=w\xfc\x7f\xbf\x8f\x8a\xb0\xbe\xe1\xe4\x7f\xbf\xe1\xf5\x7f\xbf\x04\xff\x7f\xbf\r\xc6\xb3\xbe\xfd\xcf\x7f\xbf\x00\x00\x80?\xaa\xfb\x7f?f\xe6w?\xac\xfa\x7f?\x02\xfb\x7f?4\xfa\x7f\xbf\x00\x00\x80?\xa9\xfc\x7f\xbfwnm?\x00\xe4\xb8\xbe^\x8d~?d\xff\x7f\xbf\x00\x00\x80?\xb3\xea\x7f\xbf{\xcf\xb3\xbe\x0f[\xb3\xbe\x0b\xff\x7f\xbf\xc7l\x12\xbfR\xfe\x7f\xbf\x8f\xa7\x04?J\xd0\t?<\xfa\xf0>\xf4\x95^\xbf0\xfe\x7f?e/I\xbfd\x9eo>c\x82~\xbfv81\xbc:\x96\x1b\xbf\x96\xe1\x7f?\x17\xfe\x7f\xbfs7\xb3\xbe\xca\xf8\x7f?r\xe8\x7f\xbf\xe1\xf8\x7f?\xa7\xff\x7f\xbf$+\xb3>\xc2\xe9\xb2>\xa0\xfa\xb2>\xba\xff\x7f\xbf]\xfc\x7f?\x80\xfa\x7f\xbfN\xfa\x7f\xbf\xfc\x11\xb3>\x8d\xe6=>\xf4\xf7\x7f\xbfq\xd63\xbf\xdd\xf6+\xbf\x7f\xf4\x7f\xbf)\'\xb4\xbe\x05\x02I\xbfm\xf9\x7f?9\x85\x05\xbdJ\xf3\x7f\xbf\x9e\x9d\xaf\xbe\x97i\xd6>\xcb\x0b\xb1>\xc4$\xb2\xbe\x9f\xf8\x7f\xbf\x99\x15.\xbf\xec\xf5\x7f\xbf%\xf7\x7f\xbf\x9e7\xb3\xbe\x00\x00\x80\xbf\x00\x00\x80?\x9a\xfb\x7f?O\xd7\xd1\xbe\x00\x00\x80?\xc8\xfa\x7f?K\xfc\x7f\xbf\xd1\x0eN\xbfD\xfe\x7f\xbf\x00\x00\x80?\x08\x8b\x7f?\'\xb2x\xbf7\xff\x7f\xbf\xf0\xff\x7f?G\xab\xb1\xbe\x92*\xb3\xbel\x10\xb2\xbe\xea\xfd\x7f\xbf\xe8\xff\x7f\xbfe\xf7\x7f\xbf\xd6;\x1b?\x00\x00\x80\xbf<\x9d\xb2>\xf7\x88O\xbf\x00\xc1~\xbf=\xfd\x98>Z\x1d\xb0>\xe3\xbe\xb3\xbe\x8a\x06\xa4>b\xff\x7f\xbf\x00\x00\x80?\x94\xf6\x7f\xbf\xcc\xf1q>\xdd\xfe\x7f?\xb2\xfd\x7f\xbf\xc0\xf5\x7f?\xc0\xff\x7f\xbf1\xfa\x7f\xbf5<\xc7>\xdd6\xb3>W\xed\x83>\x00\x00\x80?\xd0&O\xbf\x0f\xf7\x7f\xbf%\xf7\x7f\xbf0 \xb4\xbe\x14\xf6\x7f\xbf\xf4`}\xbf\x1c\xd2\x7f?\xb4\xfa\x7f\xbf\nd\xd3>\xa4\xd5S?\x19\xf3\x7f?\xfd\xb2\xc1>\xf5P\xb3>\xe5\xd3\x7f?\xeb\xf8\x18?\xf9\xf7\x7f\xbfQ#\xb3>\xa6\xde\x7f\xbf\xeb.\xb3>\x8c\xda;\xbf\xac]}\xbe{\xe8\x7f?o\xe8~\xbfp\xbe\xb2>\x04\xfb\x7f?\xfdQ\xea\xbeY\xf8\x7f?\xff\xf2\x7f?\x19\xfd\x7f\xbf\x0b\xff\x7f\xbfD\xe4\x7f\xbf\x00\x00\x80?\xe4t5\xbf\x15\xfdm\xbd\xb2\xf5\x7f\xbfm\xc8\xb3>\xe8\xf6\xb3>\x10\xa7d?\x00\xe6\x7f?\xb2\x08\xb1>}\xfe\x7f\xbf\xec\xf9\x7f\xbf\xdd\xf7\x7f?\xeb)\xb3>\x0f\xd7\x7f\xbf\x06\xb6\xa0\xbe\xf2U\xb1\xbe\x0b\xf9\x7f?\x01c\x9f>(\xfd\x7f\xbf\x14\xdes>\x91$\xc2\xbe|H\xb3>S>\xb3\xbe\x8d\x0b\xb3>\x04\xfd\x7f?\xe7\xe0\xb4>\xceE\xb3>\x9a%\xb3\xbe*\x87\xbc>w%*?\xa4\xf8\x7f?\xfa\xff\x7f\xbf,\xfe\x7f?\x87\xf5\x7f?9\xff\x7f\xbf\x12\xf1\x7f?\x80\x82}\xbf\x13\xf1\x7f\xbf\xe9`\x8a>M\xf3\x7f?\x99\xdf\x7f\xbf\xb3\xff\x7f?\xa0\xff\x7f?\xa8H\x0e?\xf6\xff\x7f?\xf7O\xb3>\xd7\xf7\x7f?}u\x7f?2(\xb3\xbe\x1b\xe7\x7f?\xb3\xdf\x7f\xbf8\xe0\x7f\xbf\xf0\xdb\x7f\xbf\xf9\xf9\x7f?\xf3\xfa\x7f\xbf\x00\x00\x80\xbfR\xfe\x7f\xbf\xbb\xfd\x7f?\x93;@\xbf\x15\xf2j?g\xfb\x7f?\xeb\xfb\x7f\xbf\xa9\xfe\x7f\xbf\xac\xf3\x7f\xbfqK\xb3>\x96\x9b\xb3>\xc6\xe8\x7f\xbf\x14\xf8\x7f?p\xfe\x7f\xbf\xaa{\xc0\xbe\xa7\x1dp>\xe7\x94\xca>(nI\xbfj\xb1\xb2\xbe\xbe\xf6\x7f\xbf\x9f\xed\x7f?`\xda\x7f?\xbc\xfa\x7f\xbf\x18\xfd\x7f\xbf=\xe4\x7f\xbf\xf6\xfc\x7f?\x8a\x9a\xba>\xa8\xf7\x7f\xbfI\r,?\x9f\xfb\x7f\xbf\xc5\xff\x7f?!^\x1c\xbf9\xc3\x7f?\xf4\xfe\x7f?\x08\xfe\x7f\xbf9\xa4\x96\xbe\x1b-\xdc\xber\xc1\x7f\xbf\xc5\xcbP?\'<\xb3>\x00\x00\x80\xbf\xa6\xff\x7f?\xb3\xf3\x7f?\xab\xe2\xfb\xbe\xc7\xed\x7f?\xe4\xa3\x00\xbf\x94\xf7w\xbf4`\x9d>U\xf8\x7f?\x1a\xf6<>\xb3\xff\x7f?\xbe\xff\x7f?\xa1\xfd\x7f?\xf6\xff\x7f?\x0f\xed\xb0>\xc6\xfd\x7f?f\xfb\x7f?\x89\xff\x7f\xbf\xd9\xff\x7f\xbf\x87*H\xbf\xc7\xfd\x7f?5\xcb\xd5\xbe\xea\xf1\x7f?\x9db\x1b\xbf\x00\x00\x80\xbf\xa0\xff\x7f\xbf\x9d\xfb\x7f?N~\xb3\xbe9\x18\xec\xbe/\xd8\xb1>\xb8b\xb3>c\xc7\xac>\xea\xf7\x7f\xbf\xab\xf3\x7f?D<\xde>\xdb\xf9\x7f\xbf\x89\xe5\x7f?\x00\x00\x80\xbf\xb7\xff\x7f?#\xe7~?`\xf3\x7f\xbf\x88\x1e\xa7\xbe\xa6\xfb\x7f\xbfw\x91k\xbel\xf2\x7f?k\x02V>\xf4\xb8\x7f\xbf\x8a\x1d|\xbf\x8f\xef\x7f\xbf\xf1\xfc\x7f?\x9eL\x1e?|\xff\x7f\xbf*\xe1\x7f?f\xff\x7f\xbf%\xd2\x12?\xb38\xb3\xbe\x03\xfc\x7f?\xe7\xfe\x7f?\x80\xf8\x7f?\xd3\xd2\xa4>\'\xfd\x7f\xbf:\xf8\x7f\xbf\x91\x02q?\x83\xff\x7f?\x00\x00\x80\xbf\x80\x00\xb1=\x9a\x1e\x9c\xbe=\x92Z\xbf\x97\xfc\x7f?`\xd6\x7f?&\xfe\x7f\xbf\xc5\x1c\xb4>;\xf8\x7f?u\xf8\x7f?\xb3\xff\x7f?\x0c\xfd\x7f?\xa0\xc8\x7f\xbf\xf6\xff\x7f?\xdf\'\xb4>$\xd8\x7f?i\xfb\x7f?~\xf6\x7f\xbf\xa4\xfd\x7f\xbfk\xed\x7f\xbft\xff\x7f?\xac\xe2}?\x05\xcfw?\x8c\xfe\x7f?\x87\xf4\x7f\xbf=r\x1f?\xf3\xf8E?(\xff\x7f\xbf3\xe8\x7f\xbf\xa8\xed\x7f?B\xba\x7f\xbf\xa8\xe9`\xbf\x07\xff\x7f? \xf7\x7f\xbfM\xff\x7f?\x96`\x7f\xbf\xdc\xfd\x7f?\x03\xfe\x7f?)\xfb\x7f\xbf\x8b\xf8\x7f?\xf6\xff\x7f?\xa9\xfc\x7f\xbf^\x80\xb2\xbe\xd3\xe1\x7f\xbf\xe2\xf7\x7f?\xdeY{?0\x00\xb1\xbe\x9f\xfa\x7f?\x00\x00\x80?\xfe\xfc\x7f?\x08\xfb\x7f?\xfd\xfd\x7f\xbf\xf5\xe1\x7f?\xcc\xff\x7f\xbf:\xad\xa3\xbd\xae\xfb\x7f\xbf\x10\xfc\x7f?\xe9\xfe\x7f?\xae\xf8\x7f?\xf7\xff\x7f\xbfp\x18\x94\xbd\xf2L~?Y\xd3t?\x9f\n\xe4;M\xf0#?\xe6\xfe\x7f\xbf\xc6\xfc\x7f?3O3\xbep\x02\xd0>\xa7\xff\x7f\xbf\xac9\x7f?\xa9\xb2/?T\xf8\x7f?\xa2\xf8\x7f?\xb6\xff\x7f?\xa7 \xdf>\xba\xd0\x83\xba\xf7\xff\x7f?\x85\x95\x1a?\xff\xff\x7f?\x84\xfb\x7f?\xed\xd3~? \xd9~?\xe6\x17\x0f?\x00\x00\x80?\x04v~?G\x8b\x7f?\xc6\xfd\x7f?\xfc\xfd\x7f?\xaa\xfe\x7f?\xea\xfb\x7f?\x9d\xfeB\xbei\xfa\x7f?\xc8\xfa\x7f?\xe6\xfe\x7f\xbf)\xff\x7f?\x0b\xff\x7f?\xd7\xfe\x7f\xbfP\xff\x7f?G\x86|?\xbf\xf8\x7f?\x18\xfe\x7f?\x00\x00\x80?\xb1\xf8\x7f?X\xfe\x7f?\xaf\xff\x7f?\x18\x98\x19\xbd\xcc\xab\x7f?V\xfd\x7f?\xc5\xfc\x7f?\x19\x14A\xbf8\xfe\x7f?\x00\x00\x80?\xd8\xfe\x7f?\x00\x00\x80?\n\xff\x7f\xbf \xf6\x7f?\x00\x00\x80\xbf\x05\xfe\x7f?\xa6\xfe\x7f?n\xfe\x7f?\xb3\xff\x7f?\xad\xfd\x7f?\x00\x00\x80\xbfZ\xfe\x7f?\xa7\xac\x7f?\x00\x00\x80?\xf4\xfc\x7f?\x08\xfb\x7f?`\xff\x7f?\xff\xff\x7f?7\xfe\x7f?\xf4\xfe\x7f?-\xe3d\xbfq\xbb\x7f?<\x05\xd0>7\xfd\x7f?\xcf\xfd\x7f?\xe4\xff\x7f?\x93\xfd\x7f?s\xff\x7f?\xfd\xff\x7f?\x0e\xff\x7f?\xbd\xff\x7f?\x95\xfe\x7f?\x08\xb3\x7f?k\xff\x7f?\xb4\xff\x7f?\x00\x00\x80?\xa5\xaf\x7f?\xff\xf9\x7f?(\xff\x7f?\n\xfd\x7f?\x99\xff\x7f?J\xfe\x7f?)\xaex?\x8f\xfe\x7f?\xfb\xfd\x7f?\xe0\xff\x7f\xbf\xfc\xff\x7f?\xa6\xff\x7f?\xe1\xfb\x7f?\xc9\xff\x7f?\x96\xfb\x7f?>\xe4\x18\xbfk\xff\x7f?\x00\x00\x80?\xa7\xfd\x7f?\x85\xff\x7f?\xe8\xff\x7f?\xb1\xfd\x7f?4\xef\x7f?5\xff\x7f?\xff\xfe\x7f?\xfa\xff\x7f?v\xff\x7f?\x00\x00\x80?\xac\xff\x7f?\x00\x00\x80?EJx?\xfd\xfc\x7f?\x00\x00\x80?j\xff\x7f?\xa5\xff\x7f?}\xff\x7f?\xe5\xff\x7f?N\xff\x7f?\xc7\xff\x7f?o\xff\x7f?9\xec\x7f?\x00\x00\x80?\x1c\xff\x7f?\x82\xfe\x7f?\xd3\xff\x7f?\xf8\xff\x7f?y\xff\x7f?\xb1\xff\x7f?\xd9\xfe\x7f?S\xed\x7f?9,J?#\xff\x7f?[\xff\x7f?\xf8\xff\x7f?H\xff\x7f?\xd6\xff\x7f?\xff\xff\x7f?\xb7\xff\x7f?\xb0\xff\x7f?\x94\xff\x7f?\xcb\xe9\x7f?\xcd\xff\x7f?\xea\xff\x7f?\x00\x00\x80?\x93\xec\x7f?>\xfe\x7f?\xb8\xff\x7f?\'\xff\x7f?\xe3\xff\x7f?v\xff\x7f?O\xc3}?\x98\xff\x7f?a\xff\x7f?\xf6ux?\xed\xff\x7f?\xe3\xff\x7f?\xd5\xfe\x7f?\xf1\xff\x7f?\xbc\xfe\x7f?\x00\x00\x80?\xd4\xff\x7f?\x93\xfd\x7f?Q\xff\x7f?/\xda\x7f\xbf\xf7\x08\xc7\xbe\xa3\xfe\x7f?C\xf2\xeb>+\xf8\x7f?\x95\xff\x7f\xbf\xa9\xff\x7f?\xdf\xd3\x05?\x00\x00\x80\xbf\x18\xfd\x7f?\x00\x00\x80?\xc8\x08A?\x00\x00\x80\xbf\x00\x00\x80?\x86\xdf\x7f?\xf0\xfa\x7f?*\xfc\x7f?\xf8\xfe\x7f?\xb0\xcdu?\xcb\xfd\x7f?\xc5\xfd\x7f??\xf9\x7f?\x00\x00\x80?#\xfe\x7f?A\xf6\x7f?\x0f\xfe\x7f?y\xff\x7f\xbf\xa6\xfb\x7f?\xd0\xfc\x7f?M\xc8\x7f?\x820\xb8>\x00\x00\x80?\xa9\xf8\x7f?{\x1bJ?\xb7\xff\x7f?\t\xb8z>q\xd3r?\xf7\xff\x7f?_\xfd\x7f?\xbd\xfc\x7f?\xfa\x19R?.\x13\x7f?\\\x01"\xbf\x00\x00\x80?\x00\x00\x80?\xc5\xff\x7f?Uu ?\xd9\xfd\x7f?\xc2\xbb\x1f\xbf\x86\xcd\x7f\xbf\xc7\xfb\x7f?<\x9bL?\xa0\xfb\x7f?\xe8\xfa\x7f?\xac\xd3\x7f?\x00\x00\x80?\xad\xdb\x9b\xbeC\xef\x7f?W\xff\x7f?\xb1\xff\x7f\xbf\x00\x00\x80?\xde\xff\x7f?\xc9r>?M\xfd\x7f\xbf)\xfa\x7f\xbf\xdeF~\xbf|\xf7\x7f\xbf_\x06/\xbf#\xce\x7f?\x15F\xb3>@\xe9\x7f?\x81\xe7\x7f\xbf\xad\xff\x7f\xbf\x1b\xd6\x7f?\x00\x00\x80?C\xff\x7f\xbfz\xff\x7f\xbf,\xf9\x7f?\x02\xd8~\xbf\xb7\xfa\x7f?j\xe9\x7f?N\xfe\x7f\xbfw\xe2`\xbe\xdf\\\xc2\xbeq\x88\xf3\xbe[\xf9\x7f\xbf`\xfe~?\x00\xfe\x7f\xbf\xf6\xb5\xb3\xbe\xda8\x9e\xbd\xe5@*<\x9d\xfe\x7f?v\xe3\x7f?\xd1\xf2\x7f\xbfl\xfe\x7f?\xd2oa\xbd\\\xf5\x7f?\xa9\xe8\x7f\xbf\xee\xff\x7f?\x9bH@?\xaeM\x00\xbfC7\xcd>\xe5\xc1\xaf>,\x9c\x7f\xbf\x13\xf5\x7f?\x9f\xff\x7f\xbfM\xf3\x7f\xbf\xa4\x89}?\xc9\xf7\x7f?\xb8B\xb3>~\xfd\x7f\xbf\xda\xfd\x7f?\xcf\xf1\x7f?v\x05Q?\x9b\xfb\x7f?E\xf8\xd3>\xe3\xff\x7f?N\xf9\x7f?\xbc\xff\x7f?0\xff\x7f?q\xba\xc5>\x00\x00\x80?B3\xb2\xbe\x8e\xc6\x7f?X\xe4\x7f\xbf\x91\x01\x9e\xbd\xfa\xfc\x7f\xbf\xfc\xb5\xba\xbe\r\xfa\x7f\xbf\xfa\xf7v\xbfp\xf7\x7f\xbf]\x00\xc9>\t\xc7`?\x1b\xda\x7f?dR\xb3\xbe\xfb\x0f\x9b>\x1c)\xb3\xbe&\xea\x7f?\xd0]\xb0>}\xf5\x7f\xbf\x8a\xfb\x7f\xbf\x80\xfe\x17>-\xa8u\xbf\x89\xdf\xb1\xbe\xfa-\xb3>\xda\x0c\xb3\xbeI\xf7\x7f?0@\x89\xbe\x01\xc4~?\x94=\xb0\xbe\xb0\xc1S?\xbd\xc7\xb3>ly\xec>\x8c\xacr\xbfN\xff\x7f\xbfC\xf9\x7f\xbf\xd5/ \xbfb\xe6\x7f?#\xe8\xc2\xbe\x08\xc8\x98>\x15\xe2\x7f?\x11\x17\xb3\xbe\xf8\xff\x7f?Q\xf7\x7f\xbf\x1e\x11j?u\xe3\x7f\xbf\xf5\xf7\x7f\xbf\xb6\xf9\x7f\xbf\x10KK?\xdd\xf5\x7f\xbf!\xf7\x7f\xbf\xff\xe7\x16\xbe\xda\xe5\x7f?\xf6\xe3\x7f?\xcbvn\xbf\xb17\xb3\xbeV\x08\xbf>\x92\xfa\x7f?\xfd\x18\xb3>\xf3\xce\x7f\xbf\x87\xff\x7f?\x05\xfb\x7f?\x07\xeb\x7f?*\xf8\x7f?g.\xb3>\x8d\xf8\x7f?\xed\xf9\x7f\xbf\x17\xe8\x7f?\x00\x00\x80\xbf\xc3\x18\xb3>\xa0\xfc\x7f\xbf\x15\xf1\x7f?\x99\xf2\x7f\xbf\x9c\xaf\x01?\xd4\xe3\x7f\xbf\x00\xa2T>*;o?\x95Y\xb4\xbe\xa3\x1a\xb3>\x89<\xb3\xbe\x88<\xb3>\xf6\x9d\xb3>B\x9c\n>6\xf5s>\x01\xfa\x7f?\xe0\xf9\x7f\xbf\x9a\xf1\x7f\xbf\xbe\xf9\x7f\xbf\xf6\xc7\xd1=\xd4t\xb3>By\xb3>,\xf8\x7f\xbf\xe3~\x7f\xbfhI\xb3>F\xee\xb2>\xda\x14w?g&\xb3>n\xfb\x7f\xbf\xe7\xfe\x7f\xbf\xef\xea\x7f\xbfw\x82\xb3\xbe>u\xdb>\xb7\xdf\x82\xbc\x9c \xc9\xbe\xcb\xea\xba\xbe\xa20\xb3>\xd6\xe4\xb2>%\xf8\x7f\xbfzk\x7f?\xfa\xcc\x7f\xbf\x00\x00\x80\xbfD\xe4\x7f?\xe4W\xb3\xbe \xb5u\xbf\x1b\xf9\x7f\xbf,^\xb3\xbe\x0b9\xb3\xbe\xef\xe0l>\xba7\xb3\xbeG\xc4~\xbf\xfd#Y\xbf\xa5\xbf\x1d\xbfCo\xf7;1\xfa\x7f\xbf\x90\xf6\x7f?\xb2\xfa\x7f?\x9f\xc0\xb4\xbeF\xf1\x7f?\xa6\xfe\x7f\xbf\xde\xf1\xc5>\xa7N\xb3\xbe\x9c\xf8\x7f?2\xdf\x7f?O\x82\xb3\xbe\x00\x00\x80\xbf\t\x9c\xb2>\x890\xb3>\x8d\xfa\x7f?^!{\xbe\xd4q\x7f\xbf\xdd\xb0a\xbe^\xe1\x7f?\xd6\xf5\x7f?/A\x0f\xbf\x8f\x18\xb3>v\xad\xd8\xbe\xa3\r\\\xbe\xe7\'\xb3\xbe\xff1\xb3>\x17xc\xbf\xd3)\xb3\xbed\xec\x7f\xbf\xc0\xf4|?R&\xb3>\x18,\xb3\xbe\xa5\xfe\x7f\xbf\xb1L\xa7>\xc0\x1f\xb3\xbe\x1e\x06\x93\xbe8\x9d\x7f\xbf\x00\x00\x80?\x81\xa1\x14\xbdCV\x04\xbf\xe1\xda\x7f\xbf\xa5\xff\x7f\xbf\x15\x0bp\xbf\xafhK\xbfSJ\x89<\xae\x1f\xb3\xbeH!\xb3>\x1b\xf5\x7f\xbf\xf0\xf2\x7f\xbf]0\xb3\xbe\x1c\xf6\x7f\xbf\x00\x00\x80\xbfQ\xfa\x7f\xbf3)\xb3\xbe\xbe\xe5\x7f\xbf\xf5\xfa\xb2>\xc5K\x13\xbe\xf5&\xb3\xbe\xda\xfe\x7f?"4\xb3\xbe\xee\xf9\x7f\xbf\x7fQJ?\x08%\xb3>M/\xb3\xbe\x7f0\xb3>z\xfb\xb2>\xab\xfa\x7f?KB\xb3>x\xf8\x7f?\xe9\xfe\x7f\xbf\xf50\xb3>`\xf7\x7f\xbfQ\xfc\x7f?a\xdb|\xbf\x96\xc9\x7f?\xa70\xb3>\xaa\xff\x7f\xbfzl\x14\xbc\x18\xf1\x7f?\x0f$`\xbfj\x01y\xbf\xe0\xa9y\xbf"4\xb3>K\xf1\x7f?\x07\xf6\x7f\xbf<3\xb3\xbe\x95>\xb3\xbe\xa9\xb8\xaf\xbeL4\xb3\xbe\x1e>\xb3>\xa4\xfb\x7f\xbf\x0b,\xb3\xbe\x1c\xf5\x7f\xbf:\xd8r>\x05u\xb3\xbe@]%\xbf%@\xb3\xbeU\xff\x7f\xbf\x7f\xfe\x7f?G\xf2\xb2\xbem\xe8\xa9>\x00\x00\x80?\xca*\xb3>\x03s\xb3\xbe\x95\xea\xac\xbe\xb6\xff\x7f\xbf#\xff\x7f?\x80\x122?\xbd\xe7\x9c\xbe\xcfE\xb3>D\xe3\x7f?\x00_\xc7\xbe<@\xb3\xbe\xc7\xff\x7f?S!\x1d?\xae+\xb3>\x81>\xb3\xbe\xd1e\xb3\xbe\x1d\xfe\x7f\xbf\x87\xc1\xb2>\x02J\xb3\xbe@.\xb3\xbe\xb9\'\xb3>#9\xb3>\x06\'\xb3>Ll\x14\xbf\xd46\xb3>t6\xb3\xbe\x12/\xb3>\x154\xb3>\xfa\x18\xb1>\x17:\xb3\xbe\xf9\xfc\x7f?V\xfd\x7f\xbf$\xee\x7f?\xef.\xdb\xbee\xef\x7f?\x89\xfd\x7f\xbfM\xee\x7f?c3\xb3\xbeJ\xc8]?\xcd\xf0\x7f?Kd\xb3\xbe\xef\x94\xb8\xbe\xa2\xfa\x7f\xbf\x03=\xb3\xbea\x1de\xbf\xfbD\xb3>Z1\xb3\xbe~3\xb3\xbe%:\xb3\xbe\xef\x03\xb1\xbeD&\xb3>\xe2D\xb3\xbe~\xfb\x7f\xbf6=\xb3\xbe:0\xb3\xbe\xbc\xff\x7f\xbf33\xb3\xbeL5\xb3>n3\xb3>\x1f\xf8\x7f\xbf\x1c4\xb3>y\xab\xb2\xbe\x950\xb3\xbe\x87=\xb3>C\x19\xb3\xbeB\xb66\xbe\xd4>\xb3>VF\xb3\xbe\xf2/\xb3>\x91\xf1\x7f\xbf\x14\xff\x1c\xbf\xe5G\x9a=\xa0\'\xb2\xbe\xbe;\xb4\xbesc\x16\xbfv5\xb3>j`\xb3>\x8c3s\xbdc;\xb3\xbez\xf7\x7f\xbfs6\xb3>h\xea\xb0\xbe\x8d%\xaf\xbe?\xf2\x7f\xbf\xf81\xb3\xbe\x1b2\xb3>e/\xb3>h+t\xbfF(\xb3>\xcf\xfc2\xbf\xb50\xb3>\xd57\xb3>\xd5\x88\x7f\xbfN\xff\x7f\xbf\x87\xfa\x7f?\xdf3\xb3>\x1f4\xb3>K!I\xbf].\xb3>\xf8\xfc\x7f\xbf/3\xb3>u\xfd\x7f\xbf\xd6)\xb3>>\xff\x7f?F:\xb3\xbe\x10\xb6\x7f?x\xba ?\xa9\xc3/\xbf34\xb3\xbe^7\xb3>3\xf8M\xbe\xf7\xff\x7f?\xb2\xff\x7f\xbf\x03\xbd\xb0\xbe\x866\xb3\xbe\x1a\xfd\x7f\xbf\xf5\xc3\xb3\xbeT3\xb3>N\xfc\x7f\xbf\xb2\xff\x7f\xbfQ\xfa\x7f\xbfY"\xb3>Yw\xb3>A\xf4\x7f?T.\xb3\xbe\xb5\x11\xb3\xben\xf7\x7f?\x7f+\xb3\xbee)\xb3\xbe%0\xb3\xbe\xf7\xf6\x7f\xbf\xa4=\xb3\xbe\x1a+\xb3>\xba\xdf\x7f\xbf\xd2\xf8_>\xe3wC\xbf--\xb3\xbeWf\xc8\xbe\xbb\xfe\xb2>\x12\xf7\x7f?\xfb/\xb3\xbe\xf1C\x1a\xbf\xb5\xfe\xc2\xbe\x81\xf6\x7f\xbf\xbd-\xb3\xbe]2\xb3\xbe\x03P\xb3\xbe\xb0\xf5\x7f\xbf.8\xb3>\x142\xb3>+I\xb3\xbe+\x7f=>\x19)\xb3>\xa7\xfe\x7f\xbf\x95\xe6\x7f?#\xf4\x7f\xbf\xb6\xff\x7f\xbf?\xfd\x7f\xbfL@\xb3\xbe]+\xb3>\x83\xfa\x7f?\xec\xce\xad>\xa3,\xb3>R*\xb3\xbe\x1c8\xb3>\xa9\xfc\x7f\xbf\xbeh\xd0\xbe\x00\x00\x80?T\xef\x7f\xbf\xe78\xb3>\xaa=\xb3>1\xfc\x7f\xbf\xf0-\xb3>\xbe\x1c\xb3\xbe\xd0@\xb3\xbe36\xb3>0Z\xb3>r\xcf\xab\xbe\x9a\n\xb3>6\xfe\x7f\xbf05\xb3>\t8X\xbef\xf5\x7f\xbfm\xf5\x7f\xbf\xa3\x18\xb6\xbe\'F\xb3\xbeOB\xb3>\x0e\xa7\x7f?\x031\xb3>z\x98\xb2\xbe\xad\xfe\x7f?\xcb.\xb3>\xcfO\xb1\xbe-8\xb3>H\xf4I\xbf5C\xb3\xbe\xb2\x8a\xb3>\xb9\x7fx\xbfV\x03\xa4>;\x932>y7\xb3\xbee\x13\x06\xbf`3\xb3\xbe\x1d4\xb3>\xc7\xab\xe0\xbeq\xa5K>\x03\xff\x7f\xbf\x8f\xf8\x7f\xbf\xb53\xb3>\xfb.\xb3>\x83X\xb3\xbe\x10+\xb3>\xcd\xb6\xb2>\x140\xb3\xbe\x02\xfa\x7f\xbf\x84\xd3r>\xf9>\xb3>#W\xcc\xbe M\xb3\xbe\x93\xee\x7f\xbf\xda\xff\x7f\xbf\x99\xf2\x7f?\x89\xfe\x7f\xbf\x1e,\xb3>\x95\xf9\x7f?"E\xb3\xbe5+\xb3>[\xfc\x7f?\xfd-\xb3>\xc2\xf9\x7f\xbf\xd1\x9d\xb3>\x00\x00\x80?A=\xb3>\xcf1\xb3\xbe\x9b6\xb3\xbe|\xfd\x7f\xbf\xc9\x85z\xbf\xcc\xe5\x7f\xbf\xdd\x0f\xb3>\xe3\xff\x7f?BA\xb3\xbe\xeb\xd0\xb1\xbe\xd1\xff\x7f\xbf\xce\xfe\x7f\xbf\xe10\xb3>DH\xfc>;\xfa\x7f\xbf\x99\xea\x7f\xbf\x81\xec:\xbex\xa4\xda\xbef$\xb3\xbe\xc4\xf9\x7f\xbf\xab@\xb3\xbe\xdc\x88\xda\xbd\xf8;\xb3>\xf5\xff\x7f\xbf\xed\x0b\xb3>\x87R\xa4>\xb7T\xb3\xbe\x9b\xf0\xb2\xbe\xc60\xb3\xbe\x91\xd3\x7f\xbf7\xff\x81\xbe\xea0\xb3\xbe\xf2\xed\xb1\xbe_-\xb3>zL\xa9>L\xfa\x86\xbdb\xa2\xb3\xbe(J\xb3\xbe:\xd5B\xbfT\xf7\x7f\xbf]H\xb3\xbe\xa7\xc1\xad\xbeO\x92\x7f\xbf\xac\xb1{?\xd4H\xb8\xbe\xd9\xff\x7f?\xe6\xf9\x7f\xbfC\xa3,\xbfy7\xb3>\xbbA\x1b\xbfL\x14\xb3\xbe\xd8\xfa\x7f\xbf\x8f;\xb3\xbe\xae\xf0\x7f?\xb7\xf2\x7f\xbfv.\xb3\xbe\x85\x1a\xb3>\xb9E\xb3\xbe#\x00\x83\xbe\xfa0\xb3>\xfb6\xb3\xbe\xee\xf3\x7f\xbf^\xe7\x7f\xbf\x00\x00\x80?L\xbe|\xbf\x800\xb3>\xcf\xfb\x7f\xbf\x19\xef\x7f\xbfq\x1d\xb3\xbe\xda\xca\x7f\xbf\x83\xf5\x7f\xbf\x00\x00\x80?\x9bL\xe5\xbe\x91\xd2\xad\xbe\xde\x1f\xb3>\x00\x00\x80\xbfR%\xb3>\x98\xf9\x7f\xbfA\xba\x7f\xbf\xdf@\xb3\xbe^g\xb5>\xef\x84\x7f\xbf\x12\xf9a\xbe1\xdb\\?g\xdb\x7f\xbf\x93\xd5\xb0\xbe\xca6\xb3>\x00\x00\x80\xbf\x13\xfb\x7f\xbfC~\x18?a(\xb3>\xadX\xb3\xbe\xf6\xf5\x7f\xbf\x00\x00\x80?\xc2G,\xbf\xda\x1a\xda>\x9a\xf3\xf2\xbdLGP\xbd\xf8t\xe9\xbe\x00\x00\x80\xbf\xf4\xec\x7f\xbf\xea\xf9\x7f?2\x1f\xb3>\x00\x00\x80\xbf\xeb\xc1\xb3\xbe\xdaz\x0f?0\xc5\x7f\xbf\xc4\xf4\x7f?M\xf5\x7f\xbfd\xf8\xa2>\x12/\xb8\xbe;a\xb3\xbe\x99\x19\xb3>\xc8\x1c\xb3>\x96\xf4\x7f\xbf\x00\x00\x80\xbf\tM_\xbf\xbd\xfd\x7f?\x7f\xed\x7f\xbfZ\xf1\x7f\xbf\xe4\xe2\x16?$\x88\x17?\x00\x00\x80\xbf\xa7\xf6\x7f?\x18\xf0\x7f?.\xfd\x7f\xbf\x85\xe5\x7f\xbf\xd1\xf4\x7f\xbf\xc7\xfb\x7f\xbf\xc2\xf8\x7f\xbf\x0b6\x9b>\xb5\xf9\x7f\xbf\x00\x00\x80\xbf0\'\xdc\xbe\xeeb\xb6>\x00\x00\x80?\xd2\xf5\x7f?\x9b6\x8b>\xd3\xfe\x7f\xbfQ\xff\x7f\xbfu\xeb\x7f\xbf\x93\xd5\xa7>\xb3\xe4\x7f\xbf\xd5\x19j>\xa39~?\x9c\xe0\xc2>\xa8\xff\x7f\xbfT\xe6\x9f\xbd\t\xdcw\xbf\xf9\xba\xcd>\xbc\xff\x7f\xbf\x91\xb4\xb3>\xfe\x0e\xb2>T\xd5\x7f?\xd6\x89\x9a>\x97\xde\x7f?:r\xb3>\xbf\x90\xa7>\xb3w\xc1\xbe\x8b\x9f\x7f?\xc5\\\x1c\xbe\x8b\'\x8b\xbd\x8b\xe1\x7f?\xc2\xfb\x7f\xbfM\xf5\x7f\xbfO\xfd\x7f?\xf9\xaaA?\xa9V\x7f?\xbe\xff\x7f\xbf\xa1]\xa4\xbe\x97\x03Q>\x0e\xdd\x7f?\xcb\xba\x01\xbf\x1b\xf6\x7f?J\x96B\xbf\x00\x00\x80\xbf(\xfb\x7f\xbf\x06\x0f\xb5\xbe\x8d\xf0\x7f\xbf\x00\x00\x80\xbf0\xfc\x7f\xbf"\xfe\x7f\xbf\xfd\xef\x7f?;\xec\x7f\xbf\xb7\xfe\x7f\xbf3/f>\xbe\xfe\x7f\xbf \xe9D\xbf\rf\x7f\xbf\x00\x00\x80\xbf[#\xf0>U\xff\x7f?\x0c\xff\x7f?\x94\xff\x7f\xbf\xb0.q?G\xcf>?+\xf5\x7f?\xbf\x90W>\xae\xfa\x7f?\x00\x00\x80?\x04\xfd\x7f?\xe2L\x07?E\xfd\x7f\xbf\xaf\xcd\x7f?\xe9\xff\x7f\xbf;\xfa\x7f?\x06\xf9\x7f\xbf\x89\xf4\x7f?\xf4\xfe\x7f?\xbc\xf8\x7f?5\x88+\xbf3\xfc\x7f?S\xa7~?\x00\x00\x80?k\x8fX?G\xf0\x7f?\x03\xfe\x7f?\xf0\xff\x7f?D\xfa\x7f\xbf\xac\xfc\x7f?\x00\x00\x80?\x00\x00\x80\xbfD\x04;?\xf5\xff\x7f?\xe4\xf8\x7f?\xf3\xdf\x7f?\xa8\xaa\xe9>K\xfe\x7f?\xf7\xff\x7f?N\xfd\x7f?\x00\x00\x80?\xd3q\x1c?x\x1d\xc5\xbd8\xff\x7f? \xff\x7f?\xbf A\xbfx#~?d\xfb\x7f?\xca\xfd\x7f?\xe7\xf4\x7f?\x1e\x14\xb5\xbe\xb6\xfb\x7f?\x14\xcd_?{\xfa\x7f?\n\xfb\x7f?\xc2Z\xa6\xbe3\xff\x7f?\xae\xec8\xbfx\xee\x7f?S\xff\x7f?\xb1\xef\x7f?\x00\x00\x80\xbfPLV\xbf+\xd6y\xbfa\xad\x7f?\xed\xfb\x7f?9\xff\x7f?c\xed\x7f?\x93p~?6\xff\x7f?\xf8\xff\x7f?\xbd\xff\x7f?\xb5\xfb\x7f?\x00\x00\x80?v\xfd\x7f?\xf3bC\xbe\x03(!?u\xfe\x7f?\x00\x00\x80?L\xfb\x7f?\xb7\xfe\x7f\xbf\xf7\xff\x7f\xbfJ\xff\x7f?\x00\x00\x80?<\xfe\x7f?\xa7\xfc\x7f?\xbbo7?gE\xdf=\xcb\xf7\x7f?\x17\xfc\x7f?g\xfe\x7f?\x82\xff\x7f\xbf\xf0\xfb\x7f?\xe0\xff\x7f?w\xf8\x7f?\xc3\xff\x7f\xbf\x00\x00\x80?\x12\xff\x7f\xbfX\xfa\x7f?\xdd\xff\x7f?\xea\xff\x7f\xbf\xf3\xff\x7f?\x00\x00\x80?\xcf\xfd\x7f?]\xfd\x7f?(v1?\xa1\xe1~?P\xc2\x7f?M\xb7\x1e\xbe\x00\x00\x80?B\xff\x7f?\x8a\xfe\x7f\xbf)\xfe\x7f?\xb2\xf7\x7f?\xf1\xfe\x7f?\xfb\xff\x7f\xbf\xef\xde`?\xe3\xfb\x7f?\xf5\xff\x7f\xbf6\xfe\x7f\xbf\x85\xff\x7f?7\xff\x7f?S\xf3\x7f?\x00\x00\x80?\xa6\xf3\x7f?\x00\x00\x80?}\xfe\x7f?\xe1\x15u?\x955r?\xe5m\x7f\xbf)P\xb3\xbe$\xf4\x7f?d\xfd\x7f\xbfS\xfe\x7f?\xe2\xff\x7f?\xa7,\xb0>\x9b%"?\x00\x00\x80\xbf\x90\xec\x7f?\x0b\xe5|>\x00\x00\x80\xbf9\x05s?\x00\x00\x80?\x1f\xff\x7f\xbf\n\x970?T\xfe\x7f\xbf\x00\x00\x80?@+~\xbf\xaa\xfd\x7f?\xcf\xfe\x7f?o\x85x>n-\x7f?\xca\xebQ?\xeeA\xe9\xbb\x10{]?o\x9b\x7f?\x03\xfb\x7f?r\xc7\x7f?4\xf0\x13?\x7f\xae\x1a?\xc9\x9b\xd6>\x94\xf9\x7f?d\xfa\x7f?\xef\xff\x7f?\x00\x00\x80?\x00\x00\x80\xbf\x00\x00\x80?\x10\xfe\x7f\xbf\x8b\xbc\x7f?D\xee\x7f?\x04\xf4\x7f?\xbb\xf8F?\xf3\xf5\x7f?\xf2\xf5\x7f\xbf\x8b\xfd\x7f?\x86\xc6\x0b\xbf\x08\xee\x7f\xbf\xd6\xcb\x1f?}v\xa2>Q\xae\xab=I\xc5\x07?\xe8\xfe\x7f\xbf\x84\x11\xf4>\xdc\xff\x7f?\x00\x00\x80?]\xe9\x7f?\xd0\xfc\x7f\xbf\xcc\x0en?\r\xff\x7f?\x00\x00\x80?\xcbh\xb1\xbe\n\xc2f\xbf\x91n\x99>\x17\xf6\x7f\xbf\x8f\xc5\xb3>\xa8\xf5\x7f\xbf&\xd4\x7f\xbf\x1eWu?\xe5\xd8\xb5\xbe\xe9\xef\x7f\xbfH\xf7\x7f\xbf\\J\xb3\xbe\xea8<=%\xa8X\xbe0\xfd\xa7>\xf1\xb7\x1b>\x07\n\xb3\xbe\x93\xfc\x7f\xbf\xb86\xde\xbe\x15\x88c=\x06\xfe\x81\xbef\x1a\xb3>\xf4\xaf\x1a?\xd7\xff\x7f?1\x95\x7f\xbf\xd8\xa6\x86>\xbd\xf6\x7f\xbf>\xabe\xbfW\xef\x7f\xbf\xf7\xfe\x7f\xbf\xc8\xff\x7f?\x82\x04m\xbfGlh\xbf\xbd\xff\x7f?^\x16\xd9= \xf2\x7f\xbf\xbe\xdbJ?\x92\xa3\xde\xbe\x0e\xcfp>s\xf2\x7f?\x00\x00\x80?\x92\xfc\x7f\xbf\x93\xeb\x7f\xbf\x86\xf6^\xbf\xe6\xff\x7f\xbf9\xdf\x1e\xbf\x8e\xf6\x7f?\xee\xf7\x7f?\xe1\xef\x7f?\xfb\x04\xed>\xc0\xfb\x7f\xbf\xaa\xb7\x10\xbeWX\xb1\xbe0\xd6\x7f\xbf\x12Z3\xbf\xa5#\xb3>\xfc\x99Y?\xcb5\xb2>y\xfc\x7f?\xef(\xb3>\\\xd1\x7f?\xaa\xdf\x04\xbf\x83c]=_\xc1\x7f\xbf\x00\x00\x80\xbf\xbd\xf6\x7f\xbf\xdcX\xc6>\xf7\xfb\x7f\xbf$\x1e\xe5>\x15\xc1&?\xed\xf8\x7f\xbf\xe4\xd3\x88\xbe\x10A\xb3>\x87"\x15?\xc4\xf9\x7f\xbfP\xb7\x7f?\xb7\xe4\x7f\xbf\xebZ\xb0\xbe\xc3E\xb3\xbeSj\xb3\xbeU/\xb3\xbeY\xed\x7f\xbfr\xe3\xb2>\x9e:\xb3>\xea\xff\x7f?\xd73\xee<\x8b\x15\xb3>g\xfd\x7f?j2\xb3>V\xaf\x9b\xbe\xa4\x06\x8b\xbe\x00\x00\x80\xbfg\xec\x7f\xbf\xda\xfe\x7f\xbf\xe1\x11\xc6\xbe\xb8\xa4~?\x03\xf8\x7f?\x89\xfb~\xbfn\xcff\xbe\'\xfb\x7f\xbfu@\xb3>\x00\x00\x80?L\xf9\x7f\xbf\x00\x00\x80?\xf8\xea\xb3>\xd5\xee\x7f\xbf\n\xf9\x7f\xbf\xd6\x15\xb3>Q\xf4\x7f\xbf#\xff\x7f\xbf\xd4(\xb3>\xc0\xef\x7f?91\xb3>\xb72\xb3\xbe\t\xff\x7f\xbfA+\xb3\xbe\x04p1\xbf\xcc\xd0\x9b\xbem(\xb3>X+\xb3>B\r\xb3\xbe\xfe\xfd\x7f\xbf\xa8\xe9\x7f?F2\xb3\xbe=\x1a\xe7\xbe\xcd\xee\xb8\xbe\xa0}\xb3>2\x16\xb3\xbe8A\xb3\xbeo\xeb\x7f\xbf\x17/\xb3\xbe\xdf\x17\xb3\xbe\xa4\x1e\xb3>\x8es\x13\xbf\xe83\xb3\xbe\x94\xe42>\xc1-\xb3\xbe&,\xb3\xbe+\xf7\x7f\xbf\xd01\xb3>\x00\x00\x80\xbfD]\xb0\xbe\xad@\xb3\xbe\x18<\xb3\xbeZ-\xb3\xbe\xa0\xb4\x82\xbe\xea\xf9\x7f\xbf\xf2.\x91=\xe9\xf9\x7f?\xdf\x1d\xb3>&K\xb3\xbe\xd0?\xb3>u6\xb3\xbeJ\xce\xf5\xbe\x9a@\xb3\xbe\xbe\xf3\xb2>63\xb3>G\xfe\x7f\xbf#\xfb\x7f\xbf\x8f[{?K\xed\x7f\xbfM\x15\xb3\xbe\xe1\xaa\xa5\xbc\x81\xeb\x7f\xbf\'3\xb3>\x00\x00\x80?\xc6T\xb3\xbeP\xff\x7f?\xd1\xf8\xb1\xbev\x10\xb3>\xcc*\xb3>\xd9\xf8\x7f?\x177\xb3\xbe\xcc4\xb3\xbe5A\xb3\xbe\xe5\xf8\x7f?\x152\xb3>1;\xb3>\x12\xfd\x7f\xbf\xb0x\xba>P/\xb3>N\xed\x7f\xbf\xefD[?7\x05\xb3>\x8a\xf1\x7f\xbfG3]\xbepB\xb3>6\xfe\x7f\xbf\xf9\xd2\xbf\xbeB\xef\x7f\xbfxF\xb3\xbeI\xef\x7f?\xde%\xb3>\'\x08\xb3\xbeN\xd5\x7f?:(\xb3>\x9b/\xb3\xbez\xff\xb2\xbe\xcf48?\xff\xf4\x7f?^=\xb3\xbe\xd80\xb3\xbeq\xf1\x7f\xbf\xed9\xb3>bH\xb3\xbe\xb6\x89\xae\xbe,#\xb3>\x99I\xb3>\xa0\x96\xbe\xbe\x124\xb3\xbe\xbdK\xb3\xbe\xda\xff\x7f\xbf\xdc)\xb3>\x9d2\xb3\xbe\xfd\xf8\x7f\xbfl\xf8\x7f\xbf\xca=\xb3>\x14\xbe\n\xbd\xd7\xc4\xb4>\xfaR\xb3>i>\xb3\xbe\xa3[\xb3\xbe@\xfe\x7f\xbft2\xb3>\x87:\xb3>\x882\xb3>\xbd\xa1\xa6\xbe\xa4-\xb3>\xd7\x10\xb3>\xe4R\xb3>\xd0c\x0f>r.\xb3\xbe\x7f\xdc,\xbfe\xfe\x7f?\xad\xd44=\x00\x00\x80?I\xf7\x7f?\'D\xb3>\x85\xb8\x1e?93\xb3>O0\xb3>\xb2*\xb3\xbe\x1d<\xb0\xbe\xdd:\xb3\xbe\x862\xb3\xbeW/\xb3\xbe\x18\xa3\xeb\xbaC\x0b??\xd8\xfa\x7f\xbf\xd4\xff\x7f?C5\xb3\xbe%\xff\x7f\xbf)\xba\x7f?\x00\x00\x80\xbf]?\xb3>\x19\xee\x7f\xbf\x08\xfd\xb2>\x12<\xb3\xbe\xab\x13\xb3>\xe62\xb3>\xb23\xb3\xbe^ \xb3>\xd6\x1d\xb3>\xa1\x1f\xb3>)\xe2\xb2>J\xc17\xbf\xfb4\xb3>kb\xb3\xbe\x1a\xfd\x7f?\xca\xdeT>\xd59\xb3>]?\xb3>D\xfd\x7f\xbf7=\xb3\xbe\xd8A\xb3\xbe\xfa\xff\x7f\xbf\x93;\xb3\xbeJm\x96>\xff0\xb3\xber\xff\x7f\xbf\xbd\x13\xb3>f\xae\x7f?\x844\xb3\xbe-?\xb3>\xdc\xe0\xaf\xbe\xda\x18\xb3>\x860\xb3\xbev!\xaf<e\xec\x7f\xbf\x00\x00\x80?F\xef\x8f\xbe\xc5\xff\x7f?\xdf/\xb3>\xdb\xfcc\xbd\xa4l\xb3>\xf0:\xb3>\xed:{\xbfI\xfe\x7f?\x078\xb3\xbe\xf7\xff\x7f?\xdc$\xb3>W0\xb3>\xbe\xca\x7f?\xb8\xfb\x7f\xbfN\xdf\xeb>\x1aG\xb3>/.\xb3\xbe\xa8\x95\xb2>\xc2(\xb3>\x9b\xff\x7f?L<\xb3>\x8e4\xb3>z\xfc\x7f\xbf\x9fg\xf8\xbe?K\xb3\xbe\x9b\xfd\x7f\xbf\xd24\xb3\xbe\x00\x00\x80\xbf\xb54\xb3>\xd1\xfc\x7f\xbf\xdd\x1f\xb3>\x98?\xb3>\xb5\x17\xb3\xbe48\xb3\xbe\xb43\xb3\xbe\x8e\x1f\xb3\xbe\xe6;\xb3>\xac\xc9\xb1\xbe^+\xb3>\x99(\xb3\xbeU\xfa\x7f?Q\xea\xf7>\x00\x00\x80?\xa8\xb7\xb4>\xfc*\xb3>^\xeb\x7f\xbfZ\xfe\x7f\xbfR8\xb3\xbeG[\xb3\xbe[\xd5\x7f?\xf7\xb6\xad\xbe\xe2\xa8X\xbd\xa2\x1e\x82>\xaa\xff\x7f\xbf\xe1\xf3\x7f?0\x8e\x7f?\x9e0\xb3>\xc7,\xb2\xbeY\x83\xb2>\x1f4\xb3>\x00\x00\x80?N9\xb3\xbe\xfc3\xb3>\x16\xe2\x7f\xbf\xdc\x93\xa5\xbe\xf1\xf5\x7f?|(\xb3\xbe\xf38\xb3\xbe:4\xb3\xbe\x90R\x93\xbe=5\xb3\xbe\xf1\xfb\x7f?\xa2.\xb3\xbed\xfd\x7f?\x0f<\xb3\xbe\x06F\xb3>\xab1\xb3\xbe\xb0\xff\x7f\xbf/\xf8\x7f?V\xcf\x87=\x880\xb3\xbe\x01\xfa\x7f\xbf\xde5\xb3>w\xfd\x7f?qK\xb3>R\xf9\x7f\xbf\xcd\x1f\xb3>\xd9\xff\x7f\xbf$<\xb3>/4\xb3>\x06\xc9\x7f?3\xff\x7f\xbfh\xf8\x7f?\x0e1\xb3\xbeSB\x01?\xdd+\xb3\xbe\x1d3\xb3>\xe7#\xb3\xbe\xd2\xd3\x1e\xbf\x852\xb3\xbe\x8e)\xb3\xbeB\xf9\xe8\xbe\xb1\x87-? \xf1\x94\xbdo\xf5\x7f?/&\xb3>"t\xb3>\r\xe6\xb0>\xd8*\xb3>\x19*\xb3>\x89NE=\x0cv\xb3\xbe\xf8\xf9\x7f\xbf\xd4\xee\x7f?\x937\xb3>\xdf;\xb3>\x15)\x7f\xbf\xe6\xff\x7f?\xf28\xb3>J\x1a\xb3>\x1a\x07\xb3>\\D\xb3>,1\xb3\xbe\xd4\xfa\x7f?h\xf7\x7f\xbf\x02<\xb3\xbei\xf7\xb2\xbeb\xff\x7f\xbf&\xb1\xae>\xdb\xfc\x7f?\xda)\xb3\xbe\x86\xfb\x7f?\xe3:\xb3\xbeY1\xb3>~]-\xbe\xd9-\xb3\xbe\xd6:\xb3\xbe\xe4\xef\xb3>\x067\xb3>\x00\x00\x80?\xac9\xb3>\x00\x00\x80\xbf52\xb3\xbe\x0b4\xb3\xbeG&\xb3\xbe\xbc\x15\'\xbf\x871\xb3>&\xf5\x7f?L+\xb3\xbe\x00\x00\x80\xbf.\xfd\x7f?\xb9\xfb\x7f\xbf[-\xb3>\xe9\x1c\xb3\xbe\xd1-\xb3>C\xf9\x7f\xbf\xd8>\xb3\xbe\xc0$\xb3\xbe}1\xb3\xbe\xc1\xfb\xb2>\xcd2\xb3\xbe\x17(\t\xbf\x98R\xd8=\x00\x00\x80?\xcb\x17\xb3>d\xf2\xb2>\xe9N\xb3\xbej#\xb3\xbex"\xb3>Y7\xb3>\xed\xdf\x7f\xbf\xef\xdf\x9f\xbeN\xba\xa2>\xc5\xe3\x0e\xbd\xaa\x0c\xb3>\xe0\xfb\x7f\xbfP\xfe\x7f\xbf:(\xb3>\xe85\xb3>/.\xb3>\xfa;\xbb\xbe\xa7.\xb3>1/\xb3>x\x02\xb3\xbeW\xfb\x7f\xbf\x1c\x82\xe7<\x04\xfa\x7f\xbf\xba\xf9\x7f?\xbb\xfd\x7f\xbf\x7f:\xb3\xbep\x1e\xb3>!\xdf\x7f\xbfe\x81\x8a>1E\xb3\xbe\xa9\xf5\x86>\xa69\xb3>\x1dF\xb3\xbe\xb7\xff\xb2\xbe\xf53\xb3>+\xfe\x7f\xbf\x85\x1d\xb3>\xef5\xb3\xbe\xca#\xb3\xbe\x00\x00\x80?\xd0\xec\x7f\xbfa\'\xb3\xbe\xf0+\xb3>\xcf!\xb3>\x96\xfc\x7f\xbf\xe8\x1d\xb3>\x88-\xb3\xbee1\xb3\xbe*\xfc\x7f\xbf\x00\x00\x80\xbf=\x1aR?\x00\x00\x80?\x14\xff\x7f\xbfr1\xb3\xbe\x05<\xb3>\xac&\xb3\xbe\xd9-\xb3>#\xfc\x7f\xbf\x9f*\xa2=\x94\x80\xb1\xbev4\xb3\xbe\xe7\xf5\x7f\xbf\xfbA\xb3>\xbb \xb3>t\xd4\x7f?]?\xb3>q\xf1\xb2>C\xfa\x7f\xbf\xf1\x12\xb3\xbe\xc5K\x10>0\xf0\xaf\xbd?\xcf\x1f\xbb\xa2\xafy\xbf\xc4\x15\xb3\xbe\xd7>\xb3>\xa4\xb6\x18\xbfK\xfa\x7f\xbf\x8f:\xb3>V9\xb3>;\x07\xb3>~\xf2\xb2>\xfe\xff\x7f\xbfJ\xff\x7f\xbf.\xa7\xa4\xbe\x15\xfe\x7f\xbf\xce\xfd\x7f\xbf\xda\xf9\x7f\xbf\x81\xeb\x7f?\xf33\xb3\xbe\xf1?\xb2>x.\xb3>\xdf4\xb3>s\xac6\xbeZ\'\xb3>)M\xb3\xbe\x8cI\xb3\xbe\xcf\xdd\x88>W5\xb3>\xfc=\xb3\xbeg\x01@\xbf\x98\xe7\x7f?\xb9\xcb\xb6>i\x87\t\xbf\x00\x00\x80?]\xd7\x7f\xbf\x1a\xf0\x7f?\xed0\xb3\xbe\xf50\xb3\xbeyv\xbf\xbe\xd1\x85\xb3\xbe\x1d\xad\xb2>^r\xad=\x9fX\xb3\xbe\x0b\xfb\x7f\xbfa\xf6\xb2>\x8c\x9d\x7f?\xdd\xf3\x7f\xbf\xdd\xa4S\xbf\xd4;\xb3\xbe\xe9\xe6\x7f\xbf65\xb3\xbe|5\xb3\xbe\x925\xb3>v%\xb3>\xf08\xb3>\xc3\xf9\x7f\xbf\xcev\xb3\xbe\x945\xb3>\xa4V<\xbf~/\xb3\xbe\xe11\xb3>\xea\xf4\x7f\xbf*\xe7\x7f\xbf\xc8\x0fk=\x8d\xec\x7f\xbf/\xbd<=\x00}\xba\xbe\xc3\x11\xb3>\n\xfb\x7f?\xe5\xfe\x7f\xbf\x81\xdeu\xbe\xa4\xd7\xda\xbe\xf4\xe5\xba\xbe1\xfc\x7f\xbf\x10\xde\x7f?!\xc4\x0f\xbf\x11.\xb3>Ik\x90>\x0f\xfe\x7f\xbf>\xff\x7f\xbf\xb5\xd1\x12\xbf\xe3\xb7\x7f?\x9eV\x7f?\xd9\x1a\xb3\xbe\x0bH\xb3>\x03\xfe\x7f?L\xe2\x8d\xbe5N\x02\xbf\xc7_\xb3>\xd7.\xb3>\xb0\xf4\xd2>\x008\xb3\xbe\xf6>\xb3>\xd4\xfc\x7f\xbf-\xff\x7f?P%\xb3>j#\xb3>\x9c\xf5\x7f?s\x1c\x7f\xbf\x00\x00\x80?\x93\xfd\x7f\xbf\xe8\xeb\x7f?\xb1\x12\xb3>\x16\xf3\x7f\xbf\x0c\x10\xb3>_\xf1\x7f\xbf\xc0\xfe\x7f\xbf\x87\xfe\x7f\xbfw6\xb3>\x89W\x02>1\xd1\xb9\xbe\xdeE\xb3\xbe\x8aH\xb3>\xef?\xb3\xbe\x9dQV\xbe\x9eG\xb0>\xbd-\xb3>O\xf1\x7f?\xd6\xd3\x7f\xbf\x84\xea\x7f\xbf\xad\xf7\x7f\xbf\xc41\xb3\xbe\xbd\xf6\x7f\xbfe\x88\xf2\xbd\x00\x00\x80\xbf\x8d\xf7\x7f\xbf\x00\x00\x80\xbf\x00\x00\x80?}\x1f`>\xf5:\x01\xbfW\xfd\x7f\xbf\x8f\xf8\x7f\xbf\x00\x00\x80\xbf\x14z\xb3\xbe\xf2\xfe\x7f\xbf\xde\xfd\x7f\xbf*k\x91>ko{\xbfD\xb9\xfc\xbe^\xfd\x7f?\rp\xf3\xbe\x9bm\xb2\xbeP*\xf7>\xa8,\xa4>\xbf\xfb\x7f\xbf\xa8\xe8\x7f?\xf1L\xb0>\x91\xe3V\xbfdd\x9d>$\xf5\x7f?~\x06\xa1\xbe\xd0L\xb5>A\xf8\x7f?\x89\x10\x19\xbf\xea\xd1\x7f?\x0c\xfb\x7f\xbf\r\xf9\x7f\xbf\xfe\xfc\x7f\xbfW\xfd\x7f?,b\xc2\xbe\x91\xfc\x7f\xbfZ6\xb3>\x041|?H\x1a\xb3>|<t>X\xf1\x7f\xbf!\x93\x00\xbfR\xfb\x7f\xbfD7\xb3\xbeW%\xb3>\xdf\xfc\x7f\xbf\x00\x00\x80\xbf\xfd\xff\x7f\xbf;\xff\x7f\xbf\x0fT>?\r\xfd\x7f\xbf\x0f\xf9\x7f\xbf}\x18\xb4\xbe_\xfb\x7f\xbf{\xe1\x7f?\x1d\x0bf?\x05R\xb3>y\xf6\x7f\xbf\xc2\xfa\x7f?\xb7n\xb3>d\xff\x7f\xbf)\xa2\t>\x11\xfd\x7f\xbf\x8c\xc1\x7f?\xdb\xf2\x8f\xbd\xe0\x8c1?\x00\x00\x80?\xc1\x8b\xad>\x19\x00\xfc>\r\xd6\x7f?\x98\x11n?\xca\x00\xb3\xbe\x03\xda\x7f?oA\xb3>\xbf\xff\x7f\xbf\xe9\xfe\x7f?\x90\xf8\x7f?\r\xfe\x7f?i\xfc\x7f?r\xfe\x7f\xbf\x00\x00\x80?\xa2\xf3\x7f?\xc6\xef\x7f?S\xee\x7f\xbe\xd2\xff\x7f?\xe4\xe2\x7f?C\xf7\x7f\xbfI\x00\xb3>\xe3\xff\x7f?]\x06\xb6>\xe2\xff\x7f?{\xf8\x7f?G\x9e\x7f?\x00\x00\x80?A\xfe\x7f?\xa6\xf9\x7f?<\xfd\x7f?\x00\x00\x80?B\xfc\x7f?\xb8\x86i?|\xff\x7f?\x19\xff\x7f?\x1f\xe7\x7f?esu?\xc5dQ?\xcf\xfd\x7f?\x00\x00\x80\xbf]\xe7\x7f\xbf\x1fu\xaf\xbe\xf51Z?{\xf52\xbf\xe4\xff\x7f\xbf\xf1|\x11?\x19\xff\x7f?\xdd\xccb?,\xc6f?M\xff\x7f?\xf9J&?\x00\x00\x80?s\xf7\x06?\xae\xfe\x7f?\xcd\x16\x9e\xbe\xfa\xfa\x7f?\x1b\xff\x7f?\xc7\xe8\x7f?9\xed\x0f?\xd6\xfa\x7f?r\xee\x7f?\xc5\xff\x7f?\xb8\xfa\x7f?\x00\x00\x80?\x08\xfd\x7f?\xed\x8bo?\x1e\xe32?\xf6\xee\xd5>|\xd7\x7f\xbfI\xfa\x7f?\xf2\xf6\x7f\xbfU\xfe\x7f\xbf\x98\xff\x7f?\x7f\xff\x7f?\xbf\xfd\x7f?\n\xad\xae\xbe\x14\x0c8?\xf6d\x7f?l\xf5\x7f?\x8e\xf8\x7f?\x07\xfe\x7f?M\xf6\x7f?#\xfb\x7f?\xe6\xff\x7f?\x0b\xf7\x7f?\xe7\xff\x7f\xbf\x18\x81\xa0>\xc49Q\xbe\xc5\xf8\x7f?\xd8\xff\x7f?\x82\xb5|?R\xfe\x7f?\xff\xff\x7f?c\x05\xa7\xbe\xb7\xfc\x7f?\x97\xfb\x7f?\x04\x8a|?\x9d\xd8\x7f?\xab\xed\x7f\xbf\x00\x00\x80?\x98\xfe\x7f?-\xf5\x7f\xbf\xcd\xfd\x7f?\x9cY\xf4>\xa5\xfe\x7f?\x19\xe8\x04\xbf\xf5E`?\x87\xfa\x7f?\xbd*\x11?\xe8\xf5\x7f\xbf4\xff\x7f?\x11\xff\x7f?\xb5\xee\x7f?\x00\x00\x80?\xd9\xef\x7f?\x00\x00\x80?\x16\xfe\x7f?4\xe0\x7f?\x03\x1b\xa8>vay\xbf\x8c\xfa\x7f?\xf3\x07\xf6>\xa7\x86\x1f>\xc4 c?\xca\xf4\x7f?K\x9b\xc6\xbe\x1d\xdf\xdc=\x01\xfa\x7f\xbf\x0c\xfc%?\x12r_\xbe]\xb2\x00\xbf\xc4\xff\x7f?\x00\x00\x80?\x89\xe8V>|\x15#?O\x11!> \xa5}?Y\xf3\x7f?\xa7\xfd\x7f?\xe5\xc9\x7f?\xba\xff\x7f\xbf\xfbC4?\xe2MN?\x1d\xe5\x7f\xbf\xd0\x1d2\xbf\xbeR\x1f>\x00\x00\x80\xbf\xda\xb3D?#\xf5\x7f?\x1aB\x06\xbf\x8e\xe4\xc9>\xee\xf8\x7f?\xc90\xb3>d\x18\x7f?\xb3\x03\x0e?9\xe7}?\xff\xff\x7f?\x86\x01\xb3\xbe\x05\xff\x7f\xbf2\x14W?\x85\xfb~?\xff\xe7\xfc>\xd4\xfei?\x94\xac\x13\xbf6\xff\x7f?\xfc\xff\x7f?\xdd\xcd\x7f?\x00\x00\x80?\xacb\xb9\xbe\xe6\xf6\x7f?\xaeE\xbd\xbeo\xa7\x9f>\xd5\xfa\x7f?$\xfb\x7f?{\xd6\x7f?\x06\xff\x7f?\x7f\xf8\x7f\xbfhq\xb3>e\xff\x7f\xbf\x00\x00\x80? \xfc\x7f\xbf-\xf9\x7f\xbf\'\xf6\x7f?\\\xda\xc3>\x9cP\x0b?\xfcR\xb3\xbe\x92\x92F\xbf\xcdG\'\xbf\xfb\xa0\xbf<\xd4\xc2\x7f\xbf\xe6\xfa\x7f\xbf \xd0\x7f\xbf2m\xb3>h\x14\x03>\x03\xe39\xbf\xa4\xad\x7f?\xf0\x81\t\xbfy\xf4\x7f\xbf7\xf3$\xbe\xbb\xac\xb2>\xb4\r\xb3>\x8d>\xb3>\xccu\xb3\xbeT\xd3d?8\x0b\xb3>\x8bk\xb3>\x00\x00\x80\xbf~JI?\x18\xfe\x7f\xbf\xba\x84\xc5\xbe1\xf7\x7f\xbf\xfa\x0f\xa4>\xd0\x10\x02?\xabA\xb3>\xd1<\x01\xbeL\xe9\x7f\xbf\x0f3\xb3>\xf7\xb6\xb3\xbeLCL\xbf\x08\xd7\xb8=d\xf6\x7f?\x19A~\xbf\xa8\xe2\x7f\xbf\x00\x00\x80\xbf\x9c\xb8\xb5\xbc\xb1%\xb3\xbe \xf2\x7f?b3\x84>%\xa8\xb3\xbe\xba\xf6\xb2\xbe\xad\xe9c\xbf\xe7\xe5\x7f\xbfO\xd6\x03?\x00D\xb8\xbe%E\xb3\xbe\xdd\xf6\x7f?\xa1\xadT\xbe\xe0\xb5}?\xbf\xdf\x7f\xbfmh7>j\xfc\x7f\xbffg$<r\xb9~\xbf\x97\x9d\xa7=\xa6\xf0\x7f?\x00\xf8\x7f\xbf\xe3\xd2\x7f\xbf`B\xb3\xbe\xcf\xb1\xb3\xbe18\x9b\xbe\xb1\xbb\x02?\xed\xfb\x7f?\xdb>\xb3\xbe\x97\xfd\x7f\xbf\xd8\xfd\x7f\xbf\xf7+\xb3\xbe\x00\x00\x80\xbf\x85\xf6\xba\xbe?,p?u,i?\x15\xf8\x7f\xbfk8\xb8\xbe;\x04\x17\xbeh\xa6\x9d>\xc7\xdeZ?\x13;\xb3>#\x0f^\xbd\x198\xb3\xbe\xa9+\xb3>\x07yP\xbf\x18c\xf1\xbe\xb6-\xa7>\xa4\xeb\x7f\xbf\x9d\xf8\x7f\xbf\x0fK\xb3>\x05J\xb3\xbe\xf2\xfe\x7f\xbf\x99(\xb2\xbe\xa0\xcb\xd3\xbe\xcfD\xb3\xbe+\xf5\x7f\xbfx\xc8\xb0>\x197\xb3>H\xf7\x7f\xbfn\xf2\x7f?\x862\xb3\xbe\xa6(\xb3>\xbc\xf2\x7f\xbf\x00\xfa\x7f?p\x15\xb3\xbe|\xf0\x7f?n\x14\xb3\xbe\x05\xf2\xb2>\xde\x1e\xb3>jO\xb3\xbem\xf5T<\xcc3\xb3>\xc8\xd9|\xbfYL\xb3\xbe0\xc3\x18\xbe\xdc\xfc\x7f\xbfI\xfc\x7f\xbf\x00\x00\x80\xbf\xb8*\xb8>\xda\xfd\x7f\xbfP3\xb3>\xfc7\xb3\xbe\x00\x00\x80\xbf\xfc6\xb3\xbeLh}\xbf/>\xb3>\x8f=\xb3\xbe\xe0<\xb3\xbe\xb6\xec\x90\xbeC5\x91>`\xf0\xb2>T>\xb3>L7\xb3\xbeFJ\xb3\xbe\xe9\x93\xb5>\x11\x89\xb3\xber\x0cH>i1\xb3\xbeB8\xb3>\xe4\xfd\xb1>S9\xb3\xbe\x89\xf9\x7f\xbf\xbc\xff\x7f\xbf>\xfe\x7f?YB\xb3>3\xf5\x7f\xbf\xf9\xa5=?\xd8,\xb3\xbe\xcb\xfe\xb2>+\xf7\x7f\xbfEt\xa3\xbe\xe94\\?\xd07\xb3\xbe\x02\xff\x7f\xbf\xa4\xfa\x7f?\x924\xb3>\xffP\xb4\xbe\x06\xd5\x87\xbeK\xf0\x7f?\xb48\xb3>\x92-\xb3>LCM>\n\xfa\x7f\xbf\\\xe9\x7f?\x11\xf8\x7f?L.\xb3>\xea8\xb1>\xc3;\xb3\xbe\x96<\xb3\xbe\x8b\x1d\xb3>\xbf6\xb3\xbe\xe6\x0c\xb3>\xcb.\xb3>\xa8\xfd\x7f\xbfn9\xb3\xbe1\x11\xb3\xbe1\x1b\xb3\xbe\x88\xb1\xb2\xbe\x82)\xb3\xbe\x8e\xfb\x7f\xbf\xbfc\x8c=\x00\x00\x80\xbf\xb43\xb3>\xec\xf8\x7f\xbf\x83r\xb3\xbe\xbf\x96\x18>:=\xb3>D:\xb3>\x041\xb3>Z\xd9\xb2\xbe\x9c;\xb3>r8\xb3\xbe\x86\xeb\x7f\xbf\x8fI\xb3>\xe37\xb3\xbe7\x00\xb3\xbe\x8d*\xb3>\xc7\x1a\xb3>$\xfa~?\xac\xff\x7f?\xcbB\xb0\xbe\xd2:\xb3\xbei\x0eX\xbe\xc5\xfc\x7f\xbf\xfd.\xb3\xbe!-\xb3>\xd6\xff\x7f\xbf\xf3\xfc\x7f?\xabD\xb3>\xb7.\xb3>\xaa\xfd\x7f\xbf\xd6d\x98\xbe\xa3\xd3\xab>NE\xb3\xbe\xec\xbe\x15\xbf\x1b1\xb3\xbe\xed2\xb3\xbe\xea\xff\x7f\xbfc\xfb\x7f?Y\x83\xf1>#4\xb3\xbe1\x100=!\xfe\xb2>\xdd\x08\xb3>\xf1\xd5\x7f?\x1c9\xb3\xbe\x00\x00\x80\xbf\x14<\xb3>\xe8\xca\xb2\xbe\x90\xa8\xae\xbe\x85!\xb3>\x90\xa5Q;\'\x1e\xb3>\xadA\x10\xbf\xad4\xb3>\x8b3\xb3\xbe\x02\x08\xb3\xbe|1\xb3\xbeZ\xf0\x7f?Y\xe9\xdd\xbby\x0cv?{6\xb3>h.\xb3>j=\xb3\xbe\xa3\xe15?%\xff\x7f\xbf)\xfe\x7f\xbf\x00\xf7\x7f\xbf\x00\x00\x80\xbf\x9a1\xb3\xbeb\xee\x7f\xbf\x07F\xb3>\xcd4\xb3>\xe93\xb3>\x0fB\xb3>\xe82\xb3>\x01;\xb3>\xb2^@\xbdb\x82\x7f?\xbd\xfa\xb2\xbe\x1a\xae\xb2\xbe\xf3,\xb3\xbe\x00\xfe\x7f\xbf\xb4 \xb3>\xfe\x8fU>H0\xb3>\x04\x99N?\xed\xfe\x7f\xbf\x9d1\xb3\xbe\xf51\xb3\xbee\xd0\x7f?e5\xb3>\xab<\xb3>u1\xb3>\xcb\xff\x7f\xbf\xd6\x03\xb3>\x13\xb4s\xbe}\x1f\xb3>\xe6\xff\x7f\xbfg6\xd6\xbc\x8e(\xb3>\xbb\xe2\x87>Q(\xb3>DJ\xb3>\x00\x00\x80?\x05\x95\xb3\xbe4&\xb3\xbe-\xfe\xb2\xbe\x1d\xbe\xb2>p\xf4\x7f?\x00\x00\x80\xbff0\xb3>B\xf1\x7f?\xc6E\xb3>JC\xb3\xbe&\xbf\xb0>\xd3\x84\xc1\xbcc)\xb3\xbe\n\xfd\x7f\xbf\x82\xfc\x7f\xbf 1\xce\xbe\xd5=\xb3>v7\xb3>A3\xb3>E\xe3\xb2>\xd2\xf7\x7f\xbfL\xaf\x7f\xbf\x16\x96\x7f?\xbf;\xff\xbe(\xd6\x7f?\n\xec\x7f\xbf\'\xfb\x7f\xbfGo\xb3\xbe\x1e7\xb3\xbe\xf1\xfa\x7f\xbf\x04\xae\xb9\xbe\n\'\xb3\xbe\x1f2\xb3>\x00\x00\x80\xbf(=E?%\xff\x7f?\x98$\xb3>#-\xb3>\xd9B\xb3\xbe\x92\x9ff\xbe\x01$\xb3>\x00\x00\x80\xbf\xcd\xda\xb2>\xac\x7f\xc0=\xdf9\xb3>\x10\xf9\x7f?\t\xff\x7f\xbf\xa2\xc5\xad\xbex1\xb3\xbe\xe75\xb3>\x87$\xb3>\xd4I\xb3>\xf20\x7f\xbf\xaf\x83P\xbf%\xfd\x7f\xbfc0\xb3\xbeS\x1f\xb3\xbe\x90\x18\xb3>\xed\xf5\x7f\xbf\xd2#\xb3\xbe\xd47\xb3>\xed3\xb3>\r\xff\x7f\xbf\x00\x00\x80\xbf\xcc}\x90\xbe\xfd\xdb\x7f?\xda/\xb3\xbeO\x88\x7f?a$\xb3>\xbaTn\xbf\xb3\xea\x16?\x99\xfc\xb2\xbeKM\xb3>x(\xb3>\xed\xff\x7f\xbfv\xee\x7f\xbf\xca5\xdd>\x96\xfe\x7f\xbf\xbaH\xb3\xbe1\xf4\x7f\xbfc@\x16?&:\xb3>\xc12\xb3>x0\xb3>\xfb\x15v>\xdb\xfb\x7f\xbf\xe5\xdd\x7f?\x00\x00\x80\xbf\x00\x00\x80?\xc4\xf9\x7f?\x08\xfe\x7f\xbf\x00\x00\x80\xbf)h\xa7>\xb8?\xb3\xbe\xb1\x0bo\xbd3(\xb3\xbe\x065\xb3>U\xff\x7f\xbf\xb9\xe9\xa8\xbe"6\xb3>\x8f\xe5\x7f\xbf\x1d\xf3\xda>U5\xb3\xbe\x9bM\xb3>\xc8\xea\xb2\xbe\x00\x00\x80\xbff1\xb3\xbeua\x8c\xbe\xa2\xfc\x7f?\tm\xb3>\xa7\xfb\x7f?\x00\x00\x80\xbfQK\xb3\xbemP\xb3>\xae.\xb3>\x893\xb3\xbe\xbe\xff\x7f\xbf\x00\x00\x80?)4\xb3>\x7f\x16\xb3\xbe\x8e\xf9\x7f\xbfg\xc23?\x00\x00\x80\xbf>\xf4\x7f\xbf\x81\xfc\x7f\xbf\xdd\x0b\xb3>\x1d\xf6\x7f\xbf\x00\x00\x80\xbfWK\xb2>\xa4\xfc\xb2>\xb1,\xb3>\xad6\xb3>\xf56\xb3>\xd4\xf6\x7f?\xa53\xb3>(\x16\xb3>\xb74\xb3>}9\xb3>\xd25\xb3\xbe\x82\xfb\x7f\xbf\x91Q\xb3>\x11\xfe\x7f\xbf\xd72\xb3>\xaf3\xb3\xbe[\xf8\x7f\xbf\xc3\xfb\x7f\xbf\xa82\xb3\xbe\x8c8\xb3\xbe\x1eO\xb3>\xe0\xff\x7f\xbf\xc7\'\xb3>\xaa\xa0\x1e\xbe\xfb4\xb3>\x97\n)?\xcc\xfc\x7f\xbfKG\xb3\xbe*@\xb3>[&\xb3\xbe\xff2\xb3>\xa5\xef\x7f?D4\xb3>\x8a\xfd\x7f\xbf\xe6\xa6\xfb\xbe\xca=\xb3>\xdb7\xb3>[\x01\xb8>\xe7-\xb3>\xa2\x97\x1d\xbe\xe2\x1d\xa4>\x00\x00\x80\xbf\x0f0\xb3\xbe\xc5\xa2\xb1\xbe\xf82\xb3>\x1a\x8e\xb3>\xa1~\xa2<\x04\xf9\x7f\xbf\xbc\x0c\xb3\xbe\xf5\x15\xb3\xbe\xf2!\xb3\xbe\\6d\xbep\xfe\x7f\xbf_9\xb3\xbe\x8e@\xb3>.\xcb\xb2\xbe\x95\xfd\x7f\xbf\xf8\n\xb3\xbe\x00\x00\x80\xbf\x00\x00\x80\xbf\xf0\xf9\x7f\xbf\xa41\xb3>u\x0b\xb3>\xc4\x86\x03\xbe\xf4\xf4\xb0\xbdo\x19\xb3>\x84\xb9\x06\xbdB:\xb3>R4!?\xad\xa0\xb5>\xb4\xcf\xb2>\xe3\x07\x90\xbe\x033\xb3>\xe5\xec\x7f?\xd0&\xb3>E\xfe\x7f\xbf4\rl\xbf^4\xb3>\x9dk\xb3>\x0bj\xb2>\xb2\xfd\x7f\xbf\xf5A\xb3\xbeTB\xb3>\xf1\xbb{\xbeB0\xb3\xbe]m\xb3\xbe\xb7\x9fx?\x00\x00\x80?\x8e\xfa\x7f\xbfj,\xb3\xber?\xb3>\xe9+\xb3\xbe\xdb\xae\xac>\x88\xf5\x7f\xbfb=\xb3\xbe\xbe\xf8\x7f?|\x1c\xb3>\xee\xfd\x7f\xbf\xb9\xf3\x7f?\x192\xb3>\x1a?\t\xbf\x8e\xc4A\xbe\x9fE\xb3>\xb3\xe1X<\x16\x9fZ\xbe\xb9\xfe\x7f\xbf\xdf\xf5\x7f\xbf\x07\x0fq\xbe\xd0-\xb3>\n2\xb3>\xe19\xb3\xbe\xfb\xf1c>R/\xb3>\xec\xf3\x7f\xbf\x93C\xb3>\x8b \xb3>\xb8\xff\x7f\xbf\x00\x00\x80\xbf\x10\xc1\x9b\xbe:\xd6\xb2\xbev\xfe\x7f\xbf\xd1\xf9\x7f\xbf\x98\xf9\x7f\xbf\x00\x00\x80\xbf\x7f\x08\xb3\xbe\xcf\x0c\xb2>"N\xb3\xbe71\xb3>#\x9aw\xbe\xf3\xa5%>\x90X\xb3\xbe\x82\x1c\xb3>O\xf8\x7f?\x17x\xa0>\xf3G\xb3>\xe5\x17\xb3\xbe\xd6D\xb3>\xbe#\xb3>\xd8\x06\xb3\xbe_\xf7\x7f\xbf\xf4\xd1\xbe\xbe>\xef\x7f?H\x92j\xbf))\xb3>\xbe\x0e\xcd>\xb11\xb3>52\xb3\xbe\x0b\x9c\x0b\xbf\x95\xfa\xb2\xbe\xf4)\x10>z7\xb3>\xa8`r\xbfh\xf2\x7f\xbf\xb0\xe1\x7f\xbf\xa84\xb3>\x85K\xb3\xbe\xc2@\xb3\xbe\xe9\xb70\xbfv@\xb3\xbe\x00\x00\x80?\xff4\xb3\xbe\xcd\xc9\x7f\xbf\x8b\xaa\xc6\xbeX:\xb3>\xa9\x0b\xb3>\x8d*#\xbeAN\xb3\xbe\x00\x00\x80\xbf\xfa\xa5\x7f\xbf\xd7\xfb\x7f\xbf\x07\xf2\x7f\xbfBb\x17\xbe0\xf8\x7f\xbf\xb0&\xb3>\x03H\xb3\xbe\xf6\xec\x7f\xbf\x102\xb3>\xd0L\xb3>\xe0\x88\x93>\x0ee\xb3\xbe\x0b\xfe\x7f\xbf\xe0)\xb3>\xb7A\xb3\xbe\xc7M\xb3\xbe\xc7\xfd\x7f\xbf\xda\xfe\x7f\xbf\x00\x00\x80\xbf\x00\x00\x80\xbf\x9c\xce\xba\xbe\x92\'\xb3\xbe\xa5<\xb3>!.\xb3>3\xe3\xf3\xbe\x9c\xbf\x7f\xbfK9\xb3\xbe>,\xb3>L\xf2\x7f?t\xc7\x7f\xbfB5\xb3>\x01\xf0\x7f\xbf\xc4\xe0\x7f?\x00\x00\x80\xbf7)\xb3>z\xff\x7f\xbfB\xe5\x7f\xbf\xd3&\xb3>Q\xde\xb0\xbe<+\xb3>\xfa3\xb3\xbe\x00\x00\x80\xbf\xf5\x90\x0e?TS\xb3\xbej\xfe\x7f\xbf\xee)\xb3\xbe\xa5^\xb3\xbe\x06Z\xb3\xbe\x84l\xb3\xbe\xdb\xe4\xb2\xbe\xf3}\xa5\xbe\x00\xf6O?#\xed\x7f?\xd8\xfb\x7f\xbf.4\xb3>\x00\x00\x80?eS\xb3>\x9b\xff\x7f?A\xfb\x7f\xbf\xa3D\xb3\xbe\xcf\xfd\x7f\xbfL`W\xbf\xa9\xfd\x7f\xbf`\xfc\x7f\xbfp\xf4\x7f\xbfG\xee\x7f\xbf"\xeeP>\xbb\xe5\xdb\xbe$\xfd\x7f\xbf\x7f\xe1\x06\xbf\x00\x00\x80\xbfT\xfa\xb2>\x81\xf9\x7f?\x9f\xff\x7f\xbf\x82\xbf\xb6\xbe\xca\xf9\x7f\xbf\xb0\x04\xb3>2\xdb\x7f\xbf\xea\xb9\xb2>\xed\xf3\x9a=\xbd\xfd\x7f\xbf\xd7\xf5&?\x00\x00\x80\xbf>\xf5l\xbf\xc4\x1e\x17\xbe\xb7\xfa\x7f\xbf\x00\x00\x80?\x9a\x1e\xb3>\xe4\x84\xc3\xbe\xe2\xf9x\xbf\xe6\x02\xd5\xbe\x8cX\xb3\xbe\x16\xfd\x7f?o\xfe\x7f\xbf\x9b\xfe\x7f\xbf\x9e\xfa\x7f\xbf\x00\x00\x80?\xf5\x0b\xb0>\xee\xfd\x7f\xbf\xa7\xff\x7f\xbf\x14\xc12>2L\x97\xbe\x05\xfe\x7f\xbf~n\xb3>\xc2s\xe1\xbe\x00\x00\x80\xbf\xbb\xe2\x7f\xbf-\xfb\xb2\xbe\xda\xfc\x7f\xbf\x19\xfd\x7f\xbf\xdc\xfd\x7f\xbf\x17\x8a\xc7\xbb\xf1\xd8\x7f?>\xff\x7f\xbf\x1c\xf8\x7f\xbf\x04\x13\xb3\xbe\x00\x00\x80\xbf\'\xff\x7f\xbf\xec\xed\x7f\xbf\x00\x00\x80?d\xf5\x7f\xbf_\xb2z?\xdf\xa68\xbdi\xfd\x7f\xbf\xf3qy?v\xfe\x7f\xbf\xd7\xf3\x7f?\xaf\xdb\x7f?e\xc4i\xbf\x00\x00\x80?\xe6\xf9\x7f\xbf\xe7\xaaS\xbd\xdd\xfd\x7f\xbfA"-\xbfW\xf0\x7f?^\x0b}\xbf*]\x80>;\xfe\x7f\xbf\xe6\xfe\x7f?\x86\xf8\x7f?g\xfe\x7f?\nC]\xbfI\xff\x7f\xbfxsy\xbe\x16\xaa\x01?\xa5\xe2\x7f?\x00\x00\x80\xbf\xa9\xff\x7f?\xee\xb3\xb7>\xa0\xfb\x7f\xbf\xd1\xf7\x7f\xbfW\xfa\x7f?\xff.\x08?G\xf1\xb3\xbe}\xf8\x7f?\x15\xf6\x7f\xbf}\xfe\x7f?\x8b\x99~?\xef\xff\x7f\xbf<\xfd\x7f?\x00\x00\x80?l\xfb\x7f?\xdf\xf8\x07\xbf\x99\xff\x7f?\x19\xff\x7f?\xd9\xd9\x7f\xbf\x02U9?\x00\x00\x80?\xa3SA?\xdb\xfd\x7f?\x98\xe4\x7f\xbf\xd1\x82\xa9\xbey\xb5c?\x00\x00\x80\xbf\xe0\xff\x7f\xbf\xb4%\xbb\xbd\x08\xff\x7f?\x14\xff\x7f?\x11\x87\xa9>#\xff\x7f\xbf?\xb7\xab\xbe\xfa\xf4\x7f?]\xf2\x7f?\xc8\xf2\x7f?!"\x17?\xe5\xfa\x7f?\xff\xfe\x7f?\xb0\xe8\x7f?\xc4OK?\xf1\xf7\x7f?\xbe ~?\xcc\xff\x7f?^D|?\x00\x00\x80?h\xfe\x7f?\x00\x00\x80?\xf6\x89 ?\x16\xcc\xb8\xbdn\xf0\x7f?4\xfa\x7f?\x83\xf0\x7f?6\xf4\x7f?\xa4\xff\x7f?9\xe6\x7f?\xb8\xfd\x7f?4~\x9c>\xbe&@?Dh\x7f?D\xf5\x7f?\xad\xf2\x7f?\x01\xfe\x7f?\x98\xff\x7f?\x1d\xfb\x7f?\xf0\xff\x7f?\x05\xf7\x7f?A=\x1a\xbf\x00\x00\x80?\xf0\x88b?\xae\xf8\x7f?\xf3\xff\x7f?{\xf8\x7f?J\xfe\x7f?\xff\xff\x7f?\xdd\xff\x7f\xbf\xa7\xfc\x7f?#\x05\x7f?N\xbd}?\xa3\xe6\x7f?\x1f\xff\x7f?\x00\x00\x80?4\xfc\x7f?\x94\xc1\x7f\xbf\xcb\xfd\x7f?\xda\xf5\x7f?\xa5\xfe\x7f?\xb9\xfb\x7f?\x0f\xb4^?z\xfa\x7f?\xcb\xfa\x7f?9\x00\x0e?+\xff\x7f?\r\xff\x7f?l\xee\x7f?\xf2\xff\x7f?\xb7\xef\x7f?\x00\x00\x80?\x11\xfe\x7f?\xe4\xdf\x7f?os\xb2>O\xaa\x7f\xbf\x1e\x90q?\xb1N.\xbfhls\xbf\xb8\xdb\x07\xbfL\xe8b?\xde\xb4\xff>y\xe5\x7f\xbf\x1b\xff\x7f\xbf\xd3\\\xb3>x]\xa7>\x00\x00\x80\xbf\xc3D\x1b?\x91\xec\xe4>\x9a\xd9\x7f\xbfe\xe5\x7f\xbf\x8c\xf6\x7f?~\xf8~?=\xda\x7f?\x03\xf4\x7f?\xb4!}?t\xfa\x7f\xbf\xaf\x85\x8e>Dkc?\x8c\xca\xd2>\x00\x00\x80\xbf\xb6\xf3\xb2>\xb8\xfe\x7f\xbf\xe6\xe5\x7f?X\xc4\x7f\xbfe\xfc\x7f\xbf\xfdH\xc2>K\xe7\x7f\xbf\xd1\xff\x7f\xbf\xd6\xaf\xa2\xbc=\xf8\x7f?\xa6\xdf\x7f\xbfA\xd7\x7f?q\xdb\x07?\x12\xfd\x7f?r\xe6\x7f?\xf8\xf0\xcb\xbe5\t\x7f\xbf\xe4\xff\x7f?\x03\xc5\t\xbf\xa2Z\xb4\xbe\xe7\xd2\x7f\xbf\xbe\xe4\x7f?@.s\xbf\xc9\x07H\xbeh\x86\x07?\xf9\xfb\x7f\xbf\xc7\xb4\x8c>0UE\xbf\xe8\xfd\x7f?\x00\x00\x80?\x06\xff\x7f?\xe0\xfa\x7f\xbf-\xf6\x7f?\xee\xee\x7f?[\xfb\x7f\xbf\x1f\xc8/?\xa6\xf7\x7f\xbf\xfe\xbe\x7f?9e`?\x00\x00\x80\xbf\x00\x00\x80\xbf\x00\x00\x80?3\xe9\x7f?\xb4\x1a\xb3>.\xcb\x7f\xbf\x13\xdd\xb3\xbe\\<\xb3>dK\xb3\xbe\x9d\x96\xd1\xbe\xc4c\xe6>\x84\xeb\x7f\xbf\x04\xa6\xa6\xbe\xef\xd7\x7f\xbf\xaa\xf2\x7f\xbf\xedG\xb3\xbe\xb2L\xb5\xbe>N\xb3>&\xf5\xb2>\x91\xa7M?}F\xb3\xbe\xb6\x17\xb3\xbe\x00\x00\x80\xbf\x00\x00\x80\xbf\x00\x00\x80\xbf\x9a\xff\x7f?\xae\xf5\x7f\xbf \xf3\x7f?\xf3\xd0\x7f?h\xfa\x7f\xbf[Q<\xbe\xb1\x07\xb3>\xa6\xd1=?\xc8_\xb3>\x08\xfa\x7f\xbfg\xfe\x7f\xbf\xe4\xbb\x7f?\xf5\xe6\x7f?\x85\xf6\x16\xbf\x8b\xf3\x7f\xbfT\xf9\x7f?\t\xdb\x7f?\xd8\\\xb3>\xc4+\xb3\xbe~}\x0f\xbfT\xed\x7f?g\xfd\x7f\xbfq+\xb3>\xc3\xf9\x7f\xbfN{\xee\xbe\xd1\xfd\x7f\xbf7\xf8\x7f?!\x03x\xbf\xe4#\x86\xbeD\xfc\x7f\xbf{L\xb2>\xfd\xfc\x7f\xbf\x1b\xfe\x7f?\x96\xa8l\xbf\x118\xd0>[\xeb\xb2\xbee\xfd\x7f\xbfmV\x7f?2\x18B\xbf\x83\xfc\x7f\xbf\x91\x1f\xb3>\xd2G\xb3>\xce\x13\xb3\xbe9\x06\xb3>\xf8\xfb\x7f\xbf\x142\xb3\xbe{1\xb3>\xef\xef\x7f\xbf\xa0o\xb0>\xbb\x1e\xb3\xbe\xf7!\xb3>\xa9\xf7\x7f\xbf\xa6\xa4\x1d\xbe^+\xb4\xbe0\xdb\xb2\xbel\xae}\xbf&\xe3\x7f\xbf\xb6\xff\x7f\xbfN?\xb3\xbeO\xac\xb2>g\xf0\xb2>b-\xb3>\x00\x00\x80\xbf>G\xb3\xbe#\x06\xb4\xbe\x160~>c\xf3\x7f\xbfT\\\xb3\xbe\x86:\xb3\xbex\x1a^\xbe \xf9\x7f?R:\xb3>\\\x19\xb3>/5\xb3\xbe\xfd\xfd\x7f\xbf)\r>?c\x9a\xdc>61\xb3\xbe\xe3\xf7~\xbf\xeb1\xb3>\xbc6\xb3\xbe\x97\xfe\x7f\xbf\x08:\xb3\xbe\x19\xfd\x7f\xbf\xf82\xb3>\x87b\xb3\xbe\xe6\xeb\xb2><\xd0-\xbfF\x16\xb3>\x00\x00\x80\xbf\x86\x1f\xb3>\xab_\xb3\xbe\x9b\xe5\x7f\xbf\x00\x00\x80\xbf\xa4,\xb3\xbe@\xfe\x7f\xbf\xae\xb7\xb1>\x17\xf6\x7f\xbf\xff\xef\x7f\xbf\xb8\x7f\x7f?\xd9nW\xbf\x8b\xcd\xb2>R;\xb3>\x04\xc6\x7f\xbf\xee9\xb3>-\x01\x1f>\x00*\xb3\xbeC\xfb\x7f\xbf\xaa\xf8\x7f\xbf0?\xb3>\\\xf9\x7f?m\xde\x7f?\x9b\x1f\xb3\xbe\x19-\xb3>b/\xb3>o3\xb3\xbe\xb9\x1d\xb3\xbe\xf06\xb3\xbe\xc2=\xb3\xbe\xb3\x87\xb4\xbe\xf6\xe9\x7f\xbf\x17)\xb3>\x9a\'\xb3>\x821\xb3>\xd6FQ\xbe\xc5\x1f\xb3>\x00\x00\x80\xbf2M\xb3\xbe$@\xb3\xbe\xad;\xb3\xbe\x1c2\xb3\xbe\xbe.\xb3>\x07\xb2\x8e>\r3\x14>\xd0+\xb3>\x87/\xb3\xbe\x96\x14\xb3>\xb0\x1b\xb3\xbe>\xfc\x7f\xbf\x9f\xf2\x7f?d\'\xb3\xbe\xa52\xb3>\xb1\xf5\x7f\xbfx6\xb3>\xd16\xb3>\x00\x00\x80\xbf\xbd\xce{?\xb2\xff\x7f\xbf\x90\xa5\x7f?\xf6\xff\x7f\xbf\xb9S\xb3>\x81pd=56\xb3>\x04\xff\x7f\xbf\xe0\'\xb3>\xbd\xfa\x7f?\xf8$\xb3\xbe\x96\xfa\x7f\xbf\xde"\xb3\xbe\xfd\xfb\x7f\xbfT \xb3>\xd4\xfa\x7f\xbfH7\xb3\xbe\x7f$\xec\xbe#\x1f\xb3>\x02$\xb3>I\x1b\xb2>\xd6\xf9\x7f\xbf;8\xb3\xbe(#\xb3\xbeg\xc3\xb3>\x00\x00\x80\xbfN\xf5\x7f\xbf\x00@\xb3\xbe\xf7\xf5\x7f?#6\xb3\xbeZ\xf8\xb1>V1\xb3>36\xb3\xbeI\xff\x7f\xbf\xe26\xb3\xbe\xdf\x97\xaa\xbe\x08\xfd\x7f?\xd9\xfe\x7f\xbf\xa5\xfb\x7f\xbfF \xb3>\xdd@\r?\xe2\xe3\xb2>N=\xb3=\x89\xe1\x7f\xbf\x9a\xff\x7f\xbf"L\xb3>H\xb9\xa1>jN\xb3\xbe\xc6/\xb3>6.\xb3>\x986\xb3>\x16\t\x18\xbe+\xdd\xac>R4\xb3\xbe\xef\xe7\x7f?XP\xa8>\xbe\xf9\x7f\xbf\x99\xf7\x7f?o3\xb4\xbe\xdc3\xb3>\x00\x00\x80\xbfZ0\xb3>aG\xb3>\x00\x00\x80\xbfU4\xb3\xbeo\xfe\x7f\xbf\xa6\xa4b??\xf1\x7f\xbf\x19?\xb3>+\xf6\x7f\xbfjT\xb3>\x92\xfd\x7f\xbf\xc7-\xb3\xbe{\xdf\x7f?+\xff\x7f?\\-\xb3>U\xf6\x7f\xbfm\xfb\x7f\xbfM%\xb3>\xc7\xf9\x7f\xbfi8\xb3\xbe\xc8\xec\x7f\xbf\x15\xb5\xb2\xbe\xc8\x930\xbfA\xf8\xd1>\x16\xfe\x7f\xbf\xb79\xb3>\x1a\x1d\xb3\xbe\xa2\xfd\x7f?\x00\x00\x80\xbf\x00\x00\x80\xbfPN\xb3>\xc60\xb3\xbe\xc0\xf3\x7f\xbf\xb7\xe5\xb2>\xc03\xb3\xbe\x12&|\xbf\x00\x00\x80\xbf\xb3\xc1\xb2\xbe\xbc \xb3>\x81!\xb3\xbed\xfc\x7f\xbf\x00\x00\x80\xbf`4\xb3>\xf41\x7f\xbf\xcc\xfb\x7f\xbfH)\xb3\xbe\xf92\xb3><=\xb3\xbeM$\xb3>\xcd\xe8\x03?@1\xb3>m6\xb3>\x8f\xec\x7f?6+\xb3>\x08;<\xbf;0\xb3\xbe\x00\x00\x80\xbfT\xff\x7f\xbf\xa97\xb3>\xbd\x00\xdf>\xc0\x11\xbe>\xdf7\xb3\xbe\xd2\xfa\x7f\xbf\xd2\xfd\x7f\xbf\xfdq\xb3\xbeiG\xb3\xbe8\xbe2?\xc9\xff\x7f\xbf&\xfc\x7f\xbf\xe4\x16\xb3>76\xb3>\xe7\x19\xb3>\xf45|\xbf\x9a3\xb3\xbe\xff\xfc\x7f\xbf\x08\xfe\x7f\xbf4D\xb3\xbe\xb2\xac\x03\xbf9\xfa\x7f?\xe44\xb3\xbe\x8a\xff\x7f\xbfK\xbdt?W\xfc\x7f\xbf\xf2*\xb3>(\xfb\x7f\xbf\x84/\xb3>\x00\x00\x80\xbf\x847\xb3\xbe\xaa!\xb3\xbe`;\xb3>y\x8c\xb2>\xb5\xa4O\xbf\x00\x00\x80\xbfp\x9d\xcb\xbeM0c\xbf\xa45\xb3\xbe\xa7\xd6t\xbeH\xce>>\x00\x00\x80\xbf\x00\x00\x80\xbf\x820\xb3>\xc9\xff\x7f\xbf\x90\xdb\x07?heJ\xbf\xa9+\xb3>\xe3;}\xbf\xd8\xfe\x7f\xbf\x1d7\xb3\xbe\x00\x00\x80\xbfr1\xb3>H\xf6\x7f\xbf\xfe\xff\x7f?\x10\xef\x7f\xbf?(\xb3\xbe\xff;\xb3\xbet\xe3\x7f\xbft4\xb3\xbe\x00\x00\x80\xbf\xd0\xfe\xa6>Z\xf4X\xbf\xda\xf8\x7f\xbf\x00\xff\x7f\xbf\x97\xfe\x7f\xbf!\xff\x7f?\x927\xb3\xbeQ8\xb3>\x00\x00\x80\xbf\xa7+\xc1\xbe"\xfe\x7f\xbfs\xf8\x7f\xbfL\xe4\x7f?\xcf\xff\x7f\xbfP3\xb3>tsa\xbf\xe32\xb3>h,\xb3\xbe\x00\x00\x80\xbf\x89\x189?\\\xf7\x7f\xbf\x81\xfb\x7f\xbf\xe3\xff\x7f\xbf\x00\x00\x80\xbf\xab,\xb3>\x0b\xfe\x7f?\x06\xff\x7f\xbf\xcb\xc1\xca>\xb6\x8d9\xbf54\xb3>\xa2\xf2{\xbfk/\xb3\xbe\x82\xf6\x7f\xbf.-\xb3\xbe:2\xb3\xbe\x8d\xfa\x7f\xbf\xa7%\xb3\xbe\x9c(\xb3>\xad8\xb3>\x9a\xfd\xb2\xbeB;\xb3\xbe\x08\xfc\x7f\xbf\x1e7\xb3>w\xb9\xb2>\n\x0c\xb3\xbe\xad\x841?\x12\xfe\x7f?\x00\x00\x80\xbf\xfa\xf3\x7f?u\xf9\x7f\xbf\x03\x99\xb3>\x9f\xf8\x7f?\xb7\xff\x7f\xbf\x00\x00\x80?b\xdf\x7f\xbf\xff\x00\xb4>\\\xfd\x7f\xbf\xceS\xb3>G\xf7\xb2\xbe\xda\xfe\x7f\xbfF\xfa\x7f\xbf\x145\xb3>\xd7\xf8\x7f\xbf\x0b9`\xbf\x97^\x0c>\x890\xb3>\xeb\xc1\xa9>M4\xb3>m\xfb\x7f\xbf\xc4\xf6\x7f?\xdd-[\xbe\xe49\xb3\xbe\x00\x00\x80\xbf\xde.\xb3>\xa7\x8a\xb3\xbe3\xfb\x7f\xbf\x94A\xb3\xbe\xa3\xe4\xee\xbe\x82\xfe\x7f?M8\x94>\xf7.\xb3\xbet\xf7\xb2>QO\xb3>[1\xb3>\xb6+\xb3\xbe\x84+\xb3>\xd9\xf6\x7f\xbf\\\xfd\x7f?\xb2\xf4\x7f\xbf\xe91\xb3>\xb8\xfd\x7f\xbf\x82\xed\x7f?\x7f\xec\x7f\xbf\x00\x00\x80\xbff=\xb3>\x9a\xfd\x7f\xbf[5\xb3\xbe"6\xb3\xbe\x16\xf0\x7f\xbf\xd4\x1c\xb3>\xb6$\xb3\xbe\xfe\xd1\x7f?\x88\xf6\x7f?\xd9J\x9f<\xc6;\xb3>\xe7\xff\x7f\xbf\xf6:\xb3>\xcb\xe7\x9f>\x1f\xfb\x7f?\r6\xb3>\xcd)\xb3>\x99\xff\x7f\xbfx\xfc\x7f?\xda\xfc\x7f?VZ\xb3\xbe\xc0\x9d\x0e?\x00\x00\x80\xbf\x00\x00\x80\xbf\xf3\x1f\xb3\xbe\xcf\x0c\xb3>\x00\x00\x80\xbf\x00\x00\x80\xbfC\x1c\xb3\xbe\x00\x00\x80\xbfc3\xb3>n7\xb3>\x8e/\xb3>i\xbd~?\xdb2\x90\xbe\x05\xf4\x7f?c,\xb3>93\xb3\xbe\xc9\xf7\x7f\xbf\x86<\xb3>\xc2\xdc~?\xc91\xb3>\x00\x00\x80\xbf\x12\x1ds\xbf\x8c\xf7\x7f?\x00\x00\x80\xbf\xb5(\xb3\xbe\x00\x00\x80?\xf7.\xb3>\x9e\xfd\x7f?[\x03\xc9\xbeIK\xb3\xbe\xbd\xc6\x0f>\xe33\xb3>\xf2A\xb3>\xfb/\xb3>\xebB\xb3\xbe\xfe0\xb3>\x16\xf5\x7f\xbf\xe11\xb3\xbe,\xde+\xbd\xed\xe9\x7f?T\xf4\xf6\xbd\x18\xee\x7f\xbf\xd8\xf8\xb2\xbe\x87\xfc\x7f\xbf\xc2\x1d\xb3>\xdd\xfc\x7f\xbf\x1e\x81N?\xd1\xfe\x7f?I0\xb3>3!\xb3>~\x7fj?\x94\xc8\xb3\xbe\xb2)\xb3>\xd5\xf7\x7f\xbfS\xfbE>\x8b)/>\x07S\xb2>\xc6-\xb3\xbe,\'\xb3>|\xf9\x7f\xbf\xdd\xfc\x7f?\xd15\xb3>EH\xba\xbe\xd3*\xb3>\xf4\xff\x7f\xbf\x00\x00\x80\xbf\x18\x18\xac>\xf3\xe5\x95=m\xfe\x7f\xbf\x00\x00\x80\xbf\xb47\xb3>\x00\x00\x80\xbfE7\xb3>\xf74\xb3>f1\xb3>\x9f4\xb3\xbe\x08"\x9b\xba\xbe:\xb3>\xdb+\xb3\xbe\xdea\xb1>\xcd\xf9\x7f\xbf\x08\xf1\x7f\xbf\x11*\xb3>\x851\xb3\xbe`\xfe\x7f\xbf9=\xb3\xbe,A\xb3\xbe\xda\xfe\x7f\xbf\xd5\x01h\xbf\xc1-\xb3\xbe\xc8\xfa\x7f\xbf\xfd\xff\x7f?\x0f4\xb3>O\xf5\xb2>\xfe1\xb3>\\r\xb3>\x84.\xb3>\rM\xb3>\x97.\xb3\xbe\xe1\xf8\x7f\xbf!\xea\x7f\xbfLf\x9b>\xd49\xb3\xbe\xf53\xb3>\xc3:k\xbe\n\'\xb3\xbe\xd5\x19\xec\xbd\x13\xfc\x7f\xbf\xab1\xb3>\x8f\xfc\x7f\xbf\xd8#\xb3\xbe\xec\xfa\x7f?\xec\xfd\x7f\xbf\x03n\xb3\xbe\x10=\xb3>%\xfb\x7f\xbf=4\xb3>\xb4\xfc\x7f\xbf\x0f\xed\x7f\xbf\xe2\x91\x0f\xbd\xb4<\x8e\xbe\xa0\xf7\x7f\xbfD\xff\x7f\xbf\xa5\xf6\x7f\xbf\x19\xfe\x7f?*\x10\xb3>#a,\xbf$h\x13\xbfH\xff\x7f\xbf\x00\x00\x80\xbf\x8e\xf6\x7f?\xa0\xa3\xb5\xbb\xf6\xf9\x7f\xbf\x86\xb6\xb2>v\xff\x7f\xbf\xad\xfd\x7f\xbf\xd1(\xb3\xbefRb?\x911\xb3>:A\xb3\xbegF;\xbeV^\x9a\xbe\x8f\xf5\x7f\xbf\xeb\x1d\xb3\xbe]\xb4\x7f\xbf\xd2K\xb3\xbe\xd5\xf4\x7f\xbf\x9d\xdf\x7f\xbf\x12\xfe\x7f\xbf\x92\x13\xb3\xbe\x8e:\xb3>8\xfe\x7f\xbff\x9d\xb0\xbeN?\xb3\xbe\xfc\xff\x7f\xbf\x00\x00\x80?\xb0L\xa6\xbe\xac\xb5\xca\xbeT<\xb3>\xd9\xd3\xbc\xbe\x89\xfc\x7f\xbf\x90\xff\x7f?~s\xb1\xbe\xce\xf6\x7f\xbf\xc0\xf1\x7f\xbfkE\xb3\xbe\xbbk\xb3\xbe0`\xb3>\x18(\xb3>\xa4\xfa\x7f\xbf]\x1b\xc4="\xfb\x7f\xbf\x04\xa2J\xbf\xba\xe7\xb0\xbe\x99\xdc\x7f?\x92.\xb3\xbe\xc1r1\xbfM]\xb3\xbeK\xfc\x7f\xbf\x87\xfd\x7f\xbfv\xf3\x7f\xbf\xaf\xfb\x7f\xbf\xb3:\xb3\xbe$\xad\x7f\xbf*\xff\x7f\xbf\x02\xf0\x7f\xbf+\xdd\xb2\xbe`\xa0j\xbf\x00\x00\x80?\xa3c\xb3\xbe\xb3\xfc\x7f\xbf\xda\xff\x7f\xbf\xbe\xf2\x7f\xbf\x00\x00\x80\xbfM\xf8\x7f?\xab\xc8\xb2\xbeQ\xf5\x7f\xbfg4\xdb>K\xfc\x7f\xbf\x1cpk\xbfvT\xbc\xbe\xb6\xee\x7f\xbf\xd37\xb3\xbe\x00\x00\x80\xbf\n"\x17\xbf\x15\x90\xb2>n\x95\xb1\xbe \xeen\xbfx\x0b\xbe>\xf0\xb72>J\x1b\xb3> \x02\x04\xbf\x19C\xb3\xbe\x84\xf6\x7f\xbf\xff\xfe\x7f\xbfB6n\xbf=\r\x91\xbe}\x11\xb3\xbe\xc5\xfe\x7f\xbf\xa3k\xb3>)\xf6\x7f\xbf\x8b\xf3\x7f\xbf_\xb0O\xbf\x18l">\xa7\x03R\xbfXjO?\x18P\x7f\xbfc\xe3H\xbf\xdf\xd5\x7f?\x84\xa8r\xbf\\\x07\xb3\xbeG\xfd\x7f\xbf\x008o\xbe\xd0\xfc\x7f\xbf\x00\xbc\xe4\xbei\xf7\xb4\xbe"\xf6\x7f\xbf.\xc0v\xbf>[}\xbf\x03\x12\x8d\xbe\x9b\xf2\x16?\xd7\xff\x7f\xbf\xa2\xfd\x7f\xbf\x00\x00\x80\xbf\xabbz?\x00\x00\x80?\x00\x00\x80\xbfj\x7f\x99>\xbf\xff\x7f\xbf\xb2\xcf~?B\xb8\xa6>\xc2\xfe\x7f?\xdc\xff\x7f?\x19\xfa\x7f\xbf\xe3\xfe\x7f?\x99\xf8\x7f?2\xfc\xf7>\x00\x00\x80?\xdb\xff\x7f\xbf\x98\x00M>\xe4\xff\x7f\xbf\xfa\xef\x7f?\xfc\xff\x7f\xbfN\xcd\x7f?\xc2\x8f{\xbf\x00\x00\x80\xbf\x03\xd3~?C\xfd\x7f\xbf\xad\xa6r>\xe4\xfb\x7f\xbf\xcf;@>}\xe3\x9c\xbe\xb8\xff\x7f?F\xfe\x7f?F\xf2\xc5\xbe\x93@~?\xff\xff\x7f?z\xfb\x7f?!\xfe\x7f\xbfr\xfe\x7f?\x1e\xff\x7f?\x18\x9az?a\x1av?^\xac\x0b\xbf\x90D\xce\xbe\x8fZ\xc4>\x9c\xfe\x7f?\xd2%f?c5\xb7\xbe\x00\x00\x80\xbf)\xe6\x7f\xbf\xf2\xba\x7f?\xf0\xff\x7f?\xfe\xff\x7f?\xbd\xa3S>9\xff\x7f\xbf\xcb\xfd\x7f\xbf\xf0\xf8\x7f?\t\xfe\x7f?\xf6\xef\x7f?\xa8\xf8\x7f?/\xfb\x7f?\x14\xff\x7f?*\xfd\x7f?\x0c\xcb}?\x00\x00\x80?{\xc0\x7f?\xae\xff\x7f?<\xfc\x7f\xbf\x00\x00\x80?\x91\xff\x7f?\xc4Tm?\xfc\xe9\x7f?\x8e\xe3\x7f?\xc4\xe3R?\x86\xfa\x7f?\x1b\xfb\x7f?8\xfc\x7f?\xf7\xfe\x7f?\xfd\xee\x7f?\xda\xfd\x7f?\xc0$/?a\x18\\?\x95\x8a\x7f?\xfa\xf5\x7f?>\xf1\x7f? \xfe\x7f?\xa1\xff\x7f?j\x87\x7f?\xff\xff\x7f?`\xf7\x7f?]\xed~?%\xc2$?\xb3\xba\x7f?G\xf9\x7f?\x00\x00\x80?\xe0\xf8\x7f?\xec\xff\x7f?\x00\x00\x80?\xed\xff\x7f\xbf\xe2\xfc\x7f?\x17\xfc\x7f?|\xfc~?\x11\xfa\x7f?.\xff\x7f?\xe8\xe6\x7f?\xbci3?\xe0\xee\x7f?\xe5\xfd\x7f?\xa9\xf5\x7f?\xb7\xfe\x7f?\xde\xfb\x7f?\x076d?\xe3\xfa\x7f?\x02\xfb\x7f?\xb5\xdfY?H\xff\x7f?\x19\xff\x7f?\xa2`\xc8\xbe\x00\x00\x80?\xad\xf0\x7f?\xb7\xef\x7f?.\xfe\x7f?\xe1G[?gOL?\xd5\xfd\x7f?\x00\x00\x80\xbf\xc8d\x7f?\xdc\xe5E\xbfD_g\xbf\x00\x00\x80\xbf6\xf7\x7f\xbf\xfc\x93~?\xbf\xfe\x7f?\xd7\x07\xc9>\xd8p\xf7>\xdd\x89\xb1>\xde\xfc\x7f\xbf\xad\xeb\x7f?LYb\xbe\x00\x00\x80\xbf\x93\xfe\x7f?\x00\x00\x80?\x96\xfe\x7f\xbf\xf5\xea\x7f?XN\xb2>\xee\x81A>G\xe0\x93>\x00\x00\x80\xbf^\xb8C?\x82\xfe\x7f\xbf\x18\xeb\t\xbf+eH\xbfh\x80*\xbf\xbb\x93h?\x00\x00\x80\xbf\xf5\xb2]=\x00\x00\x80\xbf\x99\xfd\x7f?\xc8\xc6\x7f?_\xf8\x7f?\x01\xfc\x7f\xbf\xf4\xfa\x7f\xbfK\xfe\x7f?\xb9\xff\x7f?P\x8a\x16\xbf\xb2\xe7\x1a\xbf\xa6\xff\x7f?P\xf1\x7f\xbf\x08\xf1~\xbf\xee\xf0\x7f?,\xfd\x7f?\xc6\xfd\x7f?\xa3\x19\xb4\xbe\x95\xfe\x7f?\xc7\x83$\xbfw\xfc\x7f\xbf\\\xfc\x7f\xbf\\\xfe\x7f\xbf\xc5\xdb\t\xbf\x03\xfa\x7f?\x1c\xff\x7f?\xc2\xcez\xbf\xc7\x8c\xb1>\xef\xee\x7f?Kz^\xbf\xc0FM?@\x11\x01?\x1a\xff\x7f?}\x15z\xbf\xe3\xfc\x7f\xbf\xdc\xfc\x7f\xbf\xc7\xef\x7f\xbfB\xb7F\xbf\xcd\xff\x7f\xbf\xd8\xfb\x7f\xbf\xb7t\xb3>\x99\xf6\x7f?d\xf7\x7f\xbf\x00\x00\x80\xbfF\xdd%\xbf\xb5\xfe\x7f\xbf|\xef\x7f?\x9at\xb3\xbe\xf1\xf1\x7f\xbfS\x1e\xb3>/\x0fD\xbf\x00\x00\x80\xbf\xfc\xf3y\xbe-)\xb3\xbec\xf8\x7f\xbf\xcf+3\xbf\x00\x00\x80\xbf\x7fy1\xbf\x00\x00\x80\xbfwr\xb3\xbe$\xfd\x7f\xbfo\xf9\xa3<\xdf\x90$?\xf7\xff\x7f\xbf\xeeq\xd6\xbe\x00\x00\x80\xbf\x8f\xfa\x7f?\xd5;\xb4>\x8f\xfb\x7f\xbfZn^?\xb4\xfe\x7f\xbfj\xe7U?)\xfe\x7f\xbf\x97\xed\x7f\xbf\x89\xfd\x7f\xbf\x9b\x8b\xb2>\x13\xfd\xb3\xbe$4\xb3\xbe\xe4\xfe\x7f\xbf?\xf8\x7f\xbf\xf9Q\xb3>B8\xb3>\x85\xf8\x7f\xbf\xc8\xfd\x7f\xbf\xae\xfe\x7f\xbf\x04I\xb3>\x1e\xf3\xb2>h\xe6\x7f\xbf\x99\xff\x7f\xbf^\xb6\xb2\xbeS\x10\xb3\xbe\xab\xf6\x7f?H\xfd\x7f\xbfZ\x92\xb2>\nC\xb6\xbeW\xf8\x7f\xbf\xd1\xc0\x7f\xbfS\xd8\x7f\xbf.\xff\x7f\xbf\xf9\xf9\x7f?\xca\xfa\x7f\xbf\x0b*\xb3>\xa9\xfc\x7f\xbf8\xf9\x7f\xbf\x124\xb3>\x08H\xb3>o-\xb3>\'\xd9V?Y!\xb3>\xf2\x1f4\xbf4-\x14\xbf|\xc7\xce\xbeu\xe9\x7f\xbfc\xbd\x7f\xbfQ\xff\x7f\xbf\xf0\xff\x7f\xbf*!\xb3>\xfb8\xb3>^0\xb3>H\xeb\xb2>\x14\xf2\x7f?\xd9@>\xbe\x07y>>\xf9\xfb\x7f\xbf\x9e-\xb3>\xc62\xb3>\x07\xf8\x7f\xbf\x1a0\xb3>\xdcy\x9f>\x040\xb3>X-\xb3>\xc1\x04\xb3>^8\xb3>\x93M\xb3>qd\x8f>82\xb3>64\xb3\xbe\x07\xf3\x7f\xbfa\xfc\x7f\xbfmf\xb3>\x00\x00\x80\xbf\x0c2\xb3>\xb3\xfe\x7f\xbf?>\xb3>U2\xb3\xbeC\xf6\x7f\xbf\xfb\xfc\x7f\xbf@]\xb2>\x00\x00\x80\xbf8\xf0\xb2\xbe\x1bL\xb3>J\xa1}?\xda"\xb3\xbe\xe1\xe8\x7f?\xec\xe4m\xbd\xf4\x08\xa1\xbe\xed\xfc\x7f\xbf\xd1\xfe\x7f?\xdb\xfa\x7f\xbf\xc8.\xb3>\x83\xff\x7f\xbf\x92\xf0\x7f\xbf\x13\xf8\x7f\xbf\x1a*\xb3>\\\xff\x7f\xbf\xf2\'\xb3>\xe1\xfe\x7f\xbf\xc0\xf9\x7f\xbf\xc1\xac\x00\xbf\xb7\xfc\x7f?\xcfh\x15?\xcaw\xac>O\x9a\xb3\xbe\x10\xf2\xb2\xbe\xae&?\xbfG/\xb3>\xe10\xb3>\x05\r\x99>:\xff\x7f\xbfk\xff\x7f\xbf\x00b\xb3>u8\xb3>:3\xb3>\x97\x1c\xb3>\xb6(\xb3>\xa9&\x93>8,\xb3>\xa0K\x7f\xbf\xe1\xfb\x7f?w"\xb3>r&K\xbf$*\xb3>\xa9\x8d\xa8\xbd\x1e6[?\xb7i\x19\xbd\xe0\xe7\xb3>\xecS\xb3>\xaeK\xb3>\x883\xb3>~\x1b\xb3\xbe\x97\'\xb3>\x85\xfc\x7f\xbfE\xff\x7f\xbf\x182\xb3\xbe\x00\x00\x80\xbf|2\xb3>\x17\xfd\x7f\xbf\x914\xb3>\xae3\xb3>\xbe\xa9\xb4\xbe\t\xfe\x7f\xbf\x142\xb3>\x00\x00\x80\xbf\xe5\xf7\x7f?\x8b/\xb3>yB\xb3>\xcb\xfe\x7f?a\xfb\x7f\xbf\xabO\xb3>@2\xb3\xbe\x00\x00\x80\xbf\x7f^\xb3>J\xf9\x7f\xbf=/\xb3>\xd7\xff\x7f\xbf\x93L\xb3>\x85\xff\x7f\xbf\x97\xf7\x7f?_\xff\x7f\xbf\xcf\xe9y?\xc8\xeb\x7f\xbf\x8d\xfb\x7f\xbfws\xb3\xbe\xea\xf9\x7f?\xd2\xcb\x92\xbc\xd9\xe6\xaf>5\x8e\xf7>D\xff\x7f\xbf\x00\x00\x80\xbf\xeb1\xb3>\x824\xb3>0D\xb3>\x98\xfc\x7f\xbf\xe1\xff\x7f\xbfA\xff\x7f?\xe8\xfe\x7f?\xdc$\xb3\xbew\xcd\xe6\xbcK\xe6M?\xeb$\xb3\xbe\xdf\xfd\x7f?<\xef\xac>\x956\xb3>\x01\xfd\x7f?"+\xb3>\xd2\xf3\x7f?\x96^E\xbeF.\xb3>0\xfc\x7f\xbfP\xfa\x7f\xbf\xc4m\xb3>\xbb)I?\xea\xf5\x7f\xbf\xa9\xff\x7f\xbf*/\xb3>\x00\x00\x80\xbf-\xff\x7f\xbf\x07<\xb3>\x14\xedR?e2\xb3>\xb9@\x1b\xbf\xd0.\xb3\xbe~|\xb7\xbe%.\xb3\xbe\x008\xb3\xbe@\'\xb3>\xa3X\xb3\xbeU\x83\x0b\xbfL*\xb3\xbe\xa7\xfc\x7f?\xfb1\xb3\xbe\x00\x00\x80\xbf\xd2J\xb3\xbe\x06)\xb3>%\xff\x7f\xbf\xbd.\xb3\xbe\x01\xfa\x7f\xbf\x9be\xb3>\xcb\xff\x7f\xbf^\xf7\xb2>\xda\xfd\x7f\xbf\x04+\xb3\xbe\xc5\xf5\x7f\xbf\x00\x00\x80\xbf\x1c\x1e\xb3>\x9b@\xb3\xbe\xdd\xfa\x7f\xbf\xcb\x06\xb3>L?\xb3>\x96\x0f\xb3\xbe\x00\x00\x80\xbfQ\xff\x7f\xbf\x00\x00\x80\xbf\xbd\\\xb3>\xfc-\xb3>\xc9\xe7\xb2>\xf9\xfa\x7f\xbf\xb9B\xb3>\xe1^y\xbfu2\xb3\xbe\xe7\xff\x7f\xbf\x90 \xb3>&.z\xbfeK\xb3>\xc9\xfc\xb2\xbe\xf9\xe8\x7f?\xa7-\xb3\xbe\x0c\xfe\x7f\xbf\x9f\xf2\x7f?L\xfb\x7f?\xb0\xd9\xa9\xbe\x8e(\xb3\xbe\xb8\xfd\x7f\xbf\x00\x00\x80\xbf\x87\xfb\x7f?S\xfa\x7f?\x00\x00\x80\xbfm/\x0f\xbf\xf5)\xb3>\xec\xfe\x7f\xbfo\xff\x7f\xbfY4\xb3>@\xfc\x7f?\x06\xd7\x7f\xbf\xc5\xf5\x7f?\x00\x00\x80?\x03\x18\xb3\xbeE6\xb3\xbe\x17\xf6\x7f\xbf9\x9ce?t\x08x?\x88\xff\x7f\xbf7c\xb3\xbe\x98\x1d\xb3>\xe2,\xb3>\xee$\xb3>\xf9T\xb3>\xa2\xff\x7f\xbf\xeex\xb3\xbe\xbd\xfb\x7f?%\xf9\x7f\xbf\xa4\xfb\x7f?\xfb\xf5\x7f\xbf&,\xb3\xbe\x8d9\xb3\xbe\xae\xff\x7f\xbfn\xf8\x7f\xbf\x00\x00\x80\xbf\xc7\xfb\x7f?\xaf:\xb3\xbe\xd0;\xb3\xbe-;\xb3\xbe\xb1-\xb3\xbe\xd9\xdc\xb3>\x00\x00\x80\xbfv\xfa\x7f\xbfg\xfc\x7f?jE\xb3\xbeP\xf6\x7f\xbf\x95\xfd\x7f?<\xda\xaa\xbe\xf3\xf6\x7f?\xd0-\xb3>\xa5\xf1\xa8>\x00\x00\x80\xbf\x1a\x1f\\>\xae\xf5\x7f\xbf\xcc\x0b\xb3>\xc0\xff\x7f?\xe1)\xb3>\xcd\xf2\x7f\xbf\x00\x00\x80\xbf62\xb3>\xc33\xb3\xbe\x1c\t\x9a>\xdc\xff\x7f?k\xf4\x7f\xbf\xeb\xff\x7f\xbf\xe7=\xb3\xbe\x7f\xf7\x7f?\x97m\xe8\xbe\xc38\xb3>i<\xb3\xbe\xc4;\xb3>\x9f\xff\x7f\xbf\xb64\xb3\xbe\xf3\n\xb3\xbe\xee\x13\xa8>\xd2)\xb3>\xfb0\xb3>\x954\xb3>>Un\xbf\x01\xb0\xc6\xbd \xf3\x7f?\xe0\x94\xa8=<\xf2\x7f?\x0b\xf4\x7f?\xf7\x18\xb3\xbe\xfb\x15\xb3\xbe\x88\xf6\x7f?\x81\xa8\t\xbf\xbc4\xb3>\xf6\xfa\x7f\xbf\x0e\x82\xb3\xbe\x0bO\xb3\xbeQDx?s\xf8\x7f?\xef/\xb3>\xed\xea\x7f\xbf\x8e\xfe\x7f\xbfG\xb9\xfe\xbc\xe02\xb3\xbe\x85\xfd\x7f?\xe31\xb3>?,\xb3>\xe4O\xb3\xbeV-\xb3>\xe2p\xb0>\x00\x00\x80\xbf=\x17\xb3\xbe\x00\x00\x80?\x1a\xb8\xb2\xbe\x00\x00\x80\xbf@)\xb3>\x8c@\xb3\xbe\xb59\xb3>Gc^\xbc`3\xb3>\x00\x00\x80\xbfP\xdc\xb2>\xf8\n\xb3\xbe\xed6\xb3\xbe\xa2\xc7|?\x125\xb3\xbe<8\xb3>\xfc8\xb3\xbe\xe83\xd6>\xa7\x05\xdb>k\x10\xe9<52\xb3>}:\xb3\xbeV\x95\xb2>\xbd\xfa\x7f\xbfb\x06\xb3\xbe\'\xb1\x8e\xbe\xc0+\xb3>^\xff\x7f\xbf\xc5-\xb3\xbeD\xf2\x7f\xbf?f\xb3\xbe\xf7bt>2+\xb3\xbe/H\xb3\xbe\xfa,\xb3\xbe\xa4-\xb3\xbe\x1e3\xb3\xbe\xde/\xb3\xbe\x9c\xf9\x7f?EH\xb3\xbe\n\xc64?\xd7\xfb\x7f?\x14\xcd~?\xf9l\xb3\xbeE4\xb3>\xd9\xf6\x7f\xbf]\xf6\x7f?\x00\x00\x80\xbf\xd9;\xb3\xbe??\xb3>$Z\xb3\xbe\xb27\xb3>\x044\xb3\xbe\xc9O.\xbf\xba\x14\xb3\xbe^<\xb3\xbe`4\xb3\xbe}A\xb3>,5\xb3\xbe{WW\xbex#\xb3>\x03J\xb3>\x19\xe3\xb2>\xf4\xfd\x7f?\xfb\x1d-\xbfA3\xb3\xbe*5\xb3\xbe\x00\x00\x80\xbf\xc4\xed\xb2\xbe\xd8\xba\xad\xbe\x8f\xd5\x7f\xbf\xbb\xff\x7f\xbff5\xb3\xbe\xbe\xff\x7f\xbf\xa8/\xb3>D\xde\x7f?\x8c\x1a\x01\xbf\x89\x0f\xb3>\xa87\xb3\xbe\xab/\xb3\xbe\xab \xae\xbd-3\xb3\xbem\x03\xb2>\t\xa4\x9c\xbew\xf2\r\xbd[\xdf\x7f\xbe\xc1*\xb3\xbee\xf6\x7f\xbf+\xfc\x7f\xbf?O\x0e\xbf\x85.\xb3>g\xfe\x7f\xbf\xc9+\xb3>K2\xb3\xbeK\xfa\x7f\xbf\x87E\xb3\xbe\x87\rl?h\xff\x7f\xbf\xc4%\xb3\xbe\x93;\xb3\xbe\xfb\x01\xb3>\x99K\xb3\xbe1+\xb3\xbe\x98\x0c\xac>\xf4\x8c\x9e>\xf5\xfa\x7f?\x19d\xb2\xbe\xc8\r\xb3>\x00\xfb\x7f\xbfa!\xb3>6\xf9\x7f?\xb8Q2\xbf\x97\xa9=\xbf\x0b=\xb3\xbe}\xfb\x7f\xbf\xd9-\xb3>\xea\x8b\xb2>\xd1<\xb3\xbe\x03\x1f\xb3\xbe}\x82\xb3\xbeF\xd5\xb2\xbe\xe9\xff\x7f\xbf\x00\x00\x80\xbf\xdc\xc6b?\xe5\x1b\xb3\xbeQ$\xb3>\x19\x08\x90=\x1c\x85\x08>\xb5\xfd\x7f\xbf?\xfe\x7f\xbf\xff+\xb1\xbe\x00\x00\x80\xbf\x8f5\xb3\xbe\xe8+\xb3\xbeD\xff\x7f\xbf\r\xff\x7f\xbf\x9dW\x1e\xbe\x19&\xb3\xbe\xa5\xa5\xb1\xbe\xa2E\xb3>L\xfd\x7f\xbf\x93\xf2\x7f?\xb2\xfd\x7f\xbf\xa0u\x9a>+\x08\xb3>M\xd9\x7f?\xd2\xf4\x7f?6*f\xbe\x9c/\xb3>P<\xb3\xbew($\xbe\x1d\xf5\x7f\xbfV\xee\x7f\xbf\xc0\x8e:\xbf\x00\x00\x80?\xbb\xff\x7f\xbf\xb7:\xb3\xbe\xc2\xb8\xb2\xbe\xb8\xff\x7f\xbf\xd4\xd6G>u\x96\x7f?G\xff\x7f\xbf\xfeY\xb3\xbe\x05(\xb3\xbe\x00\x00\x80\xbf\xe2\xf5\x7f\xbf\x17\xf5\x7f\xbf\xf8\xd3u>\xcdj\xb3\xbe\xff\xa7\x0e?.5\xb3>\xac/\xb3\xbefD\xb3\xbe!\xf1\xb3>d6\xb3>\xe8(\xb3>\xb1A\xb3\xbe\xb6\'\xb3>n\xfb\x7f\xbf\x0e@\xb2\xbe?\xfc\x7f\xbfbO\xb6\xbe|\xea\x7f?\xfd\xfc\x7f\xbf\x96\xce\x01>\x85\xfe\x7f\xbf\x89\x13\xb3>\xcd5\xb3\xbe\r\xf5\x7f\xbf\x7f\xb55\xbf\xf0\xfe\xb2\xbe90\xb3>\xb8\xfc\x7f\xbf=\xf1\x7f?\x90u\xb3\xbe-\xf8\x7f\xbf\xa1e"?\xc6_\xf3\xbep\xff\x7f\xbfo\xfd\x7f\xbfY"\xb3>@\x1c\xb3\xbe$I\xae\xbd\xb2\xf3\x7f?\x00\x00\x80\xbf%\xd2\xb2>\xca\xed\x7f\xbfR\xfb\x7f\xbf>N\xb3>%\xa7M>\x0c\xe8\xfd=\xa3\xa9\x8b>\x1c\xdc\x7f?\x80\x82\xcc\xbe\xd7\xef\x7f\xbf\x90\xfb\x7f\xbf\xbd\x0b\xb3\xbe\xa6\xfe\x7f\xbfy\xfe-\xbf*\xff\x7f\xbf\xde\xc1z?j\xea\x7f\xbf\xf2\xfd\x7f\xbf\xfa\xf9\x7f\xbf\xd7P\xad>\x18\xff\x7f\xbf\xe5\xac\xb3\xbe\x84+\xb3>\xe5Q\xb3\xbe/\xff\x7f\xbf\xa6|\x1f\xbf\xe3B\xb3\xbe0\xfd\x7f?\xaf\xf3\x7f\xbf\xae7\xdb>y\x99\xad>\xc1H\xb3>\x00\x00\x80?Z\xfa\x7f\xbf\xdc\xf4\x7f\xbf\xaa\xff1?\xf8\xe9\x7f\xbf\x1e\xfe\x7f\xbf\xfa\xf5\x7f\xbf\xc6^\xcf\xbe\xb8\xe5\x7f?\xa27\xb3>\xcc)\xb3>q\r\xbd>6\xf8\x7f\xbf\xfd\xce\x1d?\x1b\xfe\x7f\xbfl\xf9\x7f\xbf\xda\xe5\x7f?\xf8.s\xbfG\xe7\xc7\xbe\xec\xae\xb1>\xbd\x87\xb4\xbe-\xfc\x7f\xbf\x1c\x81\xb3>\r\xec\x7f\xbf\xe7\xfe\x7f\xbf\x0c\x84,?o8\xb3\xbe\x0f\xafY>0\xd2\xb2>n\r\xc7=:\xc8\x10>\xf5\xa9%\xbd\x00\x00\x80\xbfv\xbf\xc1\xbe\x00\x00\x80\xbff\xa92?\xea\xae\x7f?+\xff\x7f\xbf\x96\xc4\x86:5\xb9\x7f\xbf\x12\xfb\x7f?v\xf5\x7f\xbf\x00\x00\x80\xbf\xcb\xf6\x7f\xbf\xda\xfc\x7f\xbf\xa7\xfe\x7f\xbf\x8c\xff\x7f\xbf\x0b\xf7\x7f\xbf\xaf\xf9\x7f\xbf9\xe2\xc2\xbe9\x9dR\xbe\x95\xff\x7f\xbf\xdbT~\xbf\xc8\xff\x7f?\xb4,\xb3>)\r\x00>\x80\xfb\x7f\xbf\xf7\xb3\xf6\xbe\x07\xb7\x7f?\'\xff\x7f?\xaa\xd5\x7f\xbf\xc4\x80t\xbfh\xef\x7f\xbf\x9a\xef\x7f\xbf\xbe4J>\x19\xff\x7f\xbfi\x95\xb3>N\xed\x7f\xbfTa\x7f\xbf\x00\x00\x80\xbf\xa8r??\xb0\xdd\x7f?\xed\xff\x7f\xbfA\xd9\x7f?\xfc\xff\x7f?,\xf6\x84\xbd2\xf5\x7f?o\xb9\xb0>\xd4\xac|?~\n\xc1\xbe\xd5\xca\xa7\xbe\xa1\x08 >\xe7\xff\x7f\xbf\x00\x00\x80\xbfV\xce\x7f?\x84.1\xbf\xeb\xfd\x7f?q\xee\x7f\xbf\xfd\xff\x7f\xbf\xb6\xf8\x7f?\xce\xff\x7f\xbf]\xf0\x7f\xbf\xb4\xae\xe0>\xd3=N?\xf6\xff\x7f\xbf.\xafK?\x00\x00\x80\xbfS\xe4S?{\xff\x7f\xbf\x00\x00\x80\xbf\xc5vx?\xed\xff\x7f\xbf|&\xf7\xbe\x9bU\x19=\xdb\xe0\x7f?\xd0\xff\x7f?\xf8\xff\x7f?K\xfe\x7f?\\\xa9\x7f?\x04\xff\x7f\xbf\xc7.n?\xa3\xff\x7f\xbf-k\x97>$\xdfk?K\xfe\x7f\xbfj\xfe\x7f?mj \xbf\x0f\xef\x7f\xbf\xe7\xee\x7f?\xed\xf9\x7f?\xd6\xff\x7f?\xa9#\xf6>7\xd8\x7f? \xd9\xde>_\x14\xb1>p\xf0\x7f\xbf\x8e\xca\x7f\xbf\xfc\x98\x0f?\x93x1=:\xd3\x7f?\xa1\xbc\xb0\xbeS\xf8\x7f\xbfB\xfe\x7f?PS\xd1>\xcc\xf8\x7f?\xefR\x15?\x8a\xff\x7f?\xf2\xee\x7f?\xee\x98\xd3\xbe\x00\x00\x80?\x00\x00\x80?\xc3\xff\x7f?\x00\x00\x80\xbf\x00\x00\x80?8\xe1\x7f?2\x1bl?O\x0bT?9\xea\x7f?\x94\x02G\xbf\xab\xfb\x7f?\x84\xfc\x7f?\xe4\xfc\x7f?C\xff\x7f?\xa5\xff\x7f?b\xfe\x7f?\x951}?\xa7\x06\x7f?\xdf}v?\x95\xf8\x7f?\t\xff\x7f?\x8e\xfe\x7f?\xdeV5?@\xfc\x7f?\x00\x00\x80?\x8b\x91F?\xb3=\x7f?\x00\x00\x80?.\xfa\x7f?\xca\xc8\x7f?\x00\x00\x80?r\xff\x7f?\xc7\xfe\x7f?\xfa\xff\x7f?\x85\xe0\x7f\xbf\x9f\xfd\x7f?\xc9\xfc\x7f?@B\x7f?\x85\x9es?\\\xff\x7f?\xa9\xe6\x7f?\xff\xff\x7f?m\xf2\x7f?M\xfe\x7f?\x8a\xf8\x7f?\x0c\xff\x7f?\xf6\xfc\x7f?\x00\x00\x80\xbfN\xfc\x7f?\xef\xfb\x7f?\xfb\xf6{?\xc5\xfd\x8a\xbeF\xff\x7f?f\xf6}\xbf\x97\xff\x7f?\xfe\xf4\x7f?\x00\x00\x80?\xa0\xfe\x7f?\xc7\xfa\x7f?=\x00\xbb=\xeb\xff\x7f?G\x1eB?\xf9\xff\x7f\xbf\xf9\xf8\xc5>\x00\x00\x80?\xeb>\xb2>\x90Bg?6\xa4\xb3\xbe\x06\xf8\x7f\xbf\x01\xfd\x7f?\x18A\x06?,\x99\xad\xbe$\xff\x7f\xbf\x15\xf5\x7f?\x0f\xeb\x7f?\xc1\xff\x7f\xbf\x0f\xe6\x7f\xbfU;\xe7\xbe\xa0\xe6\x7f?\xc7\xf4\x7f\xbff\xee\x7f?^\xfb\x7f\xbf\x92\x8b=?=\xf6\x7f?{\xfe\x7f\xbf\xb4\x1fx>\xe6\xed\x7f?\x07\xff\x7f?\xbc\xf6\x7f?fGM?\xa9(\xb2>7\xa9x?\x00\x00\x80\xbf\x02\xe5\x7f?\xb6\x04\x7f?I\xf8\x7f?\x8b\xff\x7f\xbf\x7f\x9al\xbe\x00\x00\x80?8\xfa\x7f\xbf@\xfd\x7f\xbf\xb2\xff\x7f\xbf\xaf\xbd\xd7>\xe5\xff\x7f?\x0c\xfe\x7f?\x7f\xfe\x7f?@\t\xbe\xbe\x12\xf7\x7f?\x00\x00\x80\xbf\xde\xf0\x7f?\xd9\x81{\xbf\xca\xef\x7f\xbfA\xfd\x7f\xbf\x8d\xfb\x7f\xbf\xe0\xeb\x92>i\xc0\xba\xbe\x9e\xff\x7f?\xdb\xf9\x7f?\xd4\xa90?\xac\x94_\xbf\xe8\xfd\x7f\xbfB3\xb7>7R~\xbf\x9e\x96\x7f\xbfb@\x94\xbe@\xee\x7f\xbf\xc9A\xb3\xbe\xda\xf7\x7f\xbf\x00\x00\x80?(\xe4\xb2>\x9d\xc9\x7f\xbfP(p?$L\xb3\xbes\xe8\x7f\xbfP5\xb3\xbe\x00\x00\x80?\xe3\xfb\x7f\xbf\xa9\xef\x7f\xbfwZ\xe9<\xef1\xb3># \xb7>f/\xb3\xbe\xea\xff\x7f\xbfg\x00\xb3>\x9a\xf3\x7f?\x00\x00\x80?>\xd8]\xbc\xca\xda\x7f\xbf\x85\xf1\x7f?\x00\x00\x80\xbfo\xfd\x7f\xbf.T\xb3\xbe\x10\x88:?e<\x07?\x06y\xb3\xbe\x90\xb5\xdf\xbeXy\xa2>\xb9\xfa\x7f\xbfb${\xbe\x84\xd4\x7f\xbf\x112\xb3>\x1d{\xee\xbe\xd4-\xb3\xbe\xe8Q\xb3>j@\xb3>\xbb\xff\x7f\xbf9\xf1\x7f\xbf5.\x1d\xbf~\xde\x7f?\xf5\x08\xb5\xbe\xb9\xfb\x7f\xbfe|\x87\xbd\x00\x00\x80\xbf\xb5\xf6\x7f\xbf\xd2\xfb\x7f\xbfu\xfc\xb2\xbe\xcb\x19g\xbf\x1f\xf0\x7f\xbf\xccC]\xbe\x056~??\x9e\x97\xbe\xf3\xea\x7f?\xe3\xd9\x7f\xbfz\xfe\x7f\xbff\xb9\x7f\xbf=\xf9\x7f\xbf\xdd\xe8\x7f\xbf\x01\xf8\x7f\xbf\xbe\xea\x7f\xbf\xa34\xb3\xbe0\xf1\x7f?!\xfc\x7f\xbf\xf03\xb3>\x00\x00\x80\xbfu\x82\xb3>\xd34\xb3>w\\\xb2>t\xd9\x7f\xbf\xa3\xf4Y>\x8d+\xb3>\x88\xfb\x7f?\x8e^\xa8=\x10 \xb3>\\-\xb3\xbe\x01\xfa\x7f\xbf\xe5v\xad\xbe\xd9\xfa\x7f\xbf\x83X\xbc>\xd0\x00\x00?~;\xb3>\x1c\xc6\xaf>t\xda\x7f?\x0c.\xb3>N4\'<\x15\xfe\x7f\xbf\x9f4\xb3>-7\xb3\xbeW\xf8\x7f\xbf2;\xb3\xbe\xbc\xf9\xc7>\x95\xec\x7f\xbfs\xef\x7f\xbfS9\xb3>A\x1b\xb3>\x1a\x93c\xbf\xa3\x1c\xb3>R\xe8\x7f?\xa7\xf9\x7f?\x8e\xdc\x7f?\x95\xff\x7f\xbf\x98\xf5\xb2\xbeP9\xb3\xbe\xbc5\xb3>\xe1~h?\x1di\xf9\xbe\\<\xb6>\xc1\xfb\x7f\xbf\xfd\xf7\x7f\xbf\x8d\xd3\xb2>`\xfc\x7f?12\xb3\xbe\xb32\xb3>\xf0\n\xd6\xbdM>\xb3\xbe\x12\x042\xbeT\xf8\x7f?\x91\xb4\xb1\xbe95\xb3\xbe\xef)\xac\xbe\x11\xfd\x7f\xbf\xba\xff\x7f\xbfi\xff\x7f\xbf\x00\x00\x80\xbf\x83\x13\xb3\xbe\x8db{\xbe\x84\xfe\x7f\xbf\x082\xb3>\x00\x00\x80\xbfJ1\xb3>>X\xb3>\xff\xfa\xb2\xbe\x00<\xb3>]1\xb1\xbe(8\xb3>E\xfd\x7f\xbf\x067\xe2\xbc@\x1bq\xbf\x832\xb3>\x8d2\xb3\xbe\x14\xf4\x7f\xbf\x9d1\xb3>0\xfc\x7f?\x98\xa0\xb3>\xa61\xb3>\xd2\x82\x8a>\x99/\xb3>\x8c@\x94\xbe6?\xb3>e\xf9\x7f\xbf\xbd\xe62?\x18\xf3\x7f?\x00\x00\x80\xbfu\xfb\x7f?\x85\x905>\xc0S\xaf>\xe2\xfe\x7f\xbf"\xe0\x7f\xbf\xdcm&>\xc9\xf1\x7f\xbf{\xf4\x7f\xbf\xb6\xcd\x7f?\xe8\xdd\x7f?93\xb3>X\xff\x7f\xbf!?\xb3>m?\xb3>\xa9F\xb3>\x9d1\xb3>\xfc\xff\x7f\xbf\x87\x18\xb3>_\xea\xee\xbe\xbf$\xb3\xbecL\t\xbf\xd6\xeb\x7f?\x0f\\S?\xaa6\xb3>`-\xb3>lh\xb3\xbe\xe9\'\xb3>g\xf9\x7f??H\xb3\xbe\\\x10\xb3>Q,\xb3>\xe8\xf8\x7f\xbf\x8d\xf6\x7f\xbf\xa9\xff\x7f\xbf\xac\xff\x7f\xbf^\x1f\xb3>D8\xb3>x\xc1\xb1>\x14\xfd\x7f\xbf@\xea\x7f\xbf\x1e\xf2\x7f?9\xef\x7f\xbf\x8bC\xb3>T&\xb3>\xf7\xc3\xa7\xbdg\xe7\x08?\x1e\xfe\x7f\xbf\xe17\xb3\xbe\xeb\xf0\x7f?F6\xb3>\xe11\xb3>\n+\xb3>\xab\xfd\x7f?\xf9N\xb3>\xf3\xf9\x7f?\xcb\xfe\x7f\xbf\x1f\xd0\xb2\xbeik\xb2>ab\xaf\xbe\x04\xf1\x7f?mK\xb4\xbeH\xcc\x7f?U\x96\xb2\xbeq.\xb3\xbe\xd0(\xb3>\xed\xf8a\xbe\'\xfe\x7f?\x82\xfb\x7f\xbf\xe3\xfb\x7f\xbf\x82J\xb3>\x17\xfe\x7f\xbfi\xf6\x7f\xbf 7\xb3>\xd8\xf1\x92>\xd31\xb3>3\xff\x7f\xbf\xc0-\xb3>0\xc66>;:\xb3\xbe\x00\x00\x80?\xbeA\xb3\xbeX\xfe\x7f\xbf#9\xb3\xbeC\xd5\xa6>V\xd5[>l7\xb3>\xc9\xff\x7f\xbf\xad\x8e\xa8\xbe\x1e2\xb3>\xca\xf0\x7f\xbf\x80\x19\xb3\xbe\xca\x8f\xcd>\xf9\xfc\x7f\xbf\xb4(H?\xbcU\xb3>\xb0\xff\x7f\xbf\xf2}\xb3\xbe\xb3\x15\xfb\xbef&\xb3>\xcc6\xb3\xbe\x00\x00\x80\xbf\xe6A\xd2>l\xfc\x7f\xbf\xd4\xb6\x7f?5\xf0\x7f? \xe6\x7f\xbfo4\xb3\xbe\xfcv\xb5\xbe\xcd\x87\xb3\xbe\x00\x00\x80\xbf\x02\xfa\x7f\xbf\xa5$\xb3>\xae4\xb3\xbew\x17\xb3>\xb6<\xb3>zF\xb3\xbe\x95\xff\x7f?\xa93\xb3\xbe\xdc\x15\xb3\xbeL\xff\x7f\xbfP\x0b\xb3\xbe\x92\x91\xb4\xbe/\'\xb3>0:\xb3>O.\xb3>\xf41\xb3>\x00\x00\x80\xbf\x00\x00\x80?n/\xb3>\x94o\'=F\xff\x7f?\x05\x12\xb4\xbe\x05\xfe\x7f\xbf<:\xb3>\xbb\xf2\x7f\xbfo\xf9\x7f\xbfM\xeb\xb2\xbe\xbe3\xb3>\x10.\xb3\xbe\x83jh\xbf\xf4\x17\xb3> =\xb3>/:\xb3>B\xf7\x7f?\xa5\xfd\x7f?\xc9*\xb3\xbe\xca\xcdO?\x8c\x819?\x08\xc6\xb4>34\xb3\xbeD\x1e\xb3>\xec\xfd\x7f?\xd3\xd9\xb2>\xe6\xf0\x7f\xbf4J\x84\xbd\x1e\xf4\x7f?J\xfd\x7f\xbf\xc8\xde\x7f?\x82,\xb3>Y\xea\x7f\xbf\xa08\xb3\xbe\xaa\xff\x7f?b]\xb3\xbeF\x19\xb3\xbe\xf1\xff\x7f\xbf\xbcU\xb3\xbe\r\xfa\x7f\xbf\x00\x00\x80?\\%\xb3>\xfbT\xca>\xfb5\xb3\xbe\\\xce\x7f?\x9b\xc1\xb1>\x00\x00\x80\xbfV\xd3#?!\xff\x7f?`\x15\xb3\xbe\xebA\xb3\xbe|@\xb3>\x8e5\xb3>\x00\x00\x80?F\x14\x04\xbfYA\xb3>m\xff\x7f\xbf2\xaa1\xbel\xfc\x7f?\xad\'\xb3>\xa1\x17\xb3>\x02.\xb3\xbe\xda?\xb3\xbe\x00\x00\x80\xbf\x00\x00\x80?\xd5E\xb3>3\x0f\x91>].\xb3>\xfd4\xb3\xbe*\xfe\x7f\xbf7\x18\xb3\xbeF3\xb3\xbeg1\xb3\xbe\x95\x80\xc6\xbe?\x1e\xb3\xbe\th\xb3>>\xff\x7f\xbf\xc93\xb3\xbeUO\x00?]\x1c\xb3\xbe@/\xb3\xbe=\xfe\x7f?E\xf5\x7f?\ni\xb2\xbeH3\xb3\xbe\xb6\xb3A\xbf\x81\xef\x7f?F\xf6\x7f?\xc5\xae\xb3>e\xaa\x17\xbc\xb00\xb3\xbe\xf12\xb3\xbe_\xc9\x06?x6\xb3\xbe\x97\x11\xb3>\xb67\xb3>\xbd\xdd\x7f\xbf\xcc)\xb3\xbe\xef\t\xb5>\xfe\xfa\xb2\xbe\x95@\xb3\xbe\xe4\xfe\x7f\xbf\xdc\'\xa0>e6\xb3>\xf36\xb3>\xaa1\xb3>\xca\xf6\x7f?\xf1\xdf\x7f\xbfIW\xb3>\x16\xd9\xaf>\x00\x00\x80\xbf(4\xb3>\x955\xb3\xbe1.\xb3>\x02\xfc\x7f\xbf\xc6\xcf\x7f?T\x03\xbc>\x7f#\xb3\xbeE5\xb3\xbe\x99\xfa\x7f?\x82\xff\x7f\xbf\xe9\x0e\xb3>\x0f\xb2\x7f?\xe1!\xc7\xbe4\xf5\x7f\xbf\xcc\xb9\xe3\xbe\xa8\xff\x7f?X4\xb3\xbe\xf53\xb3\xbe%\xfb\x7f?\x83\xc3\xab\xbe\xed\x0e\xb3>\xef9\xb3\xbe\x1d*\xb3\xbe\xfb0\xb3\xbe"\x0c\xb3\xbex\xd1\xf3=\xd27\xb3>\x95M\xb3\xbe\x88\'\xb3>\x94-\xb3\xbe\x8b2\xb3\xbe\x86\xa0\xb3\xbe(+\xb3>MN\xb3\xbew0\xb3\xbe\xe5\xf6\x7f\xbfsC\xb3>\x89\xfe\x7f\xbf\xce4\xb3>\xcb\xf5\x7f?\xcd4\xb3>W)\xb3>\xab<\xb3>"-\xb3>\r3\xb3\xbe\x9c!\xb3>rX\xb3\xbe\xf6\x89\x7f\xbfz,\xb3\xbe\xb73\xb3\xbe90\xb3>\xee9\xb3\xbei\x16\xb3\xbe&7\xb3>\xb9-\xb3\xbeE2\x00\xbe\xb43\xb3\xbe\xc6\x9e\xb2\xbe\xdd\xf4\x0e\xbf\xee*\xb3>\x1b,\xb3\xbe\xab3\xb3>b\xe3\x9d\xbe\xea+\xb3>O6\xb3>\x0f\xfe\x7f\xbf.5\xb3>\xa0\xfd\x7f\xbf\xfc5\xb3\xbe>\xf5\x7f?\xa4\'\xb3\xbe\xb20\xb3>\xfe\x18\xff>\x8a\xfe\x7f\xbf\x91$\xb3>\x7f3\xb3>\xbc-\xb3> -\xb3\xbeVfH>\x8aQ\xb3\xbe_@\xc4;\x00\x00\x80\xbfE\xf9\x7f?\x1d\xfd\x9d\xbe\xf6\x16\xb3>~9\xb3\xbe\x9d/\xb3\xbeB\xdd\x7f\xbf\xa5)\xb3>G\'\xb3>\xc6:\xb3>u?\xb3\xbe\xb22\xb3>\x00\xcb\xca\xbe\x9fM\x96\xbeB5\xb3>\xaf0\xb3>\x00\x00\x80\xbf\xa5\xfd\x7f\xbf+=\xb3\xbeJ4\xb3\xbe\x80\xfc\x7f\xbf\x9f6\xb3\xbel\x1d\xb3\xbeXH\xb3\xbe*8\xb3>\xe6-\xb3>)\xf5\xb2>\xdf\xef\x7f\xbf\xf2.\xb3>\xb98\xb3>\n\xb9\xb2>i#\xb3>\xaaI\xb3\xbe\xa0\n\xb3>\xea\xd4\x7f\xbf/H\xb3>(\xfa\x7f\xbf10\xb3>{0\xb3>\xe3C\xb3\xbe\xd8\x17\xb3>\xba$\xb3>\x9e\x1cM?25\xb3\xbeii\xc0\xbe\xe5p\xb1\xbe\xd5!\xb3>\x16C\xb3>D\xfe\x7f\xbf\xd1\xf1\x7f?4\xfe\x7f\xbf\xa1v\xb3\xbe\xa64\xb3>\xba\xb4}\xbfj\x01\xb3\xbe\xa6>\xb3>f3\xb3>\xe5\x0b\xb3\xbe\xa0\xf8\x7f?\xcd4\xb3>\x1f\xe3\x7f?\xc6%\xb3\xbe\x17Q\xb3\xbe\'y\xb3\xbe\x00\x00\x80\xbf-\x19\xb3>\xbb\x08a>\x830\xb3>\xd6\x10_\xbe!\xc6\x19\xbfI\xfa\x7f\xbf\xec:\xb3>\xd8\xec\x7f?\x184\xb3>\n\x88\xbb\xbeX\x02\xb3>\xbd+\xb3>\r/\xb3>\x1b\xe7\x7f?C\x86{>G\xbc\xb3\xber\xfc\x7f\xbfM\xe2\xcf\xbe\x04\xad\xb3>\xd2\xf5\x7f\xbf\x9f\x80\x7f\xbf\xeb#W\xbfX:\xb3>\xae*\xb3\xbe8,\xb3>\x96$\xb3>\x827\xb3>\x95\x823\xbf\x94\x0e\xeb>\xf6\xfb\x7f\xbf\xc1&\xb3\xbe\x1e\xfe\x7f\xbf\x10\xcft\xbff\xe0:\xbf`\x96\xa3;Wsw?W\xee\x7f?\xb75\xa4>\x985\xb3\xbe?1\xb3\xbeO\xf5\x7f?\x9d\xed\x7f\xbf\xb3\xfd\xb2\xbe\xfa\xf0\x7f\xbf\x19<\xe7\xbc\x1a8\xb3>|+\xb3>2,\xb3>\x13U\xba\xbe\x17\xfe\x7f\xbf\xf74\xb3>\xa32\xb3>\xd1`u\xbf\x98>\xb3\xbe11\xb3\xbe\xd1\xfa\x88>\x17g\xa4\xbe:\xe0\x0f?\x00\x00\x80\xbf\x85\xcb\xb7>\x02 \xb3>\xaa\x01\xb3>\xb2\x9a~\xbf\xeb\xfe\x7f\xbfT\xf6\x7f\xbf\xca\x9f\xfd=\xf0\x9a\xab>\xf5\xe8\xeb\xbe\xae\'\xb3\xbe\x00\x00\x80\xbf\x9e\x1b\xb3\xbe\xf66\xb3>H&y\xbf\xfbN\xb3\xbebL\xb3\xbe+4\xb3\xbeQ\xd1\x7f\xbf\xd3\x8e\xa1\xbeYI\xb3\xbe\xfd>\x04?\x16\xfe\x7f\xbf_\xf2\x7f\xbf\xd57\xb3>4\xff\x7f\xbfe`\xb3>\x12\x81]> \xc0\x7f?D\xff\x7f\xbfq$\xb3>\x12J\xb3>]3\xb3\xbef\xb7\x7f\xbfZ\x88=?k\xe8\x7f\xbf\x851\xb3>\x00\x00\x80\xbf\x00\x00\x80\xbf\xa2vk\xbfhS\xb2>R\xfa\x7f?<\xea\x7f?\x1fq\xb3>\x9c\xed\x7f\xbfZ\xf9\x7f\xbf\xbbH\xb3\xbe9\xfe\x7f\xbfe\xee\xb2\xbe\xb5\x13~>\xa1F~\xbf\xa5\xef\x7f?\xcd\xff\x7f\xbf\xb0\xfd\x7f\xbf\x08\xfe\x7f\xbf\x00\x00\x80\xbf\xbc\xf6\x7f\xbf\xb5>\xb3>l\xc8\xd3>\xd5\xd7\xa1\xbev\xfa\x7f\xbf\x16G\xb3\xbe\x8f5\xea\xbe\xae.\xb3>f\xabY>\x00\x00\x80\xbf\xfb\xfe\x7f?\xe9\xff\x7f\xbf\xc5\xd4\x7f\xbfN\xfd\x7f\xbf \xfc\x7f\xbf\x7f\xeb\x9f\xbe9\xfa\x7f\xbf\xa0\xa9\xb2>{\xf5\x7f\xbf\x00\x00\x80\xbf\x80\xe9\x7f\xbfz\xff\x7f\xbf\xb5\xfe\x7f\xbf\r\xfc\x7f\xbf\xf2\xff\x7f\xbf\xf5\xff\x7f?\xadH\xcc=Z\x85\x7f\xbf8\xb9\x7f\xbfm\xcb\x7f\xbfHK\xb3\xbebGi?3\xff\x7f?\xadz\xb3\xbea\xc8\xb2\xbe\x9c\xfc\x7f?\xa72\xb3>\xf8\xfa\x7f\xbf\x92\xf7\x7f\xbf\xd1\xe0\x7f?\xdf\xfc\x7f\xbf\xe5J\xb3\xbe\x8d\xfe\x7f\xbfL\xb3\xe7\xbe\x95\xff\x7f\xbf\xcc\\\xbf\xbe\x00\x00\x80\xbf\x857\x8f>8\x12\xc3>\xd8\xeb\x7f?\xca\x0fX\xbf\xf8\xff\x7f?s\xd5\x7f?\xef\xff\x7f?\xc4%\xb3>-\xf6\x7f?\xdd\xc7\x7f\xbf\xd2#\xa1\xbe\xa1\xe4x?\xe7\xff\x7f\xbf\x10\xfc\xec>\x03\xfd\x7f\xbf\xe3\xff\x7f\xbf\x02\x02E\xbe\x16\xa0(?\xec\xff\x7f\xbf\xbe\xff\x7f?\x00\x00\x80\xbf\xfe\xff\x7f\xbf\x173y?\x17\x9c\x7f?\xd1\xff\x7f\xbf\xa0]\xb0>\x00\x00\x80\xbf\xa5\xff\x7f\xbf\xba\xff\x7f\xbf\xa8\xfc\x7f?\xb9\xfd\x7f\xbf\xfb\xff\x7f\xbf\xbc\x1f4\xbf\xd2\x94\x85\xbe\xa1\xfd\x7f?\xb7\xff\x7f?}\xdf}?<\x00\x01?}\x11\x9a\xbe@\xff\x7f\xbf^M\x14?\x00\x00\x80\xbf\x93\xf8\x7f?\xba\x9a\xb4>\xbf\xff\x7f\xbf\x00\x00\x80?\x9e\x10\x7f\xbf\xf8\t\xd8\xbe\xc8\xfd\x7f?\x00\x00\x80?\xf3\xff\x7f?\xa1v\x10=I\xd5\x7f\xbf\xb4\xe2\x7f\xbf\xcb\xfa\x7f?\xf2\xff\x7f\xbfg\xe4\x7f\xbfy\xb7\x7f\xbf)\xfe\x7f?P\xff\x7f?"\x8e\x81\xbe\xc3\xff\x7f\xbf\x86\xff\x7f?0\xdc\x7f\xbf"\xfa\x7f?q\xd7\xfe\xbeo\xff\x7f?\x1a\xf0\x7f?\xcd\t\xb6\xbe_\xfb\x7f?\x00\x00\x80?\xc8\xff\x7f?J\xfc\x7f?\x00\x00\x80?\xc3\xfd\x7f?\x00\x00\x80?\xa8\x18J?\x91\xeb\x7f?\x00\x00\x80?\xf4\xfb\x7f?\xcd\xfc\x7f?\x0f\xfd\x7f?O\xff\x7f?>\xfc\x7f?z\xfe\x7f?\t\xfd\x7f?T\x1d\x7f?\x00\x00\x80?!\xf9\x7f?]\xf5\x7f?\xa9\xfe\x7f?\x1f\x98\x84>\xe4\xfd\x7f?\xcd\xfd\x7f?\xd7\xaeQ?/\xa8~?\x00\x00\x80?\x80\xfa\x7f?\xc8\xc9\x7f?\xcb\xff\x7f?\xd4\xfa\x7f?\xf3\xff\x7f?\xfd\xff\x7f?\x9a\xdd\x7f\xbf\xc9\xfd\x7f?\xfe\xfc\x7f?>P\x7f?mS\xf0=d\xff\x7f?\x00\x00\x80?\xf5\xff\x7f?\x89\xc1\x7f?\xff\xfe\x7f?"\xf9\x7f?\x1f\xff\x7f?\xd5\xfc\x7f?\x00\x00\x80\xbf\x9c\xfc\x7f?&\xfc\x7f?\xac\x9bO?(\xca\x7f?O\xff\x7f?\xf8\x1c\x0f?\xdd\xff\x7f?\xc5\xf5\x7f?\x00\x00\x80?\xb7\xfe\x7f?\xf7\xff\x7f\xbf\xfa\xe5\x7f?\xd0\xff\x7f\xbfp\xfa\xb2>\r\xfe\x7f\xbf*\xfd\x7f\xbfV5i?\xa9\xf6\x7f?\x0b\xf7\x7f\xbfz\x82\xa5\xbeP\xfb\x7f\xbf\x9b\xe2\x7f\xbf\xa2g\xa2\xbe\xf7\xff\x7f?\xf7\xfd\x7f\xbf\xafb\x81>o\xd7q\xbf*\xfe\x7f\xbf\xd3\xfb\x7f\xbf\xdd\xfe\x7f\xbf\x00\x00\x80?E\xf3\x7f\xbf\xacM\x18>\x1b\xee\x7f\xbf>\xe7\x1d\xbf\xb6y\xee\xbe\x11pl\xbf\xf2\xfd\x7f?L\xfe\xb2>\x00\x00\x80\xbfsG\x0c\xbf@\xb7:?\xff\xcd\xb1\xbe\xd6\x03\x8e\xbe\xc6\xff\x7f?\xdb\xe5\x7f?\xc9\xff\x7f\xbfo\xbb\x7f?)\xdc\x7f?+\xff\x7f\xbf\x9b\x1f\xaf>\x8a\xef\x7f\xbf\xd6\xfd\x7f\xbf\x0e\xd7\x7f?\x05\x14\x7f\xbf\xb1\xff\x7f?B\xe15\xbe\xd0\xf9\x7f?V\xcd\x7f?\x01\xfe\x7f?\xe8\xc6\x7f?\xa6\xff\x7f\xbf\x92\xe7\x7f?/\xf3\n?\x1c\xfe\x7f\xbfn\xfd\x7f\xbfn\xf7\x7f\xbf\xa6Q\x98\xbe\xf3\xe4\x7f?\x8f\x03\x1b?\xa9\x9f\xb4>\xb8\xff\x7f\xbf\xee\x01j?\x1d\xf5\x7f\xbf\x80\xec\x7f\xbf\x8a\xff\x7f?\x04\xf9\x7f?\x02\xee\x7f?\x02\xf5\xb2>\x17\x0c\xa3>\xdb,\xb3\xbek\xf8\x7f?!?\x13\xbf\xd3\xb6\x7f\xbf\xc7\xfd\x7f\xbf\x0e\xfb\x7f?\x17\xe5\x88>\x82\xfe\x7f?a\xab\xb5>\xa8uu\xbe\x10\xff\x7f\xbfB/\xb3\xbe\xa82\xb3\xbe\x08\xa6\xf1\xbd\xa9\xf5\x7f?i\x16\xb3>z@\xb3\xbeB\xfa\x7f?r\x1d\x05<\x19\x18\xb3\xbe;\xb5\xb2\xbe\x00\x00\x80\xbf\xda\x99\xb7>\xe0z\xb3\xbe/\xa3#>\xf996\xbf\xb7Z\xb2>\x03_\xb9\xbe\xbb\xf8\x7f\xbf\xfd\x85\x92>\xd76}\xbf\xbf\xf9\x7f\xbf\xaf@\xb3\xbeG\x80\x7f\xbf\xe7[x?8.\xb5\xbe I\xb3\xbeZ\xff\x7f\xbf\x96\xec\x7f\xbf\\\x95\xb2\xbe\x93\xfb\x7f\xbf\xee\xe6\x7f\xbf`\x05\xc9>\xf0\xc9,>\x00\x00\x80\xbf\x92\xbe\xaf>\x9d\x08\xb4>\xa2\xf7\x7f?\xb8/\xb3>\x86(\xb3\xbe\x90\xfd\x7f\xbf\xf48\xa9>\x12\x0c\xb3\xbe\xa8\xeb\x7f?\xb4}\x8d\xbe\x00\x00\x80\xbfNI\xb3\xbe-/\xb3>u\xb9\xb4>\xa1\xf8\x7f? 6\xb3\xbe\x85\xf4\x7f?1}\xb3>\xe3$\xb3>\xf8+\xb3>\x86\xfa\x7f\xbf\xe8\xd2\x0e?\xf2,\xb3>{\xfb\x7f\xbf\x16\xa5\x7f\xbf\xe8\xf1\x89>c@\xb3>\xed\xf1\x7f\xbf\x90\xf2\x7f\xbfY\xd1\xb6>-\x13\x13\xbfIJ\xb3\xbeZ\xee\x7f?z\xff\x7f\xbfRJk\xbd/\xf8\x7f?|0\xb3>\xfe\xc3\x9d\xbe\x82K\xb3\xbe\xc8\x9f\xf5\xbeF\x02T\xbf\xb2\xfa\x7f\xbfz\x1c\xbe>n\x83|?\xe2\x0c\xb3\xbew\xf0:>\xf5Sy\xbc\x81\xf8\x7f\xbf$\xff\x7f\xbf\'\xf9\x7f\xbf\xe6\xfe\x7f\xbfj6\xb3\xbet>\xb3\xbe\x96\xe0\x7f\xbf10\xb3>\xc0\xaf\x8a>R\xfd\x7f\xbf\xea\xfe\x7f\xbf\x8bE\xb3>b5\xb3>\x9d\xfe\x7f\xbf\x00\x00\x80\xbf\xd8\x8e5\xbe\x17(\xb3\xbeiD\xb3\xbeNK>=\x0f\xfa\x7f?\xab?\xb3>&&\xb3>\xe5/\xb3\xbe0\xdd\x7f\xbf]\x12\xb3>\x9e#\xb3>[\xf5\xb2>\xf1\xf8\x7f?M\xbb\x1e?\xa8\x1e\xde\xbe81\xb3>E\xee\x7f\xbf\x00\x00\x80\xbf\xc2\x1a\xb3>\xc7\xf7\x7f?\xbfp8?\xff\x91n\xbfk\xfb\x7f\xbf\x04}\xb3>\xe3\xf5\x7f?B\xfc\x7f\xbf\xa3\xd0\x7f\xbf@?:>m\x9fH\xbezF\xb3\xbeg1\xb3\xbe\xfa[\xb3\xbe\x0f\x80\xb3\xbeM;\xb3\xbe\xee5\xb3>\x00\x00\x80\xbf\xab\xfe\x7f?\xb94\xb3><\xa3<?\x01\xba\xb2>\xbe\xfa\x7f?<Y\xb3\xbe\x8b\xc3O?\x88\xf9\x7f\xbf\xa5\xe4\x7f?\xaf?\xb3>\x0e)\xb3>\xfc\x1a\xb3\xbe\nh\x8e\xbd\xd4\xf6\x7f\xbf3\xff\x7f\xbfZ\xea\x7f\xbf\x15\xfd\x7f\xbf\xf5\xfe\x7f\xbfp,\xb3\xbe$8\xec>f\xeb\x8e\xbc2(\xb3\xbe\x9e=\xba\xbe9\xfe\x7f\xbf\x9e\xe3\x7f\xbfg)\xb3>\r\xca\x7f\xbf\xfd\xff\x7f\xbf\xe83\xb3>%\xce\xee\xbe\xa7E\xb3\xbeN<\xb3\xbe\x9c6\xb3>V(\xb3>\xab0\xb3>@\xb5d?\x1f8\xe7\xbe~\xa6\xdb=.1\xb3>\xd8\xfd\x7f\xbf\xc2\xe9\x7f?\xfcH4?\xf2S\xb3\xbe\xea\x19\xb3>\x99\'\xb4>\xb4\xff\x7f\xbf\\\xce\xb2>TQ\xbc\xbe9[\xb3>\xcc\xfd\x7f\xbf\xb2\xfe\x7f\xbf\xd7\xcb\x7f?14\xb3\xbe\xbf\xfe\x7f\xbfz\xb3\x0b?\xe8_\xb4>v\xf8\x7f?\x19!\xb2>\xbc\x98\xae\xbe\xaf\xfe\x7f?\xc04\xb3\xbeC\xba(?\xd1*\xb3>k\xfa\x7f\xbf\xfe\xee\x7f?\x8e1\xb3\xbe\xef=\xb3\xbe\x04S\xb2>\'M\xb3\xbe\x00\x00\x80\xbf)\xfb\x7f?\xd3\xfe\x7f\xbfa2\xb3>K\xff\x7f\xbf\xcb\xf1\x7f?v8\xb3\xbe\x9b\xce)>x\xc7}\xbf,E4\xbf?\xf4\x7f\xbfi\xe8\x7f\xbf\x00\x00\x80\xbf\xc68\xb3\xbe\'B\xb3>j1\xb3>X1\xb3\xbe\x82\xfc\x7f?<\x13\xb3\xbe\xc1\xf3\x7f\xbf\x9c9\xb3\xbe\'Z\xd2\xbe\xf5,\xb3>\xd2\xfe\x7f\xbf\x00\x00\x80?\xcd{\x7f?}+\x1e\xbf\xd8\xe0\xc9\xbeG\xe6\xb4\xbe\xc6\xfc\x7f?\xbd0\xb3\xbeb\xf3\x7f\xbfl\x18\xb3>\xa2\xb6\xbf=\xe9\xfd\x7f\xbf\xb6\xf2\x7f?\xd5\xf8\x7f?\xf5)\xb3>G\xf5\x7f\xbfh/\xb3>\n\xff\x7f\xbfV\x93\xb3>T\xff\x7f\xbf\xea\xf8\x7f?\xb9\xfc\x7f\xbf\xf2\xfb\x7f\xbfo?\xb3\xbe@6\xb3>=\xfb\x7f\xbf\x0b\xe2\x11?\xaa\xb7\xac\xbe\x00\x00\x80\xbf\x8bd\xb3\xbe\xb6\xc7\xae>\xd4.\xb3>\xff8\xb3\xbe\x06%\xb3\xbe60\xb3\xbe\xf8+\xb3\xbe\xe0\xa3\xb3>b"\xb3\xbeR\xff\x7f\xbf\xb4\'\x95\xbe\xe51\xb3>\x00\x00\x80\xbf\xd9\x1b]<,u\xb3\xbe\xdb5\xb3\xbe\x00\x00\x80\xbfF:\xb3>\x0bDy?7\xf1m>E\x91{\xbfl\xfe\x7f?\xd0\xf4\x7f\xbf\x99,\xb3\xbe\xf9\xfd\x7f\xbf\xe3\xf5p\xbf\x0e5\xb3>\x04=\xb3\xbe\xf8\x1c\xb3>\x197\xb3>>2\xb3\xbe\x87\xf9\x7f\xbf\xcf1\xb3>\x07\x19\xb3>\x00\x00\x80?\xaf\x90^<\xb0F\xb3\xbe\xbd\xf4\x7f?\x00\x00\x80\xbf$0\xb3>\x8a.\xb3\xbe\xe8\'\xb3\xbe\x19,\xb3>\x0b\xf6\x7f\xbf\xe0/\xb3>\x08\x8ao<(\x1f\xb3\xbe8%\xb3>\xe42\xb3>@\x02+?\xf3\xfb\x7f\xbfF\xf3\x13?\xd3\xfd\x7f\xbfF\x0e\xaf<\x9d\xfd\x7f\xbf\x85\xf9\x7f?\x813\xb3\xbe\x89.\xb3\xbe\x85\xf0\x7f?\xf2-\xb3\xbeS*\xb3\xbe\x8b,\x0e\xbe<I\xae>\x00\x00\x80\xbfA\x1d\xb3>:0\xb3>\x8f\xed\xb2>#"\xb3>)-\xb3>\x04\xf5\x7f?^2\xb3\xbeI:\xb3\xbe\xb0@\xb3>d\xff\x7f\xbf9s2\xbdZ\x1b\xb3>\xe8O\xb3\xbe\xdeN\xb3>\x85\x18\xb3>4\xfd\x7f?\x05\xfe\x7f\xbf\x84\x05\xb3\xbe\xd7/\xb3>\xba\x97\xa2>\x81\xf7\x7f\xbf|\x03\xe0>\x88\xb8q>\x9f\xf2\x7f\xbf=\xfc\x7f\xbf^1\xb3>\xf5\xfc\x7f\xbf}4\xb3\xbe\xdf5\xb3>\x11>\xb3\xbe\xc23\xb3\xbe,:\xb3\xbe\x00\xfd\xb2\xbe\x18%\xb3>\xda-\xb3>\xb9\xf7\x7f?\x055\xb3>\xa2\xff\x7f\xbf`\x0c1>\xa1\xf6\x7f?m1\xb3>\xbb4\xb3\xbe94\xb3>\xc2\xf5\x7f\xbf\x96!\xb3><B\xb3>G\xf6\x7f?\xbeQ\xb3\xbe\x93\xc1\xb2\xbe\xfc"\xb2>X\xfc\x7f\xbf[\xd8\xb2>T\xb3r\xbe\xa1@\xb3>\xe27\xb3\xbe\xe3:\xb3\xbev(\xb3>\xba8\xb3\xbe+L\xb3\xbe\xbd\t\xb3>\x075\xb3\xbe\xe59\xb3>\x01h\xaf\xbe\x0cC\xb3\xbe\xb4+\xb3>B-\xb3\xbe\xa6$\xb3>\xaf"\xb3\xbe\x9b(\xb3>\xb6\xf9\x7f?k<\x12;\x8d\x844?\x95\xa4\xd6>=\xff\x7f\xbfI\xe8\xb2>\xc7\xea\x99\xbej\xf9\x7f?\xbf\xe9\x7f\xbf\xe9\x17\xb3\xbe\xe6\xf8\x7f?\x1a\x1b\xa7\xbe\x1f0\xb3\xbenJ\xb3>\xa3L\xa9\xbe\xb5-\xb3>\x0c\xfd\x7f\xbf\xef\x99\xd0\xbdz6\xb3\xbe\x99Y\xb0\xbeB\xaf\xb9>\xe40\xb3>\xf7\xe6\x7f\xbf]\xf3\xb1\xbeM\xf0\x7f?_+\xb3\xbe\xbc\x9e\xb3>A9\xb3>\x0f,\xb3\xbe\xae7\xb3\xbe\x1e\xf6\x7f\xbf\x1b\xfc\x7f?\xbe\xff\x7f\xbf\x18\x11\xb3>Y\xff\x7f?\xbdB\xb3\xbe\xce+\xb3>?\xc7\x7f?\xb5%\xb3\xbea\xfb\x7f\xbf\xdc,\xb3>4\xa5\xb2\xbe\x87\x1c\xb3\xbe\xac-\xb3\xbe\x05A\xb3\xbev3\xb3>\x12\x16\xb3\xbe\x1f3\xb3>\xd8\xa3P>)5\xb3>\x90\xf0\x7f\xbfLV<?\xaf\xe6\x7f?&x\xb1=\x196\xb3\xbe:5\xb3\xbe\xea3\xb3\xbe\xae\x8f\xb2\xbe\xfa.\xb3\xbe\x89hq\xbf@3\xdc\xber.\xb3\xbeB\xd5\xe7\xbes\xf3\x7f\xbf\xb6\x18\xb3>\x987\xb3>\xa4-\xb3\xbeH7\xb3\xbeF\xfb\x7f\xbf4\xce\xb2\xbe\xb3\xfd\x7f\xbfA>\xb3>\x00\x00\x80?{4\xb3>\xba\xbe\xfb>\xab9\xb3\xbe\x00\x00\x80\xbf\x9ei\xb1>\xd50\xa5>\x81\xe0\xb2>\xa1%\xb3>|W\xb3>\xb7\x17\xb3>\x838\xb3\xbe\x06I\xb3>\x971\xb3>$6\xb3\xbe\xac\x10\xb3>\xd70\xb3\xbe\xb6\xf1\x82>\x94-\xb3>m,\xb3>\x147\xb3>?*\xb3\xbe\xad\xfc\x7f\xbfq\xf2\x7f?\xd1\xfc\x7f\xbf\xe9\xff&\xbf\x00\x00\x80?\xb2\x15\xb3>\xc8@\xb3>\x0eY\xaf>\x84^\x91\xbe\x9a\xf1\x7f\xbf\x98\xff\x7f\xbf\x9eN\xb3>,%\xb3\xbe\xa0,\xb3>\x96\xfb\x7f\xbf\x069\xb3\xbe\x17=\xb3\xbe\r \xb3\xbe\x82&\xb3>\xe5*\xb3\xbe\x17$\xb3\xbe\xe8\x982>\xcdLv>\xaa-\xb3>\xd42\xb3\xbe\x13+\xb3>\x97\xf6\x7f\xbfV\xcf\x91\xbe\x1f\xf5\xb1\xbe\x8a4\xb3\xbe\xbc0\xb3\xbe}\xf7\x7f?:\xfd\x7f\xbf\xb4*\xb3\xber*\xb3>\xd7#\xb3>\xd59\xb3\xbe!\x15\xb3\xbe\xc0.\xb3\xbe\x1a#\xb3\xbeN\xf6\x7f?l\xf9\xb2>\xdaD\xb3\xbe+7\xb3>d\x02\xca>{(\xb3>\xb8\xff\x7f\xbf|\xf8\x7f\xbfc\xbe\xb2>\x91*\xb3>\xa4A\xb3\xbe/\xf9\x7f\xbf\xe6\xdc\x7f\xbfNc\xb3\xbe\xaa\x99\xb2>=Af\xbf*\xb0_>_\xf6\x7f?>0\xb3\xbe#\xbd\xb1>F4\xb3>U1\xb3>\x96\xe6\xb2\xbeL\xfc\x7f\xbfE\xaer>=\xd5k?\x99\xfd\x7f\xbf\xa18\xb3>\x118\xb3>V3\xb3>\x99\xff\x7f\xbf\xc9\x14\xb3>L\xbey?\xfc/\xb3>\xbe5\xb3\xbe\x95?\xb3>R3\xb3>\xca8\xb3\xbea\xfd\x7f\xbf\xd2\xee\x7f?l4\xb3>\x18Z\xb3\xbe\x90S\xb3\xbe\\\xe6\x7f?\x1e\x10\xd6\xbd\x06\xfc\x7f\xbf\xca\x11\xb3\xbe\x1a7\xb3>\xd3Qz\xbe@|t\xbe\x17@\xb3>\x8da\xaf\xbe`&\xb3>\x80\xbc\x7f\xbf\x938\xb3>\xaa\xda\xb2>]\xfa\x7f\xbfk;\xb3>\xf8=\xb3\xbe\t>\xb3\xbe\xa1\xdb\x7f?M@\xb3\xbe\x973\xb3\xbe\x00\xee%\xbeS\x02\xb3>\x04(\x1e\xbfw\x0e\xb3>\x1b0\xb3\xbe\xc3:\xb3\xbe\x8d\x83o\xbf\x00\x00\x80\xbf\xdbp\xb3>ux4=\xb6\x13L\xbf-.\x8f\xbeO\xf4\x7f\xbf\xcc\xfc\x7f\xbf\xcd\xe8y?\xaa\xbf\xb2>\x13\xea\x7f\xbf\x0f\xcb\x1e\xbf\xcaI\xb3\xbeP2\xb3>\x16\xa7\xb3\xbe,\xdaH?!;\xb3\xbe5\xcf\xb0>\x86%\xb3>w\xeap\xbf\x82,\xb3>mo\xb3\xbe\x82\xdf\x7f\xbf\x14\xf2\xb2>w9f\xbf\xb1\xff\x7f\xbf\xdf\xe0\x7f\xbe\x0c\x1f\xb3>x\xfe\x7f\xbf\x00\x00\x80?\xe1\xb7\xb3>\x99\xfe\x7f?t\xdb\x7f?\x00\x00\x80\xbf\xd8\xff\x7f\xbf\x8bU\x14\xbec\xef\x7f\xbf\xc1\x83?\xbeR\xb6\xb6>y_$\xbfU\xfc\x7f\xbfR\xbb\xa8<W\xd9\x9f>\x00\x00\x80\xbf\x18\xcf\xb3>~\xa7\x12=\x95\x02~\xbf\xcd\xfd\x7f?\xdc\xa8\x7f\xbf\xc1\x97\x80\xbe|\xfd\x7f\xbf<\xee\x7f?\x8a\xa1\x8e\xbe\x9e\xfc\x7f\xbfg\xfd\x7f\xbft\xcf\x85>d\xff\x7f\xbf\xb7U\xb3\xbepD\xfc\xbe\xc1\xfe\x7f?\xe1\xfd\x7f\xbfN\x18\xb3\xbe\xba\xe6\x7f?\x9a\xff\x7f\xbf\xf7\xe6z\xbf\x00\x00\x80\xbf7\xf9\x7f\xbf\xc4\x9e\x9d\xbe\xf0\\\xb6>\x11\xfe\x7f?l\xf5\x7f\xbfD\xfc\x7f\xbf-\xec\x7f\xbfr\xdcH\xbf\xf7\xfd\x7f\xbf\xa3\xd0\x7f\xbf\xaf\xbd\x7f\xbf\xd5\xff\x7f?\xcf\xf7\x7f\xbf\xaa\xf3\x7f\xbf\xb3\x98\xd3\xbe\xf8\xfe\x7f\xbf\xe4\xff\x7f\xbf Y\x0b\xbf\x00\x00\x80?\x00\x00\x80?e\xb2\x95\xbe\x15MJ\xbf\xd0~\x7f?\xaa\xfc\x7f\xbf\xbc\xff\x7f\xbf\xa2\x9d\xa8>\x8c\x0be?]\xef\x7f\xbf"\xee\x7f\xbf\x00\x00\x80?\x97\xff\x7f\xbf\x00\x00\x80\xbf\xd6\xf1\x7f\xbf\x9f\xfa\x7f\xbf\xa0Q|?Y\xfd\x7f?\xf6\xff\x7f\xbf\x00\x00\x80?\x14\xf8\x7f?J\xf6\x7f?\xd0\xe5\x7f?\x8c\xfa\x7f?s\xff\x7f\xbfg\xe4\xb4\xbe#\xbb\x16\xbe\xee\xff\x7f\xbf1\xaf\xbc>C\xa6\x7f\xbfn\xff\x7f\xbf\x00\x00\x80\xbf\xd6\x98\x98>{\xfa\x7f\xbf\xb2\xf8\x7f?\x00\x00\x80\xbf\x8c\xff\x7f\xbf\x99\xff\x7f\xbf\\%\xd7>\xb3r\x7f\xbf"\x0b)\xbf\xa4\xff\x7f\xbf\x86\xee\x7f?\x00\x00\x80\xbf*\xf6\x7f\xbf7\xfe\x7f\xbf\xfc\xff\x7f\xbf\xe8\xb8j\xbf\x0f\xe0\x7f?\x81\xfe\x7f?\xb5\xff\x7f?o\xbf\x7f?V\xff\x7f\xbf\xf8\xff\x7f?\x00\x00\x80\xbfG\xff\x7f\xbfv\xf4\x7f?\xd3\xf3\x7f?\xa5\xfe\x7f\xbf\xe6\xff\x7f\xbfQ\xf4\x7f\xbf\xdf\xff\x7f\xbf\xad\xdc}\xbf\xc5\xfd\x7f?\x00\x00\x80?\xf9\xff\x7f?:\x9e\x7f?\xf0\xff\x7f\xbf\xa8\xfd\x7f\xbf\xa2II\xbf\x00\x00\x80\xbf\x98\xfc\x7f\xbf}\xf4\x7f?l\xe4\x7f?\x87\xfb\x7f\xbfr\xf1\xa6\xbe\x96\xf6\x7f\xbf\'\r\xd7>\x14\xd8\x7f\xbf\xf5MX\xbe\xf6\xfb\x7f?;\xff\x7f?n\xed\x7f?\x96y~?\xa3\xf9\x7f?@\xf8\x7f?\xf5\xff\x7f\xbf\xbe\xfb\x7f?\x00\x00\x80?\x98\xfd\x7f?\x00\x00\x80?\x00\x00\x80?\xc4\xf3\x7f?\x00\x00\x80?\\\xfb\x7f?&\xfc\x7f?\xb6\xff\x7f?,\xff\x7f?\xda\xe6\x7f?>\xfe\x7f?\xb3\xfc\x7f?\xdf\xea~?\x00\x00\x80?\xe7\xf7\x7f?\xaa\xf3\x7f?r\xfe\x7f?\xaf\xff\x7f?\x02\xfc\x7f?p\xfd\x7f?\x88\xf8\x7f?s)\x7f?\t\xa5M?0\xfd\x7f?g\xfa\x7f?\xc4\xff\x7f?\x06\xfa\x7f?\xa9\xfe\x7f?\xfd\xff\x7f?\x1e\x13\x15>j\xfd\x7f?\x86\xfc\x7f?!0\x7f?\xb4\xfe\x7f?N\xff\x7f?\x00\x00\x80?&\xf8\x7f?\xe6\xda\x7f?*\xfe\x7f?\xd1\xf7\x7f?\xf5\xfe\x7f?\xba\xff\x7f?\xa7\x1ag?\xf2\xfb\x7f?\xd6\xcf\x7f?\xe7\xd3G?\x99\xff\x7f?;\xff\x7f?\x9f\xf3\x7f?y\xff\x7f?Fn\xec>\xa2\xff\x7f\xbf\x82\xfe\x7f?K\\d?\x89\xd9\x7f?E\xc1\x7f?qU\x0b?\x98\x01\xb3\xbe\xf1.\xb3\xbe\x19\xf5\x7f\xbf\xba\xfc\x7f?\x0eU,?\xe6\x94\x82>\x00\x00\x80?A\x9a\xb1>P\xad\xb8\xbe\x82\x043?"\xfb\x7f\xbf\x1d\x1c\xd1\xbe}\xd0\x0e?\xd7\xf6\x7f\xbf\xe9Cr\xbf\xc2\xfew\xbf\x00\x00\x80?)\x00\x7f?=/\x11\xbf\x00\x00\x80?\x91ik>Z;\x7f\xbf\x08\xf2\x7f?\xb7\xb0\x7f\xbf\xc8\xf4\x7f\xbf\x00\x00\x80\xbf_\xfe\x7f\xbf \xab\x04\xbfF\xfc\x7f?fy\x08?\xcc\xf6\xb2>\x12\xd4\x7f?H\xff\x7f\xbf\xa0\xfe\x7f\xbfC\xf4\x7f?\x0e\x18\x9f\xbei(a?\x03\xff\x7f\xbf\xc5\xfd\x7f\xbf\xc5\xf4\x7f\xbf\xf9\xe2\x7f?sn\xb3\xbe\x00\x00\x80\xbfe\xee\x7f?H{\x7f?\x7f\x9dW\xbf\x00\x00\x80\xbf>\xff\x7f\xbf4h\x01\xbfx\x9f\x7f?\xdc\xd6\x7f?\xd3\xd7\x7f\xbf\n\x13\x02?\xcd$e\xbfM\xe8\x7f?\xfc\xff\x7f\xbf\x85\xfc\x7f\xbf\xcb\xff\x7f\xbf\xd1\xfb\x7f?+\xed\x7f?\x00\x00\x80\xbf\xab\x8ct\xbf\xedG\xb3>\x17\xff\x7f?f7\xb3\xbeW\xeb\x7f?Y\xff\x7f\xbf\xbd\xef\x7f?\x03M\xb3>\xee\xf8\x7f\xbf\xbc\x1b\xb3\xbeCm\xf4\xbdv\xaf\x7f\xbe\x04\xfc\x7f\xbf\x9cQ\xb3\xbe\xd5\xfb\x7f\xbf~(\xcb\xbe\x1f(\xb3>\x19=\xb3\xbe\n\xca\xb2\xbe\xadD\xb3\xber9\xb3\xbe(w\xbb\xbe\xc2X\xb3>3\xb9\xb1\xbe\x8e\xd2\xea=\x177\xb9>\xd5\xea\x7f\xbf\x91\xf6\x7f?\t\xcbt?\xb6\x1f\xb7>\xa8\x9cT\xbe9k3?\xc2\x9d8>\xe0h\x1c\xbf\xa2\xbc\xb2>\x07\xafQ>\xcc\xe1\xb0\xbe\x08*\xb3>\xb5\xfa\x7f\xbf/\xd7\xb2>\xc4\xf6\x7f\xbf\xa5\xec\x7f\xbf\x0b\xeb\x7f\xbfb\xb8\xb3\xbeNM}?\x91P\xb3\xbeW\xf9\x7f?\xb7\xe1\x7f\xbf\x93\xfb6>\x84\xc7\xb3\xbek\xd5\x7f\xbf8"\n\xbf\xff8\x87\xbe\x9a\x1d\xb3\xbe>\x15X\xbf\xa2\xff\x7f\xbf"5\xb3>\xf5\xdc\xb2>\xad*\xb3>/$\xb3>lQ\x7f\xbf\xb6\x94u\xbf\xeeT\xb3\xbe\xa6\x8b \xbf\x8c\xd7\x9c\xbe\x07\xff\x7f?p\xf5\x7f?K;\xb3>\xa8-\xb3>6\xfe\x7f\xbf8I\xb3>e>\xb3\xbe\xe6(\xb3\xbe\xf8\xff\x7f\xbfw\x1d\xd3>\xfaZ\xad\xbe\xb9<\xb3\xbe\x98\xdf\x7f?S\xff\x7f\xbfz6\x0f\xbf\xc60\xb3>\xd1\xf7\x7f\xbf\xd5$\xb4\xbe\x19\xff\x7f\xbf.C\xb3>\xdf\xab\xd9\xbe\x8c.\xb3>\xb0\xc7f\xbe\xb8\n\xb3\xbeK\xf0\x7f?7\xd1\xca>\xf7\xde\x7f?\x84G\xb3>RT\xb3\xbe\x085\xb3>r\xfd\x7f\xbf\xd1\x04\x83\xbe\xbe\xd0\xa8\xbe\x84\xfc\x7f\xbf\xe3\xf6\x7f\xbf\x9a\x92\xb3\xbe\xc7\xeb:?\xf1\xff\x7f\xbf\xe1\xb9\x7f?\xf2\xeb\x7f\xbf\xd3}f\xbf+\xf3\x7f?=\xff\x7f\xbftn\xb1>5\xc7\xb2\xbe\xf1\xff\x7f\xbf[\xfa\x7f\xbf\xc6\xfd\x7f\xbf\xb1\x1c\xb3>b\xfb\xb2>I(\xb3> \x17\xb3>\xe5\xb2\xa9\xbe\xeb\x8d\x15\xbf\xd8*\xb3>\x95:\xb3>]:!>>.\x9a\xbe\x96\xff\x7f\xbf\x00\x00\x80?\x0b4\xb3\xbe}y\x7f?\xbd<\xb3>*\xff\x7f\xbf&\x9d\xb2>0\xb2\xb3\xbeb\xff\x7f?\xe7\xf7\x7f\xbfX\xfc\x7f\xbfM=\xb3\xbe`\xf0\x7f?\xf6\xf7\x7f?\xb1\xfd\x7f\xbf\xe2\xf6\x7f\xbf\xa1\xbb\xb0\xbe\xfcU\xb3>2ZW>\xfaF\xb3\xbe\r7\xb3\xbe`\x1f\xb3\xbe\xa4\xfb\x7f\xbf\xc4\xfc\x7f\xbf\xf9\xff\x7f\xbf\xc0,\xb3>\xc8\xe5\x7f\xbfF\xf1\x7f?\xea\x05\xb3\xbe1\xfc\x7f?\xa6\xfc\x7f\xbf/E\xb3\xbe\xe6/\xb3\xbe\xe9\x19\xb3\xbe\xbd0\xb3\xbe\xf9\xfd\x7f?w\xfc\x7f\xbfH\xe9\x9a\xbe\x01\xf7\x7f\xbf\xd5\xfe\x7f\xbfN\x94l\xbe\x9e\xff\x7f\xbf\xb5\xd9\xae>\x15.\xb3>\x1b\xfb\x7f\xbf\x00\x00\x80\xbfg\xfa\x7f\xbf\x00\x00\x80?T\xff\x7f\xbf\xe53\xb3\xbe\xd6/\xb3\xbe\x87\xfe\x7f\xbf\xc99\xb3\xbe\x016\xb3\xbe\n#\xb3>\xb6X\xb4>\x04\xfb\x7f\xbf\x00\x00\x80?66\xb3>\xf0\xfd\x7f\xbf\n9\xb3\xbe\x00\x00\x80?\xd6-\xb3>\xf3]\xb3>\xcc\xfe\x7f\xbf\x906\xb3>\xf5\x8b+>\xa6\xf9\x7f?\xb0\xfc\x7f?I\xfa\x7f\xbf*-\xb3\xbe9\xfa\x7f?\xe0\x8f/\xbf\xa93\xb3>y\xfb\x7f\xbf\x05@\xb3\xbeG/\xb3>\xe9\xf8\x7f?\xfb\xfc\x7f\xbf\xc9\xd6\xb2\xbe\x96\x1f\xd3\xbeC\xfe\x7f?\xdf\x89\xb3>\xae@\xb3>\xd0\xfc\x7f?0<\xb3>\xd7\xf6\x7f\xbf7\xfe\x7f\xbf\xf4\xff\x7f\xbfu\xfe\x7f?\xa58\xb3\xbe\x12.\xb3>5\x16\xb3>B\xf8\x7f\xbf\x00\x00\x80\xbf\x18\xd1k?\xff\xfd\x7f\xbf\x00\x00\x80\xbf\x00\x00\x80\xbf\xc1I\xb3>\x8d\xf1\x7f\xbf\xf1\xc6\xb1>\x9a\xf9\x7f\xbfS\xfd\x7f?W$o\xbf\xf8\xff\x7f\xbf\xf1:\xb3>\x00\x00\x80\xbf\xef\'\xb3>\x91\xfd\x7f\xbf\r1\xb3>\x8d?\xf9>\x05\xff\x7f\xbf\xb5\xfd\x7f\xbf\xc15\xb3\xbe\x9e\xfe\x7f\xbf\x8e\xff\x7f?\xaa\xff\x7f\xbf\x9f=\xb3>s\xff\x7f?\x00\x00\x80\xbf\\\xa0\x7f\xbf5>\xb3>\xe9\xff\x7f\xbf\xf5\x01\xc6\xbe|\xd1\x11\xbfg8\xb3\xbe\xef\xf5\x7f\xbf\xe8\xef\x7f\xbfZ\xfc\x8c\xbe\xf4\xf9\x7f?\r\xff\x7f?\xd30\xb3>\x00\x00\x80\xbf\xb3.\xb3\xbe$-\xb3>\xae\xe4\x7f\xbf\xc4\xff\x7f?\x12$]\xbeH\xe3~\xbf\xb49\xb3\xbe\x97.\xb3>\x9a\xfe\x7f\xbf\xa7\xe5G\xbf\x9b$\xb3\xbe\xc1>\xb3\xbe\xc7\x1a\xb3\xbe64\xb3\xbe\x0e\xfe\x7f?\xec7\xb3>`9\xb3\xbe\xa2+\xb3\xbe\xfb\xff\x7f\xbf\xc7/\xb3\xbeHQ\xb3\xbe0\xff\x7f\xbf\xee{=\xbe\x17\xbc\xb3>\x00\x00\x80\xbfa7\xb3>\xff6\xb3\xbe\x90#\xb3>\x00\x00\x80\xbf7\xf9\x7f\xbf\xb75\xb3\xbeM2\xa4>\x01\xfa\x7f\xbf\x92\xe9\x7f?\xc15\xb3\xbe\xa5\xff\x7f\xbf\xef\x1c\xb3>1;\xb3\xbe?+\xb3\xbe,\'\xb3\xbe\xa83\xb3>\xe54\xb3>\x00\x00\x80\xbf\xfa\xff\x7f\xbf\x141\x92>\x00\x00\x80\xbf\x00\x00\x80?\xa0\x96|\xbf\x99\xe5~\xbf\xdd_\xb3\xbe\xac8\xb3\xbe\xbd\x98\x7f\xbfr\xa4T>1\xff=\xbfJ:\xb3>\x93\xda\xae\xbe\xfa\xfe\x7f?]4\xb3\xbecB\xb3>4\xf4\x7f\xbf B\xb3\xbe\\6\xe9>\xe83\xb3>\x00\x00\x80\xbf\xa8%\xb3>\x192\xb3>\xb0H\xb3>\xd8\x12\xb3\xbe\x97\r\xb3\xbe\xa8@\xb3>]\x12\xb3>\x00\x00\x80\xbfd\xf4\x7f\xbfU;\xb3\xbe\x85V\xae>\x7f\xfd\x7f\xbfc8\xb3\xbe\x00\x00\x80\xbf\xa6 \xb3>\x8d6\xb3>\xa9\x1e\xb3>g\xe9\x7f?N0\xb3\xbe\x976\xb3\xbe\xab5\xb3>\x82\xff\x7f\xbf\xaa^\xb3\xbe8)\xb3>\t1\xb3\xbe\'\x12\xb3\xbe:7\xb3>:\xd4W?\xba>\xb3\xbe>@\xb3>j)\xb3\xbe\xffi\x8f\xbe\xc4-\xb3\xbe!6\xb3\xbe\xce\x1f\xb3>\xea1\xb3\xbe\x1b%\xb3>\xcb\xd0V?/\x1d\xb3\xbe\x128\xb3\xbe\xea%\xb3\xbe&\xff\x7f?\x00\x00\x80\xbf\x00\x00\x80\xbf\x9e\x86\x06\xbbw3\xb3\xbe\xd44\xb3\xbeS\xfe\x7f?50\xb3\xbe\xe9\xff\x7f\xbf4\xc6\xb6\xbe\xbdN\xb3>\x959\xb3>\n\x9c\xb3>\xdf.\xb3\xbe\xaf\xfe\x7f\xbf89\xb3\xbek\xff\x7f?m)\xb3\xbe [\xb3>0\xf8\x7f?\x1a\xf9\x7f\xbfO5\xb3\xbe^6\xb3>3(\xb3\xbeM\\\xf4\xbd\xd90\xb3>3C\xb3>0D\xb3\xber\xf2\xb2>\x95\xaf\xdf>\x031\xb3>\xd5\xf9\x7f\xbf\x06OO>\x16\xac\xb2\xbe\x11A\xb3>\xc9\xf5\x7f\xbf]5\xb3\xbe\x85d\xb3>\xd96\xb3>`3\xb3\xbec)\xb3>[+\xcd>\x1b5\xb3\xbe\x814\xb3\xbe\xa4\xff\x7f\xbfu\x88\xac\xbeB\x80\x9a>\xb2T\xb3>\x860\xb3>\xea5\xb3>\xb8\'\xb3>\xfa\x17\x90=#6\xb3\xbe\xbc6\xb3\xbe\x82\x03\xf4<\\3\xb3\xbet\xb6\xb3>\xb71\xb3>v\x8c\xca>\x80\xc8\xb2\xbe*@\xb3\xbe\x7f~\xb1\xbe\xf95\xb3>\xff-\xb3\xbe\x913\xb3\xbe\xae&\xb3>\x00\x00\x80\xbf\x82+\xb3\xbe0\xf0\x7f?JF\xb3>\xd6-\xb3\xbef?\xb3\xbe\xda\xff\x7f\xbf\xcdv\xb9\xbe\xd2\x85m\xbf\xb9.\xb3>k\x12\xb3\xbe=5\xb3\xbehV\xb1\xbe\x00\x00\x80\xbf\x07\x89\xa4\xbe\xfe\xd6\xb2\xbd\xd1\xff\x7f?\xba3\xb3>\x85\xfb\x7f\xbf\xeb\xfe\x7f\xbf\x97S\xb3>\xf8\xb2\xb0\xbe\xa5\xe6\x7f\xbf\\\xe5\x9a\xbe\x00\x00\x80?r\xe3\xad\xbe\x12\x06\xb3>\xcc,\xb3\xbe\xa19\xb3>o\x1a\xb3>eC\xb3\xbe\xd7i\xb0\xbe\xfe2\xb3>\x8f*\x19>\x8b4\xb3>X;\xb3>\xc74\xb3>l5\xb3\xbe\x17\xf8\x7f\xbf\x89,\xab>\xd4\xceE\xbe\x8cJ\xb3\xbe\x075\xb3>_$\xb3\xbe\xfd\x1ev?\x04-\xb3>\x85Y\xb3\xbe\xbcD\xb3\xbe\xa9-\xb3\xbeT>\xb3>\xc1-\xb3>\x12\xb5F\xbf\xe2+\xab>q4z\xbe[\xfb\x7f?B1\xb3>S\xef\x7f?\xe41\xb3>\xc8\xf2s\xbf\x19\xb5\xb3\xbe\xc6\x94\xa7>\x9e\x93\xb0\xbe\xb5 \xb3>\xea\x81\xcf>\xdd\x1d\xb3>\xc87\xb3>i.\xb3>\x97-\xb3\xbe\xf1\x16\xb3>)\xe0\xb8\xbe>3\xb3\xbe%\xfa\x7f\xbf\xcd^ ?\x8b\xfb\x7f\xbf=5\xb3\xbe:\x1c\xb3\xbe\xae,\xb3>V\x0b\xb3>\x85\xe2\x7f?\x953\xb3\xbe#\xfe\x7f?bT\xb3>\x1b\xf9\x7f\xbfE\xde\xb2>\xfc\xff\x7f?\\<\xb3>\x00\x00\x80\xbf\x8a;\xb3\xbe\x00\x00\x80?\xa4\x1dw\xbf\xc38\xb3>c\xfa\x7f\xbf|\x0f\xab>f3\xb3>Y;\xb3>\xcc$\x05\xbe\x84)\xb3\xbeQ\x9a\x95\xbe\x035\xb3>\xd77\xb3\xbe\xf3\xe5\x7f\xbfd\x12\xfc>_7\xb3\xbe\xaf\xe4\x7f?c.\xb3>\xfb\xea\x7f\xbf\xfc.\xb3>\xba \x82>\xb7\xa5\x8e\xbe\x11\x0f\xb3\xbeB2\xb3\xbe\xce;\xb3>\x07S\xa0>\xd2(\xb3\xbe \xd2\x02\xbfX\xf6\x7f\xbf\xc4\x16\xe0<\xfd\xff\x7f\xbfq=\xb3>\x1d\x8f\x86>I\xdb\x7f\xbfs\xcc\x7f?\xe11\xb3\xbe\xd86\xb3>\xdc0\xb3\xbe\x9b\xd45\xbf\xbfV\xb3\xbe7,\xb3>T\xf7\xd6>Y2\xb3\xbe\x9d\xf1\x7f?B3\xb3>\xbc\xee\x7f?\x1a\x0e\xb3>\t\xf8\x7f?\xf3\xfeL>z\xf5\x7f?\x188\xb3\xbe\r\xfe\x7f\xbfK\xee\x99\xbe\xd8l\xab\xbe\x8a7\xb3>\xc9[Y\xbf\x92-\xc3\xbe!\xff\x7f?g,\xb3>\x1a\xf9\x7f\xbf\xe8/\xb3>+5\xc1\xbe\xc9\xfa\x7f\xbf\x00\x00\x80\xbf)\x9e\x81\xbe\x93\xcf}>\x95\xa6k\xbf\xfd=\xb3>\xc1\xfc\x7f\xbf]i\xba\xbe\x171\xb3>\xa7\x08\x99>Y\x8e\xab\xbe@9\xb3\xbe\xaf2\xb3\xbe\x90\xf3\xb3>\xc6+\xb3\xbet\xbc\xb2>}$\xb3>K\xdd\x7f\xbf?8\xb3\xbe \xa2\xb1\xbe\xaa\xfe\x7f\xbf\xc05\xb3>\x7f]\xab\xbe\xf0*\xb3\xbe\x02\xf4\x7f\xbf1\x1e\xaf>\xff\x1b\xb3>T\x9d%>0:\xa9=\x00\x00\x80\xbf\xbd\xeb\x7f\xbf\xc7\x1e\x9f>\x18\xcd\x7f\xbf\xaa\x92\xb2>\xd1\xeb\x7f\xbf\xaa\xb2j?\x04\xd6C\xbf\x95\xff\x7f\xbf\xa3\xe0\x7f\xbf?,\xb3>\xac\xf7\x7f\xbf(\xfe\x7f\xbf\xc2\x0c\xb3\xbe{\x92\\?5c\x7f\xbf\x92\xfd\x7f\xbf\x11\x07\xf1\xbe\x9eC3\xbf\xc6\x99l?\x1c\xfa\x7f?\x89\xfb\x7f\xbfK\xf6\x7f?w7\xb3\xbe\xd9\x9c*?\x1a\xeb\x7f\xbf\n(\xb3>~\xfd\x7f\xbf\x85R\xb3\xbe\xa2\xff\x7f\xbf\x88\xf5\x7f?e\xf8\x7f\xbf\x00\x00\x80\xbf\x08\xfa\x7f\xbfX\xee\x7f\xbf\x07\xfa\x7f\xbf\xd7\xf0,\xbf\xf5\x1b\xb3\xbew\xf7\x7f?\x13}c\xbf!\xfa\x7f\xbf/\xdb\xb2>\xfb\xff\x7f\xbf\xcb\xe0)?N\x8c\xb3>*\tY\xbd(\xda2?\xc98\x0c\xbf!\xb4\xfe\xbe\xd6\xf8\x7f\xbf\xabB\x7f\xbf\x9br\xb1=z\xd7\x7f\xbf\x85\xff\x7f\xbf\xca\x81\x07\xbf\x81\xf4\x7f\xbf\x03\xa2\xb2\xbe\xbf\xda\x8e\xbe\x00\x00\x80?f\xdb\x7f\xbf|\xbd\x7f\xbe\x00\xf0\x7f?\xfe\xff\x7f\xbf\x7f\x84\xed\xbe\x816\x00\xbe\x82\xff\x7f?\xb5\xd0\xe2\xbe\x17\xb4\xb3\xbe\x93\xe9\x7f\xbf\xce\xf9\x7f\xbf\xda\x82\x07?\x9e\x1e\x1c\xbf\x00\x00\x80\xbf\x0e\xfc\x7f\xbf\xbc\xd4X\xbe\xe2\xc0\xb2>>\xba\x17\xbfww\x85\xbe\xcd\xfb\x7f\xbf\x07\xc0\x02?\x1e\xff\x7f\xbf\xef\xff\x7f\xbf\xf2\xef\x7f?\x9aFz?\x9a\xf3\x7f?@\xcf\x02\xbf\xac\xfe\x7f?Dg\xb3\xbe8E\xb3>o\xf1\x7f\xbf\xb3\xc9\xb3\xbe\xc2\x8c\x7f?\xc03\xa2\xbe^\xe5%\xbf\x00\x00\x80?\xd0\xfd\x7f\xbf\x00\x00\x80\xbfj\xf9\x7f\xbf\x00\x00\x80\xbf\xd3\xfa\x7f?\xff\xff\x7f??\xe8\x7f?\x00\x00\x80?\xcc\xf7\x7f?\x08\xf5\x7f?\xfa\xff\x7f?\x95\xfa\x7f?\xd9\x98\xb1\xbe}\x9c{?\xb0\xccz?\xdb\xff\x7f\xbf\xf1\xfb\x7f\xbf\x98j>\xbf8\xfb\x7f?\x84F<?\xe0K\x7f?\xcf\xfa\x7f?\xa3\xf8\x7f?\xf9\xff\x7f?~\x1ci?\xdf\xff\x7f\xbf?m\x17?\xf7\xa8U\xbftd\xc9\xbeU\xfa\x7f\xbf\xe3\xff\x7f?\x81\xff\x7f\xbf\x97\xfe\x7f\xbf\xe9\xfe\x7f\xbfd\xfe\x7f?\xe8\x93\xe2\xbe\x86\xe3\x7f?\xb5\xfe\x7f?\xb6\xff\x7f?^Sk\xbfd\xe0\x7f\xbf\xf7\xff\x7f?Z\xce\x7f?\xed\xff\x7f\xbf\xc6\xff\x7f?\xe8\xf6\x7f?hF\xb3>\xea\xff\x7f\xbf\x00\x00\x80?\xbb\xff\x7f\xbfd\xfb\x7f\xbf\x94\xfe\x7f\xbf]\x95\xec\xbd\x00\x00\x80?\x99\xd0\x7f?\xea\xe4\x7f\xbf\x00\x00\x80\xbf0\xfb\x7f?O\xb3\x7f?a\xff\x7f\xbf\x0e\xdc\x7f?x\xba\x7f?N\xff\x7f?\\\xfe\x7f?\x00\x00\x80?f\x10\x7f?\x00\x94\xa2\xbe\xe5\xf8\x7f?\xc5\xff\x7f?-\xff\x7f?0\xec\x7f?=\xf7\x7f?!\xf9\x7f?\xe2\xfe\x7f?\xfd\xff\x7f\xbfk\xfb\x7f?\x00\x00\x80?]\xfd\x7f?\x00\x00\x80?\x00\x00\x80?c\xe9\x7f?\x00\x00\x80?\xff\xfa\x7f?\xc1\xfb\x7f?\x8d\xfc\x7f?\x15\xff\x7f?#\xfe\x7f?\x15\xfe\x7f?|\xfc\x7f?B\xca~?\x00\x00\x80?)\xf7\x7f?\xdd\xf7\x7f?N\xfe\x7f?\xaa\xff\x7f?\xb9\xfb\x7f?4\xfd\x7f?\x0f\xf8\x7f?\x8e\x11\x7f?\x14\x98#?\xb8\xf9\x7f?\xe7\xf9\x7f?\xbf\xff\x7f?\x8c\xf9\x7f?\x90\xff\x7f?\xf8\xff\x7f?H\xc6\xbe;\'\xfd\x7f?:\xfc\x7f?\x03\x1c\x7f?\xa7\xfe\x7f?A\xff\x7f?\x00\x00\x80?\xb2\xf7\x7f?\xb0\xf0\x7f?\x14\xfe\x7f?\xfb\xf6\x7f?\xde\xfe\x7f?5\xfc\x7f?\xb4\xe3b?\x88\xfb\x7f?C\xb5\x7f?\xc9=E?n\xff\x7f?*\xff\x7f?/\xf2\x7f?m\xff\x7f?\xe1\xd6\xc4>\xd7\xff\x7f\xbfc\xfe\x7f?\xf4\xf3g?\xee\xf9\x7f?q\x14\xb3>\x9b\xfe\x7f?\xa1Ja\xbfj]\x1f>f\xfb\x7f\xbf\x00\x00\x80\xbf\xe6\x0e\xb7>\x9e\xbc\xcc>\xed]\x9e>\x04Z\x7f?\xf8(\xc0>e\xbf\xb4\xbe\xe1\xca\x92\xbe\xc6\x12\xe8>\xba\x1d\xb3>\xcaS ?v\xc0k\xbf.\xe8\x7f?"\xf5\x7f?I\xfe\x7f?i\x95\xd8>\x00\x00\x80?l\xd4X>u\xce~\xbf\'\xa3x\xbf\xe9\xc0\xf8\xbd|z\x7f\xbf\xa7\xfc\x7f?\'\xff\x7f\xbf\x8fU5?\xa1\xf4\x7f\xbf\xedm\xba>\x99\xabj<\xcf\xfc\x7f?\xf8p\x97\xbe9\xfe\x7f\xbf\x86F\xb3>\xd9;Q>>\x81H>m\xff\x7f\xbf\x91\xe3\xcd\xbd\x85\xc1\x7f?o\xff\x7f?\xcf\xe9\xa4>\x0f\xb4|\xbf\xac\xf1\x7f?[\xbc\x7f?\xce\x92;\xbf\x00\x00\x80\xbf\x00\x00\x80?\xaf/\x7f?\xc7%I>\xdb\x89\x7f?CBV\xbf\xd4\xdcY</\xb1z?\x06\xff\x7f?\x1b\xf1\x7f\xbf\x9a\xf8\x7f\xbfX\xf9\x7f?\xc0"\x0b\xbf\xe7\xff\x7f?&\xfe\x7f\xbf\x00\x00\x80?\x06@\x0e?u\xfe\x7f?\x92\xf0\x7f?\xb3b-?=\xff\x7f\xbfJw"?\xfc\x02\xb3>\xd5\xdc\xb2\xber\xf5\x7f?jT\xb3>\xd2\x18\xb3\xbew7\x7f?\r\xfb\x7f\xbf\x0fo\xb3\xbeR\xffZ\xbdm\xfe\x7f\xbf\xf2V\xb3\xbe\xff6\xb3>\xfb\xff\x7f?9\xe9\x7f\xbf\x10\xfc\x7f?\x02\xd5\xfd\xbe\x05P\xb3>bc\xac>\xc9\xe2\x7f\xbf\x8a\xf8\x7f\xbfI-\xb3>\r6\xb3>1\xed\x12\xbe\x8c\xf8\x7f\xbf\x0b9\xb3\xbe\x00\x87\x94\xbe\x90\xaa\xb1>0\xfc\x7f\xbf\xd6h\xb3\xbe\xd5\x11\x94=X+\xb9>b\xf7\x7f\xbf\xb6\xec\x7f?\x9f\x92\xb3>7E\xb3\xbeg;\xb3>\xf0\x9er?k\x8a\xb1>\xe4^\xb3\xbe\xa2\xf9\x7f?\x98u3\xbf\xdf\xf8\x7f\xbf)\xe7\xc9\xbe\\2\xb3>\x9a\x13\xb3>q*\xb3>\x1a-\xb3>_;\xcb\xbe5\xfe\x7f\xbf\x8d\xf5\x7f\xbf\xd2\xa3\x92:1\xeb\xb2\xbe#\xfc\x7f\xbf\xcb\xfd\x7f?T<\xb3\xbe[\xff\x7f?R:\xb3>\xe6E\xb3>\xa2T\xb6\xbe\xb7\xe4T?\x8f-\xb3\xbe\x1f\xf3\x7f?=\xfe\x7f\xbf:\x14\x08?\x83k\\\xbf\x05I\xb3\xbez8\xb3\xbe\xf0\x11\xb3\xbec\x82\xb2\xbe^\xf6\x7f\xbf\x07#\xb3\xbeA\x07\xb3>k\xf9\x7f\xbfJ&\xb3\xbeB\xf8\x7f\xbfY\x87\xe2\xbe\x9f0\xb3>\'.\xb3\xbe|6\xb3\xbe\xd6\xf5\xb1=Y\xf4\xb2\xbe\x08\x81p\xbf\xbb5\xb3\xbey/\xb3\xbe\x162\xb3><\xef\x7f\xbf\\\x1f\xb3\xbeC0\xb3>~\xfb\x7f\xbf0t\x95\xbe\xba\t\xb3\xbe\x12\xff\x7f\xbfXI\x0b\xbf6\x15\xb3>d4\xb3\xbe\xce\xf9\x7f\xbfj\xfc\x11\xbfN\xf2\x7f\xbf[(\xb3\xbe\x19%\xb3>\xb6\x85\xb2>Q\x1e\xb3>\xc7\xeb\x7f\xbf\xc8u~?\xf1\xff\x7f\xbf\xf5,\xb3>\xf4H\xdc=X&\xb3>\xbc%\xef\xbeK8\xb3>\xda(\xb3\xbe\xe5\xff\x7f\xbf\xd6\xfd\x7f\xbf\xfa,\xb3\xbe\x83\x9f.\xbf\xd77\xb3>.\xf5\x7f\xbf\xb22\xb3>v=!=]>\xb3\xbeS\xc7C\xbfR\xf1\x7f\xbfj\x93\xb3>\xf3,\xb3\xbe@\xfb\x7f?\xc6\xfd\x7f?S\x11k\xbfr1\xb3>\xf7-\xb3>%\xf3\x7f\xbf\xc4\xe8\x8c\xbe\xaf\xbc\xb3\xbe\xb4\xfd\xb0\xbe\x7fC\xb3\xbe\xa7F\xb3\xbe\xf9=\xb3\xbe\xfc\xf7\x7f\xbf\xb11\xb3>\x8a-\xb3\xbe\x8d\xef\x7f\xbf\xe34\xb3>n/\xb3>\x178\xb3\xbe\x9e\x0c\xca\xbc\xd4\x86\xb2\xbe\xeb2\xb3>MO\xb3>~\xfd\xb2\xbey\xf5\x7f?t\xf5\x7f\xbf\xd7\xff\x7f\xbf\xfc\xfc\x7f?\xf3"\xb3>\xb9\xa8.={\xfc\x7f\xbf68\xb3\xbe>~Q\xbf\x81=\xb3>\xc0 \xb3>n<\xb3\xbev\xb2\xb3\xbe\x9d\xf3\x7f\xbfj\xaa\xbd\xbe\x8c\xfa\x7f?{1\xb3\xbeO\x02\xb3>\x90\xf8\x7f\xbfY\xfd\x7f\xbf\xf2D\xb3\xbe\xe2-\xdc>\xa1F\xb3>C2\xb3>k\xc4s\xbe\xfd>\xb3>8\xef\xa1\xbe8=\xb3\xbe\xf2\xfd\x7f\xbf\xea.\xb3\xbep:\xb3\xbex&\xa9\xbe\x99-\xb3\xbe\x907\xb3>\xb1\xca\x0e?\x8d\x1f\xb3>\xb8:\xb3\xbe\x00\x00\x80\xbf\x91\x16\xb3>\xfa+\xb3\xbe\xbb\'\xb3>\xbe3\xb3\xbe.W\xb3>x\xdd\x7f?\x818\xb3>k\xf5\x7f\xbf!\xb2\xb3>\xf3\xe4\x7f\xbf\x80\x88\xaf\xbe\xf0\xf6\x7f?\xd1D\xa0\xbe\x99\x9e\x9c>_5\xb3\xbe\xf2`\xb2>q4\xb3\xbe\xb2\xfa\x7f\xbf\xec/\xb3>\x00\x00\x80?K\xc0\x7f\xbfJ\xf9\x7f?\xef\x89\xb2\xbe\xc8\xf8\x7f?\x07!\xb3\xbep>\xb3\xbe62\xb3>\x1c\xfd\x7f\xbf\xab\xfd\x7f\xbf\xae6\x7f\xbfv\x14K\xbf\x83\x1c\xaa>X9&\xbf\xeb\xf5\x7f?#;\xb3>\x01/\xb3>i=\xb3\xbe\xd1$\xb3>D"\xb3\xbe\x8b\xfc\x7f\xbfq\xda\xb2\xbe\xa0\xf5\x7f?\xac6\xb3\xbem%\xb3>~\xfa\x7f\xbf\x01\xfc\x7f\xbf^\xfe\x7f?\x16B\xb3\xbe\xfa\xfc\x7f?H;\xb3>_5\xb3\xbe|7\xb3>+-\xb3\xbeQ;\xb3\xbe\x97\xf4\xb4\xbeh7\xb3\xbe\x0e\xf5\xb2\xbe^:\xb3\xbe\x97\x12\xb3>\xae\\\xb3\xbdI\xee\x7f?WC\xb3>m\xdd\x7f?\x00\x00\x80\xbf\x05E\xb3>\x87E\xb3>i1\xb3\xbe\xcc\xf8\x7f\xbf"<\xb3>e4\xb3>Q%\xb3\xbe\x00\xff\x7f\xbf\xb8/\xb3>\xb6>\xb3\xbef\xd6\xb1\xbe\xe1\xf4\x7f?\xa1&\xb3>\xc64\xb3\xbe+\xf7\x7f?\xb7\xa6\x08>\'7\xb3\xbe\xdfC\xb3\xbe+-\xb3>\xff\xf6\x7f?\x86\x99\xba\xbe|/\xb3\xbe\xdb\xa9\x03\xbfr\x10\xbc\xbe\xecY\xc3\xbc\xaa\xf2\x7f?,$\xb3>k3\xb3\xbe"1\xb3>\xfe\xee\x7f\xbf\xac~\x00\xbf\x85b\xa9\xbe\x1am\xb3\xbeo\xcd\x7f?\xef\xdd\xb2\xbe\xde2\xb3>l<\xb3>\x9b4\xb3\xbeL8\xb3\xbe?\xd8*\xbf\x9d.\xb3\xbeA6\xb3\xbe\x002\xb3\xbe\x837\xb3\xbe\xda0\xb3\xbe\x00\x00\x80\xbf\xd0/\xb3\xbe\xdaF\xb3>T\xc8\xb1>\xfd1\xb3>\xcc/\xb3\xbe\xa95\xb3\xbe[J\xb3>\xda0\xb3>\x1d1\xb3\xbe\x86)\xb3\xbe\xe2,\xb3>\x1e]\x0e\xbf,;\xb3>\xe8:\xb3>6\xdd\xb3>K\xeb\x14>\xa4\x7fL\xbe\x02\xf7\x7f\xbf*6\xb3\xbe\x84\xf9\xb2>w\xf5\x7f\xbf4.\xb3>\xa4\xe6\x00\xbf?G\xb3\xbe4\xe5D\xbf@D\xb3\xbe1,\xb3\xbeM\xf4\xbd=\xae\'\xb2\xbe\xb7B\xb3>m\xfd\x7f\xbf\x8f\xe1\x7f\xbf\x1a\xf8\x7f?\x8d5\xb3\xbe\xd8s4\xbf\xce\xf1q\xbe".\xb3\xbe\xce5\xb3\xbeL\xd3D\xbf\xe64\xb3\xbe:\xf3\x0b>\x9f\xa5\x92\xbe\xa3+\xb3>p\xf4\x7f?u%\xb3\xbeo%\xb3\xbe\'5\xb3\xbe\xc73\xb3\xbe\x17\xf4\x7f\xbf\xa1\x17\xd0=>\xe6\xb2\xbe@J\xb3>\x07G\xb3\xbe\x91:\xb3>\x98%\xb3\xbeP0\xb3\xbe\x9f\xef\x7f\xbfc2\xb3\xbe$\xfc\x7f\xbf|?\xb3>\xe75\xb3>{<\xb3\xbeT-\xb3\xbe\x06#\xb3\xbe\xcbe\xb3\xbe}\xfd\x7f?;\xfa\x7f\xbf\x9c\xf5\x7f??\x8bm\xbfM\xfc\x7f\xbf\x00\x00\x80?\xe0\xea\x7f\xbf\xb96\xb3\xbe\xf6\x98\xb1\xbeu8\xb3\xbe\xe0#\xb3\xbe\x9cB\xb3\xber9\xb3\xbe]\xfd\xb2\xbe\xdc\'\xb3\xbet\xdc\xb2>B:\xb3\xbe\x006\xb3>\xf9\xe9\x7f?\xab5\xb3\xbeY\xc6\x83=\x02"\xb3\xbeoh\xb2>\xc2\xa3\xf7\xbe\xdc,\xb3>\xe1-\xb3>_\'\xb3>\xb8\xbc\xa1\xbd\x0f\xbe\xb3\xbe}\xfc\x7f\xbf\xc0!\xb3>y\xac\xb0\xbe\xadi\xb3>\x91w1\xbf\xab0\xb3\xbe\x17\xe8\xb2\xbe\xf1\x1f\xb3\xbe]Q\x80\xbe%1\xb3>O\x01\x88>\xd7\x07\xb3>,1\xb3\xbe\x03-\xb3>\xb61\xb3>\x88\x1b\xb3\xbe\n3\xb3\xbe\xff\xcf\x7f\xbf\x9e9\xb3\xbe\xddLg>\xb0-\xb3\xbe\x197\xb3>\x853\xb3\xbe}9\xb3\xbe\x87\xf6\x8c>\xf3(\xb3\xbeG\x8e\xb4\xbebG\xb3\xbe\xad\xf3\x7f\xbf\xb4\xf8\x7f?v5\xb3>\x8f5\xb3>V\xbd\xb2\xbe\x0b*\xb3\xbe\x85%\xb3\xbe\xbb\xff\x7f?\x00\x00\x80\xbf\x8c\xfa\x7f?\x83`\xb3\xbe\x00\x00\x80\xbf\x101\xb3>\x0c,\xb3\xbe\x02Q\xb3\xbe\xb7@\xb3>\x04\xfe\x7f\xbfj4\xb3>\x84B\xb3\xbe\x1d;\xb3\xbe\x05R\xb3>\xd1*\xb3\xbe\xe1\x7f\x8b\xbe\x9e6\xb3>\xac)\xb3\xbeEE\xb3>X\xf6\x7f\xbf\x924\xb3>\x98\xe6\x7f\xbf\xb8\xe1\x7f\xbfI#\xb3>\xe1,\xb3\xbe\xf4\xff7>\xe0\x1a\xb3\xbe\x03\x8f\x86\xbe?7\xb3\xbe\xf7\xfb\x7f\xbf\x1f&\xd6\xbd\xd0\xc0>?\xaa\xf2\x7f?\xc0!\xb3\xbe\x17\xfa\x7f\xbf\xf10\xb3>\x199\xb3\xbe\'C\xbd=\t\xff\x7f\xbf\x94\x0f\xb4\xbe\xd5\x06\xab\xbe\x04\x90r\xbd\xe5#\xb3>1\xab\xb2>\xfa\xf4\x7f\xbf\xd2"\xdf\xbe\xf8\x18\xb3>ox\x7f\xbf\x07$[\xbeW\xf0\x7f\xbfV-\xb3>t\xf3\x7f\xbfG\n\xb3\xbe\x0b2\xb3\xbe\x11\xba\xb4\xbe\x99!\xb3>\xf1;\xb3>\xe5\xfa\x7f\xbftc\xb3>d\xb1\xcc<\xaa7\xb3>V6\xb3>\xf2<\xb3>h2\xb3>z\xff\x7f?\xdf\x0fd\xbf\x83\xf9\x7f?\xbdG\xb3\xbe\xd1\xef\x7f\xbfOO\xb3>\x14\x0e\xb3>3\xdf\x7f\xbf\x8a*\xb3\xbe13\xb3\xbe\xf0\xd8\x7f\xbf\xcb%\xb3\xbe\xb1(\xb3\xbe\x90O\xb3\xbe8.\xb3>[2\xb3>l\xff\x7f?\xc7.\xb3>e\xf0\x7f?\x1d\xfc\x7f\xbf\xaa\x84+>C\xd7\x7f\xbf\xb2D\xb3\xbe{*\xb3>\xfb\x80\xb3\xbe\x84-\xb3>\xee7\xb3\xbe\xd3\xbb\xba\xbe\x9d\x16\xb3\xbe\x01\xf4\x7f\xbf21\xb3\xbe\xc4 \xb3>\x82\xeb$\xbeb\xdc(\xbf\xf6\xe6\x7f\xbf\x9f\xf9\xb2>\x18q\xae\xbea\x07\xb3\xbe\xb5\xfb\x7f\xbf#-\xb3\xbe\x04\x1b\xb3>\xab\xb8y\xbf\x93\xde\x7f\xbf\xff\x85\xa2\xbe\x15\xff\x7f\xbf\xdc\xd3%\xbf\x14\xfc\x7f\xbf\xcb<\xb3\xbeEl\xb1\xbe\x00\x00\x80\xbfI\xf4\x7f?\xdd\xf8\x7f\xbf\xf1\xe0\x7f\xbf\xd7\xf5\x7f\xbf^\xfe\x7f\xbf\xa53\xb3\xbe@@\xb3>\x8d\xfe\xb3\xbe\x17\x1f\xb3\xbeC\xfc\xb2>&\'\xb3>\x1a\xae\xb3>\x0b1\xb3>)9\xb3\xbeW#\xb3>\xa5\xdd\x7f\xbf\xc1\xfa\xb2>\x14zz\xbf\xf7=\xb3\xbe\x0c?\xb3\xbe\xd9\xff\x7f\xbf\x06\xe1f\xbf\xa1P\xb3\xbe+4\xb3\xbe?\x9f\x15?\x00\x00\x80\xbfU\xfe\x7f\xbf7$\xb3>\x04\x96\x16\xbe\x99\x0c\xb5\xbe\x99)\xb3>H5\xb3\xbe\x98$\xb3\xbe\x18\xfa\x7f\xbfWM\xb3>.\xede\xbd\xee0~\xbfR\x08\xb3\xbe\xc6\xf6\x7f?E\xfb\x7f?\x95n\xb2>\r\xb0\x97>\x1eA\xb3\xbe\x15\x85\xb2>\xf0\xee\x7f?\xc8\xff\x7f?!T\xb3>\xf5\x84\xa7>\x1e\xfa\x7f\xbf\xc6\xe9\x7f\xbf\xaf\xf8\x7f?\xffR\xb3\xbe\xd5\x03\xb3>vI\xb2>\xa6\xf3\x7f\xbf\x00\x00\x80\xbf\xc7\xee\x7f?\xea\xac\x7f?.\x02#\xbf\x82\xa1\x15\xbf\xd5\xfd\x7f\xbf5\xe0\x7f\xbf\xc55E\xbe\x0c~c\xbf\xb9\xf4\x7f?-\xfb\x7f\xbf+\xe6\x7f?\xe6\x02~\xbfU\xfe\x7f\xbfn\xe9\x7f\xbfl\xf1\x7f?\xce\x13\xa0>\xe8#)?\x1a\x98\xb3>\xf99\xb3\xbe\xce\'\xf5>\x0e\xff\x7f\xbf\xc5\xe0|?\x9fl?\xbf;L\xb4\xbe\xbe\xdb\xb3>4E\xb2>v\xd2\x7f?\x00\x00\x80\xbf\xad}\xb5>M\xb5\xae\xbe\x0e\xf9\x7f?.\xf8\x7f?\xcc\x08\xb3\xbe\xf6\xfb\x7f\xbf *\xc9\xbe\xbd\xf8\x7f\xbf\xa30\x13>\x88\xfa\x7f\xbf\xde\xf9\x7f\xbf\xb4\xe2/?\xd6\xef\x7f?\x96\xfe\x7f\xbf\x00\x00\x80?\x0b\xf3#?.\xf8\x7f\xbf8\xff\x7f\xbf\xa4\x92\x7f?\xaf\xfc\x7f\xbf\xd9\x127?\xa3\xd2\x7f?{Rg\xbf\x08\x00\xb4>&\xc6\x7f\xbf\x9eN\x15\xbf\xa6\xe0V\xbf\xa5\xf6\xd4>\xc2ql\xbfT\xff\x7f\xbf\xe0\x17\xb3>\xe6\xff\x7f\xbf\xf9\xe8\x7f\xbfY\x05\xb2>\xdd\xfe\x7f\xbf\xb9\xeay\xbf\xa5\xe4\x7f?\xfc\x83y?\t\xff\x7f\xbf84\r?i\x9b|?\xcb\x131>g\x03\x1c\xbf\xcb\xff\x7f?\x82\xf0\x7f\xbfW\xf7\x7f\xbf(\x1a\x7f?\xc0\xfc\x7f\xbf\xf2\xff\x7f\xbf\xd1;\xb3\xbeq\x89{\xbf\x00\x00\x80\xbfJ\xee\x7f?\xdf\xc7\x0c>\xcd\xb4\x98>\x05dK\xbe?\xff\x7f\xbfS\xfc\x7f\xbf\xe5\xee\x7f?\x00\x00\x80\xbf\xf8\x02\xd7=+\xc9F?$\x10??\x00\x00\x80\xbf[\xd7\x7f?\x13\xf9\x7f\xbfQ\xfe\x7f\xbf\xc4\xf9\x7f?\x00\x00\x80?3\x97\x7f?\xa7\xb1o\xbfT3[\xbf\xb1\x9f\x88\xbe\xbd\xfd\x7f\xbf\xb4\xfb\x7f\xbf\xeb\xfa\x7f?\xf2\xff\x7f?^\xfe\x7f?\x00\x00\x80?K.y\xbf>\xf5\x7f?\xe8\x9d\x7f\xbf\x00\x00\x80\xbf+\xfa\x7f?\xc7+-\xbfIsy?\xd2\xff\x7f?\xdeB\x9e\xbdC\xd9\x7f?\xa2\x99w?B\x0fE?\x1a\xba\x7f?\x84\xf0\x7f?\xc7\xf9\x7f?\x98\xff\x7f?\xb1\xc89?\x0c\xd6\x7f?\xf9\xed\x16=\x01\xe9\x7f?Z\xf0\x7f?\x7f\xb8v\xbf\xf4\xff\x7f?3Hz\xbe\x8cO%>\xd5\xfe\x7f\xbfM\xdb~?\x00\x00\x80?{\xe2\x7f?\x9d\xff\x7f?\xde\xcf\x7f?\x974\x0b\xbf\xce\xed\x7f\xbf\xbf\xe3\x7f?\xc2\xad\x7f\xbf\xb5\xff\x7f\xbf\x8cX\x8a>\x14\xff\x7f?q\xfe\x7f?=\xfe\x7f\xbf\x00\x00\x80?uN)?\x94m??]\xfe\x7f?|\xf6\x7f?\xfc\xff\x7f?\xd7\xfb\x7f?\xd8\xf6\x7f\xbf\x1b\xff\x7f?\xf1\xff\x7f\xbf\xa5\xff\x7f\xbf\xd9\xe4\x7f?8\xe3\x7f?\x87\xb5\x7f?S\xff\x7f?\xc5\x11\xb2>\x00\x00\x80?\xb4\xff\x7f?\x001\xa1=\xb0\x7f\x7f?\xf0\xfe\x7f?\xd2\xff\x7f?\x1b\xfb\x7f?R\xd5\x7f?R\xfe\x7f?\xf9\xfd\x7f?\xf1\xff\x7f?\xe1\xfe\x7f?\x00\x00\x80?;\xff\x7f?\x00\x00\x80?\x88\xd4o?\xf6\xf9\x7f?\x00\x00\x80?\xb9\xfe\x7f?1\xff\x7f?\xf9\xfe\x7f?\xd4\xff\x7f?\x99\xfe\x7f?\x8c\xff\x7f?\xe6\xfe\x7f?\x10\xd1\x7f?\x00\x00\x80?\x1f\xfe\x7f?\xe2\xfc\x7f?\x9a\xff\x7f?\xeb\xff\x7f?\xda\xfe\x7f?]\xff\x7f?\xb8\xfd\x7f?\x93\xd7\x7f?\x00\x00\x80?=\xfe\x7f?\xa3\xfe\x7f?\xee\xff\x7f?o\xfe\x7f?\xa8\xff\x7f?\xfe\xff\x7f?(\xf5\x7f?^\xff\x7f?\x9b\xf7\x7f?\xb5\xd1\x7f?\xa3\xff\x7f?\xd1\xff\x7f?\x00\x00\x80?\xfe\xfd\x7f?\x80\xfc\x7f?|\xff\x7f?4\xfe\x7f?\xc1\xff\x7f?\xe4\xfe\x7f?\xadr{?\x1f\xff\x7f?\xb1\xfe\x7f?"rp?\xe9\xff\x7f?\xc5\xff\x7f?\x84\xfd\x7f?\xdf\xff\x7f?Y\xfd\x7f?\x00\x00\x80?\xa5\xff\x7f?\xb8\xff\x18?~\xfe\x7f?\x1e\xf0\x7f\xbf\xa1\xf9\x7f?\x8c\x98\x1a?\xfb\xd6\xb3\xbe\x19\xfd\x7f\xbfN\xfc\x7f\xbf\t.V\xbf\xff\x0c\x89>\xbaj\xab>\x02p~?\x00\x00\x80?\xdc\xb8\xab\xbe\x16\xff\x7f\xbf\xb6\x1d\xb3\xbe\x13\xfa\x7f?\x8f\xfa\x7f?\x04\xfc\x7f?\x17\x1e6>\x03\xed\x7f?\xa8\xfd\x7f?\x10\xfc\x7f?\x00\x00\x80?\x8f\xb3t?\xb7\x94}?U\xff\x7f?\xf2\xfd\x7f?\x17\x7f\x19?\xf9\xfa\x7f?#\xff\x7f\xbf\xf10\x7f\xbf\xe8\x17~?\xbe\x81A?\'\xeb\x7f\xbf\xea\xfd\x7f?j\xf9\x7f?\xfb;\xd3\xbe5\xfa\x7f\xbf\xf6\xff\x7f?}\xf8\x7f?\x8f\xff\x7f\xbf\xa6\xfe\x7f\xbf8\xf6\x7f?\xae\xff\x7f?"\xf4\x7f?]\xc5R\xbf\xe8\xfc\x7f?\xf0\xe7\x7f?\xbf\xfd\x7f?n\xf5\x7f?-\xf3a?\xf6\xa6j?\x1e\x80\x7f\xbfK\xfa\x7f?\xc8\xfa\x7f?\xcd\xcc{>\xba\xe4\x7f?\x07\xff\x7f?\xc7\xfa\x7f\xbf\x1a\xf8\x7f\xbf\x04\xfe\x7f?\x00\x00\x80?\xe0\xfe\x7f?(\xfe\x7f\xbf\xca\xef\x7f?\xed\x15\xb3\xbeV\xb5\x7f\xbd\t\xfa\x7f\xbf\xec\xdb\x7f?2\xc9\'>\xd0_\xb3\xbe\xb3\xff\x7f?\xa5\xf2\x7f\xbf\xf4\xff\x7f?d?%\xbf\xbcU\x17\xbf\xe9\xfe\x7f\xbf\xc78\xb3>\x19\xe8\x7f?\xaf\xd5\x7f?\xdfs\xb3\xbe\xa8\xfe\x7f\xbfs\xfb\x7f\xbf\x80\xf8\x7f?\xb1\xfd\x7f?\x82\xf7\x7f\xbf\xbb\xd7\xb2\xbe\xcdx\xda\xbe\x00\xf9\x7f\xbf\x00\x00\x80?\xf6\xf9\x7f\xbf\xbe\x01\xd0>\x8e\x93%\xbf\\\xf4\x7f\xbfY\xf7\x7f\xbf\xcd5\xb3\xbe\x9e\xa1\x0c\xbf\xa9\rC\xbf\x83\xff\x7f\xbf/\xa3\xe8\xbe_\xfb\xb2\xbe\xfd\xee\x7f\xbf\x8f\xf5\x7f\xbfA\xfe\x7f?\xcb\xf5\x7f\xbf^\xf7\x7f\xbf\xbb\xb4\xb2>\xcd\x8fJ\xbf\x8b\xe5\x06?$_l\xbf\xa1\xd4\x7f?\xb8R\x7f\xbf\xaa\xfd\x7f?c\xad\xea\xbeI\x87\xb3\xbe\x81\xfd\x7f\xbf\xcd$\xb3>\xd6B{\xbf\xf5\xff\x7f\xbf\xf9\xfd\x7f\xbf,\xf4\x7f\xbf\xd5\xa5\xb1>\xd7\xf9\xb0\xbe\x13\xffp?@;\xb3>\xa4=\xb3>~\xf7\x7f?~2>>q\xe5\x7f?6\xca\x8c\xbeqh~\xbfP\xfd\x7f?10\xb3\xbej\xd6\xb2>hJ\xb3\xbem\xfe\x7f\xbf>\xf0\x7f\xbfx:\xb3\xbeo>\xb3\xbes\xb4\xb3\xbeT\xfa\x7f\xbf\x0e\xfc\x7f?\xc5\x94\xb2\xbe=\xf7\xb4\xbe+\xf2\x7f\xbf\x80\xa9|\xbf\x01\x10\xb3\xbe\xefZ\xb3><w\x8d\xbe\x1c=\xb3\xbe\xeb\x1b\xb3>Z\xbe\xb2\xbe\xef\x90\xc9\xbe\xcf\xac\xb3>\n\xf1\x7f\xbf=\xfd\x7f\xbf\xc6\xfb\x7f\xbf\xda\xeb\xcf\xbe\x1e%\xb3\xbe\xff\xc4w\xbf\xe5E\x07\xbeU^u\xbf\x14L\xb3\xbe\xcd\xde\x7f\xbf\xae\xa7\xb2>{\x86\x82>A\x86\xe1<\x96\xca\xc6>u\xf9\x7f\xbf\xb6(\xb3\xbe\xe7\xf7\x7f?;,\xb3\xbe\xd6\x95\x0e\xbd\x88\x1a\xb3\xbe\xb64\xb3>\x00\x00\x80\xbf\xf0\x07_\xbf\x9a\x9d\xca:\xc8O\xb3\xbe\xc3\xca:\xbf\xad\x9f\x7f?\xdco\xb3\xbe\xeb\xff\x7f\xbf\x19A\x1d\xbfsf\xb3\xbe\r\xfe\x7f\xbfz\xe0#\xbe5<\xb3\xbe\xf9\xfe\x7f\xbf\xc1\xfb\x7f\xbf4\xc9*\xbf\xb8\xbf\x91\xbe\xce\xfe\x7f?\t\x0c\xb3\xbeE\x1f\xb3>\x00\x00\x80?B)\xb3>\x966\xb3>\x11>\xb3\xbe\xaf\xf2\x7f\xbf\xeb\xf2\x7f\xbfs0\xb3>\xc49\xb3>\xc0\xed\xf2\xbd\x8aM\xb3>[2\xb3\xbe\xd84\xb3\xbeD\x01\x85=n\xa5\xb2\xbe\x947\xb3\xbe\xa6\x08\x18\xbfUV\xb3>\xfa\xe4d\xbf_3\xb3\xbe\xcc\'\xb3>\xaf\x02\xb3>\xde\xfb\x7f\xbfG/\xb3\xberC\xb3>\x04\x04\xb3>\xa9\xda\x1e\xbe`\xfb\x7f\xbf 5\xb3>\xec\xf1\x96\xbe$\xbc\xa2>\xd0.\xb3\xbe_\xf7\x7f?\xfc!\xb3\xbe\xe83\xb3>\x064\xb3>Y$\xb3>\xfc\xfa\x7f\xbf#6\xb3>\xfc0\xb3\xbeu\xfa\x7f?\x85"\xb3\xbeS\x1f\xb3>\xb5\xeb\x7f\xbf"2\xb3>\xf2\xff\x7f\xbf1?\xb3>\x87[\xb4\xbe\x82\xf3^\xbeE\x0c\xb3>\xa8U\xb3\xbeo1\xb3\xbe\xff5\xb3\xbe\xd70\xb3\xbe\x82.\xb3>06\xb3>}\xce\xbb\xbe\x13\xf2\x7f??\xf1\xb0\xbeQF\xb3\xbe\xb2U\xaa\xbdA\xcf;\xbf\xc5@\xb3>V9\xb3>HE\xb3>\xf3\xf7\x7f?\xb1\xfe\x7f\xbf\xd1\x80/\xbf\x08\x13W=R<\xb3\xbe?\xf5\x7f\xbf8R\xaf>\xf4\x1f\xb3>+\xbe\xb2\xbe?0\xb3>\'\x02L>\xed*\xb3\xbeH&\xb3\xben6\xb3\xbe\x1b-\xfc\xbe\xe2,\xb3>\x08*\xb3>%4\xb3>\xf0;\xb3\xbe{5\xb3>\xd3&\xb3\xbe|I\xb3>\xca5\xb3>C\xfa\xb2>U.\xb3>\xdeD\xb3>\x90$\xb3\xbe\x8f\xfe\x7f?C4\xb3>\x9e\xb1\xbc>T.\xb3>\xe3\xfa\x7f?\x8c/\xb3\xbe7\xd25?\x07\xe7\x7f?\xb5\xe8\xb2\xbe\xb9#N=\x17\xfd\x7f?\xd61\xb3\xbe\r\xeb\x7f?\xd3?\xb3>g?\xb3\xbe\xa1j\xae\xbex&\xb3>\x1e\x1d\xb3\xbe\xc7\xf6\x7f\xbf\x0f\xf7\x7f\xbf\r;\xb3>r\x16\xb3>\xc1\xf0\xb2>\xed\xfd\x7f\xbf\x02C\xb3\xbeo2\xb3\xbe\x82\x18\xb3>\xc0!\xb3\xbe\x01(\xb3\xbeP+\xb3\xbe\xaa\xf4\x7f?\xb0&\xb3\xbe\x931\xb3>\xc6.\xb3\xbeC5\xb3>\xf2:\xa3>Ei*\xbf\xb83\xb3\xbe\x11\xfc\x7f\xbf"2\xb3\xbe\x13>\xb3>\xa6\xf8\x7f\xbf\x87)\xb3>\xec/\xb3>\xba9\xb3\xbe\x89\x1f\xb3\xbe\x07"\xb3>\x18-\xb3>\xed6\xb3\xbeM\'\xb3\xbe\xc43\xb3>\xde\xbd?\xbf\x97,\xb3>\x99*\xb3>14\xb3>\xad-\xb3\xbev=\xb3>\xfd)\xb3\xbe\xdc\xea\xc9\xbe\xbd4\xb3\xbe\xa6\xd08\xbf\xa43\xb3>\xf90\xb3>T/\xb3\xbe\x9b\x14\xb4>\n/\xb3\xbe<>\xb0>\xbd \xb3\xbeA\xf8\x7f?/#\xb3\xbe\x1c\xcd3\xbd\xc97\xb3\xbe\x00\x12w\xbf\x8fu#\xbf\xf0\xf4\xb2>\xea\x1d\xb3\xbe\x8e4\xb3\xbe\xcf4\xb3>6I\xb3>&4\xb3\xbe\xb7\xf9\xb2>\xa4\xfe\x7f?\xb8-\xb3\xbe\x81(\x12\xbf\x8c\xee\x7f\xbf\xbb9\xcf\xbd6\xfc\x7f\xbfW\xdb:\xbf$1\xb3\xbe\xf63\xb3\xbe6/\xb3>:<\xb3>\x82\xfb\x7f\xbfN()?M1\xb3>z,\xb3>\xa7kd?\x1a:\xb3\xbe-\'\xb3>\x833\xb3>\xa4%\x82<5\x0b\n?f3\xb3\xbe\x80\xde\xae\xbe\xf7\x19\xb3>\xb3\xf5\x7f\xbfW\xbf\xaf\xbe`\x08\xb3>\xc0*U\xbf\\y\xb1\xbe\xea\x8c\xf5\xbb>\xfd\x7f\xbf\xdc5\xb3>re\xb2>\x02*\xb3>\xdcC\xb3\xbe]3\xb3\xbe\x8f\'\xb3>E\xe2\x7f?U3\xb3\xbeU(\x8b\xbe5\x82\xb1\xbeAE\xb3\xbe\xf72\xb3>~\xf2\x7f\xbf{/\xb3>R4\xb3>\x8d~\xa0\xbeR)\xb3>\x12/\xb3\xbe\t\x9d6\xbe\xd7K\xb3\xbe\xce\x1d\xb3>\x1b1\xb3\xbei.\xb3>\xf7O\xb3>\'7\xb3>ZI\xb3\xbeO\x08\xb4>\xb4E\xb3\xbe\xa6\xfb\x7f\xbf\x86\x04\xb3\xbe\xd5o\xb5\xbe5-\xb3>\x964\xb3\xbe\xa5\xf9\x7f?\xc8\x1e\xb3>\x00\x00\x80\xbf\x9eU\xb3>\xa69\xb3\xbex\xfe\x7f\xbf\x1e<\xb3\xbe,\xf6\x7f\xbf\xbb*\xb3\xbe\x87/\xb3\xbeZ\x10\xb3>f\xfc\x7f\xbf[$\xb3\xbe\xd9\xfc\x7f\xbfnq\xa4>r\xfb\x7f?\xbe\x83\x15\xbf\xac\x1b\xb3\xbe\xf2.\xb3\xbe\xc18\xb3\xbe\xdc\xe4\x7f\xbf7\x18~\xbf\xd9\xc8\x7f\xbf\xd9)\xb3>\xfc\xf1\x7f\xbf\xe9\x0fh\xbfc\x1d\xb3>\x88\x94z\xbfU\x13\xbb\xbe\xb7,\xb3><\xfc\x7f\xbfN\xb4\xdd\xbb\xd9/\xb3\xbe}\x0f\xb3>\'\xfd\x7f\xbf\x962\xb3\xbe\x93)\xb3\xbe\xd2\x91\x04\xbc\x901\xb3\xbe\x9e.\xb3>\xfa)\xb3\xbe\xc9\xc3\x7f\xbf\xb1\xbf\xb4\xbe\xf6B\xb3\xbe\xd1\xf2\xac>\xb88\xb3>\x93=\xb3\xbe\xec\xfd\x7f\xbfn,\xb3\xbe\x92M\xb3\xbe\xfa*\xb3\xbe\xf1\xf9\x7f\xbf^2\xb3\xbe\x0c\x1f\xb3\xbe\xd9\x0f\x9c\xbe\xef;\xb3\xbea\x1b\xb3\xbeg\xe75=\x84\xed\x7f\xbf\x053\xb3>\xbb#\xb3>\xf7&\xb3\xbeY\x9f{\xbf!\x0e\xb3\xbeW.\xb3>F/\xb3>\x00\x00\x80\xbf\xcd\xfd\xb2>\xb6\xacP\xbf\x00\x00\x80\xbfj\xb0\x7f\xbf\x99\xfc\x7f\xbf\x851\xb3\xbe03\xb3\xbe}\x13\xb3>\xb85\xb3\xbe\xc79\xb3>\xe0\xfb\x7f\xbf\xe2;\xb3\xbe\xf9\xd1\x7f?\xcfA\xb3\xbeL0\xb3\xbe\x078\xb3>\xf2\xf1\x7f?\xd8\xff\x7f\xbf\x00\x00\x80\xbf=\xfa\x7f\xbfL\xf5\x7f?\xce\xdb\x7f\xbf\x94\xea\x7f\xbfm(\xb3\xbe\x8b\x14\xc9\xbe\x18\xf9\xe9\xbe\xd5:\xb3\xbe%\xfc\x7f\xbf(@\xb3>\xd97\xb3\xbe\xd3\xe5\xb2\xbe\\\xf6\x7f\xbf\xa8\xfc\x7f\xbf\x83\xbe\xb3>\xaf$\xb3>J*\xb3\xbe\xd9\x1a\xb3\xbe\x93`\xb3\xbe\xbc\xff\x7f\xbf\x86\xf6\x7f\xbf\xad\xf2\x7f\xbf\x08_\xb3> \xfa\x7f?\x1e<\xb3>\xbd\xfe\x7f\xbf\xe4\xb0\x04\xbf{~\xab\xbe\x01\xf9\x7f\xbf\x8c\xf3\x7f\xbf\xb9\xec\x7f\xbf\xb83\xb3>\xe7\x05\xb3>,k\xf0\xbe\x89D\x0b\xbfc*\xb3>\xc9\xff\x7f\xbfr\xf3\x7f? D\xb3\xbe\xe85\xb3\xbeG\x96\x08\xbf\xdbUz\xbf\x05)\xb3>g\xfe\x7f?-"P\xbf\x8c\xa6\xb3>^U\xb3\xbe\xcd\xfd\x7f\xbfQ\xc8\x7f\xbf\xb0\xfe\x7f\xbf\xa0F\xb3>\x92.\xb3>\x81\xc6%\xbe\xbd<\xb3\xbe\xba\xf7\xd4>\xce\xff\x7f\xbf\xda\xf5\x7f\xbfv\xfd\x7f?\xd4W\xb3\xbe\xdd-\xb3>\xc3\xee\xb9\xbe!\xec\x7f?\xf1\xff\x7f\xbfA\xf3\x7f\xbf\xa0X\xb3\xbe\xde\x8a\xb3\xbe\xe1\xf1\x7f?\xaeB\xb3\xbe(5\xb3\xbe\x01\xf7\x7f\xbf\xb3\x86\xaa\xbe\x00\x00\x80\xbf\x1b\xed\x7f\xbf\x85\x18\xb3\xbe\x8d\xf8\x7f\xbf#\xf9\x7f\xbfD+\xb3>\x15\xe8\x7f\xbf\xa6\x16x\xbf\\=\xb3\xbe\xa55\xb3\xbe]\xe8\x7f\xbf\xcfG1\xbf\x00\x00\x80\xbf\xda\xe6\x7f\xbf\xeb\xfe\x7f\xbf\xe9\xa52?BJ\xb4\xbeL\xf8\xff\xbd\xbf\xfc\x7f\xbf\x96\xff\x7f??nz>\x00\x00\x80\xbf\x00\x00\x80\xbf\xea\xf4\x7f\xbfS\xf4\x7f\xbfM\x8f \xbeW\xcd\xb3\xbe"3\xb3\xbe\x7f9\xb3\xbe\xaf\xfa\x7f\xbf5\x0f\x94\xbe\\.\xb3\xbe7-\xb3\xbeB\x8e\x97\xbeOD\xb3\xbeXD\xb3\xbe\xe4+\x88\xbe\xf9\xfe\x7f\xbf\xe5|A\xbf\x07.\xea\xbec\xfa\x7f\xbf\xb0\xf4\x7f\xbf\xc9\xff\x7f\xbf\xefH\xb3\xbe\xcc6\xb3>\xe1\xbc\x7f\xbf\xbe\xfd\x7f\xbf\xd4\xc6p\xbf}\xda\x1d?\x94\xfc\x7f\xbf\x0c\xf7\x7f?\x00\x00\x80\xbf\\l\xdc\xbe\t\xf8\x7f?\x82\xf0\x7f?-\xff\x7f\xbfR2\xb3\xbe\x0cm\x7f\xbf\xc2\xf6\x7f\xbfM\xe5\x7f?\xe9\xfd\x7f?\xf5C\xb3>\xaa\xf5\x7f\xbf|\x15\x7f\xbfR\xfe\x7f\xbf\xb4\x1c\x83\xbe\xf9\xb0\xe7>,Xt>\xd18z\xbeF\xfe\x9e>.\xfb\x7f\xbf\xd9\xe6\x7f\xbf\x16Uv\xbf&{/=\xce\xf4\xb2\xbe\x9cE(\xbfX\xff\x7f\xbf\x97\xd6}=\x00\x00\x80\xbfc\x01\x12>|t\x7f\xbf\x8c\xfd\x7f\xbf{\xfc\x7f\xbfj\x9e\xb3>\xaa\x18\x19\xbd<\xe3\x7f\xbf\xdc\xed\x7f?z\xfa\x7f\xbfd T?\xbc\xfd\x7f\xbf\xd1<\x01\xbfY\'\x1d?\xf1\xe1\x7f?wf\xb3\xbe\x00\x00\x80?\x10\xa1M?n\x1aT>h>\xb3\xbex\xfe\x7f\xbf\xb2\x18\xb1\xbe\x7f\xff\x7f\xbf\x86\xf5\x7f\xbf\xea\x0e\xb3>\xa0\xcaR?\x00\x00\x80\xbf\x00\x00\x80\xbf\x07\xfb\x7f\xbf\xdd\xff\x7f?\x00\x00\x80\xbf\x92\xb7)\xbf\xb1\xf4\x7f?\xe7\xc8\xb3\xbe\x00\x00\x80?\x86\xfa\x7f\xbf\x17\xed\x7f?\xbe\xb9T?\xb5\xf0\x7f\xbf\xad\xff\x7f\xbf\x12\xf1\x7f?\xb3\xff\x7f\xbf\x11m\xf8>\x89\xa2\xb3>}\xfb\x7f\xbf\x80\xff\x7f\xbf@\xf6\x7f\xbf\x00\x00\x80\xbf\xbaO\xb4>\xa4\xc0D\xbf\x9f5\\\xbe\\\xc2\x7f\xbf(\xee\x7f?\xfcc\x1a\xbf[\xfd\x7f?%\xf6\x7f?u\x0eZ?\x90\xdf\x7f\xbf\xce\xff\x7f\xbf\x1a\xd7\xb0\xbe\xbf\xf9\x7f\xbf\xca\x7f\x06\xbe\xb5\xff\x7f\xbf\xe9\x8d\x7f?\x9d\xfe\x7f\xbf\x96\xff\x7f?1\xa9\x7f?\xb9\xfe\r?~~\x7f\xbf\xe3\xea\xba\xbe\xe4\xb5\x18\xbfxy\x1f?\xee\xff\x7f?\xb2\x98>\xbf\xdb\xcb\xb7>\x15\xfd\x7f\xbfI\x9aT\xbe\xc4A\xf4>\xce\xd1\x7f?a\xa3\xdc>\xf4\xff\x7f?7Mi?\xa5\xfe\x7f\xbfcV\xe7\xbdp\xf9\x7f\xbf\xab\x08\xde\xbe\xe6!\x14\xbe\x00\x00\x80\xbf\xe4\xf8\x7f?9\xfe\x7f?C\x87\xb3\xbe\x00\x00\x80\xbf\x0e\xfc\x7f\xbfN\xfa\x7f\xbfF\xfd\x7f\xbfV\xac\x7f?\xaa\xfa\x7f?V\xff\x7f?\x00\x00\x80?\xae+{?\xfa\xf4\x7f?\xc4\xff\x7f\xbfJ\x8f\x94>\xa3\xfb\x7f?\x01\xf3\x7f?&\xff\x7f?\x9b\xb1\x7f?\x9d\x01r<\xf5\xf6\x7f?\xc0\xc8~\xbf\x00\x00\x80\xbf\x00\x00\x80?L\xff\x7f\xbf\x89g|?^\x16,\xbf\x03\xc3h\xbf\x00\x00\x80?\xe4\xfd\x7f?\xc1\xfb\x7f?\x86\xfc\x7f?\x1b\xff\x7f?\x00\x00\x80?s\xfa\x7f?\x9b\xa1\x7f?\xff\xf9\x7f?~\xfb\xc2>\x02\xf8\x7f?4\xff\x7f?\xba\xff\x7f?\'fj?\xbdc\xfc=6\xfd\x7f?\xe4\xff\x7f\xbf\xf1\xff\x7f?\xb6\x889?f\x01\xa5>p\xfa\x7f?\x1e\xb0g\xbf\x9d\xfb\x7f?\x9e\xfe\x7f\xbf\xf8\xff\x7f?\xf2?q\xbf*\xfd\x7f?\x00\x00\x80\xbf\xf4\xff\x7f?\xbb\xff\x7f?A\xff\x7f?\x00\x00\x80?\xca\xff\x7f??\x01\x93>\x9e\xff\x7f?\xf7\xf6\x7f?\xdd\xfe\x7f?4\xfc\x7f?\xce\xff\x7f\xbfW\xff\x7f?\xe9\xff\x7f\xbfk\x1e\x85\xbeh\xff\x7f?\xfd\xff\x7f?nA\x02\xbfm\xff\x7f?\xe43"?\xfd\xf2\'?\x98\xfe\x7f?\xd9\xe5\x7f?\x7f\xfa\x7f?Q\x0cG\xbf\xb8\xf1\t\xbf\xabVt\xbf"\xd2e\xbf\xe2\xebY\xbf\xc5\xc3;>2\xcbc?\xa2\xfep\xbf^\xe8!;e\xba0\xbfK\x87C>\xcc\xef\xec\xbe\x17\xc0h\xbfD+\x82>+\xa7*\xbf\xc7\xfav\xbf-\xdeK\xbf_\xfc\x96>;(,?-\x98\xf5\xbeKg[\xbfC^D\xbf\x1aD\xc9>\xc6\x98\x0e?g\x14\x18?\xb9\x17F\xbf\xe8_\xe0=\xf9)\x8e\xbe\xbcx\xd9\xbe\xab\'\xea\xbe\xd5\x1a\xd0\xbe\xaa\xb7\x13\xbf:\xa4q\xbf\xdb\x83\x94>\xf0\x97\xe4>\x0f\xf7+\xbfDT\xa4=[\x1f^?@\xbe\x9c\xbe\xcf\xed\n?n\x97\x93\xbd7t\xcc\xbeR\x81\x00?G\xb3\x0e\xbf{\xb9j?\n\x98\x12?8\xa1y?cGb?J\x1fI\xbfj\xb0I?[\xb3\xc9\xbd\xf4\xa6\xff>\xf9a\xb8>J\x15\x0e\xbe\xd0\xf0\x9a\xbe\x1b\x15\xd7\xbc\xe4c\x1e\xbf\x8f\xc6\xc7>\xd2\xdd6\xbf\xa2\x98.?\xb4tV?\x1e\x86q\xbf\x8c\xdc\xf7\xbb\x8a\xd4G?\xac\xfc\x7f?\xbc\xb2\x7f?i\xcc\x7f?\x82\xf4\x7f\xbf\xd0\xff\x7f?\xcb\xc6\x7f?\x9d\x82x?\xc4\xfa\x7f?\x90\xfe\x7f?\x06\xfd\x7f?Y\xc3\xe9>\xcaS1?v\x8d\x7f?\xea\xf5\x7f\xbfB\xfa\x7f?\xbe\xfa\x7f?\x9e\xfd\x7f\xbf\xf7\xfe\x7f?\xa5\xff\x7f?\xbd\xfd\x7f?\x0f\xfc\x7f?\xa0Z\x83><\xd7\xea=X\xf5\x7f?\xec\xf2\x7f\xbf\x05\xfe\x7f?\x1d+\x0f\xbe \xfb\x7f?\xad\xfc\x7f?\x16\xff\x7f\xbf\xf8\xdb~?\x00\x00\x80?!\xe9\x7f\xbf@\xcdx\xbf\xff\xff\x7f?\x04\xdb\x7f?\xc5\xff\x7f?o\xfe\x7f\xbfS\xfd\x7f?\xae\xfe\x7f?U\xe2\x7f?Q\xff\x7f\xbf\xea\xdc}?2_\x9e\xbb\x00\x00\x80?\x07\xdfA?\x01\xc1\x7f?X\xb7\x7f?\x8d\xe0z\xbf\xa4\xfe\x7f?\xf2.\x7f?\x9e\x97\x7f\xbf\x83\xfa\x7f?\x14\x81\x7f?o\x02#?\xf5\xff\x7f?\x11\xff\x7f?\x91\xee\x7f?U\xff\x7f?o\xff\x7f\xbf\x00\x00\x80?*\x82i;F\xfd\x7f\xbfn\xff\x7f?\xb9\xfe\x7f?\x1a\xfd\x7f\xbfF\xf8\x7f\xbf\xea\xe4\x7f\xbf\xcb\xfb\x7f?\xff\xb1\x7f?\xdd\xe8\x7f\xbf*\xff\x7f\xbf\x00\x00\x80?7\xfe\x7f?\xc2\x1e\x9c>\x8b\xfe\x7f\xbf0\xfd\x7f?9\xfe\x7f\xbf"\xfa\x7f?e\xfd\x7f\xbf1\xe1\x7f?\xf2\xfb\x7f\xbf\x86\xde\x7f?\xb8\xfd\x7f?Q\xad\x1f?\xdf\x03\xf4\xbe\x83\xf9\x8c>\xe2\xf4\x7f?\x00\x00\x80?\xfc\xfd\x7f?\x00\x00\x80\xbf\x7f\xfb\x7f?\x90\xe9\x7f\xbf\x00\x00\x80\xbf\x00\x00\x80\xbfH"\x00\xbfH!\x8f>"A{?\xe0\xe3\x7f\xbf\xa5\xd6{?\x04\xe3\x7f?\x00\x00\x80\xbf]h\xb3\xbe\x00\x00\x80\xbf\x80J\xb5>\xc0\xa8\x7f\xbf\xae\x838\xbe\x00\x00\x80?\x05\xa2\xd4>\x00\x00\x80?\xbd\xec\x7f\xbf\xc5\xed\xb2>\xea\xff\x7f\xbf\xac\xfc\x7f\xbf\x16&\xa1\xbe\xab\x18i\xbf\x86\xfa\x7f?\xfe\xff\x7f\xbf(\xa6\xab\xbe\x98\xf3\x7f?N\xf2\x7f\xbfl@\xf2\xbe\x87\xe9\xa8\xbe}\xfe\x7f\xbf\x00\x00\x80?\xf2?\xb3>\x1e\xfe\x7f\xbf\xe6\xfc\x7f?\x06\xfc\x7f?\x91\xfb\x7f\xbf\xa4\xf6\x7f\xbf\xbb\xff\x7f\xbf(\x13\x0c;`\xe3\x7f\xbf\xc5\xfc\x7f\xbfi\xfe\x7f\xbf\x12\x92\xb2>\x1b:\xb3>\xc6\xfe\xb3>+\xfd\x7f\xbfQ\xf3\x7f?#\xfe\x7f\xbfH\xa9\x7f?\xfd\xfc\x7f\xbf5<\x83>\x89\xfc\x7f\xbf :\x1e?\x04\xcf\xca>B\x07\xc7\xbd\xd7\x8dp?\xc2a\xae\xbd\tt\x90>\x00\x00\x80?\xfb\xcf\xb2>\xb5\xc8\x7f?\x04n\xb3\xbe\xde\xdb\x7f\xbf\x880\xb3\xbe\x00\x00\x80\xbf\xdd\x933\xbf`\xa4\x95=i\xf7\xb1\xbe\xa0\xf8\x7f\xbf\ns\xba\xbe\xdd~3?n\xe4\x7f\xbf\xe0\xa2\t\xbf\xcfB\xb3\xbe\x87\xdc\xb2>\xed\xff\x7f\xbf\xe8G\xb3\xbe\x00\x00\x80?\x03\x16\x7f\xbf\x00\x00\x80?\x00\x00\x80\xbf\xf87\xf1>\x00\x00\x80\xbf\xfdT\xc9>\xfc\xf8\x7f?\xea\xef\x7f\xbfV\xfa\x7f?\xc7\xfd\x7f\xbfn\x83\xd2\xbeN\xfa\x7f??\xee\x7f\xbf\xc5\xfb\x7f\xbf|\xeb\x7f?\x0e\xd8\xc2>g\xfa\x7f?\x00\x00\x80\xbf\xf8\xfd\x7f\xbf(\xfe\x7f?\xf0\xfc\x7f?\xb8\xf2\x7f\xbf\x8d7\xb3\xbe\xd1\xfe\x7f\xbf\xa32\xb3\xbe\x15\xff\x7f\xbf5\xfa\x7f\xbf\x1e\xfd\x7f\xbfL\xff<?\xe4L\x0b\xbf\x01\xbb\xb5\xbe\xca\xff\x7f\xbfGY\xb5\xbe\xf6\x1c\xb3\xbe\xbb\xbb\xb1>\xac-\xb3\xbe\xaa\xd1\xe9=,\xfa\x7f\xbf\x94\x1b\xb3>O\xcc~?t\xad\xaf\xbe\xa69\xb3>G\xe7\xab\xbe\xeb\xd4`\xbfW\xf3\x7f?5\xe0\x7f\xbf\xfc9\xb3>V\x95\xb1\xbe\x07|\xb3>y|\xb2\xbe\x00\x00\x80\xbf\xbe\x8b\x95\xbcX-\xb3>\x14\x1f*\xbf\xc06\xbc>`\x17\xb3\xbe\xf4{\xb3\xbe\x9c\xf7\x7f?\xa9\xe4\xde\xbeL \xb3>\xcfH\x86<\x19\xfb\x7f\xbfs\xbfm?\xa2\xfa\x7f?\xdc\xca\x7f\xbf\xbd\xf8\x7f?\xc0\xff\x7f\xbf-\xb6\x9f>\x00\x00\x80\xbf\x0f+\xe6\xbe\xb16\xb3\xbe\x86\xff\x7f\xbf\xe4?\xb3\xbe\xcb.\xb3>|\x0e\xb7\xbe\xbfW\xb3>j\xe5\x7f\xbf\xaaK(\xbfl5\xb3\xbeU\xf4\x7f\xbf\xe5E\xb3>\x00\x00\x80\xbf\xdb\xf6\x7f\xbf\xfe\xfb\x7f?\xdb"\xb3>\x83>\xb3\xbe\x8f\x19\xb3>\x00\xfd\x7f\xbf\\0\xb3>\xbb\xfb\x7f\xbf\x0f\xe6\x7f\xbf&/\xb3\xbe\xc1\x1a\xb3>\xbf\x81\xb3\xbeE\x03\x1a\xbc\x98\xfe\x7f\xbf\xf92\xb3>l6\xb3\xbe\xd1\x15\xab>?rr>H2\xb3\xbe\xfb@\xb3\xbe\xca\xc5\xb2>\xca\x7f\xb3\xbe\xf9\xff\x7f\xbfZ\x16\xb3\xbe\xed%\x08\xbf\x82\xf5\x7f\xbf\xe4\xcf\x7f?\xfe\xe8\x7f\xbf\x9a.\xb3>\xf6-\xb3\xbe\xd2\x9e[>\x88\nO?)S\xb3\xbez\x10\xb4\xbeB7\xb3\xbe\xb0\n\xb3\xbe\xef\xf0\x7f\xbf\xf3\xcc\xc0\xbd\xb6\xef\x7f\xbf\x1c\xb0\xb0>\x01(\xb2\xbeqR\xb3\xbe]K\xb3\xbe\xa2\x83\xb3\xbe\x7fB\xb3\xbe\x00\x00\x80?i\x94\xb4\xbe\xc06\xb3>\xacA\xb3\xbe\xf5\x0f\xb8\xbe\t\xfa\x7f\xbf\xb1F\xb3>\xb4\'\xb3\xbe\xa6\xff\x7f\xbf,D)\xbe\xcb4\xb3\xbe\xe38\xb3\xbe\xb7-\xb3>\xc5\xf7\x7f\xbf\xb1+\xe1\xbe\xfa\x1e\x8f>)\xd4\x0e\xbfm=\xb3\xbef\x16\xb3\xbe\xfco\x7f\xbf\x19\xf5\x7f?,rj?\xf0\'\xb3\xbel\xda\x7f\xbf*\xfb\x7f\xbf\xf51\xb3>\xf9\xf1\x7f\xbfJ\xfd\xb2\xbe%0\xb3>\xeb3\xb3>\xcf&\xb3>\xf9\x84\xb4\xbe\xad\xc4\x7f\xbfh6\xb3>\x1c5\xb3>\xa4\xf8\x7f\xbf\xacR\xb3\xbe\xd2)\xb3>}(\xb3\xbe\xa1\xfb\xb2>\xb9\x1e\xea<\x10\xe4\x7f\xbf\xf6\xf6\x7f?9@\xb3\xbeQ\xef\x13\xbe<\x1b\xb3>\xccn\xb3\xbe/\xb8\x7f?2\xf1\x7f\xbf\xc80\xb3>\xdcC\xb3>s5\xb3\xbe\x9d\r\xee=`2\xb3>\x189\xaa\xbe\xfe"\xb3>\xed\xd32?\xe6\x1a\x1b>\x9eAU\xbf)\xbe\xb6\xbe\xdb\'\xb3>\xee\x17\x97\xbe\xf3\x9e\xe6\xbe\xbd;\xb3>5\x8eG>\x90\x1c\xb3\xbe\xa4F\xb3>\x1d9\xb3>\x19\xfe\x7f\xbf\xe7\xfd\x7f\xbf\x8d\xd1\xb2\xbe\xffC\xb3\xbe\xbe\xfa\x7f\xbf\xfe\xfd\x7f\xbfA1\xb3\xbe\xdf)\xb3\xbe2A\xb3\xbe=\xf5\x7f\xbf\x05\xec\r\xbe\xbc:\xb3>~\x08S\xbf\xf3\xbb$>\xde\x16\xb3>\x84\x1f\xb3\xbe"\xe9q?\x939\xb3\xbej\\\x06\xbe\x9b\xff\x7f\xbf\xf5\xf5\x7f\xbf5\xec\x7f?!\xb6\xb2\xbe\xcc\xec\x7f\xbf\x81!m\xbe"\xe6\xb2>\xc63\xb3>\xbduf>\xe1\xfb\x7f\xbf\xdf\xff\x7f\xbf\xac\xf5\x7f\xbf.\xf8\x7f\xbf\x9f\x16\xb3\xbe\xcb1\xb3\xbeg\xfd\x7f?2^\xca=\xa3\xa5\x7f\xbf\xf7<\xb3\xbeN\r\xb3\xbeq\xf8\xb2>\xd9\xfc\x7f\xbfG\xfd\x7f\xbf\xc9\xf2\x7f\xbf>\x85\xb8\xbe\xbb\xf0\x7f\xbf\x9f3\xb3\xbe\xa1\x1e\xb3\xbe\xbf\xc3\xec<\xbb\xed\x8e\xbeV)\xb3\xbel\xfeb?\x98@\xb3\xbeA\x14\xb3\xbe7K\xb3>\xd5:\xb3>\x1c\xf38\xbf\x1dn\x85>\x1dB\xb3\xbe1\x08\xf0\xber1\xb3>7-\xb6>t\xfaO\xbf4-\xb3\xbe\xdb>\xb3>g\xfd\x7f\xbf\x00\x00\x80\xbf<\n\x14\xbe\xf42\xb3\xbe=\xf5\x7f\xbf\x00\x00\x80\xbf\xf8.\xb3>\xf9b\xb3\xbe\xb6,\xb3>\xe8@\xb3\xbem\xfa\x7f\xbf\x86\xe4\x7f?A\xb35\xbfFU\xb3>\x00\x00\x80?F5\xb3\xbej(\xb3>\xf6\xf2\x7f\xbf\xf2\xe8\x7f\xbf\x00\x00\x80\xbf%\xf7\x7f\xbf\xbf@\xb3\xbe\xf6\xdd\xb3>\xab\xf6\x7f\xbf\x9b}\xb5>\xd6-\xb3>\x92:\xb3>\xc87\xb2>D\xfe\x7f\xbfo\xfd\x7f\xbf\x82D\xb3\xbe\x19\x11\xb3>w\x19>\xbe\xab\x1d\xb3>\xb4\x02\xb3\xbeEB\xb3>w\xb0(\xbf\x86G\xb3\xbe\x94\xf6\x7f\xbfI1\xb3>\xdc|y\xbf\x00\x00\x80\xbf\xc2\xed\x7f\xbf\x01b\x0c?\xcf\xf8\x7f\xbfv$\xb3>\xed\xef\x7f?\'U\x87\xbeU;\xf5\xbdW\x1b\xb3\xbe\xcd\xfc\x7f?\xdc!\xb3>Z\xa4#?\xb1\x07g?F\xb3\x7f?\xafK\xb3\xbe\x18>\xb3>\xe9\xff\x7f\xbf\xa4\xff\x7f\xbf\xc6\x11\xb3\xbe\xec}\'\xbf\xb1\x14\xb3\xbe\xb0\x0b\xb3\xbe<.\xb3>\xbc\xf3\x7f\xbf\x00\x00\x80\xbf;\xc0\xb1\xbe\x993\xb3>\x8e\xfb\x7f\xbf[\xf6\x7f\xbf\x1aZ\xb1>\x91\xc3\xab\xbd\'|\x1d\xbd\x04\x00\xa0\xbe\x1c\'\xb3\xbe\x95\xe8\x7f?/\xf7\x7f\xbf\xd5B\x87>\x00\x00\x80?\x188\xb3\xbeG\xab\xb2>\xde\xfc\x7f\xbf1\xae~\xbf\xf0\xff\x7f\xbf\x00\x00\x80\xbf\x0b\xef\x7f\xbf{\xd8\x7f\xbf\x00\x00\x80\xbf\x9b4\xb3>/e\xb3\xbeM|\xee>M\x1aH\xbf\x00\x00\x80\xbf\xf4\xfd\x7f\xbf\xef\xfa\x7f\xbf\x00\x00\x80\xbf\x7f\xfe\x7f\xbf\x13\xed\x7f\xbf\xb1\xff\x7f\xbf\x14\xf9\x7f\xbfd\xaa\x8f\xbd\x00\xf9\x7f\xbf\x99\xfa\x7f\xbfo\xfa?>?\xf6\x7f\xbf\xb0\x18\x15\xbf\xfb\x0bd\xbf\xae\xf4\x7f?\x01 \\>\xb3\xc2\xe5;\x00\x00\x80\xbf\x7f\xed\x7f\xbf\x10\xde;\xbe\xa61\xb3>}\xff\x7f?\xc7\xfa\x7f\xbf"\x8e\xb3\xbekV\xb2\xbe\xa3Qe?\x00\x00\x80?\x12\n\xb3>\x00\x00\x80\xbfJ*\xb3\xbe|\xa95>^T]\xbfH\xf5\x7f\xbf\xc0\x99x>\xf60\xb3>\xde\xeb\x7f\xbf\x00\x00\x80\xbf\x9d{@?\xc3jO\xbf\x00\x00\x80\xbf]\xec\x7f\xbfY\xe9\xb2>I\xf4\x7f\xbf\xf6!\xb3>+\xcc\x05\xbeF\xf9\x7f\xbf\xbb\xe1+\xbf\xfd\xfb\x7f\xbf\xa2\x10\xac>\x00\x00\x80?L\xf0\x7f\xbf\x16,\xb3\xbe%\x15\xb3>\x17\xf8\x7f?\xe1\xff\x7f\xbf7\xec\x7f\xbf\x8dcq\xbf\xe5\xfe\x7f\xbfl2R\xbeZ\xfe\x7f?A\xae~?\xcd?\xb3>/(D?\x00\x00\x80\xbf+\xfc\x7f\xbf\x86\xd5L?\xf7\xf7\x7f?\xaf\xad+?\x01W%>\xbe\xfc\x7f\xbfB\xd6\x7f\xbf\x93*\xbf\xbe\xa3\xf8\x7f\xbf(\xe5\x7f\xbf\x03\x9c\xb5><\xe6\xd3\xbe\x1d\xce\xdf>\x12\x0b\xb3>I\xd5F?\xd6\xacr\xbe\xef\x1b\x0c\xbf\xa5\xf5\x7f\xbf\xe9\xd8\xb2\xbe\xdb\xd4\xbc>\x96\x8f\x7f\xbfI\xfc\x7f\xbf\x9f\x11*=d\xfd\x7f\xbfQ\xe3\x7f\xbf\xe5\xc3\x7f?G\xff\x7f?)0\xb3>-\xff\x7f\xbf\x9e\xff\xb2>o\x05\xce>\x00\xe8\x7f\xbf\xdd\xf3\x7f\xbf\xd2}\x05?b\x9bS\xbe\x00\x00\x80\xbfO\xfc\x7f\xbfPa\x7f\xbf\xb2\xbf\x7f?\xd7+\x99\xbe\xa2\xf1\x7f\xbf\x05\xf6\x7f\xbf\x9e\xe8\x7f\xbf\xfe\x9f\x7f\xbf!b2=\xe2\xad\xb3\xbe\xed3\xb3>w\xeb\x7f\xbf\xb9\xcc\x7f?/\xfa\x7f?r\xb1\x7f\xbf\x8c1\x8c>\xbd\x17o?S\xf9\x7f?@\xbf\x8f\xbd\x14\x1d\xaf\xbe\xfc\xf5\x7f\xbf\xa6\xff\x7f\xbfV\x1dX\xbe\x98\xfd\x7f?\x934g\xbeuW\xf8>)t\x7f\xbf?\xff\x7f\xbf\xbc\xac\x7f\xbf\x030\xb4>\x12\xfa\x7f?\xed\xe1+?\xd7\xef\x7f\xbf^\xff\x7f\xbf\x97\xfe\x7f?\x04\xff\x7f\xbf\xd0|\x7f\xbf\xd2\xe3\x7f\xbf4\x1dI>:\xfb\x7f\xbf-\xf8\x7f?\xf1\x99\xb3>\xb27\xb3>m\xf1\x7f\xbf\x98\xf6\x7f\xbf\xf2d\x9e\xbe\xba\xfd\x7f?\x8el\xd3=\x84\xfc\x7f?=\xf4\x7f?\xbf\xf7\x7f\xbf&\xe3\x7f?\xac\xd3\x7f\xbf\xe9\xbc\xb8>R\xc7\x7f?=\xac\x7f?\xd0\xf0\x7f\xbf4\xfe\x7f?\x97\x02\xb3>\xd2\xff\x7f\xbf\x99\xf7\x7f\xbfn\xff\x7f\xbf\x97\xe2\x7f\xbf\xe7\xf9\x7f\xbf\xa7\xe7\x7f\xbf\xbd\xf9\x7f\xbf\xed\xf9\x7f\xbfk\xeb\xb2\xbe\xba\x00\x0f?\xc8\xcc~\xbf\x8a\x00\xbf\xbe\xec\xe7\x7f?u\xda\xcf>\xd8\xcb\x7f?\x9c\xda\x7f?3Q\xb2>\xc0\xaa\x7f?>\xfa\x7f?\x04\xce\x7f?3B\x1d\xbf\xb3\xa9\xdb>\xff\xff\x7f?\xd9\xfc\x7f?\xbb\xbd\x94>2\xcd\x7f\xbf?\xd7\x7f?d\xd7~\xbf\xfa\xcc\x7f?\x00\x00\x80\xbf\x01\xc7\x7f?\xd7\xeb\xce=\x183\x1e?\xe2\xfd\x7f?l\xfc\x7f\xbf?\xfa\x7f?\x95\xf4\x7f?\x82\xe89\xbd\xca4\xb6>\xc4\xf8\x7f?\xdb\xfd\x7f?9\xb6\x07\xbf\xf8\xf3\x7f?\x8e\xc3\x7f?\x18\xff\x7f\xbfQ\xf0\x7f?\x05\xfe\x7f?\x98\xff\x7f?\x1a\x9e\xe6>\xf3\xdd\x11\xbf\xfb\xfe\x7f\xbf&\xe9\x7f?P\\b>\xfe\xff\x7f?\xfb\xff\x7f?\xd3\xd7\xd2\xbe\x17\xc3~?M\xfe\x7f?\xba\xeb\x7f\xbf\xe6\xf6\x7f\xbf+\xeb\x7f?\xf0\xaek?\xf6\xff\x7f?\xa4nb\xbfk\xfd\x7f\xbf\x00\x00\x80\xbfnK=?\xa6\xfe\x7f\xbfq\xf7J?\xadx\x16<\xa5\xfe\x7f?\t\xf6\x7f\xbf\x00\x00\x80\xbf\xfa\xbd\x96>CD+\xbf\xce\xad\xda=B\xff\x7f?=%\x03?\xab\xff\x7f\xbf\xe8a|?L\x92\x14?\x00\x00\x80?\xf1\xff\x7f?B\x8b\x1b?y\xc9\x91>\xf5\xe1\x7f?\xcb\xf7\x7f?\x06\xf7\x7f?\x00\x00\x80?\xdf\xfc\x7f?\x16\xfc\x7f?\x00\x00\x80?\x996\x13\xbe\x00\x00\x80?\x9f\xfe\x7f?\xee\xdd}?cKa?K\xf4\x7f?\xd3\xe3\x7f?\x99\xfd\x7f?\xa2\x8b\x7f?\xc3\xc6\x7f?\xa5\xff\x7f?;\xfd\x7f?(\xff\x7f?\x1f\xfe\x7f?U\x97\x7f?\x00\x00\x80?P\xfc\x7f?\x04\xfa\x7f??\xff\x7f?\xd9\xff\x7f?\xdf\xfd\x7f?\xc3\xfe\x7f?\xd9\xfb\x7f?.b}?3\xa5\xa0>\xa3\xfc\x7f?b\xfd\x7f?\xe1\xff\x7f?|\x9b)>X\xff\x7f?\xfc\xff\x7f?\xe2\xfe\x7f?G\xe3\x7f?P\xfe\x7f?\xd6\xa2\x7f?O\xff\x7f?\xa7\xff\x7f?\x00\x00\x80?\xea\x9a\x7f?\xc08\x7f\xbf\xee\xff\x7f?f\xfc\x7f?\x8a\xff\x7f?\x05\xfe\x7f?\xdb\xffv?B\xfe\x7f?\xd2\xdf\x7f?\xa0\xa4I?\xf9\xff\x7f?\x95\xff\x7f?\xea\xfa\x7f?\xc1\xff\x7f?\x00\x00\x80?\x00\x00\x80?K\xff\x7f?\xa1\xf5\x7f?LKQ>C\r\\\xbf\xb4\n\xec\xbe\x86\xe0L?\xe3\xa1\x10?\xd5\x97~\xbf\x93{\x16?\x1e\x06T\xbf4\x98\xab>\xcb\xce\xe8>\xbeg\xfa\xbe\x9be\xff\xbed\xd5$\xbf}4 \xbf\x1e\xcb\xa0<\xbd\xac\xe8\xbe\xa0rx?\x18gC\xbf\x13b\r\xbf$\xbc\x8c>l4\xc3>\x05\xe5|?\xb1U;\xbf\xec\xcb&\xbf\xff\x02\xf3\xbe\xd0\x83X\xbf}v\xf9>\xd9\xe6\xd9>\xdb>m\xbf\xda\r\x0f\xbf\xaf\xfc}?\x7fm\xad\xbe)\xb2\x93\xbd\xc2\x89\xca\xbe\x08\x9e\x83\xbe\xd2\xf0\x07\xbeD\xb8+\xbf\xba~O?\x8eQs\xbf\x1e\x19\xf0>\x1e>\xcf\xbe\xb28O?\xac:$>\x03C\xce\xbe(Zn\xbfnw\xa6>\x1a\xd2Z?\x9cgs\xbf\xca\x96\xe1\xbcw\x03G>\xceXn\xbf\xbe\x00J\xbeI\xf5\x84=_\xb1\xfe>+@C\xbf\xa6\x88j\xbe\xab\x93\xf8\xbe\xd3hF?b~_?\xb9Vu?U\xe8c?w\xf5Y\xbfF\x0e-\xbfb\xe1\x9a>\xce\xa0\xbd>\x85\xff\x7f?\xe8\xff\x7f?\xb1\xfd\x7f?4\xef\x7f?l\x19Z\xbf\xff\xfe\x7f?\xfa\xff\x7f?v\xff\x7f?\x00\x00\x80?\xac\xff\x7f?\x00\x00\x80?EJx?\xf4\rF\xbf\x00\x00\x80?j\xff\x7f?\xa5\xff\x7f?\x00\x00\x80?\xe5\xff\x7f?N\xff\x7f?\xc7\xff\x7f?o\xff\x7f?9\xec\x7f?\x00\x00\x80?L!p?\x82\xfe\x7f?\xd3\xff\x7f?\xf8\xff\x7f?y\xff\x7f?\xb1\xff\x7f?\xd9\xfe\x7f?S\xed\x7f?\x10\'0?#\xff\x7f?[\xff\x7f?\xf8\xff\x7f?H\xff\x7f?\xd6\xff\x7f?\xff\xff\x7f?\xb7\xff\x7f?\xb0\xff\x7f?\xf2\xff\x7f\xbf\xcb\xe9\x7f?\xcd\xff\x7f?\x110\x10>\x00\x00\x80?\x93\xec\x7f?>\xfe\x7f?\xb8\xff\x7f?\xb0\xf5J\xbf\xe3\xff\x7f?v\xff\x7f?v\x05~?\x98\xff\x7f?a\xff\x7f?\xf6ux?\xed\xff\x7f?\xe3\xff\x7f?\xd5\xfe\x7f?\xf1\xff\x7f?\xbc\xfe\x7f?\x00\x00\x80?\xd4\xff\x7f?\x93\xfd\x7f?Q\xff\x7f?\xe5\xfa\x7f?8&\n?\xf6\xff\x7f\xbf\xfc7|?n\xfb\x7f\xbf5\xf7\x7f?\xa9\xff\x7f\xbf\xcd\xff\x7f\xbf\x00\x00\x80?\xe1\xff\x7f?\xe1\r\x7f?a].?\x00\x00\x80\xbf[\xef\xb2>.\xfa\x7f?\x11\xf5\x7f\xbf\x00\x00\x80?\xcf\xbd\x7f?\x8e\xf7\x7f?\xb8\xfd\x7f?\x8aU\x9a\xbeU)x?x\xfe~?8\xf5\x7f?h\xfa\x7f?\xfd\xfd\x7f?\x9a\xff\x7f?\xf7\xe3\x7f?\x1d\xf9\x7f\xbf\xf9\xf1\x7f\xbf\x00\x00\x80\xbf\xb5\xb5\xc5\xbe\xe2\xf7\x7f?\xa7\xf8\x7f?\xd7\xff\x7f\xbf\xd7\xd5\x7f?v\xfc\x7f\xbf\x00\x00\x80\xbfy\xfe\x7f?D\xe4\x7f\xbf@\x90\xc1>\xc0\xba8?t\xfe\x7f?\x1f\xff\x7f?\xe2yM\xbf\x0e\xff\x7f?3r\x98<\xeb\xe5\x7f?\xc8\xd0\xf7\xbc\x9f\xfe\x7f?\x9a\xe9\x7f?\x93\xff\x7f\xbfq\xfa\x7f?\x00\x00\x80?\xdb\xfe\x7f\xbfb\xd6\x7f?\x0b\xff\x7f?R\xee\x7f?\xa0\xfc\x7f\xbf\x00\xdc\x7f?\x00\x00\x80?\x0e\xfe\x7f?r\xfd\x7f\xbf\x97\xff\x7f\xbf\xbf\xfa\x7f?\x80HA\xbf\xf6\xff\x7f\xbf_\x8ey?q\x16\xb3\xbe\xcc\xf5\x7f?5\xff\x7f\xbf\xdb\xfd\x0e\xbe\x00\x00\x80?\x03\xff\x7f?4\\\x7f?i":\xbe`\xfc\x7f?\x13\xa0\xc4\xbe\x13\xfa\x7f?\x02\xfe\x7f\xbf\x00\x00\x80?\xd7\xff\x7f?2\x0e}?\xa8\xfd\x7f?\x00\x00\x80\xbf\xea~G\xbf7\xf3\x7f?\xe5\xf4\x7f?\x18\xf6\x7f?\x08\xfe\x7f?\x96\xff\x7f?\xc0\xe2\x7f\xbfP\x08\xab\xbe4\xe3\x7f\xbf\x00\x00\x80\xbf\xa3L\x18\xbd,\xf3\x7f?\xc3\xf8\x7f?\x00\x00\x80\xbf\xe5\xfd\x7f\xbf\xe5\xf3\x7f\xbf\xd6u\x7f\xbf\xdc\xff\x7f?I\xbb\x7f\xbf6\xf6\x7f?\x03\xc3\x0e?k\xfe\x7f?\x18\xff\x7f?\xd0\xff\x7f\xbf8\xc7z?\xb9\x1b ?\x80\xe2\x7f?\x00\x00\x80\xbf\x97\xf6\x7f?\x00\x00\x80?\xf8\x94<\xbe\xbe\xf7\x7f?\x00\x00\x80?\x9d\xff\x7f\xbfl\xd9\x7f?\x07\xff\x7f?\xa6\xed\x7f?\x03\xdf\xa0\xbe\xc5\xce\x7f?\x00\x00\x80?\x00\xfe\x7f?\x06\xf9\x7f\xbf\xf0\x06\xed\xbe\xc0\xfa\x7f?0\xcd\x7f?\xcb\xff\x7f\xbf\x1c\xfb\x7f\xbf\xb8P\xb3>`\xd8\x7f?\xfd\xfb\x7f\xbf\x9d\xfe\x7f\xbf\x00\x00\x80?\xf1\xfd\x7f?o^|?\x10\xff\x7f\xbf\x00\x00\x80?o\\\xb3>\x0f\xfa\x7f?\x15\xfc\x7f\xbf\xfb\xff\x7f?\xb1\xff\x7f?\xf7\xbeu\xbf\xa7\xfd\x7f?;\xae\xb2>\xb0KB?\x00\x00\x80?\xe0\xf4\x7f?\x94\x9e\xcc>\xf2\xfd\x7f?\x96\xff\x7f?\xa7\xfc\x7f\xbf9\xfc\x7f?\x03\x85Q\xbf\x00\x00\x80\xbf\x81\x93\xe0=\r\xfb\x7f?Y\xfa\x87>%\xf8\x7f?\x00\x00\x80\xbf?\xfe\x7f?\xba\xf5\x7f?\xb7\xff\x7f?z?\xb3\xben\xcd\x7f?.\xe0%?j\xfe\x7f?\xe0\xdc\x7f\xbf6v\xb2\xbe\x96\xbf\x7f?\x17\xf1\x7f\xbf\xbb\xfd\x7f?\x00\x00\x80\xbf\xfb\xf9\x7f?_\xfb\x7f?6\xde\\?U\xf9\x7f\xbf\xe5\xff\x7f?\x00\x00\x80\xbf\x08\xee\x7f?\x07\xff\x7f?\x92\xed\x7f?\x97\xa2\xd6\xbd\xc2\xe1\x7f?\x00\x00\x80?e\xfd\x7f?b\xd3~?o\xe5\x7f?\xd6vF?R\xf0\x7f?\xe2\xfd\x7f\xbf\xba\xfc\x7f\xbf?\xfa\x7f\xbf\xa2\x9e\xb2>x\xef\x7f?\xa9\xfe\x7f\xbf\x00\x00\x80?\x00\x00\x80?\xdf\x11u?h\xff\x7f\xbf\x86\xe4\x7f\xbf\x99\xfa\x7f\xbf\x19\xfa\x7f?\x11\xe5\x7f\xbfw\xf7\x7f?{\xea\xec\xbe\x1a\x1f\x7f\xbf\xa7\xfd\x7f?\x87\xeb\x7f\xbf\x16\xf5\x7f\xbf\x00\x00\x80?\xca\xf4\x7f?\xbf\xf7\x7f?\xf0\xfd\x7f?\x97\xff\x7f?s\xfd\x7f\xbf5 \xb2\xbe#\xfd\x7f\xbf1\xfa\x7f\xbf\x04Jg\xbeu\xfd\x7f?\xcc\xfb\x7f\xbfT\xfb\xb2>]\xff\x7f\xbf\x82\xc7\x7f\xbfj\xf8\x7f\xbf\xc4\xfd\x7f?\x1f*\xc7>\xcb\xfe\x7f?\xc5X\xa5>u\xfe\x7f?\xe3\xb2\xb1>;\xfd\x7f\xbf\xc8\xfb\x7f\xbfN\xfc\x7f\xbf\xd4\xd7\x7f?\x00\x00\x80\xbf\xd0\xa78>\x1d\xff\x7f?\xf6\x91S?\xbc\xdcX?Z(\xb3>\xed\xfc\x7f\xbf\xfb\xe9\x7f?>\xfd\x7f\xbf;\xc5\x7f?&\x1e\xb3>\xec\xee\x7f?\x00\x00\x80?\x98\x19Y\xbe\xd4\x8b\x9a\xbd\x0ew\x05?\xda\xd5-\xbf\xe7\xd5\x02?\xab\xfb\x7f\xbfg\xf8!?l\x15\x01?1\xff\x7f?L\x15B?\x0c{\x0c?\x8e\x0e\xc7>\xfb\xf2\x7f?\xa8%~?\xa3\xfd\x7f\xbf2a\xb3>J\xf9\x7f\xbf\xf4\x11b?\xf52\xb3>g\xfb\x7f?\xfe\xfa\x7f?B\xf7\x7f\xbf\xa7\xfd\x7f?a\xfe\x7f\xbfn\xf4\x7f\xbf\x07\xbc\x7f?\xc4\xf4\x7f?>\xec\x7f?\xf0\xfd\x7f?\x97\xff\x7f?\x81\xfd\x7f\xbfDL\xae\xbe\x19\xfe\x7f\xbf\x00\x00\x80\xbf\xff\x7f\xa0>\xe9\xed\x7f?\x9d\xd9\xd3\xbe\xa8\x15\xb3>\x86\xe4\x7f\xbfA\xfe\x7f?\x84\xfa\x7f?Q\xfe\x7f?\xde\xd0\x7f\xbf\xe7\xfd\x7f?>\xff}?\xe6\xe4\x7f?{\xff\x7f?\x96\xc8\xb7\xbe\x8e\x84a?\x00\x00\x80\xbf\xe2\xff\x7f\xbf\xb0mz?\xd2\xfd\xa3\xbd\x13\xfd\x7f?\xf4\x1c\x07?o\xd0\x7f?\x90\xfb\x7f?\xd2\xfa\x7f\xbff\xa8\xb2>\x00\x00\x80\xbf\x87\xed\x7f?\x94\xea\x7f?\xeb\xee\x7f?\x00\x00\x80?_)\xc6\xbe\x87\xcb\xb2\xbeY$e?\xd5\xf4\x7f?u\xe9\xa5>?\xff\x7f\xbf\x16\xe8\n\xbe)\xfb\x7f\xbf\n\x85)?\xc8\xc3\x7f?\xe4\xf6\x7f?\xfa\x96A\xbf\xfd\xff\x7f?\xf6}~?\xe9\xff\x7f\xbf\xfc\xea\x7f?Ga\xc1>\x19\xfa\x7f?\x8bM\xb3\xbe(\xf9\x7f?\x00\x00\x80?\x8eM}\xbf\xa7\xfd\x7f?$\xfa\x7f\xbf!\xfa\x7f\xbf\xc2\x90\x7f?\xe0\xf4\x7f?\x07\xea\x7f?ezX?\x97\xff\x7f?\xa0\xfe\x7f\xbf\xc4|\xb4>\xfe.~?\x00\x00\x80\xbfq&S?N\xf1\x7f?\xa2\xd1\x7f\xbf\r\xe5\x7f?\x82\xd3\x7f\xbfA\xec\xaa>\xac\xe9N\xbf\xe8\xe7\x7f?\xef\xf7\x7f\xbf\x01\xfd\x7f?\xcf\x95}?6pW?~@\xb3>\xc7\xff\x7f\xbf\xad\x99q?\x00\x00\x80\xbfl\xfe\x7f\xbf\xc7\xe6\x96>?t\xa5>\x00\x00\x80?\x86z\xdc>\x92\x1d\xc6\xbe\xc6\xfc\x7f?\x00\x00\x80\xbf\xb0\xc7\x12\xbf\xbc\x15\xb3\xbe\xb1\xd8\x7f?\xc9\xba\x7f?\xeb\xee\x7f?\x00\x00\x80?\x90?N\xbf\xfa\xfc\x7f?\xcc\xeb\xb2> \nS?\t\xff\x7f?\x00\x00\x80\xbfh\xf8\x7f\xbfZ\xf8\x7f?\x0e\xf9\x7f\xbf\xda\xaed?\n\xee\x7f?@\xfd\x7f\xbf\xdf\xfb\x7f?Rh~?\xf4\xff\x7f\xbfH\xea\x7f\xbf^\x94\xb5>\x11\xfa\x7f?\x10\xff\x7f\xbf\xed\xff\x7f?w\x97\xb1>\xf3\xee\x7f\xbf\xa7\xfd\x7f?\x00\x00\x80\xbf\x8c\xfe\x7f\xbf\xa3\x12}?\xe1\xf4\x7f?I\xf0\x7f?h\xcc\xa1>\x96\xff\x7f?\x81\xfe\x7f\xbf8K\xf7>\xeb\xf6\x7f?\x00\x00\x80\xbf\xdd\xe4\xdc>\x00\x00\x80?\xeb(~\xbf\x90\xf8\x7f?I\xfa\x7f?\xe2@k>!\xfe\x7f\xbf\x1d\xc9\x7f\xbf:W@\xbf\xa1\xfb\x7f?y\xd5\x07\xbf\xfe\x15\xba>E\xff\x7f?\x00\x00\x80\xbf\xb3\xcc\x7f?\x82\xff\x7f\xbf\x96\xfa\x7f\xbf\xb4\xfa\x7f\xbf\x94\xfe\x7f?\x92\xff\x7f?7"\x98>\x15\xf4\x7f?n\xfd\x7f?x\xff\x7f\xbf\xc0\x0b\xdc=\x0e\xe5\x7f?\xdf\xe5\x7f?I\x9e6>\xe8\xee\x7f?\x00\x00\x80?\x0f\x96\xb2>\x00\x00\x80?\x18\xf2\x7f?\xaf\x15\xd6>\xe9\x0f!?\xde\xff\x7f\xbf\x82\xf2\x7f\xbf\x00\x00\x80?\x0b\xbd\x7f?\xc8\xc7\x7f?\x95\xff\x7f?`\xf3\x7f\xbf_\xeb\x7f?\x00\x00\x80?\x06\xfe\x7f\xbf#\xfb\x7f\xbfe\xff\x7f\xbf\x13\xfa\x7f?\xb3\xff\x7f\xbf\xc5\xfe\x7f?\xcb\x160\xbf%\xce@\xbf\xa6\xfd\x7f?{\xff\x7f\xbf\x0f\xfe\x7f\xbf\x11\x9e\x7f?\xe3\xf4\x7f?\x9e\xef\x7f?\xe6]\xd4>\x95\xff\x7f?\x1a\xff\x7f\xbf\x00\x00\x80?\xd5\xf6\x7f?{\xff\x7f\xbf\x996\xb2\xbd\x9a\xf6\x7f?L6>\xbf\xe8\xfa\x7f?\xa7\xfd\x7f\xbf?\xfe\x7f?\x16\xe2\x7f?Qs\xb2\xbeO\xba\x7f\xbfF\x8f\xc6>\xa6#Z?\xc4\xff\x7f?\x13\xe0\x7f?\xe7\xfe\x7f\xbf\xa4\xc6\x7f?Y\xff\x7f\xbf\xbb\xfd\x7f?\xb7\xfe\x7f\xbf\x96\xfe\x7f?\xaf\x8b\x7f?\x00,\x1d>q\xfc\x7f?\x00\x00\x80?\xc4\xff\x7f\xbf\xa47\xb4=\xa7\xd8\xa5\xbe\xa3\xed\x7f?\xd6\xdb\x7f?\xec\xee\x7f?\x00\x00\x80?\x18\xfd\x7f?\x03\x7f,?\xf7\xff\x7f?z>b?p\x04|\xbf\x80\xfe\x7f\xbf\x8b9\xb7\xbe\x00\x00\x80?\xf2\xf4\x7f?\xa4\xff\x7f?\x00\x00\x80?\xd1\xf5\x7f\xbfX\xfe\x7f?\xe4j\x7f?\xdb\xff\x7f\xbf\xf4\xb7Q\xbe~\xee\x7f?\x1c\xfa\x7f?\xa5\xf9->\xd1\xfe\x7f?\x18\xff\x7f?\x08\xed\n?r\xba\x7f?s\xff\x7f\xbf{\xda&\xbf\x00\x00\x80?\xf3\xf4\x7f?Z\xfd\x7f?\n\xe2\xe2\xbd\x95\xff\x7f?}\xff\x7f\xbf\xb3\xfd\x7f?\xd4\xf6\x7f?\xc7\xff\x7f\xbf\x12t\xd1\xbeS\xf9\x7f?\xf1\x91\x8f>\xae\x1c\xd7>\xbb\xfc\x7f?\x95]}?\xc4\xd2\x7f?8\xfe\x7f?s\xe4\x7f\xbf(d\x19?;\xe0k?\xdf\xff\x7f?\xfa\xea\x7f?\x00\x00\x80\xbf)\x1f\xb3\xbe\x0f\x8f\x7f?\xbe\xfd\x7f?\xd7z\xba\xbe\x98\xfe\x7f?\xc6\xc7\xe0>T\xe6\xa3>\xdb\xf6\x7f?h\xff\x7f?\xe0\xff\x7f\xbf\x0f\xff\x7f?\x1c\x17~?\xbe\xed\x7f?\xe1\xf9\x7f?\x06\xef\x7f?\x00\x00\x80?.\xfe\x7f?\xfd\xff\x7f?\xd2\xff\x7f?\x17\xfb\x7f?\xc3\xfb\x7f\xbf\xe2\xff\x7f\xbf\x1a=7?\x00\x00\x80?\x86\xf5\x7f?\xa9\xff\x7f?\x00\x00\x80?\xd6\xf7\x7f\xbf\xe8\xff\x7f?\x1c\xd8\xe3=l\x88\x7f\xbf\x87\xf4H?\xbf}x?Y\xfa\x7f?\xe1\xfb.?\xa9\xff\x7f?\xf4\xfe\x7f?\x7f\xff\x7f?\x0c\xb9\x7f?\xfe\xff\x7f\xbflW\xb6\xbe\xd0\xcc\x7f?\x8f\xf5\x7f?E\xfb\x7f?\xb4\xc6\x7f\xbf\x9d\xff\x7f?\xcc\xed7\xbf\xda\xf5\x7f?*\xf7\x7f?M\xf2\x7f\xbf\x00\x00\x80?B\xf8\x7f?b1.?\xb5n\x7f\xbf\xaa\xfe\x7f?W\x9b}?\xc1\xfe\x7f?7\xc4\x7f?\x96\xedH?\xa6\xfb\x7f?H\xf1~?\xdf\xff\x7f?\xe0\xff\x7f?\xbc\xff\x7f\xbf\xf2\xfc\x7f?p\xfd\x7f?\xd7\xfd\x7f?\x13=o\xbf\xac\xfe\x7f?\xdf\xff\x7f\xbf\x05x\'?lQ\x00\xbc\xc7\xe3\x7f?\xf4\xff\x7f\xbf"\xff\x7f?\x99\x90\x7f\xbf\x0e\xef\x7f?\xfd\xff\x7f?\xeb\xef\x7f?\x00\x00\x80?%\xfe\x7f?\xfd\xff\x7f?\x8e\xff\x7f?\xf0\xfe\x7f?\xd2\xff\x7f?\x1b\xfb\x7f?R\xd5\x7f?Z\xf0\xd9\xbd\xf9\xfd\x7f?\xf1\xff\x7f?\xe1\xfe\x7f?\x00\x00\x80?;\xff\x7f?\x00\x00\x80?\x88\xd4o?\xf6\xf9\x7f?\x00\x00\x80?\xb9\xfe\x7f?1\xff\x7f?\xf9\xfe\x7f?\xd4\xff\x7f?\x89\xfe\x7f?\x8c\xff\x7f?\xe8\xfe\x7f?\x10\xd1\x7f?\x00\x00\x80?\x1f\xfe\x7f?\xe2\xfc\x7f?\x9a\xff\x7f?\xeb\xff\x7f?\xda\xfe\x7f?\xac\xf5`?\xb8\xfd\x7f?\xe4\xff\x7f?\x00\x00\x80?=\xfe\x7f?\xa3\xfe\x7f?\xee\xff\x7f?o\xfe\x7f?\xa8\xff\x7f?f\xe8\x7f?g\xff\x7f?^\xff\x7f?\x1f\xff\x7f?\xb5\xd1\x7f?\xa3\xff\x7f?\xd1\xff\x7f?\x00\x00\x80?\x82\xd2\x7f?\x80\xfc\x7f?|\xff\x7f?4\xfe\x7f?\xc1\xff\x7f?\xe4\xfe\x7f?:\xa8{?P\xf1\x9b\xbe\xed\xe7\x7f?F\xff\x7f?\xe9\xff\x7f?\xc5\xff\x7f?\x84\xfd\x7f?\xdf\xff\x7f?Y\xfd\x7f?\x00\x00\x80?\xa5\xff\x7f?\xcf\xfa\x7f?~\xfe\x7f?\xfd\xea>?\x0c\x10\x9d\xbeP&p?:\xf6\xf4\xbe\xfe\x1d\xd3\xbe\x1cZN\xbf\xd9z\xd4>?\x95\xa3>\xd3\xa3\x97>m)4\xbf\xdb\xe7B\xbfE\xe6\x94\xbc\xedIN\xbf\xc1\x1a\x19>c\x10X?b^S\xbf\xe8n\xd6\xbd\x15^4\xbf\xe1R5\xbe>\xb2y?\xda\x04v>6\xff:>\t\xee\x13?k\x11\xe5>\xd7\xf9\x94>D\x90]?\x01\xb26?&u}\xbfr\x16\x0f\xbf2#\xca>\x95vk\xbfsd\xa9\xbeR\x06\xa5\xbcsne?m\x0f?\xbfG@B\xbf\x92\x14\t\xbfQ{\x13?B/\x95>\xdb\xf8\xdd\xbd_\xde\xde>}\xc9k\xbf/\xc4\xcf\xbe#\xab\x1b?|<Q\xbf\xff$\x1c?\xebS ?uOu\xbf%\x1e\x17?\xff\xf3"\xbf\xfd\x8a\xe8\xbe\xc3\xea|>\x13\x0f:?\x19\xe7+\xbf${\x87>\xd75?\xbf\x80\x80V\xbf\xa9]V?K\x93\'?\x14\x02\x0c\xbf\xa98T?_\'\x0f?\x93\xf1\x05?K\x90R\xbf'
p483
tp484
basS'strict'
p485
I00
sS'readonly'
p486
I00
sg177
g0
(g178
g2
Ntp487
Rp488
(dp489
g182
(I00
I00
tp490
sg183
S'float32'
p491
sg185
g189
sg192
I00
sg52
NsbsS'allow_downcast'
p492
Nsbsg52
S'W'
p493
sg53
Nsg177
g488
sbasg14
g0
(g15
g2
Ntp494
Rp495
sg204
(lp496
g413
asg206
g0
(ctheano.tensor.elemwise
Elemwise
p497
g2
Ntp498
Rp499
(dp500
S'__module__'
p501
S'tensor'
p502
sS'scalar_op'
p503
g0
(ctheano.scalar.basic
Abs
p504
g2
Ntp505
Rp506
(dp507
S'output_types_preference'
p508
ctheano.scalar.basic
same_out
p509
sg52
Nsbsg52
S'Elemwise{abs_,no_inplace}'
p510
sS'destroy_map'
p511
(dp512
sS'nfunc_spec'
p513
(S'abs'
p514
I1
I1
tp515
sS'inplace_pattern'
p516
g0
(ctheano.misc.frozendict
frozendict
p517
g2
Ntp518
Rp519
(dp520
S'_hash'
p521
I0
sS'_dict'
p522
(dp523
sbsS'openmp'
p524
I00
sS'__doc__'
p525
S"|`a`|\n\n    TensorVariable overloads the `TensorVariable.__abs__` operator so that\n    this function is called when you type abs(a).\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p526
sbsbsg177
g0
(g178
g2
Ntp527
Rp528
(dp529
g182
(I00
I00
tp530
sg183
S'float32'
p531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp532
Rp533
(dp534
g11
S'auto_1189'
p535
sg13
I0
sg14
g0
(g15
g2
Ntp536
Rp537
(dp538
g19
(lp539
(lp540
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p541
tp542
a(g22
I72
g26
S'exec code in run_globals'
p543
tp544
a(g29
I249
g30
S'Model(hyperparams).train()'
p545
tp546
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p547
tp548
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p549
tp550
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p551
tp552
a(g45
I136
g46
S'self.zero_threshold)'
p553
tp554
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p555
tp556
aasbsg52
Nsg53
g0
(g54
g2
Ntp557
Rp558
(dp559
g58
(lp560
g0
(g149
g2
Ntp561
Rp562
(dp563
g11
S'auto_13'
p564
sg13
Nsg14
g0
(g15
g2
Ntp565
Rp566
(dp567
g19
(lp568
(lp569
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p570
tp571
a(g22
I72
g26
S'exec code in run_globals'
p572
tp573
a(g29
I249
g30
S'Model(hyperparams).train()'
p574
tp575
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p576
tp577
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p578
tp579
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p580
tp581
a(g45
I136
g46
S'self.zero_threshold)'
p582
tp583
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p584
tp585
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp586
Rp587
(dp588
g182
(tsg183
S'float32'
p589
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp590
g197
tp591
Rp592
(I1
(tg189
I00
S'33\xb3>'
p593
tp594
bsbasg14
g0
(g15
g2
Ntp595
Rp596
sg204
(lp597
g533
asg206
g0
(g207
g2
Ntp598
Rp599
(dp600
g211
(lp601
sg213
(lp602
sg215
(lp603
I0
aI1
asg217
g218
sg219
(tsg220
(lp604
g222
asg223
I01
sg224
(g225
g225
tp605
sg227
(dp606
S'support_code_apply'
p607
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p608
ssg231
(dp609
I0
(lp610
I0
assg234
(lp611
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p612
asbsbsg177
g0
(g178
g2
Ntp613
Rp614
(dp615
g182
(I01
I01
tp616
sg183
g589
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp617
Rp618
sg204
(lp619
g384
asg206
g0
(g497
g2
Ntp620
Rp621
(dp622
g501
g502
sg503
g0
(ctheano.scalar.basic
LT
p623
g2
Ntp624
Rp625
(dp626
S'bool'
p627
I01
sg52
Nsbsg52
S'Elemwise{lt,no_inplace}'
p628
sg511
(dp629
sg513
(S'less'
p630
I2
I1
tp631
sg516
g0
(g517
g2
Ntp632
Rp633
(dp634
g521
I0
sg522
(dp635
sbsg524
I00
sg525
S"a < b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p636
sbsbsg177
g0
(g178
g2
Ntp637
Rp638
(dp639
g182
(I00
I00
tp640
sg183
g627
sg185
g186
(S'b1'
p641
I0
I1
tp642
Rp643
(I3
S'|'
p644
NNNI-1
I-1
I0
tp645
bsg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp646
Rp647
(dp648
g11
S'auto_1207'
p649
sg13
I0
sg14
g0
(g15
g2
Ntp650
Rp651
(dp652
g19
(lp653
(lp654
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p655
tp656
a(g22
I72
g26
S'exec code in run_globals'
p657
tp658
a(g29
I249
g30
S'Model(hyperparams).train()'
p659
tp660
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p661
tp662
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p663
tp664
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p665
tp666
a(g45
I136
g46
S'self.zero_threshold)'
p667
tp668
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p669
tp670
aasbsg52
Nsg53
g0
(g54
g2
Ntp671
Rp672
(dp673
g58
(lp674
g0
(g149
g2
Ntp675
Rp676
(dp677
g11
S'auto_19'
p678
sg13
Nsg14
g0
(g15
g2
Ntp679
Rp680
(dp681
g19
(lp682
(lp683
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p684
tp685
a(g22
I72
g26
S'exec code in run_globals'
p686
tp687
a(g29
I249
g30
S'Model(hyperparams).train()'
p688
tp689
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p690
tp691
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p692
tp693
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p694
tp695
a(g45
I136
g46
S'self.zero_threshold)'
p696
tp697
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p698
tp699
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp700
Rp701
(dp702
g182
(tsg183
S'float32'
p703
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp704
g197
tp705
Rp706
(I1
(tg189
I00
S'\x00\x00\x00\x00'
p707
tp708
bsbasg14
g0
(g15
g2
Ntp709
Rp710
sg204
(lp711
g647
asg206
g0
(g207
g2
Ntp712
Rp713
(dp714
g211
(lp715
sg213
(lp716
sg215
(lp717
I0
aI1
asg217
g218
sg219
(tsg220
(lp718
g222
asg223
I01
sg224
(g225
g225
tp719
sg227
(dp720
S'support_code_apply'
p721
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p722
ssg231
(dp723
I0
(lp724
I0
assg234
(lp725
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p726
asbsbsg177
g0
(g178
g2
Ntp727
Rp728
(dp729
g182
(I01
I01
tp730
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp731
Rp732
(dp733
g11
S'auto_1202'
p734
sg13
I0
sg14
g0
(g15
g2
Ntp735
Rp736
(dp737
g19
(lp738
(lp739
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p740
tp741
a(g22
I72
g26
S'exec code in run_globals'
p742
tp743
a(g29
I249
g30
S'Model(hyperparams).train()'
p744
tp745
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p746
tp747
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p748
tp749
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p750
tp751
a(g45
I136
g46
S'self.zero_threshold)'
p752
tp753
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p754
tp755
aasbsg52
Nsg53
g0
(g54
g2
Ntp756
Rp757
(dp758
g58
(lp759
g0
(g7
g2
Ntp760
Rp761
(dp762
g11
S'auto_1195'
p763
sg13
I0
sg14
g0
(g15
g2
Ntp764
Rp765
(dp766
g19
(lp767
(lp768
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p769
tp770
a(g22
I72
g26
S'exec code in run_globals'
p771
tp772
a(g29
I249
g30
S'Model(hyperparams).train()'
p773
tp774
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p775
tp776
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p777
tp778
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p779
tp780
a(g45
I136
g46
S'self.zero_threshold)'
p781
tp782
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p783
tp784
aasbsg52
Nsg53
g0
(g54
g2
Ntp785
Rp786
(dp787
g58
(lp788
g443
ag0
(g7
g2
Ntp789
Rp790
(dp791
g11
S'auto_1194'
p792
sg13
I0
sg14
g0
(g15
g2
Ntp793
Rp794
(dp795
g19
(lp796
(lp797
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p798
tp799
a(g22
I72
g26
S'exec code in run_globals'
p800
tp801
a(g29
I249
g30
S'Model(hyperparams).train()'
p802
tp803
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p804
tp805
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p806
tp807
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p808
tp809
a(g45
I136
g46
S'self.zero_threshold)'
p810
tp811
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p812
tp813
aasbsg52
Nsg53
g0
(g54
g2
Ntp814
Rp815
(dp816
g58
(lp817
g676
asg14
g0
(g15
g2
Ntp818
Rp819
sg204
(lp820
g790
asg206
g0
(g207
g2
Ntp821
Rp822
(dp823
g211
(lp824
sg213
(lp825
sg215
(lp826
I0
aI1
asg217
g218
sg219
(tsg220
(lp827
g222
asg223
I01
sg224
(g225
g225
tp828
sg227
(dp829
S'support_code_apply'
p830
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p831
ssg231
(dp832
I0
(lp833
I0
assg234
(lp834
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p835
asbsbsg177
g0
(g178
g2
Ntp836
Rp837
(dp838
g182
(I01
I01
tp839
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp840
Rp841
sg204
(lp842
g761
asg206
g621
sbsg177
g0
(g178
g2
Ntp843
Rp844
(dp845
g182
(I00
I00
tp846
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp847
Rp848
(dp849
g11
S'auto_1200'
p850
sg13
I0
sg14
g0
(g15
g2
Ntp851
Rp852
(dp853
g19
(lp854
(lp855
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p856
tp857
a(g22
I72
g26
S'exec code in run_globals'
p858
tp859
a(g29
I249
g30
S'Model(hyperparams).train()'
p860
tp861
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p862
tp863
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p864
tp865
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p866
tp867
a(g45
I136
g46
S'self.zero_threshold)'
p868
tp869
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p870
tp871
aasbsg52
Nsg53
g0
(g54
g2
Ntp872
Rp873
(dp874
g58
(lp875
g0
(g149
g2
Ntp876
Rp877
(dp878
g11
S'auto_25'
p879
sg13
Nsg14
g0
(g15
g2
Ntp880
Rp881
(dp882
g19
(lp883
(lp884
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p885
tp886
a(g22
I72
g26
S'exec code in run_globals'
p887
tp888
a(g29
I249
g30
S'Model(hyperparams).train()'
p889
tp890
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p891
tp892
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p893
tp894
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p895
tp896
a(g45
I136
g46
S'self.zero_threshold)'
p897
tp898
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p899
tp900
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp901
Rp902
(dp903
g182
(tsg183
S'float32'
p904
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp905
g197
tp906
Rp907
(I1
(tg189
I00
S'\x00\x00\x80\xbf'
p908
tp909
bsbasg14
g0
(g15
g2
Ntp910
Rp911
sg204
(lp912
g848
asg206
g0
(g207
g2
Ntp913
Rp914
(dp915
g211
(lp916
sg213
(lp917
sg215
(lp918
I0
aI1
asg217
g218
sg219
(tsg220
(lp919
g222
asg223
I01
sg224
(g225
g225
tp920
sg227
(dp921
S'support_code_apply'
p922
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p923
ssg231
(dp924
I0
(lp925
I0
assg234
(lp926
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p927
asbsbsg177
g0
(g178
g2
Ntp928
Rp929
(dp930
g182
(I01
I01
tp931
sg183
g904
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp932
Rp933
(dp934
g11
S'auto_1201'
p935
sg13
I0
sg14
g0
(g15
g2
Ntp936
Rp937
(dp938
g19
(lp939
(lp940
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p941
tp942
a(g22
I72
g26
S'exec code in run_globals'
p943
tp944
a(g29
I249
g30
S'Model(hyperparams).train()'
p945
tp946
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p947
tp948
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p949
tp950
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p951
tp952
a(g45
I136
g46
S'self.zero_threshold)'
p953
tp954
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p955
tp956
aasbsg52
Nsg53
g0
(g54
g2
Ntp957
Rp958
(dp959
g58
(lp960
g0
(g149
g2
Ntp961
Rp962
(dp963
g11
S'auto_26'
p964
sg13
Nsg14
g0
(g15
g2
Ntp965
Rp966
(dp967
g19
(lp968
(lp969
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p970
tp971
a(g22
I72
g26
S'exec code in run_globals'
p972
tp973
a(g29
I249
g30
S'Model(hyperparams).train()'
p974
tp975
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p976
tp977
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p978
tp979
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p980
tp981
a(g45
I136
g46
S'self.zero_threshold)'
p982
tp983
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p984
tp985
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp986
Rp987
(dp988
g182
(tsg183
S'float32'
p989
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp990
g197
tp991
Rp992
(I1
(tg189
I00
S'\x00\x00\x80?'
p993
tp994
bsbasg14
g0
(g15
g2
Ntp995
Rp996
sg204
(lp997
g933
asg206
g0
(g207
g2
Ntp998
Rp999
(dp1000
g211
(lp1001
sg213
(lp1002
sg215
(lp1003
I0
aI1
asg217
g218
sg219
(tsg220
(lp1004
g222
asg223
I01
sg224
(g225
g225
tp1005
sg227
(dp1006
S'support_code_apply'
p1007
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1008
ssg231
(dp1009
I0
(lp1010
I0
assg234
(lp1011
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1012
asbsbsg177
g0
(g178
g2
Ntp1013
Rp1014
(dp1015
g182
(I01
I01
tp1016
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1017
Rp1018
sg204
(lp1019
g732
asg206
g0
(g497
g2
Ntp1020
Rp1021
(dp1022
g501
g502
sg503
g0
(ctheano.scalar.basic
Switch
p1023
g2
Ntp1024
Rp1025
(dp1026
g52
Nsbsg52
S'Elemwise{switch,no_inplace}'
p1027
sg511
(dp1028
sg513
(S'where'
p1029
I3
I1
tp1030
sg516
g0
(g517
g2
Ntp1031
Rp1032
(dp1033
g521
I0
sg522
(dp1034
sbsg524
I00
sg525
S"if cond then ift else iff\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1035
sbsbsg177
g0
(g178
g2
Ntp1036
Rp1037
(dp1038
g182
(I00
I00
tp1039
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1040
Rp1041
sg204
(lp1042
g353
asg206
g1021
sbsg177
g0
(g178
g2
Ntp1043
Rp1044
(dp1045
g182
(I00
I00
tp1046
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1047
Rp1048
sg204
(lp1049
g300
asg206
g0
(ctheano.tensor.basic
Dot
p1050
g2
Ntp1051
Rp1052
sbsg177
g0
(g178
g2
Ntp1053
Rp1054
(dp1055
g182
(I00
I00
tp1056
sg183
S'float32'
p1057
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1058
Rp1059
(dp1060
g11
S'auto_1213'
p1061
sg13
I0
sg14
g0
(g15
g2
Ntp1062
Rp1063
(dp1064
g19
(lp1065
(lp1066
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1067
tp1068
a(g22
I72
g26
S'exec code in run_globals'
p1069
tp1070
a(g29
I249
g30
S'Model(hyperparams).train()'
p1071
tp1072
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1073
tp1074
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1075
tp1076
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1077
tp1078
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p1079
tp1080
a(g49
I123
g46
S'activation = activation + self.b'
p1081
tp1082
aasbsg52
Nsg53
g0
(g54
g2
Ntp1083
Rp1084
(dp1085
g58
(lp1086
g0
(g441
g2
Ntp1087
Rp1088
(dp1089
g11
S'auto_7'
p1090
sg13
Nsg14
g0
(g15
g2
Ntp1091
Rp1092
(dp1093
g19
(lp1094
(lp1095
(g22
I72
g26
S'exec code in run_globals'
p1096
tp1097
a(g29
I249
g30
S'Model(hyperparams).train()'
p1098
tp1099
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1100
tp1101
a(g37
I32
g38
S'num_units=hyperparams.HIDDEN_LAYERS_DIMS[k])'
p1102
tp1103
a(g459
I120
g34
S'super(DenseLayer, self).__init__(incoming, num_units, W=lasagne.init.Uniform((-self.H,self.H)), **kwargs)'
p1104
tp1105
a(g49
I108
g34
S'regularizable=False)'
p1106
tp1107
a(g464
I234
g465
S'param = utils.create_param(spec, shape, name)'
p1108
tp1109
a(g468
I393
g469
S'spec = theano.shared(spec, broadcastable=bcast)'
p1110
tp1111
aasbsg472
g0
(g473
g2
Ntp1112
Rp1113
(dp1114
g52
Nsg477
(lp1115
g194
(g195
(I0
tp1116
g197
tp1117
Rp1118
(I1
(I64
tp1119
g189
I00
S'VN\xbf\xc0\xa8&\xb0\xc0\x80\x17\xd7\xc0\xa5.\xa9\xc0\xb9\xa0\xb9\xc0\xab(\xae\xc0\xc1s\xc2\xc02&\xbb\xc0\xf2G\xc9\xc0\x1c\x9e\xa8\xc0\xf0{H\xc0\xb6\xd1\xa5\xc0X\xfc\xb4\xc0\t\xd0\xef\xc0\xb7\\\xb8\xc0)x\xca\xc0\xc9.\xbc\xc0\x15\xa5\xc5\xc0\n\x95\xa9\xc0\xe6\xe3\xc3\xc0\xf7\xfd\xb4\xc0+\x03\xba\xc0\x9f\xf8d\xc0\xdb\xcb\xb6\xc0\xc2\xcc\xb3\xc0\xe3\xb2\xb5\xc0un\xc3\xc0*\x06\xaf\xc0t\xdb\xbb\xc0\xc8!\xa8\xc0;\x92\xc1\xc0*\xb2D\xc0j\xdd\xa0\xc0n\xc4\xc3\xc0]\x06\xb9\xc0\xee&\xb3\xc0#\xc7\xbe\xc07\x07\xb8\xc0\x94K\xbc\xc0\xd3F\xb4\xc05\x17\xb1\xc0\xd6\x9f\xb2\xc00\x1e\xa8\xc0F\xa2\xc8\xc0{~\xc1\xc0O\xb2\xb7\xc0\x04\xb7\x9a\xc0\x19\x11\xc2\xc0F\xae\xc3\xc0\xc6\x96\xcf\xc0Ar\xaf\xc0#\x16\xb3\xc0k\xc0\xd5\xc0\x90\x95\xbb\xc0\xdd\xe9\xaa\xc0f9\xde\xc0q\xe2\xd9\xc0\x11^\xc6\xc0\x8a,\xd5\xc0\x8e(\xaf\xc0}\x81\xbb\xc0\xe1\xa2\xd5\xc0c\xde\xa9\xc0&~\xa9\xc0'
p1120
tp1121
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp1122
Rp1123
(dp1124
g182
(I00
tp1125
sg183
S'float32'
p1126
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
g197
sg53
Nsg177
g1123
sbasg14
g0
(g15
g2
Ntp1127
Rp1128
sg204
(lp1129
g1059
asg206
g0
(g207
g2
Ntp1130
Rp1131
(dp1132
g211
(lp1133
sg213
(lp1134
I0
asg215
(lp1135
I0
asg217
g218
sg219
g1125
sg220
(lp1136
g222
asg223
I01
sg224
(g225
I0
tp1137
sg227
(dp1138
S'support_code_apply'
p1139
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1140
ssg231
(dp1141
I0
(lp1142
I0
assg234
(lp1143
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1144
asbsbsg177
g0
(g178
g2
Ntp1145
Rp1146
(dp1147
g182
(I01
I00
tp1148
sg183
g1126
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1149
Rp1150
sg204
(lp1151
g271
asg206
g0
(g497
g2
Ntp1152
Rp1153
(dp1154
g501
g502
sg503
g0
(ctheano.scalar.basic
Add
p1155
g2
Ntp1156
Rp1157
(dp1158
g508
ctheano.scalar.basic
upcast_out
p1159
sg52
S'add'
p1160
sbsg52
S'Elemwise{add,no_inplace}'
p1161
sg511
(dp1162
sg513
(g1160
I2
I1
tp1163
sg516
g0
(g517
g2
Ntp1164
Rp1165
(dp1166
g521
I0
sg522
(dp1167
sbsg524
I00
sg525
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1168
sbsbsg177
g0
(g178
g2
Ntp1169
Rp1170
(dp1171
g182
(I00
I00
tp1172
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1173
Rp1174
(dp1175
g11
S'auto_1217'
p1176
sg13
I0
sg14
g0
(g15
g2
Ntp1177
Rp1178
(dp1179
g19
(lp1180
(lp1181
(g22
I72
g26
S'exec code in run_globals'
p1182
tp1183
a(g29
I249
g30
S'Model(hyperparams).train()'
p1184
tp1185
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1186
tp1187
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1188
tp1189
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1190
tp1191
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p1192
tp1193
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p1194
tp1195
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p1196
tp1197
aasbsg52
Nsg53
g0
(g54
g2
Ntp1198
Rp1199
(dp1200
g58
(lp1201
g271
asg14
g0
(g15
g2
Ntp1202
Rp1203
sg204
(lp1204
g1174
asg206
g499
sbsg177
g0
(g178
g2
Ntp1205
Rp1206
(dp1207
g182
(I00
I00
tp1208
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1209
Rp1210
sg204
(lp1211
g242
asg206
g1153
sbsg177
g0
(g178
g2
Ntp1212
Rp1213
(dp1214
g182
(I00
I00
tp1215
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1216
Rp1217
sg204
(lp1218
g90
asg206
g0
(g497
g2
Ntp1219
Rp1220
(dp1221
g501
g502
sg503
g0
(ctheano.scalar.basic
Mul
p1222
g2
Ntp1223
Rp1224
(dp1225
g508
g1159
sg52
S'mul'
p1226
sbsg52
S'Elemwise{mul,no_inplace}'
p1227
sg511
(dp1228
sg513
(S'multiply'
p1229
I2
I1
tp1230
sg516
g0
(g517
g2
Ntp1231
Rp1232
(dp1233
g521
I0
sg522
(dp1234
sbsg524
I00
sg525
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p1235
sbsbsg177
g0
(g178
g2
Ntp1236
Rp1237
(dp1238
g182
(I00
I00
tp1239
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1240
Rp1241
(dp1242
g11
S'auto_1252'
p1243
sg13
I0
sg14
g0
(g15
g2
Ntp1244
Rp1245
(dp1246
g19
(lp1247
(lp1248
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1249
tp1250
a(g22
I72
g26
S'exec code in run_globals'
p1251
tp1252
a(g29
I249
g30
S'Model(hyperparams).train()'
p1253
tp1254
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1255
tp1256
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1257
tp1258
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1259
tp1260
a(g45
I136
g46
S'self.zero_threshold)'
p1261
tp1262
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1263
tp1264
aasbsg52
Nsg53
g0
(g54
g2
Ntp1265
Rp1266
(dp1267
g58
(lp1268
g0
(g7
g2
Ntp1269
Rp1270
(dp1271
g11
S'auto_1234'
p1272
sg13
I0
sg14
g0
(g15
g2
Ntp1273
Rp1274
(dp1275
g19
(lp1276
(lp1277
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1278
tp1279
a(g22
I72
g26
S'exec code in run_globals'
p1280
tp1281
a(g29
I249
g30
S'Model(hyperparams).train()'
p1282
tp1283
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1284
tp1285
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1286
tp1287
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1288
tp1289
a(g45
I136
g46
S'self.zero_threshold)'
p1290
tp1291
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p1292
tp1293
aasbsg52
Nsg53
g0
(g54
g2
Ntp1294
Rp1295
(dp1296
g58
(lp1297
g0
(g7
g2
Ntp1298
Rp1299
(dp1300
g11
S'auto_1229'
p1301
sg13
I0
sg14
g0
(g15
g2
Ntp1302
Rp1303
(dp1304
g19
(lp1305
(lp1306
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1307
tp1308
a(g22
I72
g26
S'exec code in run_globals'
p1309
tp1310
a(g29
I249
g30
S'Model(hyperparams).train()'
p1311
tp1312
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1313
tp1314
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1315
tp1316
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1317
tp1318
a(g45
I136
g46
S'self.zero_threshold)'
p1319
tp1320
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p1321
tp1322
aasbsg52
Nsg53
g0
(g54
g2
Ntp1323
Rp1324
(dp1325
g58
(lp1326
g0
(g441
g2
Ntp1327
Rp1328
(dp1329
g11
S'auto_8'
p1330
sg13
Nsg14
g0
(g15
g2
Ntp1331
Rp1332
(dp1333
g19
(lp1334
(lp1335
(g22
I72
g26
S'exec code in run_globals'
p1336
tp1337
a(g29
I249
g30
S'Model(hyperparams).train()'
p1338
tp1339
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1340
tp1341
a(g37
I55
g38
S'num_units=OUTPUT_DIMS)'
p1342
tp1343
a(g459
I120
g34
S'super(DenseLayer, self).__init__(incoming, num_units, W=lasagne.init.Uniform((-self.H,self.H)), **kwargs)'
p1344
tp1345
a(g49
I103
g34
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
p1346
tp1347
a(g464
I234
g465
S'param = utils.create_param(spec, shape, name)'
p1348
tp1349
a(g468
I393
g469
S'spec = theano.shared(spec, broadcastable=bcast)'
p1350
tp1351
aasbsg472
g0
(g473
g2
Ntp1352
Rp1353
(dp1354
g52
Nsg477
(lp1355
g194
(g195
(I0
tp1356
g197
tp1357
Rp1358
(I1
(I64
I10
tp1359
g189
I00
S'\x918\xb3\xbe\xe4=\xb3\xbe\xac3\xb3\xbe\xeb5\xb3\xbe\xb79\xb3\xbe\xf2\xff\x7f?\x833\xb3\xbe\xac6\xb3\xbe\xdd5\xb3\xbe(5\xb3\xbe\xe10\xb3\xbe\xd2>\xb3\xbe\x00\x00\x80?A3\xb3\xbe\x9f6\xb3\xbe\x0b5\xb3\xbe}3\xb3\xbe\x8c6\xb3\xbe\xf46\xb3\xbe]\xff\x7f\xbf\x00\x00\x80?1M\xb3\xbe\xe74\xb3\xbe\xb06\xb3\xbek=\xb3\xbe\x983\xb3\xbe%8\xb3\xbe\xc04\xb3\xbe$>\xb3\xbe\xcf6\xb3\xbe\x979\xb3\xbe\x158\xb3\xbe\x00\x00\x80?\xfc0\xb3\xbe\xb9G\xb3\xbe\x863\xb3\xbeZ5\xb3\xbe\xf34\xb3\xbeU8\xb3\xbeiA\xb3\xbe\xe44\xb3\xbe\xe72\xb3\xbe\xa77\xb3\xbe\xe97\xb3\xbe\xc24\xb3\xbe\x82@\xb3\xbe\xec>\xb3\xbe:\xff\x7f?\xe3\xc3\x7f\xbf\xc57\xb3\xbea7\xb3\xbe:4\xb3\xbeb5\xb3\xbeB\xff\x7f?f>\xb3\xbe\x109\xb3\xbe\x1e9\xb3\xbei4\xb3\xbe\x114\xb3\xbeN6\xb3\xbe\x171\xb3\xbe\x914\xb3\xbe\xf1\xfe\x7f?\xcd3\xb3\xbeR6\xb3\xbe\xba9\xb3\xbe\x0f5\xb3\xbe\xdd5\xb3\xbeE7\xb3\xbe\xfc`\xb3\xbe`4\xb3\xbe\x00\x00\x80\xbf\xf03\xb3\xbe\x814\xb3\xbe\xa53\xb3\xbe.5\xb3\xbe\x1d6\xb3\xbe\xd43\xb3\xbe\x9f8\xb3\xbe\x00\xf1\x7f??4\xb3\xbe\xa49\xb3\xbe\x045\xb3\xbe\xd93\xb3\xbe}M\xb3\xbe\xef\xfc\x7f?\x8f5\xb3\xbe\x884\xb3\xbel8\xb3\xbe\x116\xb3\xbe\xdb\x8e\xb7\xbe\x11;\xb3\xben>\xb3\xbe\x108\xb3\xbeq3\xb3\xbe\xe6:\xb3\xbel5\xb3\xbe\xb93\xb3\xbe,;\xb3\xbe\xb3\x02\'?\\p\xb3\xbe^VR>W&\xb3\xbe\x9fV\xb3\xbe\x9a\x0f\xb3>\xd0+\xb3\xbe\x10\xb2\xb3\xbe\x0f\xf7\xb2>\x00\x00\x80\xbf\xc4<\xb3>\x00\x00\x80?\x00n\x0e\xbf\xb94\xb3\xbe\xae8\xb3\xbeK:\xb3\xbeA6\xb3\xbe\xaa3\xb3\xbe\xa03\xb3\xbe#4\xb3\xbe/5\xb3\xbe\xca\xb9y\xbf\xea3\xb3\xbe\xff4\xb3\xbea4\xb3\xbe\x0c3\xb3\xbe\xae7\xb3\xbe\x1d=\xb3\xbe\xdb\xfc\x7f?\xd7<\xb3\xbe\xe63\xb3\xbe\x15;\xb3\xbe\x00\x00\x80?\xe75\xb3\xbeU;\xb3\xbe\xcd6\xb3\xbe\t4\xb3\xbe\x045\xb3\xbe\x078\xb3\xbe\xc54\xb3\xbeK>\xb3\xbe\xca4\xb3\xbe\xc76\xb3\xbey7\xb3\xbeR4\xb3\xbeR3\xb3\xbe\xeb2\xb3\xbe\x00\x00\x80?CK\xb3\xbe\xbf\x15}\xbf\xf6?\xb3\xbe=6\xb3\xbe\xb46\xb3\xbeR>\xb3\xbe\xa83\xb3\xbe\xa9>\xb3\xbe\x00\x00\x80?\xf85\xb3\xbe\xd05\xb3\xbe\xc93\xb3\xbey7\xb3\xbe8\xed\x7f\xbf\x014\xb3\xbel3\xb3\xbe\x913\xb3\xbeN4\xb3\xbe\xf43\xb3\xbe\x7f0\xb3\xbee3\xb3\xbe\xc3\xfe\x7f\xbf\xa0\xb3i?\x00\x00\x80\xbf\xc01\xb3\xbe\xcf6\xb3\xbe\xb67\xb3\xbe\xd33\xb3\xbe\xb9\xe4\xb3\xbe)H\xb3\xbe[\xff\x7f?\x1d\xfe\x7f\xbfR2\xb3\xbe\x00\x00\x80\xbf\x801\xb3\xbe\xf78\xb3\xbe\xf9\xff\x7f?+=\xb3\xbe\xce4\xb3\xbe\x00\x00\x80\xbf\xa76\xb3\xbe\xd7>\xb3\xbe\xd3:\xb3\xbe\xa1/\xb3\xbe!\xf2\x7f\xbf\x8b4\xb3\xbet.\xb3\xbe\xef/\xb3\xbe04\xb3\xbe\x00\x00\x80?\x0b\xea\x7f\xbfi5\xb3\xbeI9\xb3\xbe\xee9\xb3\xbeq4\xb3\xbeQ<\xb3\xbe\x1eB\xb3\xbe\xc2\xff\x7f?\x848\xb3\xbe\x11:\xb3\xbe\x923\xb3\xbe\x00\x00\x80\xbf\xc13\xb3\xbe\xba\xfe\x7f?\x9b2b\xbf\x934\xb3\xbe\x927\xb3\xbe|9\xb3\xbe\xa28\xb3\xbe\x124\xb3\xbe+5\xb3\xbe7<\xb3\xbe\xd43\xb3\xbe\xd6:\xb3\xbeb6\xb3\xbeo;\xb3\xbe\xf49\xb3\xbe\xac\x05\xb3\xbe\x881\xb3\xbe\x16Q\xb3\xbe\x88a\x05\xbe\xf7\xa2k\xbf\xc13\xb3>P4\xb3\xbe\xd96\xb3\xbe\x1e6\xb3\xbeUJ\xb3\xbe\xcc2\xb3\xbeV6\xb3\xbem\xff\x7f?\xfa3\xb3\xbe\xf2B\xb3\xbe\x966\xb3\xbe\x166\xb3\xbe\xa84\xb3\xbe\x0f3\xb3\xbe\x00\x00\x80?\x1b;\xb3\xbe\xf64\xb3\xbe\xe9E\xb3\xbe\x9c3\xb3\xbe\x97;\xb3\xbe\x7f4\xb3\xbe\xda3\xb3\xbe\x0c4\xb3\xbe\xdb3\xb3\xbe\t;\xb3\xbe\xe05\xb3\xbe95\xb3\xbe\x00\x00\x80?\xdd:\xb3\xbe_3\xb3\xbe\xdc\x95\xb3\xbe\x1a5\xb3\xbeE5\xb3\xbe\x0f?\xb3\xbe~7\xb3\xbe\xf3\xf8\x7f\xbf\xec\xfa\x7f?F4\xb3\xbeV\xf7\x7f\xbf\x97:\xb3\xbe\xff6\xb3\xbe\x163\xb3\xbe\xb9;\xb3\xbe\x931\xb3\xbe\x9b4\xb3\xbe\xf3\xff\x7f?,2\xb3\xbe\xfc1\xb3\xbe\xd43\xb3\xbe\xb3\xfd\x7f\xbf^8\xb3\xbe\xc9/\xb3\xbe\xe67\xb3\xbe\xa79\xb3\xbey;\xb3\xbe\xa52\xb3\xbe:8\xb3\xbe\xdf7\xb3\xbe\x11\xfe\x7f?0\xfb\x7f\xbf\xb5@\xb3\xbe\xa83\xb3\xbe\x0f7\xb3\xbe\x124\xb3\xbe\x915\xb3\xbe\xf57\xb3\xbe`8\xb3\xbe\xf09\xb3\xbe:9\xb3\xbeo5\xb3>p5\xb3\xbe\x953\xb3\xbe>4\xb3\xbe\x1b4\xb3\xbetB\xb3\xbe\x00\x00\x80?\xa08\xb3\xbe\xdc3\xb3\xbez5\xb3\xbe\x0f?g\xbf\xd46\xb3\xbe\xa9C\x9f\xbeo&\xd1>c\x18\xb4\xbeV\xe1\xaf\xbeNY\x9f=\x8a\xeb\xb5\xbeE4\x82>\x1f\x92\xba\xbe\x9d\xd3\xb6\xbe\xfd\x1b\xb9\xbe|:\xb3\xbe\xc2\xf9\x7f\xbf\x088\xb3\xbet5\xb3\xbex3\xb3\xbe\xf91\xb3\xbe\x00\x00\x80\xbf\x993\xb3\xbe\x04:\xb3\xbe\xf1J\xb3>V9\xb3\xbe\xaa5\xb3\xbe\x00\x00\x80?\xc10\xb3\xbeV\xfb\x7f\xbf\xd9:\xb3\xbeO5\xb3\xbe44\xb3\xbe\xd26\xb3\xbe\x00\x00\x80\xbf!6\xb3\xbe\x9a3\xb3\xbe\x1f2\xb3\xbe\xc7<\xb3\xbe\x134\xb3\xbe\x905\xb3\xbeq3\xb3\xbe\x80\xfe\x7f?1\xfc\x7f\xbf\xb14\xb3\xbe\x937\xb3\xbe\xdd7\xb3\xbes5\xb3\xbe\xf84\xb3\xbe\xbb6\xb3\xbe\xd6\xfe\x7f?Q4\xb3\xbe\xfb;\xb3\xbe\x815\xb3\xbe\xc86\xb3\xbel\xf6\x7f\xbfq4\xb3\xbe\xe33\xb3\xbe\xbc\xfe\x7f?UFY\xbfn4\xb3\xbe\x00\x00\x80\xbf5:\xb3\xbe|5\xb3\xbei3\xb3\xbeP5\xb3\xbe;5\xb3\xbec2\xb3\xbe\x876\xb3\xbe\x153\xb3\xbe\xc3<\xb3\xbe\xf5\x963\xbf\x06\xf6\x7f?"\xd2\x7f\xbf]7\xb3\xbeL6\xb3\xbe\x13\xe3\x7f\xbf\xdb4\xb3\xbe,7\xb3\xbe\xa20\xb3\xbe\xc9.\xb3\xbe"?\xb3\xbeu5\xb3\xbe\xf3\xf6\x7f\xbf\xac\xf3~?\x155\xb3\xbe?6\xb3\xbe\x155\xb3\xbez3\xb3\xbe\xbb5\xb3\xbe\x00\x00\x80?r6\xb3\xbe\xaa3\xb3\xbe\xbc<\xb3\xbeX3\xb3\xbe\x00\x00\x80\xbf\xf11\xb3\xbe\xb71\xb3\xbe\xd92\xb3\xbe\x865\xb3\xbeg;\xb3\xbe\xbeF\xb3\xbe1\xff\x7f?m2\xe7\xbe:4\xb3\xbe\xa9F\xb3\xbe\x0e5\xb3\xbe\x7f\xff\x7f?\x802\xb3\xbe\xdc5\xb3\xbe\x8b3\xb3\xbe\xdd4\xb3\xbeI4\xb3\xbe#9\xb3\xbew6\xb3\xbeY1\xb3\xbei9\xb3\xbe\x175\xb3\xbe\x0b3\xb3\xbe\x0eA\xb3\xbe\x9e\xff\x7f?\x054\xb3\xbe\xd62\xb3\xbe\x035\xb3\xbe\x114\xb3\xbe\xbe8\xb3\xbe1C\xb3\xbec6\xb3\xbe\xc4\xf6\x7f?\xa26\xb3\xbe\t9\xb3\xbe\xccG\xb3\xbe\x025\xb3\xbe\x0f8\xb3\xbe\n5\xb3\xbeV5\xb3\xbel3\xb3\xbe#5\xb3\xbe\x0e?\xb3\xbeg\xff\x7f?X9\xb3\xbeN5\xb3\xbeC6\xb3\xbe\xf9\xf4\x7f\xbf19\xb3\xbe[:\xb3\xbe\x031\xb3\xbe\x905\xb3\xbe\xf4\xff\x7f?3p\xb3\xbe\xa14\xb3\xbe4\xe6\xb3\xbeu4\xb3\xbe\xac3\xb3\xbex6\xb3\xbe\xc65\xb3\xbe\x124\xb3\xbee3\xb3\xbe%8\xb3\xbe\xcf8\xb3\xbea4\xb3\xbeh5\xb3\xbe65\xb3\xbe\xd29\xb3>97\xb3\xbeiG\xb3\xbe\xe8\xff\x7f?\n2\xb3\xbe\xb99\xb3\xbe\x87:\xb3\xbep3\xb3\xbe\x025\xb3\xbel6\xb3\xbe\xa9?\xb3\xbe,8\xb3\xbe\x923\xb3\xbe\n6\xb3\xbe\x00\x00\x80?U7\xb3\xbe\xa4=\xb3\xbe\x085\xb3\xbe\x984\xb3\xbeu6\xb3\xbe\x1a\xfc\x7f\xbf\x19<\xb3\xbe\x189\xb3\xbe\xf52\xb3\xbe\x00\x00\x80?\xd67\xb3\xbe\x00\x00\x80\xbf\xb49\xb3\xbe\x84E\xb3\xbe\x97;\xb3\xbe\xae;\xb3\xbe\x00\x00\x80\xbf\x1e8\xb3\xbe\xfb1\xb3\xbe\x94O\xb3\xbe55\xb3\xbe\xaa3\xb3\xbe[3\xb3\xbe\x0c\x7f\x17\xbf<3\xb3\xbe2\xab\xda\xbe\xd4D\xb3>#>\xb3\xbe5C\xb3\xbe\x00\x00\x80?\xad5\xb3\xbe\xa59\xb3\xbeJ9\xb3\xbev5\xb3\xbe\x96;\xb3\xbe\x0cb\xcc\xbe\x81F\xb3\xbe\xc73\xb3\xbe\xc5<\xb3\xbe\x9d3\xb3\xbe.L\xb3\xbe\xd83\xb3\xbeu>\xb3\xbe\x00\x00\x80?\xa04\xb3\xbe!\xf7\x7f\xbfoW\x11\xbf\xd77\xb3\xbe\xday5\xbf\x124\xb3\xbe\x815\xb3\xbe\xbc5\xb3\xbe\\3\xb3\xbeC8\xb3\xbet3\xb3\xbe\x18;\xb3\xbe\x13\xfe\x7f?\xe26\xb3\xbeo3\xb3\xbe\x072\xb3\xbe7P\xb3\xbe\xf6\xff\x7f?J7\xb3\xbe\xbb5\xb3\xbe\x9d1\xb3\xbeG\xf7\xb3\xbe/4\xb3\xbe\xc62\xb3\xbeB1\xb3\xbe#5\xb3\xbe\x00\x00\x80?s8\xb3\xbe\xf12\xb3\xbe\xbdb\xb3\xbe\xd9@\xb3\xbe\xfdH\xb3\xbe\xb33\xb3\xbeqF\xb3\xbe\x00\x00\x80?;5\xb3\xbe\x18:\xb3\xbe~4\xb3\xbe\x106\xb3\xbe\xec/\xb3\xbe\x843\xb3\xbeY4\xb3\xbe\xc23\xb3\xbe\xda4\xb3\xbe\x83;\xb3\xbe>\xff\x7f?h3\xb3\xbe\xed6\xb3\xbeA>\xb3\xbeD9\xb3\xbe\xd1?\xb3\xbe\xcd8\xb3\xbe\x19\xc2\x17\xbf76\xb3\xbe\xae=\xb3\xbe\x137\xb3\xbeq6\xb3\xbe\xee;\xb3\xbe\x0e4\xb3\xbe\x8d9\xb3\xbe\x00\x00\x80?\x1eQ\xb3\xbe\xfd8\xb3\xbex4\xb3\xbe\xd02\xb3\xbe\x1c\xff\x7f?\xb8=\xb3\xbe5;\xb3\xbe\x831\xb3\xbe\xc0=\xb3\xbe\'9\xb3\xbeZ7\xb3\xbe\x82\xd2\xde\xbeo4\xb3\xbe-4\xb3\xbe.:\xb3\xbe\xf09\xb3\xbe)6\xb3\xbe?3\xb3\xbe\xcd\xff\x7f?a\xff\x7f\xbf.A\xb3\xbe\x00\x00\x80\xbf\x064\xb3\xbe#7\xb3\xbe\x00\x00\x80?\xe42\xb3\xbe\x00\x00\x80\xbf23\xb3\xbe\x9aT\xb8\xbe\xea7\xb3\xbe\x00\x00\x80\xbf\x00\x00\x80\xbf07\xb3\xbe\x7f7\xb3\xbe\xbb6\xb3\xbeq4\xb3\xbep8\xb3\xbe\x00\x00\x80?\xea7\xb3\xbe\xb1\xdbc\xbf\x0c6\xb3\xbe\xa2:\xb3\xbe\x00\x00\x80\xbfw3\xb3\xbe|(\xb3\xbe\xb6\xfc\x7f?\x18:\xb3\xbe\x991\xb3\xbe.\xcd\x1d\xbf\xa04\xb3\xbe\x144\xb3\xbe\xd26\xb3\xbe'
p1360
tp1361
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp1362
Rp1363
(dp1364
g182
(I00
I00
tp1365
sg183
S'float32'
p1366
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
g493
sg53
Nsg177
g1363
sbasg14
g0
(g15
g2
Ntp1367
Rp1368
sg204
(lp1369
g1299
asg206
g499
sbsg177
g0
(g178
g2
Ntp1370
Rp1371
(dp1372
g182
(I00
I00
tp1373
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1374
Rp1375
(dp1376
g11
S'auto_1233'
p1377
sg13
I0
sg14
g0
(g15
g2
Ntp1378
Rp1379
(dp1380
g19
(lp1381
(lp1382
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1383
tp1384
a(g22
I72
g26
S'exec code in run_globals'
p1385
tp1386
a(g29
I249
g30
S'Model(hyperparams).train()'
p1387
tp1388
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1389
tp1390
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1391
tp1392
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1393
tp1394
a(g45
I136
g46
S'self.zero_threshold)'
p1395
tp1396
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p1397
tp1398
aasbsg52
Nsg53
g0
(g54
g2
Ntp1399
Rp1400
(dp1401
g58
(lp1402
g562
asg14
g0
(g15
g2
Ntp1403
Rp1404
sg204
(lp1405
g1375
asg206
g0
(g207
g2
Ntp1406
Rp1407
(dp1408
g211
(lp1409
sg213
(lp1410
sg215
(lp1411
I0
aI1
asg217
g218
sg219
(tsg220
(lp1412
g222
asg223
I01
sg224
(g225
g225
tp1413
sg227
(dp1414
S'support_code_apply'
p1415
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1416
ssg231
(dp1417
I0
(lp1418
I0
assg234
(lp1419
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1420
asbsbsg177
g0
(g178
g2
Ntp1421
Rp1422
(dp1423
g182
(I01
I01
tp1424
sg183
g589
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1425
Rp1426
sg204
(lp1427
g1270
asg206
g621
sbsg177
g0
(g178
g2
Ntp1428
Rp1429
(dp1430
g182
(I00
I00
tp1431
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1432
Rp1433
(dp1434
g11
S'auto_1251'
p1435
sg13
I0
sg14
g0
(g15
g2
Ntp1436
Rp1437
(dp1438
g19
(lp1439
(lp1440
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1441
tp1442
a(g22
I72
g26
S'exec code in run_globals'
p1443
tp1444
a(g29
I249
g30
S'Model(hyperparams).train()'
p1445
tp1446
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1447
tp1448
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1449
tp1450
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1451
tp1452
a(g45
I136
g46
S'self.zero_threshold)'
p1453
tp1454
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1455
tp1456
aasbsg52
Nsg53
g0
(g54
g2
Ntp1457
Rp1458
(dp1459
g58
(lp1460
g676
asg14
g0
(g15
g2
Ntp1461
Rp1462
sg204
(lp1463
g1433
asg206
g0
(g207
g2
Ntp1464
Rp1465
(dp1466
g211
(lp1467
sg213
(lp1468
sg215
(lp1469
I0
aI1
asg217
g218
sg219
(tsg220
(lp1470
g222
asg223
I01
sg224
(g225
g225
tp1471
sg227
(dp1472
S'support_code_apply'
p1473
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1474
ssg231
(dp1475
I0
(lp1476
I0
assg234
(lp1477
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1478
asbsbsg177
g0
(g178
g2
Ntp1479
Rp1480
(dp1481
g182
(I01
I01
tp1482
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1483
Rp1484
(dp1485
g11
S'auto_1246'
p1486
sg13
I0
sg14
g0
(g15
g2
Ntp1487
Rp1488
(dp1489
g19
(lp1490
(lp1491
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1492
tp1493
a(g22
I72
g26
S'exec code in run_globals'
p1494
tp1495
a(g29
I249
g30
S'Model(hyperparams).train()'
p1496
tp1497
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1498
tp1499
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1500
tp1501
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1502
tp1503
a(g45
I136
g46
S'self.zero_threshold)'
p1504
tp1505
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1506
tp1507
aasbsg52
Nsg53
g0
(g54
g2
Ntp1508
Rp1509
(dp1510
g58
(lp1511
g0
(g7
g2
Ntp1512
Rp1513
(dp1514
g11
S'auto_1239'
p1515
sg13
I0
sg14
g0
(g15
g2
Ntp1516
Rp1517
(dp1518
g19
(lp1519
(lp1520
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1521
tp1522
a(g22
I72
g26
S'exec code in run_globals'
p1523
tp1524
a(g29
I249
g30
S'Model(hyperparams).train()'
p1525
tp1526
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1527
tp1528
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1529
tp1530
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1531
tp1532
a(g45
I136
g46
S'self.zero_threshold)'
p1533
tp1534
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1535
tp1536
aasbsg52
Nsg53
g0
(g54
g2
Ntp1537
Rp1538
(dp1539
g58
(lp1540
g1328
ag0
(g7
g2
Ntp1541
Rp1542
(dp1543
g11
S'auto_1238'
p1544
sg13
I0
sg14
g0
(g15
g2
Ntp1545
Rp1546
(dp1547
g19
(lp1548
(lp1549
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1550
tp1551
a(g22
I72
g26
S'exec code in run_globals'
p1552
tp1553
a(g29
I249
g30
S'Model(hyperparams).train()'
p1554
tp1555
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1556
tp1557
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1558
tp1559
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1560
tp1561
a(g45
I136
g46
S'self.zero_threshold)'
p1562
tp1563
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1564
tp1565
aasbsg52
Nsg53
g0
(g54
g2
Ntp1566
Rp1567
(dp1568
g58
(lp1569
g676
asg14
g0
(g15
g2
Ntp1570
Rp1571
sg204
(lp1572
g1542
asg206
g0
(g207
g2
Ntp1573
Rp1574
(dp1575
g211
(lp1576
sg213
(lp1577
sg215
(lp1578
I0
aI1
asg217
g218
sg219
(tsg220
(lp1579
g222
asg223
I01
sg224
(g225
g225
tp1580
sg227
(dp1581
S'support_code_apply'
p1582
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1583
ssg231
(dp1584
I0
(lp1585
I0
assg234
(lp1586
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1587
asbsbsg177
g0
(g178
g2
Ntp1588
Rp1589
(dp1590
g182
(I01
I01
tp1591
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1592
Rp1593
sg204
(lp1594
g1513
asg206
g621
sbsg177
g0
(g178
g2
Ntp1595
Rp1596
(dp1597
g182
(I00
I00
tp1598
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1599
Rp1600
(dp1601
g11
S'auto_1244'
p1602
sg13
I0
sg14
g0
(g15
g2
Ntp1603
Rp1604
(dp1605
g19
(lp1606
(lp1607
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1608
tp1609
a(g22
I72
g26
S'exec code in run_globals'
p1610
tp1611
a(g29
I249
g30
S'Model(hyperparams).train()'
p1612
tp1613
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1614
tp1615
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1616
tp1617
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1618
tp1619
a(g45
I136
g46
S'self.zero_threshold)'
p1620
tp1621
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1622
tp1623
aasbsg52
Nsg53
g0
(g54
g2
Ntp1624
Rp1625
(dp1626
g58
(lp1627
g877
asg14
g0
(g15
g2
Ntp1628
Rp1629
sg204
(lp1630
g1600
asg206
g0
(g207
g2
Ntp1631
Rp1632
(dp1633
g211
(lp1634
sg213
(lp1635
sg215
(lp1636
I0
aI1
asg217
g218
sg219
(tsg220
(lp1637
g222
asg223
I01
sg224
(g225
g225
tp1638
sg227
(dp1639
S'support_code_apply'
p1640
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1641
ssg231
(dp1642
I0
(lp1643
I0
assg234
(lp1644
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1645
asbsbsg177
g0
(g178
g2
Ntp1646
Rp1647
(dp1648
g182
(I01
I01
tp1649
sg183
g904
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1650
Rp1651
(dp1652
g11
S'auto_1245'
p1653
sg13
I0
sg14
g0
(g15
g2
Ntp1654
Rp1655
(dp1656
g19
(lp1657
(lp1658
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1659
tp1660
a(g22
I72
g26
S'exec code in run_globals'
p1661
tp1662
a(g29
I249
g30
S'Model(hyperparams).train()'
p1663
tp1664
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1665
tp1666
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1667
tp1668
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1669
tp1670
a(g45
I136
g46
S'self.zero_threshold)'
p1671
tp1672
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p1673
tp1674
aasbsg52
Nsg53
g0
(g54
g2
Ntp1675
Rp1676
(dp1677
g58
(lp1678
g962
asg14
g0
(g15
g2
Ntp1679
Rp1680
sg204
(lp1681
g1651
asg206
g0
(g207
g2
Ntp1682
Rp1683
(dp1684
g211
(lp1685
sg213
(lp1686
sg215
(lp1687
I0
aI1
asg217
g218
sg219
(tsg220
(lp1688
g222
asg223
I01
sg224
(g225
g225
tp1689
sg227
(dp1690
S'support_code_apply'
p1691
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1692
ssg231
(dp1693
I0
(lp1694
I0
assg234
(lp1695
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1696
asbsbsg177
g0
(g178
g2
Ntp1697
Rp1698
(dp1699
g182
(I01
I01
tp1700
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1701
Rp1702
sg204
(lp1703
g1484
asg206
g1021
sbsg177
g0
(g178
g2
Ntp1704
Rp1705
(dp1706
g182
(I00
I00
tp1707
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1708
Rp1709
sg204
(lp1710
g1241
asg206
g1021
sbsg177
g0
(g178
g2
Ntp1711
Rp1712
(dp1713
g182
(I00
I00
tp1714
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1715
Rp1716
sg204
(lp1717
g61
asg206
g1052
sbsg177
g0
(g178
g2
Ntp1718
Rp1719
(dp1720
g182
(I00
I00
tp1721
sg183
S'float32'
p1722
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp1723
Rp1724
(dp1725
g11
S'auto_1257'
p1726
sg13
I0
sg14
g0
(g15
g2
Ntp1727
Rp1728
(dp1729
g19
(lp1730
(lp1731
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1732
tp1733
a(g22
I72
g26
S'exec code in run_globals'
p1734
tp1735
a(g29
I249
g30
S'Model(hyperparams).train()'
p1736
tp1737
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1738
tp1739
a(g37
I90
g38
S'test_output = lasagne.layers.get_output(mlp, deterministic=True)'
p1740
tp1741
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p1742
tp1743
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p1744
tp1745
a(g49
I123
g46
S'activation = activation + self.b'
p1746
tp1747
aasbsg52
Nsg53
g0
(g54
g2
Ntp1748
Rp1749
(dp1750
g58
(lp1751
g0
(g441
g2
Ntp1752
Rp1753
(dp1754
g11
S'auto_9'
p1755
sg13
Nsg14
g0
(g15
g2
Ntp1756
Rp1757
(dp1758
g19
(lp1759
(lp1760
(g22
I72
g26
S'exec code in run_globals'
p1761
tp1762
a(g29
I249
g30
S'Model(hyperparams).train()'
p1763
tp1764
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1765
tp1766
a(g37
I55
g38
S'num_units=OUTPUT_DIMS)'
p1767
tp1768
a(g459
I120
g34
S'super(DenseLayer, self).__init__(incoming, num_units, W=lasagne.init.Uniform((-self.H,self.H)), **kwargs)'
p1769
tp1770
a(g49
I108
g34
S'regularizable=False)'
p1771
tp1772
a(g464
I234
g465
S'param = utils.create_param(spec, shape, name)'
p1773
tp1774
a(g468
I393
g469
S'spec = theano.shared(spec, broadcastable=bcast)'
p1775
tp1776
aasbsg472
g0
(g473
g2
Ntp1777
Rp1778
(dp1779
g52
Nsg477
(lp1780
g194
(g195
(I0
tp1781
g197
tp1782
Rp1783
(I1
(I10
tp1784
g189
I00
S'\x1cKG\xbf\xb4.U\xbf\x1a\x01U\xbf\xb0N4\xbf\x19,9\xbf\xcc";\xbf\xaa\xd1T\xbf\xaf4S\xbf\x19\xcf\xee<\xf1\x90\x12\xbf'
p1785
tp1786
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp1787
Rp1788
(dp1789
g182
(I00
tp1790
sg183
S'float32'
p1791
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
g197
sg53
Nsg177
g1788
sbasg14
g0
(g15
g2
Ntp1792
Rp1793
sg204
(lp1794
g1724
asg206
g0
(g207
g2
Ntp1795
Rp1796
(dp1797
g211
(lp1798
sg213
(lp1799
I0
asg215
(lp1800
I0
asg217
g218
sg219
g1790
sg220
(lp1801
g222
asg223
I01
sg224
(g225
I0
tp1802
sg227
(dp1803
S'support_code_apply'
p1804
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1805
ssg231
(dp1806
I0
(lp1807
I0
assg234
(lp1808
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p1809
asbsbsg177
g0
(g178
g2
Ntp1810
Rp1811
(dp1812
g182
(I01
I00
tp1813
sg183
g1791
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp1814
Rp1815
sg204
(lp1816
g9
asg206
g1153
sbsg177
g0
(g178
g2
Ntp1817
Rp1818
(dp1819
g182
(I00
I00
tp1820
sg183
g531
sg185
g189
sg192
I00
sg52
NsbsbsS'val_fn'
p1821
ctheano.compile.function_module
_constructor_Function
p1822
(g0
(ctheano.compile.function_module
FunctionMaker
p1823
g2
Ntp1824
Rp1825
(dp1826
S'profile'
p1827
Nsg58
(lp1828
g0
(ctheano.compile.io
In
p1829
g2
Ntp1830
Rp1831
(dp1832
g52
g58
sS'update'
p1833
NsS'value'
p1834
NsS'borrow'
p1835
Nsg485
I00
sS'implicit'
p1836
I00
sS'mutable'
p1837
I00
sS'variable'
p1838
g329
sS'shared'
p1839
I00
sg492
Nsbag0
(g1829
g2
Ntp1840
Rp1841
(dp1842
g52
S'targets'
p1843
sg1833
Nsg1834
Nsg1835
Nsg485
I00
sg1836
I00
sg1837
I00
sg1838
g0
(g7
g2
Ntp1844
Rp1845
(dp1846
g11
S'auto_4'
p1847
sg13
Nsg14
g0
(g15
g2
Ntp1848
Rp1849
(dp1850
g19
(lp1851
(lp1852
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1853
tp1854
a(g22
I72
g26
S'exec code in run_globals'
p1855
tp1856
a(g29
I249
g30
S'Model(hyperparams).train()'
p1857
tp1858
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1859
tp1860
a(g37
I12
g38
S"target = T.matrix('targets')"
p1861
tp1862
aasbsg52
g1843
sg53
Nsg177
g0
(g178
g2
Ntp1863
Rp1864
(dp1865
g182
(I00
I00
tp1866
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbsg1839
I00
sg492
Nsbag0
(g1829
g2
Ntp1867
Rp1868
(dp1869
g52
g493
sg1833
Nsg1834
g475
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I00
sg1838
g443
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp1870
Rp1871
(dp1872
g52
g197
sg1833
Nsg1834
g1113
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I00
sg1838
g1088
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp1873
Rp1874
(dp1875
g52
g493
sg1833
Nsg1834
g1353
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I00
sg1838
g1328
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp1876
Rp1877
(dp1878
g52
g197
sg1833
Nsg1834
g1778
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I00
sg1838
g1753
sg1839
I01
sg492
NsbasS'required'
p1879
(lp1880
I01
aI01
aI00
aI00
aI00
aI00
asS'unpack_single'
p1881
I00
sS'output_keys'
p1882
NsS'fgraph'
p1883
g0
(ctheano.gof.fg
FunctionGraph
p1884
g2
Ntp1885
Rp1886
(dp1887
g1827
Nsg58
(lp1888
g0
(g7
g2
Ntp1889
Rp1890
(dp1891
g13
Nsg52
g58
sg1883
g1886
sS'clients'
p1892
(lp1893
(g0
(g54
g2
Ntp1894
Rp1895
(dp1896
g58
(lp1897
g1890
asg1883
g1886
sg204
(lp1898
g0
(g7
g2
Ntp1899
Rp1900
(dp1901
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp1902
(g0
(g54
g2
Ntp1903
Rp1904
(dp1905
g58
(lp1906
g0
(g7
g2
Ntp1907
Rp1908
(dp1909
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp1910
(g1904
I0
tp1911
asg11
S'auto_8042'
p1912
sg14
g0
(g15
g2
Ntp1913
Rp1914
(dp1915
g19
(lp1916
(lp1917
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1918
tp1919
a(g22
I72
g26
S'exec code in run_globals'
p1920
tp1921
a(g29
I249
g30
S'Model(hyperparams).train()'
p1922
tp1923
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1924
tp1925
a(g37
I94
g38
S'dtype=theano.config.floatX)'
p1926
tp1927
aasbsg53
g0
(g54
g2
Ntp1928
Rp1929
(dp1930
g58
(lp1931
g0
(g7
g2
Ntp1932
Rp1933
(dp1934
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp1935
(g1929
I0
tp1936
asg11
S'auto_8037'
p1937
sg14
g0
(g15
g2
Ntp1938
Rp1939
(dp1940
g19
(lp1941
(lp1942
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1943
tp1944
a(g22
I72
g26
S'exec code in run_globals'
p1945
tp1946
a(g29
I249
g30
S'Model(hyperparams).train()'
p1947
tp1948
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1949
tp1950
a(g37
I93
g38
S'T.argmax(target, axis=1)),'
p1951
tp1952
aasbsg53
g0
(g54
g2
Ntp1953
Rp1954
(dp1955
g58
(lp1956
g0
(g7
g2
Ntp1957
Rp1958
(dp1959
g13
I0
sg52
S'argmax'
p1960
sg1883
g1886
sg1892
(lp1961
(g1954
I0
tp1962
asg11
S'auto_8128'
p1963
sg14
g0
(g15
g2
Ntp1964
Rp1965
(dp1966
g19
(lp1967
(lp1968
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p1969
tp1970
a(g22
I72
g26
S'exec code in run_globals'
p1971
tp1972
a(g29
I249
g30
S'Model(hyperparams).train()'
p1973
tp1974
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p1975
tp1976
a(g37
I92
g38
S'test_err = T.mean(T.neq(T.argmax(test_output, axis=1),'
p1977
tp1978
aasbsg53
g0
(g54
g2
Ntp1979
Rp1980
(dp1981
g58
(lp1982
g0
(g7
g2
Ntp1983
Rp1984
(dp1985
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp1986
(g1980
I0
tp1987
a(g0
(g54
g2
Ntp1988
Rp1989
(dp1990
g58
(lp1991
g0
(g149
g2
Ntp1992
Rp1993
(dp1994
g13
Nsg52
Nsg1883
g1886
sg177
g1589
sg1892
(lp1995
(g0
(g54
g2
Ntp1996
Rp1997
(dp1998
g58
(lp1999
g0
(g441
g2
Ntp2000
Rp2001
(dp2002
g13
Nsg472
g475
sg52
g493
sg1883
g1886
sg1892
(lp2003
(g1997
I0
tp2004
asg11
S'auto_7979'
p2005
sg14
g0
(g15
g2
Ntp2006
Rp2007
(dp2008
g19
g449
sbsg53
Nsg177
g488
sbag0
(g149
g2
Ntp2009
Rp2010
(dp2011
g13
Nsg52
Nsg1883
g1886
sg177
g1422
sg1892
(lp2012
(g1997
I1
tp2013
a(g0
(g54
g2
Ntp2014
Rp2015
(dp2016
g58
(lp2017
g0
(g441
g2
Ntp2018
Rp2019
(dp2020
g13
Nsg472
g1353
sg52
g493
sg1883
g1886
sg1892
(lp2021
(g2015
I0
tp2022
asg11
S'auto_7981'
p2023
sg14
g0
(g15
g2
Ntp2024
Rp2025
(dp2026
g19
g1334
sbsg53
Nsg177
g1363
sbag2010
ag1993
ag0
(g149
g2
Ntp2027
Rp2028
(dp2029
g13
Nsg52
Nsg1883
g1886
sg177
g1647
sg1892
(lp2030
(g1997
I3
tp2031
a(g2015
I3
tp2032
asg11
S'auto_8080'
p2033
sg14
g0
(g15
g2
Ntp2034
Rp2035
(dp2036
g19
(lp2037
g1607
asg175
cnumpy.core.multiarray
scalar
p2038
(g189
S'\x00\x00\x80\xbf'
p2039
tp2040
Rp2041
sbsg193
g194
(g195
(I0
tp2042
g197
tp2043
Rp2044
(I1
(I1
I1
tp2045
g189
I00
S'\x00\x00\x80\xbf'
p2046
tp2047
bsbag0
(g149
g2
Ntp2048
Rp2049
(dp2050
g13
Nsg52
Nsg1883
g1886
sg177
g1698
sg1892
(lp2051
(g1997
I4
tp2052
a(g2015
I4
tp2053
a(g1989
I1
tp2054
asg11
S'auto_8072'
p2055
sg14
g0
(g15
g2
Ntp2056
Rp2057
(dp2058
g19
(lp2059
g1658
asg175
g2038
(g189
S'\x00\x00\x80?'
p2060
tp2061
Rp2062
sbsg193
g194
(g195
(I0
tp2063
g197
tp2064
Rp2065
(I1
(I1
I1
tp2066
g189
I00
S'\x00\x00\x80?'
p2067
tp2068
bsbasg1883
g1886
sg204
(lp2069
g0
(g7
g2
Ntp2070
Rp2071
(dp2072
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2073
(g0
(g54
g2
Ntp2074
Rp2075
(dp2076
g58
(lp2077
g0
(g7
g2
Ntp2078
Rp2079
(dp2080
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2081
(g2075
I0
tp2082
asg11
S'auto_8562'
p2083
sg14
g0
(g15
g2
Ntp2084
Rp2085
(dp2086
g19
(lp2087
sbsg53
g0
(g54
g2
Ntp2088
Rp2089
(dp2090
g58
(lp2091
g0
(g149
g2
Ntp2092
Rp2093
(dp2094
g13
Nsg52
Nsg1883
g1886
sg177
g238
sg1892
(lp2095
(g2089
I0
tp2096
asg11
S'auto_8104'
p2097
sg14
g0
(g15
g2
Ntp2098
Rp2099
(dp2100
g19
(lp2101
g128
asg175
g2038
(g189
S'\x00\x00\x00?'
p2102
tp2103
Rp2104
sbsg193
g194
(g195
(I0
tp2105
g197
tp2106
Rp2107
(I1
(I1
I1
tp2108
g189
I00
S'\x00\x00\x00?'
p2109
tp2110
bsbag0
(g7
g2
Ntp2111
Rp2112
(dp2113
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2114
(g2089
I1
tp2115
asg11
S'auto_8112'
p2116
sg14
g0
(g15
g2
Ntp2117
Rp2118
(dp2119
g19
(lp2120
g307
asbsg53
g0
(g54
g2
Ntp2121
Rp2122
(dp2123
g58
(lp2124
g1890
ag0
(g7
g2
Ntp2125
Rp2126
(dp2127
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2128
(g2122
I1
tp2129
asg11
S'auto_8371'
p2130
sg14
g0
(g15
g2
Ntp2131
Rp2132
(dp2133
g19
(lp2134
sbsg53
g1997
sg177
g0
(g178
g2
Ntp2135
Rp2136
(dp2137
g182
(I00
I00
tp2138
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g1886
sg204
(lp2139
g2112
asg14
g0
(g15
g2
Ntp2140
Rp2141
(dp2142
S'imported_by'
p2143
(lp2144
S'local_dot_to_dot22'
p2145
aS'init'
p2146
asbsS'deps'
p2147
(dp2148
sg206
g0
(ctheano.tensor.blas
Dot22
p2149
g2
Ntp2150
Rp2151
sbsg177
g0
(g178
g2
Ntp2152
Rp2153
(dp2154
g182
(I00
I00
tp2155
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp2156
Rp2157
(dp2158
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2159
(g2089
I2
tp2160
asg11
S'auto_7998'
p2161
sg14
g0
(g15
g2
Ntp2162
Rp2163
(dp2164
g19
g1065
sbsg53
g0
(g54
g2
Ntp2165
Rp2166
(dp2167
g58
(lp2168
g0
(g441
g2
Ntp2169
Rp2170
(dp2171
g13
Nsg472
g1113
sg52
g197
sg1883
g1886
sg1892
(lp2172
(g2166
I0
tp2173
asg11
S'auto_7980'
p2174
sg14
g0
(g15
g2
Ntp2175
Rp2176
(dp2177
g19
g1094
sbsg53
Nsg177
g1123
sbasg1883
g1886
sg204
(lp2178
g2157
asg14
g0
(g15
g2
Ntp2179
Rp2180
(dp2181
g2143
(lp2182
g2146
ag2146
asbsg2147
(dp2183
sg206
g1131
sbsg177
g1146
sbasg1883
g1886
sg204
(lp2184
g2079
asg14
g0
(g15
g2
Ntp2185
Rp2186
(dp2187
S'fake_node'
p2188
g0
(g54
g2
Ntp2189
Rp2190
(dp2191
g58
(lp2192
g0
(ctheano.scalar.basic
ScalarVariable
p2193
g2
Ntp2194
Rp2195
(dp2196
g11
S'auto_8708'
p2197
sg13
Nsg14
g0
(g15
g2
Ntp2198
Rp2199
sg52
Nsg53
Nsg177
g0
(ctheano.scalar.basic
Scalar
p2200
g2
Ntp2201
Rp2202
(dp2203
g183
g531
sbsbag0
(g2193
g2
Ntp2204
Rp2205
(dp2206
g11
S'auto_8709'
p2207
sg13
Nsg14
g0
(g15
g2
Ntp2208
Rp2209
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2210
Rp2211
(dp2212
g11
S'auto_8710'
p2213
sg13
Nsg14
g0
(g15
g2
Ntp2214
Rp2215
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp2216
Rp2217
sg204
(lp2218
g0
(g2193
g2
Ntp2219
Rp2220
(dp2221
g11
S'auto_8711'
p2222
sg13
I0
sg14
g0
(g15
g2
Ntp2223
Rp2224
sg52
Nsg53
g2190
sg177
g2202
sbasg206
g0
(ctheano.scalar.basic
Composite
p2225
g2
Ntp2226
Rp2227
(dp2228
g58
(lp2229
g0
(g2193
g2
Ntp2230
Rp2231
(dp2232
g11
S'auto_8544'
p2233
sg13
Nsg14
g0
(g15
g2
Ntp2234
Rp2235
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2236
Rp2237
(dp2238
g11
S'auto_8545'
p2239
sg13
Nsg14
g0
(g15
g2
Ntp2240
Rp2241
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2242
Rp2243
(dp2244
g11
S'auto_8546'
p2245
sg13
Nsg14
g0
(g15
g2
Ntp2246
Rp2247
sg52
Nsg53
Nsg177
g2202
sbasS'nin'
p2248
I3
sg52
NsS'inputs_type'
p2249
(g2202
g2202
g2202
tp2250
sg204
(lp2251
g0
(g2193
g2
Ntp2252
Rp2253
(dp2254
g11
S'auto_8550'
p2255
sg13
I0
sg14
g0
(g15
g2
Ntp2256
Rp2257
(dp2258
g19
(lp2259
sbsg52
Nsg53
g0
(g54
g2
Ntp2260
Rp2261
(dp2262
g58
(lp2263
g2231
ag0
(g2193
g2
Ntp2264
Rp2265
(dp2266
g11
S'auto_8549'
p2267
sg13
I0
sg14
g0
(g15
g2
Ntp2268
Rp2269
(dp2270
g19
(lp2271
sbsg52
Nsg53
g0
(g54
g2
Ntp2272
Rp2273
(dp2274
g58
(lp2275
g0
(g2193
g2
Ntp2276
Rp2277
(dp2278
g11
S'auto_8547'
p2279
sg13
I0
sg14
g0
(g15
g2
Ntp2280
Rp2281
(dp2282
g19
(lp2283
sbsg52
Nsg53
g0
(g54
g2
Ntp2284
Rp2285
(dp2286
g58
(lp2287
g2237
ag2243
asg14
g0
(g15
g2
Ntp2288
Rp2289
sg204
(lp2290
g2277
asg206
g1157
sbsg177
g2202
sbag0
(g2193
g2
Ntp2291
Rp2292
(dp2293
g11
S'auto_8548'
p2294
sg13
I0
sg14
g0
(g15
g2
Ntp2295
Rp2296
(dp2297
g19
(lp2298
sbsg52
Nsg53
g0
(g54
g2
Ntp2299
Rp2300
(dp2301
g58
(lp2302
g2277
asg14
g0
(g15
g2
Ntp2303
Rp2304
sg204
(lp2305
g2292
asg206
g506
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp2306
Rp2307
sg204
(lp2308
g2265
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp2309
Rp2310
sg204
(lp2311
g2253
asg206
g1224
sbsg177
g2202
sbasS'_c_code'
p2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i1)s + %(i2)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = fabs(V%(id)s_tmp1);\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = V%(id)s_tmp1 + V%(id)s_tmp2;\n%(o0)s = %(i0)s * V%(id)s_tmp3;\n}\n'
p2313
sS'outputs_type'
p2314
(g2202
tp2315
sg508
g0
(ctheano.scalar.basic
transfer_type
p2316
g2
Ntp2317
Rp2318
(dp2319
S'transfer'
p2320
(I1
tp2321
sbsS'nodenames'
p2322
(lp2323
S'%(nodename)s_subnode0'
p2324
aS'%(nodename)s_subnode1'
p2325
aS'%(nodename)s_subnode2'
p2326
aS'%(nodename)s_subnode3'
p2327
asS'nout'
p2328
I1
sbsbsg2143
(lp2329
S'inplace_elemwise_optimizer'
p2330
ag2146
asbsg2147
(dp2331
sg206
g0
(g497
g2
Ntp2332
Rp2333
(dp2334
g52
Nsg503
g2227
sg511
(dp2335
I0
(lp2336
I1
assg513
Nsg516
g0
(g517
g2
Ntp2337
Rp2338
(dp2339
g521
I3713080549409410656
sg522
(dp2340
I0
I1
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp2341
Rp2342
(dp2343
g182
(I00
I00
tp2344
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag2071
asg1883
g1886
sg204
(lp2345
g0
(g7
g2
Ntp2346
Rp2347
(dp2348
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2349
(g0
(g54
g2
Ntp2350
Rp2351
(dp2352
g58
(lp2353
g2347
ag0
(g7
g2
Ntp2354
Rp2355
(dp2356
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2357
(g2351
I1
tp2358
asg11
S'auto_7983'
p2359
sg14
g0
(g15
g2
Ntp2360
Rp2361
(dp2362
g19
g1730
sbsg53
g0
(g54
g2
Ntp2363
Rp2364
(dp2365
g58
(lp2366
g0
(g441
g2
Ntp2367
Rp2368
(dp2369
g13
Nsg472
g1778
sg52
g197
sg1883
g1886
sg1892
(lp2370
(g2364
I0
tp2371
asg11
S'auto_7982'
p2372
sg14
g0
(g15
g2
Ntp2373
Rp2374
(dp2375
g19
g1759
sbsg53
Nsg177
g1788
sbasg1883
g1886
sg204
(lp2376
g2355
asg14
g0
(g15
g2
Ntp2377
Rp2378
(dp2379
g2143
(lp2380
g2146
ag2146
asbsg2147
(dp2381
sg206
g1796
sbsg177
g1811
sbasg1883
g1886
sg204
(lp2382
g1984
asg14
g0
(g15
g2
Ntp2383
Rp2384
(dp2385
g2188
g0
(g54
g2
Ntp2386
Rp2387
(dp2388
g58
(lp2389
g0
(g2193
g2
Ntp2390
Rp2391
(dp2392
g11
S'auto_8733'
p2393
sg13
Nsg14
g0
(g15
g2
Ntp2394
Rp2395
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2396
Rp2397
(dp2398
g11
S'auto_8734'
p2399
sg13
Nsg14
g0
(g15
g2
Ntp2400
Rp2401
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp2402
Rp2403
sg204
(lp2404
g0
(g2193
g2
Ntp2405
Rp2406
(dp2407
g11
S'auto_8735'
p2408
sg13
I0
sg14
g0
(g15
g2
Ntp2409
Rp2410
sg52
Nsg53
g2387
sg177
g2202
sbasg206
g0
(g1155
g2
Ntp2411
Rp2412
(dp2413
g508
g0
(g2316
g2
Ntp2414
Rp2415
(dp2416
g2320
(I0
tp2417
sbsg52
Nsbsbsg2143
(lp2418
g2330
ag2146
asbsg2147
(dp2419
sg206
g0
(g497
g2
Ntp2420
Rp2421
(dp2422
g52
Nsg503
g2412
sg511
(dp2423
I0
(lp2424
I0
assg513
g1163
sg516
g0
(g517
g2
Ntp2425
Rp2426
(dp2427
g521
I3713080549408328131
sg522
(dp2428
I0
I0
ssbsg524
I00
sbsbI0
tp2429
asg11
S'auto_8113'
p2430
sg14
g0
(g15
g2
Ntp2431
Rp2432
(dp2433
g19
(lp2434
g68
asbsg53
g2075
sg177
g0
(g178
g2
Ntp2435
Rp2436
(dp2437
g182
(I00
I00
tp2438
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp2439
Rp2440
(dp2441
g2143
(lp2442
g2145
ag2146
asbsg2147
(dp2443
sg206
g2151
sbI1
tp2444
asg11
S'auto_8453'
p2445
sg14
g0
(g15
g2
Ntp2446
Rp2447
(dp2448
g19
(lp2449
sbsg53
g2015
sg177
g0
(g178
g2
Ntp2450
Rp2451
(dp2452
g182
(I00
I00
tp2453
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp2454
Rp2455
(dp2456
g2188
g0
(g54
g2
Ntp2457
Rp2458
(dp2459
g58
(lp2460
g0
(g2193
g2
Ntp2461
Rp2462
(dp2463
g11
S'auto_8639'
p2464
sg13
Nsg14
g0
(g15
g2
Ntp2465
Rp2466
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2467
Rp2468
(dp2469
g11
S'auto_8640'
p2470
sg13
Nsg14
g0
(g15
g2
Ntp2471
Rp2472
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2473
Rp2474
(dp2475
g11
S'auto_8641'
p2476
sg13
Nsg14
g0
(g15
g2
Ntp2477
Rp2478
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2479
Rp2480
(dp2481
g11
S'auto_8642'
p2482
sg13
Nsg14
g0
(g15
g2
Ntp2483
Rp2484
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2485
Rp2486
(dp2487
g11
S'auto_8643'
p2488
sg13
Nsg14
g0
(g15
g2
Ntp2489
Rp2490
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp2491
Rp2492
sg204
(lp2493
g0
(g2193
g2
Ntp2494
Rp2495
(dp2496
g11
S'auto_8644'
p2497
sg13
I0
sg14
g0
(g15
g2
Ntp2498
Rp2499
sg52
Nsg53
g2458
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp2500
Rp2501
(dp2502
g58
(lp2503
g0
(g2193
g2
Ntp2504
Rp2505
(dp2506
g11
S'auto_8425'
p2507
sg13
Nsg14
g0
(g15
g2
Ntp2508
Rp2509
(dp2510
S'test_value'
p2511
g2038
(g189
S'w\xda1\xbf'
p2512
tp2513
Rp2514
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2515
Rp2516
(dp2517
g11
S'auto_8426'
p2518
sg13
Nsg14
g0
(g15
g2
Ntp2519
Rp2520
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2521
Rp2522
(dp2523
g11
S'auto_8427'
p2524
sg13
Nsg14
g0
(g15
g2
Ntp2525
Rp2526
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2527
Rp2528
(dp2529
g11
S'auto_8428'
p2530
sg13
Nsg14
g0
(g15
g2
Ntp2531
Rp2532
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2533
Rp2534
(dp2535
g11
S'auto_8429'
p2536
sg13
Nsg14
g0
(g15
g2
Ntp2537
Rp2538
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp2539
sg204
(lp2540
g0
(g2193
g2
Ntp2541
Rp2542
(dp2543
g11
S'auto_8436'
p2544
sg13
I0
sg14
g0
(g15
g2
Ntp2545
Rp2546
(dp2547
g19
(lp2548
sbsg52
Nsg53
g0
(g54
g2
Ntp2549
Rp2550
(dp2551
g58
(lp2552
g0
(g2193
g2
Ntp2553
Rp2554
(dp2555
g11
S'auto_8434'
p2556
sg13
I0
sg14
g0
(g15
g2
Ntp2557
Rp2558
(dp2559
g19
(lp2560
sbsg52
Nsg53
g0
(g54
g2
Ntp2561
Rp2562
(dp2563
g58
(lp2564
g0
(g2193
g2
Ntp2565
Rp2566
(dp2567
g11
S'auto_8433'
p2568
sg13
I0
sg14
g0
(g15
g2
Ntp2569
Rp2570
(dp2571
g19
(lp2572
sbsg52
Nsg53
g0
(g54
g2
Ntp2573
Rp2574
(dp2575
g58
(lp2576
g2505
asg14
g0
(g15
g2
Ntp2577
Rp2578
sg204
(lp2579
g2566
asg206
g506
sbsg177
g2202
sbag2516
asg14
g0
(g15
g2
Ntp2580
Rp2581
sg204
(lp2582
g2554
asg206
g625
sbsg177
g0
(g2200
g2
Ntp2583
Rp2584
(dp2585
g183
g627
sbsbag2522
ag0
(g2193
g2
Ntp2586
Rp2587
(dp2588
g11
S'auto_8435'
p2589
sg13
I0
sg14
g0
(g15
g2
Ntp2590
Rp2591
(dp2592
g19
(lp2593
sbsg52
Nsg53
g0
(g54
g2
Ntp2594
Rp2595
(dp2596
g58
(lp2597
g0
(g2193
g2
Ntp2598
Rp2599
(dp2600
g11
S'auto_8432'
p2601
sg13
I0
sg14
g0
(g15
g2
Ntp2602
Rp2603
(dp2604
g19
(lp2605
sbsg52
Nsg53
g0
(g54
g2
Ntp2606
Rp2607
(dp2608
g58
(lp2609
g2505
ag2522
asg14
g0
(g15
g2
Ntp2610
Rp2611
sg204
(lp2612
g2599
asg206
g625
sbsg177
g2584
sbag2528
ag2534
asg14
g0
(g15
g2
Ntp2613
Rp2614
sg204
(lp2615
g2587
asg206
g1025
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp2616
Rp2617
sg204
(lp2618
g2542
asg206
g1025
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s < %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = V%(id)s_tmp1 ? %(i3)s : %(i4)s;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = fabs(%(i0)s);\nnpy_bool V%(id)s_tmp4;\nV%(id)s_tmp4 = (V%(id)s_tmp3 < %(i1)s);\n%(o0)s = V%(id)s_tmp4 ? %(i2)s : V%(id)s_tmp2;\n}\n'
p2619
sg2314
(g2202
tp2620
sg2322
(lp2621
S'%(nodename)s_subnode0'
p2622
aS'%(nodename)s_subnode1'
p2623
aS'%(nodename)s_subnode2'
p2624
aS'%(nodename)s_subnode3'
p2625
aS'%(nodename)s_subnode4'
p2626
asg2328
I1
sbsbsg2143
(lp2627
S'FusionOptimizer'
p2628
ag2146
asbsg2147
(dp2629
sg206
g0
(g497
g2
Ntp2630
Rp2631
(dp2632
g52
Nsg503
g2501
sg511
(dp2633
sg513
Nsg516
g0
(g517
g2
Ntp2634
Rp2635
(dp2636
g521
I0
sg522
(dp2637
sbsg524
I00
sbsbI1
tp2638
asg11
S'auto_8096'
p2639
sg14
g0
(g15
g2
Ntp2640
Rp2641
(dp2642
g19
(lp2643
g1382
asg175
g2038
(g189
S'33\xb3>'
p2644
tp2645
Rp2646
sbsg193
g194
(g195
(I0
tp2647
g197
tp2648
Rp2649
(I1
(I1
I1
tp2650
g189
I00
S'33\xb3>'
p2651
tp2652
bsbag1993
ag2028
ag2049
asg1883
g1886
sg204
(lp2653
g2126
asg14
g0
(g15
g2
Ntp2654
Rp2655
(dp2656
g2188
g0
(g54
g2
Ntp2657
Rp2658
(dp2659
g58
(lp2660
g0
(g2193
g2
Ntp2661
Rp2662
(dp2663
g11
S'auto_8670'
p2664
sg13
Nsg14
g0
(g15
g2
Ntp2665
Rp2666
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2667
Rp2668
(dp2669
g11
S'auto_8671'
p2670
sg13
Nsg14
g0
(g15
g2
Ntp2671
Rp2672
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2673
Rp2674
(dp2675
g11
S'auto_8672'
p2676
sg13
Nsg14
g0
(g15
g2
Ntp2677
Rp2678
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2679
Rp2680
(dp2681
g11
S'auto_8673'
p2682
sg13
Nsg14
g0
(g15
g2
Ntp2683
Rp2684
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2685
Rp2686
(dp2687
g11
S'auto_8674'
p2688
sg13
Nsg14
g0
(g15
g2
Ntp2689
Rp2690
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp2691
Rp2692
sg204
(lp2693
g0
(g2193
g2
Ntp2694
Rp2695
(dp2696
g11
S'auto_8675'
p2697
sg13
I0
sg14
g0
(g15
g2
Ntp2698
Rp2699
sg52
Nsg53
g2658
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp2700
Rp2701
(dp2702
g58
(lp2703
g0
(g2193
g2
Ntp2704
Rp2705
(dp2706
g11
S'auto_8343'
p2707
sg13
Nsg14
g0
(g15
g2
Ntp2708
Rp2709
(dp2710
g2511
g2038
(g189
S'*\x14z>'
p2711
tp2712
Rp2713
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2714
Rp2715
(dp2716
g11
S'auto_8344'
p2717
sg13
Nsg14
g0
(g15
g2
Ntp2718
Rp2719
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2720
Rp2721
(dp2722
g11
S'auto_8345'
p2723
sg13
Nsg14
g0
(g15
g2
Ntp2724
Rp2725
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2726
Rp2727
(dp2728
g11
S'auto_8346'
p2729
sg13
Nsg14
g0
(g15
g2
Ntp2730
Rp2731
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp2732
Rp2733
(dp2734
g11
S'auto_8347'
p2735
sg13
Nsg14
g0
(g15
g2
Ntp2736
Rp2737
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp2738
sg204
(lp2739
g0
(g2193
g2
Ntp2740
Rp2741
(dp2742
g11
S'auto_8354'
p2743
sg13
I0
sg14
g0
(g15
g2
Ntp2744
Rp2745
(dp2746
g19
(lp2747
sbsg52
Nsg53
g0
(g54
g2
Ntp2748
Rp2749
(dp2750
g58
(lp2751
g0
(g2193
g2
Ntp2752
Rp2753
(dp2754
g11
S'auto_8352'
p2755
sg13
I0
sg14
g0
(g15
g2
Ntp2756
Rp2757
(dp2758
g19
(lp2759
sbsg52
Nsg53
g0
(g54
g2
Ntp2760
Rp2761
(dp2762
g58
(lp2763
g0
(g2193
g2
Ntp2764
Rp2765
(dp2766
g11
S'auto_8351'
p2767
sg13
I0
sg14
g0
(g15
g2
Ntp2768
Rp2769
(dp2770
g19
(lp2771
sbsg52
Nsg53
g0
(g54
g2
Ntp2772
Rp2773
(dp2774
g58
(lp2775
g2705
asg14
g0
(g15
g2
Ntp2776
Rp2777
sg204
(lp2778
g2765
asg206
g506
sbsg177
g2202
sbag2715
asg14
g0
(g15
g2
Ntp2779
Rp2780
sg204
(lp2781
g2753
asg206
g625
sbsg177
g2584
sbag2721
ag0
(g2193
g2
Ntp2782
Rp2783
(dp2784
g11
S'auto_8353'
p2785
sg13
I0
sg14
g0
(g15
g2
Ntp2786
Rp2787
(dp2788
g19
(lp2789
sbsg52
Nsg53
g0
(g54
g2
Ntp2790
Rp2791
(dp2792
g58
(lp2793
g0
(g2193
g2
Ntp2794
Rp2795
(dp2796
g11
S'auto_8350'
p2797
sg13
I0
sg14
g0
(g15
g2
Ntp2798
Rp2799
(dp2800
g19
(lp2801
sbsg52
Nsg53
g0
(g54
g2
Ntp2802
Rp2803
(dp2804
g58
(lp2805
g2705
ag2721
asg14
g0
(g15
g2
Ntp2806
Rp2807
sg204
(lp2808
g2795
asg206
g625
sbsg177
g2584
sbag2727
ag2733
asg14
g0
(g15
g2
Ntp2809
Rp2810
sg204
(lp2811
g2783
asg206
g1025
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp2812
Rp2813
sg204
(lp2814
g2741
asg206
g1025
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s < %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = V%(id)s_tmp1 ? %(i3)s : %(i4)s;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = fabs(%(i0)s);\nnpy_bool V%(id)s_tmp4;\nV%(id)s_tmp4 = (V%(id)s_tmp3 < %(i1)s);\n%(o0)s = V%(id)s_tmp4 ? %(i2)s : V%(id)s_tmp2;\n}\n'
p2815
sg2314
(g2202
tp2816
sg2322
(lp2817
S'%(nodename)s_subnode0'
p2818
aS'%(nodename)s_subnode1'
p2819
aS'%(nodename)s_subnode2'
p2820
aS'%(nodename)s_subnode3'
p2821
aS'%(nodename)s_subnode4'
p2822
asg2328
I1
sbsbsg2143
(lp2823
g2628
ag2146
asbsg2147
(dp2824
sg206
g0
(g497
g2
Ntp2825
Rp2826
(dp2827
g52
Nsg503
g2701
sg511
(dp2828
sg513
Nsg516
g0
(g517
g2
Ntp2829
Rp2830
(dp2831
g521
I0
sg522
(dp2832
sbsg524
I00
sbsbI2
tp2833
a(g2015
I2
tp2834
a(g1989
I0
tp2835
asg11
S'auto_8088'
p2836
sg14
g0
(g15
g2
Ntp2837
Rp2838
(dp2839
g19
(lp2840
g1549
asg175
g2038
(g189
S'\x00\x00\x00\x00'
p2841
tp2842
Rp2843
sbsg193
g194
(g195
(I0
tp2844
g197
tp2845
Rp2846
(I1
(I1
I1
tp2847
g189
I00
S'\x00\x00\x00\x00'
p2848
tp2849
bsbag2049
ag0
(g7
g2
Ntp2850
Rp2851
(dp2852
g13
Nsg52
g1843
sg1883
g1886
sg1892
(lp2853
(g0
(g54
g2
Ntp2854
Rp2855
(dp2856
g58
(lp2857
g2851
asg1883
g1886
sg204
(lp2858
g0
(g7
g2
Ntp2859
Rp2860
(dp2861
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2862
(g0
(g54
g2
Ntp2863
Rp2864
(dp2865
g58
(lp2866
g0
(g7
g2
Ntp2867
Rp2868
(dp2869
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2870
(g2864
I0
tp2871
asg11
S'auto_8053'
p2872
sg14
g0
(g15
g2
Ntp2873
Rp2874
(dp2875
g19
(lp2876
sbsg53
g0
(g54
g2
Ntp2877
Rp2878
(dp2879
g58
(lp2880
g2851
asg1883
g1886
sg204
(lp2881
g2868
asg14
g0
(g15
g2
Ntp2882
Rp2883
(dp2884
g2143
(lp2885
S'local_shape_to_shape_i'
p2886
ag2146
asbsg2147
(dp2887
sg206
g0
(ctheano.compile.ops
Shape_i
p2888
g2
Ntp2889
Rp2890
(dp2891
S'i'
p2892
I0
sbsbsg177
g0
(g178
g2
Ntp2893
Rp2894
(dp2895
g182
(tsg183
S'int64'
p2896
sg185
g186
(S'i8'
p2897
I0
I1
tp2898
Rp2899
(I3
S'<'
p2900
NNNI-1
I-1
I0
tp2901
bsg192
I00
sg52
Nsbsbag2860
asg1883
g1886
sg204
(lp2902
g0
(g7
g2
Ntp2903
Rp2904
(dp2905
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2906
(g0
(g54
g2
Ntp2907
Rp2908
(dp2909
g58
(lp2910
g2904
asg1883
g1886
sg204
(lp2911
g0
(g7
g2
Ntp2912
Rp2913
(dp2914
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2915
(g0
(g54
g2
Ntp2916
Rp2917
(dp2918
g58
(lp2919
g2913
ag0
(ctheano.scalar.basic
ScalarConstant
p2920
g2
Ntp2921
Rp2922
(dp2923
g13
Nsg52
Nsg1883
g1886
sg177
g0
(g2200
g2
Ntp2924
Rp2925
(dp2926
g183
g2896
sbsg1892
(lp2927
(g2917
I1
tp2928
asg11
S'auto_8026'
p2929
sg14
g0
(g15
g2
Ntp2930
Rp2931
(dp2932
g19
(lp2933
(lp2934
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p2935
tp2936
a(g22
I72
g26
S'exec code in run_globals'
p2937
tp2938
a(g29
I249
g30
S'Model(hyperparams).train()'
p2939
tp2940
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p2941
tp2942
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p2943
tp2944
aasbsg193
g2038
(g2899
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2945
tp2946
Rp2947
sbasg1883
g1886
sg204
(lp2948
g0
(g7
g2
Ntp2949
Rp2950
(dp2951
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2952
(g0
(g54
g2
Ntp2953
Rp2954
(dp2955
g58
(lp2956
g0
(g7
g2
Ntp2957
Rp2958
(dp2959
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2960
(g2954
I0
tp2961
asg11
S'auto_8030'
p2962
sg14
g0
(g15
g2
Ntp2963
Rp2964
(dp2965
g19
(lp2966
(lp2967
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p2968
tp2969
a(g22
I72
g26
S'exec code in run_globals'
p2970
tp2971
a(g29
I249
g30
S'Model(hyperparams).train()'
p2972
tp2973
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p2974
tp2975
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p2976
tp2977
aasbsg53
g0
(g54
g2
Ntp2978
Rp2979
(dp2980
g58
(lp2981
g0
(g7
g2
Ntp2982
Rp2983
(dp2984
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp2985
(g2979
I0
tp2986
asg11
S'auto_8588'
p2987
sg14
g0
(g15
g2
Ntp2988
Rp2989
(dp2990
g19
(lp2991
sbsg53
g1989
sg177
g0
(g178
g2
Ntp2992
Rp2993
(dp2994
g182
(I00
I00
tp2995
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g1886
sg204
(lp2996
g2958
asg14
g0
(g15
g2
Ntp2997
Rp2998
(dp2999
g2143
(lp3000
g2146
ag2146
asbsg2147
(dp3001
sg206
g0
(ctheano.tensor.elemwise
Sum
p3002
g2
Ntp3003
Rp3004
(dp3005
g183
g531
sg503
g1157
sS'axis'
p3006
NsS'acc_dtype'
p3007
S'float64'
p3008
sbsbsg177
g0
(g178
g2
Ntp3009
Rp3010
(dp3011
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp3012
Rp3013
(dp3014
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp3015
(g2954
I1
tp3016
asg11
S'auto_8029'
p3017
sg14
g0
(g15
g2
Ntp3018
Rp3019
(dp3020
g19
(lp3021
(lp3022
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p3023
tp3024
a(g22
I72
g26
S'exec code in run_globals'
p3025
tp3026
a(g29
I249
g30
S'Model(hyperparams).train()'
p3027
tp3028
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p3029
tp3030
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p3031
tp3032
aasbsg53
g0
(g54
g2
Ntp3033
Rp3034
(dp3035
g58
(lp3036
g2913
ag0
(g2920
g2
Ntp3037
Rp3038
(dp3039
g13
Nsg52
Nsg1883
g1886
sg177
g2925
sg1892
(lp3040
(g3034
I1
tp3041
asg11
S'auto_8028'
p3042
sg14
g0
(g15
g2
Ntp3043
Rp3044
(dp3045
g19
(lp3046
(lp3047
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p3048
tp3049
a(g22
I72
g26
S'exec code in run_globals'
p3050
tp3051
a(g29
I249
g30
S'Model(hyperparams).train()'
p3052
tp3053
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p3054
tp3055
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p3056
tp3057
aasbsg193
g2038
(g2899
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p3058
tp3059
Rp3060
sbasg1883
g1886
sg204
(lp3061
g3013
asg14
g0
(g15
g2
Ntp3062
Rp3063
(dp3064
g2143
(lp3065
g2146
ag2146
asbsg2147
(dp3066
sg206
g0
(ctheano.tensor.subtensor
Subtensor
p3067
g2
Ntp3068
Rp3069
(dp3070
S'idx_list'
p3071
(g2925
tp3072
sbsbsg177
g0
(g178
g2
Ntp3073
Rp3074
(dp3075
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag2950
asg1883
g1886
sg204
(lp3076
g0
(g7
g2
Ntp3077
Rp3078
(dp3079
g13
I0
sg52
S'mean'
p3080
sg1883
g1886
sg1892
(lp3081
(S'output'
p3082
I0
tp3083
asg11
S'auto_8603'
p3084
sg14
g0
(g15
g2
Ntp3085
Rp3086
(dp3087
g19
(lp3088
sbsg53
g2954
sg177
g0
(g178
g2
Ntp3089
Rp3090
(dp3091
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp3092
Rp3093
(dp3094
g2188
g0
(g54
g2
Ntp3095
Rp3096
(dp3097
g58
(lp3098
g0
(g2193
g2
Ntp3099
Rp3100
(dp3101
g11
S'auto_8789'
p3102
sg13
Nsg14
g0
(g15
g2
Ntp3103
Rp3104
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3105
Rp3106
(dp3107
g11
S'auto_8790'
p3108
sg13
Nsg14
g0
(g15
g2
Ntp3109
Rp3110
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3111
Rp3112
(dp3113
g11
S'auto_8791'
p3114
sg13
Nsg14
g0
(g15
g2
Ntp3115
Rp3116
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp3117
Rp3118
sg204
(lp3119
g0
(g2193
g2
Ntp3120
Rp3121
(dp3122
g11
S'auto_8792'
p3123
sg13
I0
sg14
g0
(g15
g2
Ntp3124
Rp3125
sg52
Nsg53
g3096
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp3126
Rp3127
(dp3128
g58
(lp3129
g0
(g2193
g2
Ntp3130
Rp3131
(dp3132
g11
S'auto_8589'
p3133
sg13
Nsg14
g0
(g15
g2
Ntp3134
Rp3135
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3136
Rp3137
(dp3138
g11
S'auto_8590'
p3139
sg13
Nsg14
g0
(g15
g2
Ntp3140
Rp3141
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3142
Rp3143
(dp3144
g11
S'auto_8591'
p3145
sg13
Nsg14
g0
(g15
g2
Ntp3146
Rp3147
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp3148
sg204
(lp3149
g0
(g2193
g2
Ntp3150
Rp3151
(dp3152
g11
S'auto_8593'
p3153
sg13
I0
sg14
g0
(g15
g2
Ntp3154
Rp3155
(dp3156
g19
(lp3157
sbsg52
Nsg53
g0
(g54
g2
Ntp3158
Rp3159
(dp3160
g58
(lp3161
g0
(g2193
g2
Ntp3162
Rp3163
(dp3164
g11
S'auto_8592'
p3165
sg13
I0
sg14
g0
(g15
g2
Ntp3166
Rp3167
(dp3168
g19
(lp3169
sbsg52
Nsg53
g0
(g54
g2
Ntp3170
Rp3171
(dp3172
g58
(lp3173
g3131
ag3137
asg14
g0
(g15
g2
Ntp3174
Rp3175
sg204
(lp3176
g3163
asg206
g0
(ctheano.scalar.basic
TrueDiv
p3177
g2
Ntp3178
Rp3179
(dp3180
g508
g1159
sg52
S'true_div'
p3181
sbsbsg177
g2202
sbag3143
asg14
g0
(g15
g2
Ntp3182
Rp3183
sg204
(lp3184
g3151
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s / %(i1)s;\n%(o0)s = V%(id)s_tmp1 / %(i2)s;\n}\n'
p3185
sg2314
(g2202
tp3186
sg508
g0
(g2316
g2
Ntp3187
Rp3188
(dp3189
g2320
(I0
tp3190
sbsg2322
(lp3191
S'%(nodename)s_subnode0'
p3192
aS'%(nodename)s_subnode1'
p3193
asg2328
I1
sbsbsg2143
(lp3194
g2330
ag2146
asbsg2147
(dp3195
sg206
g0
(g497
g2
Ntp3196
Rp3197
(dp3198
g52
Nsg503
g3127
sg511
(dp3199
I0
(lp3200
I0
assg513
Nsg516
g0
(g517
g2
Ntp3201
Rp3202
(dp3203
g521
I3713080549408328131
sg522
(dp3204
I0
I0
ssbsg524
I00
sbsbI2
tp3205
asg11
S'auto_8027'
p3206
sg14
g0
(g15
g2
Ntp3207
Rp3208
(dp3209
g19
(lp3210
(lp3211
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p3212
tp3213
a(g22
I72
g26
S'exec code in run_globals'
p3214
tp3215
a(g29
I249
g30
S'Model(hyperparams).train()'
p3216
tp3217
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p3218
tp3219
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p3220
tp3221
aasbsg53
g2917
sg177
g0
(g178
g2
Ntp3222
Rp3223
(dp3224
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp3225
Rp3226
(dp3227
g2143
(lp3228
g2146
ag2146
asbsg2147
(dp3229
sg206
g0
(g3067
g2
Ntp3230
Rp3231
(dp3232
g3071
(g2925
tp3233
sbsbI0
tp3234
a(g3034
I0
tp3235
asg11
S'auto_8025'
p3236
sg14
g0
(g15
g2
Ntp3237
Rp3238
(dp3239
g19
(lp3240
(lp3241
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p3242
tp3243
a(g22
I72
g26
S'exec code in run_globals'
p3244
tp3245
a(g29
I249
g30
S'Model(hyperparams).train()'
p3246
tp3247
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p3248
tp3249
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p3250
tp3251
aasbsg53
g2908
sg177
g0
(g178
g2
Ntp3252
Rp3253
(dp3254
g182
(I00
tp3255
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp3256
Rp3257
(dp3258
g2188
g0
(g54
g2
Ntp3259
Rp3260
(dp3261
g58
(lp3262
g0
(g2193
g2
Ntp3263
Rp3264
(dp3265
g11
S'auto_8700'
p3266
sg13
Nsg14
g0
(g15
g2
Ntp3267
Rp3268
sg52
Nsg53
Nsg177
g2925
sbasg14
g0
(g15
g2
Ntp3269
Rp3270
sg204
(lp3271
g0
(g2193
g2
Ntp3272
Rp3273
(dp3274
g11
S'auto_8701'
p3275
sg13
I0
sg14
g0
(g15
g2
Ntp3276
Rp3277
sg52
Nsg53
g3260
sg177
g2202
sbasg206
g0
(ctheano.scalar.basic
Cast
p3278
g2
Ntp3279
Rp3280
(dp3281
g508
g0
(ctheano.scalar.basic
specific_out
p3282
g2
Ntp3283
Rp3284
(dp3285
S'spec'
p3286
(g2202
tp3287
sbsS'o_type'
p3288
g2202
sg52
S'convert_to_float32'
p3289
sS'ctor'
p3290
cnumpy
float32
p3291
sbsbsg2143
(lp3292
g2146
ag2146
asbsg2147
(dp3293
sg206
g0
(g497
g2
Ntp3294
Rp3295
(dp3296
g501
S'tensor.basic'
p3297
sg52
Nsg503
g3280
sg511
(dp3298
sg513
Nsg516
g0
(g517
g2
Ntp3299
Rp3300
(dp3301
g521
I0
sg522
(dp3302
sbsS'__oplist_tags'
p3303
(lp3304
S'casting'
p3305
asg524
I00
sbsbI0
tp3306
asg11
S'auto_8061'
p3307
sg14
g0
(g15
g2
Ntp3308
Rp3309
(dp3310
g19
(lp3311
(lp3312
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p3313
tp3314
a(g22
I72
g26
S'exec code in run_globals'
p3315
tp3316
a(g29
I249
g30
S'Model(hyperparams).train()'
p3317
tp3318
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p3319
tp3320
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p3321
tp3322
aasbsg53
g2864
sg177
g0
(g178
g2
Ntp3323
Rp3324
(dp3325
g182
(I00
tp3326
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp3327
Rp3328
(dp3329
g2143
(lp3330
g2886
ag2146
asbsg2147
(dp3331
sg206
g0
(ctheano.tensor.opt
MakeVector
p3332
g2
Ntp3333
Rp3334
(dp3335
g183
g2896
sbsbI1
tp3336
asg11
S'auto_8054'
p3337
sg14
g0
(g15
g2
Ntp3338
Rp3339
(dp3340
g19
(lp3341
sbsg53
g2855
sg177
g2894
sbasg14
g0
(g15
g2
Ntp3342
Rp3343
(dp3344
g2143
(lp3345
g2886
ag2146
asbsg2147
(dp3346
sg206
g0
(g2888
g2
Ntp3347
Rp3348
(dp3349
g2892
I1
sbsbI0
tp3350
a(g2878
I0
tp3351
a(g0
(g54
g2
Ntp3352
Rp3353
(dp3354
g58
(lp3355
g2851
asg1883
g1886
sg204
(lp3356
g0
(g7
g2
Ntp3357
Rp3358
(dp3359
g13
I0
sg52
g1960
sg1883
g1886
sg1892
(lp3360
(g1954
I1
tp3361
asg11
S'auto_8129'
p3362
sg14
g0
(g15
g2
Ntp3363
Rp3364
(dp3365
g19
(lp3366
(lp3367
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p3368
tp3369
a(g22
I72
g26
S'exec code in run_globals'
p3370
tp3371
a(g29
I249
g30
S'Model(hyperparams).train()'
p3372
tp3373
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p3374
tp3375
a(g37
I93
g38
S'T.argmax(target, axis=1)),'
p3376
tp3377
aasbsg53
g3353
sg177
g0
(g178
g2
Ntp3378
Rp3379
(dp3380
g182
(I00
tp3381
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp3382
Rp3383
(dp3384
g2143
(lp3385
S'local_max_and_argmax'
p3386
ag2146
asbsg2147
(dp3387
sg206
g0
(ctheano.tensor.basic
Argmax
p3388
g2
Ntp3389
Rp3390
(dp3391
g3006
(I1
tp3392
sbsbI0
tp3393
a(g1989
I2
tp3394
asg11
S'auto_7978'
p3395
sg14
g0
(g15
g2
Ntp3396
Rp3397
(dp3398
g19
g1851
sbsg53
Nsg177
g1864
sbag1984
asg1883
g1886
sg204
(lp3399
g2983
asg14
g0
(g15
g2
Ntp3400
Rp3401
(dp3402
g2188
g0
(g54
g2
Ntp3403
Rp3404
(dp3405
g58
(lp3406
g0
(g2193
g2
Ntp3407
Rp3408
(dp3409
g11
S'auto_8749'
p3410
sg13
Nsg14
g0
(g15
g2
Ntp3411
Rp3412
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3413
Rp3414
(dp3415
g11
S'auto_8750'
p3416
sg13
Nsg14
g0
(g15
g2
Ntp3417
Rp3418
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3419
Rp3420
(dp3421
g11
S'auto_8751'
p3422
sg13
Nsg14
g0
(g15
g2
Ntp3423
Rp3424
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3425
Rp3426
(dp3427
g11
S'auto_8752'
p3428
sg13
Nsg14
g0
(g15
g2
Ntp3429
Rp3430
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp3431
Rp3432
sg204
(lp3433
g0
(g2193
g2
Ntp3434
Rp3435
(dp3436
g11
S'auto_8753'
p3437
sg13
I0
sg14
g0
(g15
g2
Ntp3438
Rp3439
sg52
Nsg53
g3404
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp3440
Rp3441
(dp3442
g58
(lp3443
g0
(g2193
g2
Ntp3444
Rp3445
(dp3446
g11
S'auto_8567'
p3447
sg13
Nsg14
g0
(g15
g2
Ntp3448
Rp3449
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3450
Rp3451
(dp3452
g11
S'auto_8568'
p3453
sg13
Nsg14
g0
(g15
g2
Ntp3454
Rp3455
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3456
Rp3457
(dp3458
g11
S'auto_8569'
p3459
sg13
Nsg14
g0
(g15
g2
Ntp3460
Rp3461
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3462
Rp3463
(dp3464
g11
S'auto_8570'
p3465
sg13
Nsg14
g0
(g15
g2
Ntp3466
Rp3467
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp3468
sg204
(lp3469
g0
(g2193
g2
Ntp3470
Rp3471
(dp3472
g11
S'auto_8574'
p3473
sg13
I0
sg14
g0
(g15
g2
Ntp3474
Rp3475
(dp3476
g19
(lp3477
sbsg52
Nsg53
g0
(g54
g2
Ntp3478
Rp3479
(dp3480
g58
(lp3481
g0
(g2193
g2
Ntp3482
Rp3483
(dp3484
g11
S'auto_8573'
p3485
sg13
I0
sg14
g0
(g15
g2
Ntp3486
Rp3487
(dp3488
g19
(lp3489
sbsg52
Nsg53
g0
(g54
g2
Ntp3490
Rp3491
(dp3492
g58
(lp3493
g3445
ag0
(g2193
g2
Ntp3494
Rp3495
(dp3496
g11
S'auto_8572'
p3497
sg13
I0
sg14
g0
(g15
g2
Ntp3498
Rp3499
(dp3500
g19
(lp3501
sbsg52
Nsg53
g0
(g54
g2
Ntp3502
Rp3503
(dp3504
g58
(lp3505
g3451
ag0
(g2193
g2
Ntp3506
Rp3507
(dp3508
g11
S'auto_8571'
p3509
sg13
I0
sg14
g0
(g15
g2
Ntp3510
Rp3511
(dp3512
g19
(lp3513
sbsg52
Nsg53
g0
(g54
g2
Ntp3514
Rp3515
(dp3516
g58
(lp3517
g3457
ag3463
asg14
g0
(g15
g2
Ntp3518
Rp3519
sg204
(lp3520
g3507
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp3521
Rp3522
sg204
(lp3523
g3495
asg206
g0
(ctheano.scalar.basic
Sub
p3524
g2
Ntp3525
Rp3526
(dp3527
g508
ctheano.scalar.basic
upcast_out_nobool
p3528
sg52
S'sub'
p3529
sbsbsg177
g2202
sbasg14
g0
(g15
g2
Ntp3530
Rp3531
sg204
(lp3532
g3483
asg206
g0
(ctheano.scalar.basic
Maximum
p3533
g2
Ntp3534
Rp3535
(dp3536
g508
g1159
sg52
S'maximum'
p3537
sbsbsg177
g2202
sbasg14
g0
(g15
g2
Ntp3538
Rp3539
sg204
(lp3540
g3471
asg206
g0
(ctheano.scalar.basic
Sqr
p3541
g2
Ntp3542
Rp3543
(dp3544
g508
g509
sg52
S'sqr'
p3545
sbsbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i2)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s - V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = ((V%(id)s_tmp2)>(%(i0)s)? (V%(id)s_tmp2): ((%(i0)s)>=(V%(id)s_tmp2)? (%(i0)s): nan("")));\n%(o0)s = V%(id)s_tmp3 * V%(id)s_tmp3;\n}\n'
p3546
sg2314
(g2202
tp3547
sg508
g0
(g2316
g2
Ntp3548
Rp3549
(dp3550
g2320
(I3
tp3551
sbsg2322
(lp3552
S'%(nodename)s_subnode0'
p3553
aS'%(nodename)s_subnode1'
p3554
aS'%(nodename)s_subnode2'
p3555
aS'%(nodename)s_subnode3'
p3556
asg2328
I1
sbsbsg2143
(lp3557
g2330
ag2146
asbsg2147
(dp3558
sg206
g0
(g497
g2
Ntp3559
Rp3560
(dp3561
g52
Nsg503
g3441
sg511
(dp3562
I0
(lp3563
I3
assg513
Nsg516
g0
(g517
g2
Ntp3564
Rp3565
(dp3566
g521
I3713080549411575706
sg522
(dp3567
I0
I3
ssbsg524
I00
sbsbI3
tp3568
asg11
S'auto_8566'
p3569
sg14
g0
(g15
g2
Ntp3570
Rp3571
(dp3572
g19
(lp3573
sbsg53
g2351
sg177
g0
(g178
g2
Ntp3574
Rp3575
(dp3576
g182
(I00
I00
tp3577
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g1886
sg204
(lp3578
g1958
asg14
g0
(g15
g2
Ntp3579
Rp3580
(dp3581
g2143
(lp3582
g3386
ag2146
asbsg2147
(dp3583
sg206
g0
(g3388
g2
Ntp3584
Rp3585
(dp3586
g3006
(I1
tp3587
sbsbsg177
g0
(g178
g2
Ntp3588
Rp3589
(dp3590
g182
(I00
tp3591
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsbag3358
asg1883
g1886
sg204
(lp3592
g1933
asg14
g0
(g15
g2
Ntp3593
Rp3594
(dp3595
g2188
g0
(g54
g2
Ntp3596
Rp3597
(dp3598
g58
(lp3599
g0
(g2193
g2
Ntp3600
Rp3601
(dp3602
g11
S'auto_8769'
p3603
sg13
Nsg14
g0
(g15
g2
Ntp3604
Rp3605
sg52
Nsg53
Nsg177
g2925
sbag0
(g2193
g2
Ntp3606
Rp3607
(dp3608
g11
S'auto_8770'
p3609
sg13
Nsg14
g0
(g15
g2
Ntp3610
Rp3611
sg52
Nsg53
Nsg177
g2925
sbasg14
g0
(g15
g2
Ntp3612
Rp3613
sg204
(lp3614
g0
(g2193
g2
Ntp3615
Rp3616
(dp3617
g11
S'auto_8771'
p3618
sg13
I0
sg14
g0
(g15
g2
Ntp3619
Rp3620
sg52
Nsg53
g3597
sg177
g2584
sbasg206
g0
(ctheano.scalar.basic
NEQ
p3621
g2
Ntp3622
Rp3623
(dp3624
g627
I01
sg52
Nsbsbsg2143
(lp3625
g2146
ag2146
asbsg2147
(dp3626
sg206
g0
(g497
g2
Ntp3627
Rp3628
(dp3629
g501
g502
sg503
g3623
sg52
S'Elemwise{neq,no_inplace}'
p3630
sg511
(dp3631
sg513
(S'not_equal'
p3632
I2
I1
tp3633
sg516
g0
(g517
g2
Ntp3634
Rp3635
(dp3636
g521
I0
sg522
(dp3637
sbsg524
I00
sg525
S"a != b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p3638
sbsbsg177
g0
(g178
g2
Ntp3639
Rp3640
(dp3641
g182
(I00
tp3642
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbasg1883
g1886
sg204
(lp3643
g1908
asg14
g0
(g15
g2
Ntp3644
Rp3645
(dp3646
g2143
(lp3647
g2146
ag2146
asbsg2147
(dp3648
sg206
g0
(g3002
g2
Ntp3649
Rp3650
(dp3651
g183
g351
sg503
g1157
sg3006
Nsg3007
g2896
sbsbsg177
g0
(g178
g2
Ntp3652
Rp3653
(dp3654
g182
(tsg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbag1900
asg1883
g1886
sg204
(lp3655
g0
(g7
g2
Ntp3656
Rp3657
(dp3658
g13
I0
sg52
g3080
sg1883
g1886
sg1892
(lp3659
(g3082
I1
tp3660
asg11
S'auto_8615'
p3661
sg14
g0
(g15
g2
Ntp3662
Rp3663
(dp3664
g19
(lp3665
sbsg53
g1904
sg177
g0
(g178
g2
Ntp3666
Rp3667
(dp3668
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp3669
Rp3670
(dp3671
g2188
g0
(g54
g2
Ntp3672
Rp3673
(dp3674
g58
(lp3675
g0
(g2193
g2
Ntp3676
Rp3677
(dp3678
g11
S'auto_8805'
p3679
sg13
Nsg14
g0
(g15
g2
Ntp3680
Rp3681
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3682
Rp3683
(dp3684
g11
S'auto_8806'
p3685
sg13
Nsg14
g0
(g15
g2
Ntp3686
Rp3687
sg52
Nsg53
Nsg177
g2925
sbasg14
g0
(g15
g2
Ntp3688
Rp3689
sg204
(lp3690
g0
(g2193
g2
Ntp3691
Rp3692
(dp3693
g11
S'auto_8807'
p3694
sg13
I0
sg14
g0
(g15
g2
Ntp3695
Rp3696
sg52
Nsg53
g3673
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp3697
Rp3698
(dp3699
g58
(lp3700
g0
(g2193
g2
Ntp3701
Rp3702
(dp3703
g11
S'auto_8604'
p3704
sg13
Nsg14
g0
(g15
g2
Ntp3705
Rp3706
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp3707
Rp3708
(dp3709
g11
S'auto_8605'
p3710
sg13
Nsg14
g0
(g15
g2
Ntp3711
Rp3712
sg52
Nsg53
Nsg177
g2925
sbasg2248
I2
sg52
Nsg2249
(g2202
g2925
tp3713
sg204
(lp3714
g0
(g2193
g2
Ntp3715
Rp3716
(dp3717
g11
S'auto_8607'
p3718
sg13
I0
sg14
g0
(g15
g2
Ntp3719
Rp3720
(dp3721
g19
(lp3722
sbsg52
Nsg53
g0
(g54
g2
Ntp3723
Rp3724
(dp3725
g58
(lp3726
g3702
ag0
(g2193
g2
Ntp3727
Rp3728
(dp3729
g11
S'auto_8606'
p3730
sg13
I0
sg14
g0
(g15
g2
Ntp3731
Rp3732
(dp3733
g19
(lp3734
sbsg52
Nsg53
g0
(g54
g2
Ntp3735
Rp3736
(dp3737
g58
(lp3738
g3708
asg14
g0
(g15
g2
Ntp3739
Rp3740
sg204
(lp3741
g3728
asg206
g3280
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp3742
Rp3743
sg204
(lp3744
g3716
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = (npy_float32)%(i1)s;\n%(o0)s = %(i0)s / V%(id)s_tmp1;\n}\n'
p3745
sg2314
(g2202
tp3746
sg508
g0
(g2316
g2
Ntp3747
Rp3748
(dp3749
g2320
(I0
tp3750
sbsg2322
(lp3751
S'%(nodename)s_subnode0'
p3752
aS'%(nodename)s_subnode1'
p3753
asg2328
I1
sbsbsg2143
(lp3754
g2330
ag2146
asbsg2147
(dp3755
sg206
g0
(g497
g2
Ntp3756
Rp3757
(dp3758
g52
Nsg503
g3698
sg511
(dp3759
I0
(lp3760
I0
assg513
Nsg516
g0
(g517
g2
Ntp3761
Rp3762
(dp3763
g521
I3713080549408328131
sg522
(dp3764
I0
I0
ssbsg524
I00
sbsbI1
tp3765
asg11
S'auto_8051'
p3766
sg14
g0
(g15
g2
Ntp3767
Rp3768
(dp3769
g19
(lp3770
sbsg53
g1895
sg177
g2894
sbasg14
g0
(g15
g2
Ntp3771
Rp3772
(dp3773
g2143
(lp3774
g2886
ag2146
asbsg2147
(dp3775
sg206
g0
(g2888
g2
Ntp3776
Rp3777
(dp3778
g2892
I0
sbsbI0
tp3779
a(g2122
I0
tp3780
asg11
S'auto_7977'
p3781
sg14
g0
(g15
g2
Ntp3782
Rp3783
(dp3784
g19
g335
sbsg53
Nsg177
g348
sbag2851
ag2001
ag2170
ag2019
ag2368
asg204
(lp3785
g3078
ag3657
asS'update_mapping'
p3786
(dp3787
sS'merge_feature'
p3788
g0
(ctheano.gof.opt
MergeFeature
p3789
g2
Ntp3790
Rp3791
(dp3792
S'scheduled'
p3793
(lp3794
sS'nodes_seen'
p3795
c__builtin__
set
p3796
((lp3797
g2855
ag2864
ag1904
ag1989
ag2351
ag1895
ag3353
ag2166
ag2089
ag1954
ag2908
ag1980
ag2954
ag3034
ag2917
ag2364
ag1997
ag2979
ag2878
ag1929
ag2075
ag2015
ag2122
atp3798
Rp3799
sS'const_sig_inv'
p3800
(itheano.gof.opt
_metadict
p3801
(dp3802
S'd'
p3803
(dp3804
g0
(ctheano.tensor.var
TensorConstantSignature
p3805
c__builtin__
tuple
p3806
(g238
g2107
tp3807
tp3808
Rp3809
(dp3810
S'has_nan'
p3811
I00
sS'_sum'
p3812
g2038
(g189
S'\x00\x00\x00?'
p3813
tp3814
Rp3815
sS'_no_nan'
p3816
g2107
sbg2093
sg0
(g3805
g3806
(g1698
g2065
tp3817
tp3818
Rp3819
(dp3820
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x80?'
p3821
tp3822
Rp3823
sg3816
g2065
sbg2049
sg0
(g3805
g3806
(g1422
g2649
tp3824
tp3825
Rp3826
(dp3827
g3811
I00
sg3812
g2038
(g189
S'33\xb3>'
p3828
tp3829
Rp3830
sg3816
g2649
sbg2010
s(g2925
g2947
tp3831
g2922
sg0
(g3805
g3806
(g1589
g2846
tp3832
tp3833
Rp3834
(dp3835
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x00\x00'
p3836
tp3837
Rp3838
sg3816
g2846
sbg1993
s(g2925
g3060
tp3839
g3038
sg0
(g3805
g3806
(g1647
g2044
tp3840
tp3841
Rp3842
(dp3843
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x80\xbf'
p3844
tp3845
Rp3846
sg3816
g2044
sbg2028
ssS'l'
p3847
(lp3848
sbsS'noinput_nodes'
p3849
g0
(ctheano.misc.ordered_set
OrderedSet
p3850
g2
Ntp3851
Rp3852
(dp3853
S'_OrderedSet__root'
p3854
g0
(ctheano.misc.ordered_set
Link
p3855
g2
Ntp3856
Rp3857
(lp3858
g3857
ag3857
absS'_OrderedSet__map'
p3859
(dp3860
sbsS'blacklist'
p3861
(lp3862
sS'seen_constants'
p3863
g3796
((lp3864
I46913056220240
aI46912997251408
aI46912997252368
aI46913056186000
aI46913056259600
aI46913056258576
aI46913056203024
atp3865
Rp3866
sS'const_sig'
p3867
(itheano.gof.opt
_metadict
p3868
(dp3869
g3803
(dp3870
g2093
g3809
sg1993
g3834
sg2922
g3831
sg2049
g3819
sg3038
g3839
sg2028
g3842
sg2010
g3826
ssg3847
(lp3871
sbsbsS'destroy_handler'
p3872
g0
(ctheano.gof.destroyhandler
DestroyHandler
p3873
g2
Ntp3874
Rp3875
(dp3876
S'impact'
p3877
(dp3878
g2958
g0
(g3850
g2
Ntp3879
Rp3880
(dp3881
g3854
g0
(g3855
g2
Ntp3882
Rp3883
(lp3884
g0
(g3855
g2
Ntp3885
Rp3886
(lp3887
g3883
ag3883
ag2958
abag3886
absg3859
(dp3888
g2958
g3886
ssbsg2112
g0
(g3850
g2
Ntp3889
Rp3890
(dp3891
g3854
g0
(g3855
g2
Ntp3892
Rp3893
(lp3894
g0
(g3855
g2
Ntp3895
Rp3896
(lp3897
g3893
ag3893
ag2112
abag3896
absg3859
(dp3898
g2112
g3896
ssbsg1908
g0
(g3850
g2
Ntp3899
Rp3900
(dp3901
g3854
g0
(g3855
g2
Ntp3902
Rp3903
(lp3904
g0
(g3855
g2
Ntp3905
Rp3906
(lp3907
g3903
ag3903
ag1908
abag3906
absg3859
(dp3908
g1908
g3906
ssbsg1984
g0
(g3850
g2
Ntp3909
Rp3910
(dp3911
g3854
g0
(g3855
g2
Ntp3912
Rp3913
(lp3914
g0
(g3855
g2
Ntp3915
Rp3916
(lp3917
g3913
ag3913
ag1984
abag3916
absg3859
(dp3918
g1984
g3916
ssbsg2347
g0
(g3850
g2
Ntp3919
Rp3920
(dp3921
g3854
g0
(g3855
g2
Ntp3922
Rp3923
(lp3924
g0
(g3855
g2
Ntp3925
Rp3926
(lp3927
g3923
ag3923
ag2347
abag3926
absg3859
(dp3928
g2347
g3926
ssbssS'droot'
p3929
(dp3930
g2958
g2958
sg2112
g2112
sg1908
g1908
sg1984
g1984
sg2347
g2347
ssS'view_o'
p3931
(dp3932
g2913
g0
(g3850
g2
Ntp3933
Rp3934
(dp3935
g3854
g0
(g3855
g2
Ntp3936
Rp3937
(lp3938
g0
(g3855
g2
Ntp3939
Rp3940
(lp3941
g0
(g3855
g2
Ntp3942
Rp3943
(lp3944
g3937
ag3940
ag2950
abag3937
ag3013
abag3943
absg3859
(dp3945
g2950
g3943
sg3013
g3940
ssbsg2170
g0
(g3850
g2
Ntp3946
Rp3947
(dp3948
g3854
g0
(g3855
g2
Ntp3949
Rp3950
(lp3951
g0
(g3855
g2
Ntp3952
Rp3953
(lp3954
g3950
ag3950
ag2157
abag3953
absg3859
(dp3955
g2157
g3953
ssbsg2368
g0
(g3850
g2
Ntp3956
Rp3957
(dp3958
g3854
g0
(g3855
g2
Ntp3959
Rp3960
(lp3961
g0
(g3855
g2
Ntp3962
Rp3963
(lp3964
g3960
ag3960
ag2355
abag3963
absg3859
(dp3965
g2355
g3963
ssbssS'view_i'
p3966
(dp3967
g2157
g2170
sg2355
g2368
sg2950
g2913
sg3013
g2913
ssg1883
g1886
sS'do_imports_on_attach'
p3968
I01
sg1892
ccollections
OrderedDict
p3969
((lp3970
(lp3971
g2851
ag3969
((lp3972
(lp3973
g2855
aI1
aa(lp3974
g2878
aI1
aa(lp3975
g3353
aI1
aa(lp3976
g1989
aI1
aatp3977
Rp3978
aa(lp3979
g2860
ag3969
((lp3980
(lp3981
g2864
aI1
aatp3982
Rp3983
aa(lp3984
g2868
ag3969
((lp3985
(lp3986
g2864
aI1
aatp3987
Rp3988
aa(lp3989
g2904
ag3969
((lp3990
(lp3991
g2908
aI1
aatp3992
Rp3993
aa(lp3994
g2913
ag3969
((lp3995
(lp3996
g2917
aI1
aa(lp3997
g3034
aI1
aatp3998
Rp3999
aa(lp4000
g2922
ag3969
((lp4001
(lp4002
g2917
aI1
aatp4003
Rp4004
aa(lp4005
g2950
ag3969
((lp4006
(lp4007
g2954
aI1
aatp4008
Rp4009
aa(lp4010
g3038
ag3969
((lp4011
(lp4012
g3034
aI1
aatp4013
Rp4014
aa(lp4015
g3013
ag3969
((lp4016
(lp4017
g2954
aI1
aatp4018
Rp4019
aa(lp4020
g2368
ag3969
((lp4021
(lp4022
g2364
aI1
aatp4023
Rp4024
aa(lp4025
g2355
ag3969
((lp4026
(lp4027
g2351
aI1
aatp4028
Rp4029
aa(lp4030
g2019
ag3969
((lp4031
(lp4032
g2015
aI1
aatp4033
Rp4034
aa(lp4035
g2010
ag3969
((lp4036
(lp4037
g2015
aI1
aa(lp4038
g1997
aI1
aatp4039
Rp4040
aa(lp4041
g1993
ag3969
((lp4042
(lp4043
g2015
aI1
aa(lp4044
g1997
aI1
aa(lp4045
g1989
aI1
aatp4046
Rp4047
aa(lp4048
g2028
ag3969
((lp4049
(lp4050
g2015
aI1
aa(lp4051
g1997
aI1
aatp4052
Rp4053
aa(lp4054
g2049
ag3969
((lp4055
(lp4056
g2015
aI1
aa(lp4057
g1997
aI1
aa(lp4058
g1989
aI1
aatp4059
Rp4060
aa(lp4061
g2071
ag3969
((lp4062
(lp4063
g2075
aI1
aatp4064
Rp4065
aa(lp4066
g2170
ag3969
((lp4067
(lp4068
g2166
aI1
aatp4069
Rp4070
aa(lp4071
g2157
ag3969
((lp4072
(lp4073
g2089
aI1
aatp4074
Rp4075
aa(lp4076
g2001
ag3969
((lp4077
(lp4078
g1997
aI1
aatp4079
Rp4080
aa(lp4081
g2126
ag3969
((lp4082
(lp4083
g2122
aI1
aatp4084
Rp4085
aa(lp4086
g1890
ag3969
((lp4087
(lp4088
g2122
aI1
aa(lp4089
g1895
aI1
aatp4090
Rp4091
aa(lp4092
g2112
ag3969
((lp4093
(lp4094
g2089
aI1
aatp4095
Rp4096
aa(lp4097
g2093
ag3969
((lp4098
(lp4099
g2089
aI1
aatp4100
Rp4101
aa(lp4102
g0
(g7
g2
Ntp4103
Rp4104
(dp4105
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4106
sg11
S'auto_8502'
p4107
sg14
g0
(g15
g2
Ntp4108
Rp4109
(dp4110
g19
(lp4111
sbsg53
g0
(g54
g2
Ntp4112
Rp4113
(dp4114
g58
(lp4115
g2093
ag2112
ag2157
asg1883
g1886
sg204
(lp4116
g4104
asg14
g0
(g15
g2
Ntp4117
Rp4118
(dp4119
S'removed_by'
p4120
(lp4121
g2330
asg2143
(lp4122
g2628
asbsg2147
(dp4123
sg206
g0
(g497
g2
Ntp4124
Rp4125
(dp4126
g52
Nsg503
g0
(g2225
g2
Ntp4127
Rp4128
(dp4129
g58
(lp4130
g0
(g2193
g2
Ntp4131
Rp4132
(dp4133
g11
S'auto_8483'
p4134
sg13
Nsg14
g0
(g15
g2
Ntp4135
Rp4136
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4137
Rp4138
(dp4139
g11
S'auto_8484'
p4140
sg13
Nsg14
g0
(g15
g2
Ntp4141
Rp4142
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4143
Rp4144
(dp4145
g11
S'auto_8485'
p4146
sg13
Nsg14
g0
(g15
g2
Ntp4147
Rp4148
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp4149
sg204
(lp4150
g0
(g2193
g2
Ntp4151
Rp4152
(dp4153
g11
S'auto_8490'
p4154
sg13
I0
sg14
g0
(g15
g2
Ntp4155
Rp4156
(dp4157
g19
g2259
sbsg52
Nsg53
g0
(g54
g2
Ntp4158
Rp4159
(dp4160
g58
(lp4161
g4132
ag0
(g2193
g2
Ntp4162
Rp4163
(dp4164
g11
S'auto_8489'
p4165
sg13
I0
sg14
g0
(g15
g2
Ntp4166
Rp4167
(dp4168
g19
g2271
sbsg52
Nsg53
g0
(g54
g2
Ntp4169
Rp4170
(dp4171
g58
(lp4172
g0
(g2193
g2
Ntp4173
Rp4174
(dp4175
g11
S'auto_8487'
p4176
sg13
I0
sg14
g0
(g15
g2
Ntp4177
Rp4178
(dp4179
g19
g2283
sbsg52
Nsg53
g0
(g54
g2
Ntp4180
Rp4181
(dp4182
g58
(lp4183
g4138
ag4144
asg14
g0
(g15
g2
Ntp4184
Rp4185
sg204
(lp4186
g4174
asg206
g1157
sbsg177
g2202
sbag0
(g2193
g2
Ntp4187
Rp4188
(dp4189
g11
S'auto_8488'
p4190
sg13
I0
sg14
g0
(g15
g2
Ntp4191
Rp4192
(dp4193
g19
g2298
sbsg52
Nsg53
g0
(g54
g2
Ntp4194
Rp4195
(dp4196
g58
(lp4197
g4174
asg14
g0
(g15
g2
Ntp4198
Rp4199
sg204
(lp4200
g4188
asg206
g506
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp4201
Rp4202
sg204
(lp4203
g4163
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp4204
Rp4205
sg204
(lp4206
g4152
asg206
g1224
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i1)s + %(i2)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = fabs(V%(id)s_tmp1);\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = V%(id)s_tmp1 + V%(id)s_tmp2;\n%(o0)s = %(i0)s * V%(id)s_tmp3;\n}\n'
p4207
sg2314
(g2202
tp4208
sg2322
(lp4209
S'%(nodename)s_subnode0'
p4210
aS'%(nodename)s_subnode1'
p4211
aS'%(nodename)s_subnode2'
p4212
aS'%(nodename)s_subnode3'
p4213
asg2328
I1
sbsg511
(dp4214
sg513
Nsg516
g0
(g517
g2
Ntp4215
Rp4216
(dp4217
g521
I0
sg522
(dp4218
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp4219
Rp4220
(dp4221
g182
(I00
I00
tp4222
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp4223
tp4224
Rp4225
aa(lp4226
g2347
ag3969
((lp4227
(lp4228
g2351
aI1
aatp4229
Rp4230
aa(lp4231
g0
(g7
g2
Ntp4232
Rp4233
(dp4234
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4235
sg11
S'auto_8017'
p4236
sg14
g0
(g15
g2
Ntp4237
Rp4238
(dp4239
g19
g20
sbsg53
g0
(g54
g2
Ntp4240
Rp4241
(dp4242
g58
(lp4243
g2347
ag2355
asg1883
g1886
sg204
(lp4244
g4233
asg14
g0
(g15
g2
Ntp4245
Rp4246
(dp4247
g4120
(lp4248
g2330
asg2143
(lp4249
g2146
asbsg2147
(dp4250
sg206
g1153
sbsg177
g1818
sbag3969
((lp4251
tp4252
Rp4253
aa(lp4254
g0
(g7
g2
Ntp4255
Rp4256
(dp4257
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4258
sg11
S'auto_8240'
p4259
sg14
g0
(g15
g2
Ntp4260
Rp4261
(dp4262
g19
(lp4263
sbsg53
g0
(g54
g2
Ntp4264
Rp4265
(dp4266
g58
(lp4267
g1993
ag2049
ag2851
ag1984
asg1883
g1886
sg204
(lp4268
g4256
asg14
g0
(g15
g2
Ntp4269
Rp4270
(dp4271
g4120
(lp4272
g2330
asg2143
(lp4273
g2628
asbsg2147
(dp4274
sg206
g0
(g497
g2
Ntp4275
Rp4276
(dp4277
g52
Nsg503
g0
(g2225
g2
Ntp4278
Rp4279
(dp4280
g58
(lp4281
g0
(g2193
g2
Ntp4282
Rp4283
(dp4284
g11
S'auto_8218'
p4285
sg13
Nsg14
g0
(g15
g2
Ntp4286
Rp4287
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4288
Rp4289
(dp4290
g11
S'auto_8219'
p4291
sg13
Nsg14
g0
(g15
g2
Ntp4292
Rp4293
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4294
Rp4295
(dp4296
g11
S'auto_8220'
p4297
sg13
Nsg14
g0
(g15
g2
Ntp4298
Rp4299
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4300
Rp4301
(dp4302
g11
S'auto_8221'
p4303
sg13
Nsg14
g0
(g15
g2
Ntp4304
Rp4305
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp4306
sg204
(lp4307
g0
(g2193
g2
Ntp4308
Rp4309
(dp4310
g11
S'auto_8226'
p4311
sg13
I0
sg14
g0
(g15
g2
Ntp4312
Rp4313
(dp4314
g19
g3477
sbsg52
Nsg53
g0
(g54
g2
Ntp4315
Rp4316
(dp4317
g58
(lp4318
g0
(g2193
g2
Ntp4319
Rp4320
(dp4321
g11
S'auto_8225'
p4322
sg13
I0
sg14
g0
(g15
g2
Ntp4323
Rp4324
(dp4325
g19
g3489
sbsg52
Nsg53
g0
(g54
g2
Ntp4326
Rp4327
(dp4328
g58
(lp4329
g4283
ag0
(g2193
g2
Ntp4330
Rp4331
(dp4332
g11
S'auto_8224'
p4333
sg13
I0
sg14
g0
(g15
g2
Ntp4334
Rp4335
(dp4336
g19
g3501
sbsg52
Nsg53
g0
(g54
g2
Ntp4337
Rp4338
(dp4339
g58
(lp4340
g4289
ag0
(g2193
g2
Ntp4341
Rp4342
(dp4343
g11
S'auto_8223'
p4344
sg13
I0
sg14
g0
(g15
g2
Ntp4345
Rp4346
(dp4347
g19
g3513
sbsg52
Nsg53
g0
(g54
g2
Ntp4348
Rp4349
(dp4350
g58
(lp4351
g4295
ag4301
asg14
g0
(g15
g2
Ntp4352
Rp4353
sg204
(lp4354
g4342
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp4355
Rp4356
sg204
(lp4357
g4331
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp4358
Rp4359
sg204
(lp4360
g4320
asg206
g3535
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp4361
Rp4362
sg204
(lp4363
g4309
asg206
g3543
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i2)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s - V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = ((V%(id)s_tmp2)>(%(i0)s)? (V%(id)s_tmp2): ((%(i0)s)>=(V%(id)s_tmp2)? (%(i0)s): nan("")));\n%(o0)s = V%(id)s_tmp3 * V%(id)s_tmp3;\n}\n'
p4364
sg2314
(g2202
tp4365
sg2322
(lp4366
S'%(nodename)s_subnode0'
p4367
aS'%(nodename)s_subnode1'
p4368
aS'%(nodename)s_subnode2'
p4369
aS'%(nodename)s_subnode3'
p4370
asg2328
I1
sbsg511
(dp4371
sg513
Nsg516
g0
(g517
g2
Ntp4372
Rp4373
(dp4374
g521
I0
sg522
(dp4375
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp4376
Rp4377
(dp4378
g182
(I00
I00
tp4379
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp4380
tp4381
Rp4382
aa(lp4383
g2958
ag3969
((lp4384
(lp4385
g2954
aI1
aatp4386
Rp4387
aa(lp4388
g0
(g7
g2
Ntp4389
Rp4390
(dp4391
g13
I0
sg52
g3080
sg1883
g1886
sg1892
(lp4392
sg11
S'auto_8169'
p4393
sg14
g0
(g15
g2
Ntp4394
Rp4395
(dp4396
g19
(lp4397
sbsg53
g0
(g54
g2
Ntp4398
Rp4399
(dp4400
g58
(lp4401
g2958
ag3013
ag2950
asg1883
g1886
sg204
(lp4402
g4390
asg14
g0
(g15
g2
Ntp4403
Rp4404
(dp4405
g4120
(lp4406
g2330
asg2143
(lp4407
g2628
asbsg2147
(dp4408
sg206
g0
(g497
g2
Ntp4409
Rp4410
(dp4411
g52
Nsg503
g0
(g2225
g2
Ntp4412
Rp4413
(dp4414
g58
(lp4415
g0
(g2193
g2
Ntp4416
Rp4417
(dp4418
g11
S'auto_8155'
p4419
sg13
Nsg14
g0
(g15
g2
Ntp4420
Rp4421
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4422
Rp4423
(dp4424
g11
S'auto_8156'
p4425
sg13
Nsg14
g0
(g15
g2
Ntp4426
Rp4427
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4428
Rp4429
(dp4430
g11
S'auto_8157'
p4431
sg13
Nsg14
g0
(g15
g2
Ntp4432
Rp4433
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp4434
sg204
(lp4435
g0
(g2193
g2
Ntp4436
Rp4437
(dp4438
g11
S'auto_8159'
p4439
sg13
I0
sg14
g0
(g15
g2
Ntp4440
Rp4441
(dp4442
g19
g3157
sbsg52
Nsg53
g0
(g54
g2
Ntp4443
Rp4444
(dp4445
g58
(lp4446
g0
(g2193
g2
Ntp4447
Rp4448
(dp4449
g11
S'auto_8158'
p4450
sg13
I0
sg14
g0
(g15
g2
Ntp4451
Rp4452
(dp4453
g19
g3169
sbsg52
Nsg53
g0
(g54
g2
Ntp4454
Rp4455
(dp4456
g58
(lp4457
g4417
ag4423
asg14
g0
(g15
g2
Ntp4458
Rp4459
sg204
(lp4460
g4448
asg206
g3179
sbsg177
g2202
sbag4429
asg14
g0
(g15
g2
Ntp4461
Rp4462
sg204
(lp4463
g4437
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s / %(i1)s;\n%(o0)s = V%(id)s_tmp1 / %(i2)s;\n}\n'
p4464
sg2314
(g2202
tp4465
sg2322
(lp4466
S'%(nodename)s_subnode0'
p4467
aS'%(nodename)s_subnode1'
p4468
asg2328
I1
sbsg511
(dp4469
sg513
Nsg516
g0
(g517
g2
Ntp4470
Rp4471
(dp4472
g521
I0
sg522
(dp4473
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp4474
Rp4475
(dp4476
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp4477
tp4478
Rp4479
aa(lp4480
g1900
ag3969
((lp4481
(lp4482
g1904
aI1
aatp4483
Rp4484
aa(lp4485
g3358
ag3969
((lp4486
(lp4487
g1954
aI1
aatp4488
Rp4489
aa(lp4490
g1958
ag3969
((lp4491
(lp4492
g1954
aI1
aatp4493
Rp4494
aa(lp4495
g1933
ag3969
((lp4496
(lp4497
g1929
aI1
aatp4498
Rp4499
aa(lp4500
g1908
ag3969
((lp4501
(lp4502
g1904
aI1
aatp4503
Rp4504
aa(lp4505
g0
(g7
g2
Ntp4506
Rp4507
(dp4508
g13
I0
sg52
g3080
sg1883
g1886
sg1892
(lp4509
sg11
S'auto_8145'
p4510
sg14
g0
(g15
g2
Ntp4511
Rp4512
(dp4513
g19
(lp4514
sbsg53
g0
(g54
g2
Ntp4515
Rp4516
(dp4517
g58
(lp4518
g1908
ag1900
asg1883
g1886
sg204
(lp4519
g4507
asg14
g0
(g15
g2
Ntp4520
Rp4521
(dp4522
g4120
(lp4523
g2330
asg2143
(lp4524
g2628
asbsg2147
(dp4525
sg206
g0
(g497
g2
Ntp4526
Rp4527
(dp4528
g52
Nsg503
g0
(g2225
g2
Ntp4529
Rp4530
(dp4531
g58
(lp4532
g0
(g2193
g2
Ntp4533
Rp4534
(dp4535
g11
S'auto_8134'
p4536
sg13
Nsg14
g0
(g15
g2
Ntp4537
Rp4538
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp4539
Rp4540
(dp4541
g11
S'auto_8135'
p4542
sg13
Nsg14
g0
(g15
g2
Ntp4543
Rp4544
sg52
Nsg53
Nsg177
g2925
sbasg2248
I2
sg52
Nsg2249
(g2202
g2925
tp4545
sg204
(lp4546
g0
(g2193
g2
Ntp4547
Rp4548
(dp4549
g11
S'auto_8137'
p4550
sg13
I0
sg14
g0
(g15
g2
Ntp4551
Rp4552
(dp4553
g19
g3722
sbsg52
Nsg53
g0
(g54
g2
Ntp4554
Rp4555
(dp4556
g58
(lp4557
g4534
ag0
(g2193
g2
Ntp4558
Rp4559
(dp4560
g11
S'auto_8136'
p4561
sg13
I0
sg14
g0
(g15
g2
Ntp4562
Rp4563
(dp4564
g19
g3734
sbsg52
Nsg53
g0
(g54
g2
Ntp4565
Rp4566
(dp4567
g58
(lp4568
g4540
asg14
g0
(g15
g2
Ntp4569
Rp4570
sg204
(lp4571
g4559
asg206
g3280
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp4572
Rp4573
sg204
(lp4574
g4548
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = (npy_float32)%(i1)s;\n%(o0)s = %(i0)s / V%(id)s_tmp1;\n}\n'
p4575
sg2314
(g2202
tp4576
sg2322
(lp4577
S'%(nodename)s_subnode0'
p4578
aS'%(nodename)s_subnode1'
p4579
asg2328
I1
sbsg511
(dp4580
sg513
Nsg516
g0
(g517
g2
Ntp4581
Rp4582
(dp4583
g521
I0
sg522
(dp4584
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp4585
Rp4586
(dp4587
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp4588
tp4589
Rp4590
aa(lp4591
g2079
ag3969
((lp4592
(lp4593
g2075
aI1
aatp4594
Rp4595
aa(lp4596
g1984
ag3969
((lp4597
(lp4598
g1980
aI1
aa(lp4599
g1989
aI1
aatp4600
Rp4601
aa(lp4602
g2983
ag3969
((lp4603
(lp4604
g2979
aI1
aatp4605
Rp4606
aa(lp4607
g3078
ag3969
((lp4608
tp4609
Rp4610
aa(lp4611
g3657
ag3969
((lp4612
tp4613
Rp4614
aatp4615
Rp4616
sS'root_destroyer'
p4617
(dp4618
g2958
g2954
sg2112
g2089
sg1908
g1904
sg1984
g1989
sg2347
g2351
ssS'fail_validate'
p4619
g3969
((lp4620
tp4621
Rp4622
sS'debug_all_apps'
p4623
g3796
((lp4624
g1997
ag2878
ag1904
ag1989
ag2351
ag2855
ag1929
ag3353
ag2166
ag2089
ag2364
ag2075
ag3034
ag1895
ag1980
ag2917
ag1954
ag2954
ag2908
ag2979
ag2864
ag2015
ag2122
atp4625
Rp4626
sS'destroyers'
p4627
g0
(g3850
g2
Ntp4628
Rp4629
(dp4630
g3854
g0
(g3855
g2
Ntp4631
Rp4632
(lp4633
g0
(g3855
g2
Ntp4634
Rp4635
(lp4636
g0
(g3855
g2
Ntp4637
Rp4638
(lp4639
g0
(g3855
g2
Ntp4640
Rp4641
(lp4642
g0
(g3855
g2
Ntp4643
Rp4644
(lp4645
g0
(g3855
g2
Ntp4646
Rp4647
(lp4648
g4632
ag4644
ag2089
abag4641
ag2351
abag4638
ag1989
abag4635
ag2954
abag4632
ag1904
abag4647
absg3859
(dp4649
g2351
g4644
sg1904
g4635
sg2089
g4647
sg2954
g4638
sg1989
g4641
ssbsS'algo'
p4650
S'regular'
p4651
sS'stale_droot'
p4652
I00
sbsg52
S'binary_connect/mlp_model.py:101'
p4653
sS'execute_callbacks_time'
p4654
F0.006034374237060547
sS'shape_feature'
p4655
g0
(ctheano.tensor.opt
ShapeFeature
p4656
g2
Ntp4657
Rp4658
(dp4659
g3793
(dp4660
sS'shape_of'
p4661
(dp4662
g0
(g7
g2
Ntp4663
Rp4664
(dp4665
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4666
sg11
S'auto_7990'
p4667
sg14
g0
(g15
g2
Ntp4668
Rp4669
(dp4670
g19
g1519
sbsg53
g0
(g54
g2
Ntp4671
Rp4672
(dp4673
g58
(lp4674
g2019
ag1993
asg1883
g1886
sg204
(lp4675
g4664
asg14
g0
(g15
g2
Ntp4676
Rp4677
(dp4678
g4120
(lp4679
g2628
asg2143
(lp4680
g2146
asbsg2147
(dp4681
sg206
g621
sbsg177
g1596
sb(g0
(g7
g2
Ntp4682
Rp4683
(dp4684
g11
S'auto_8046'
p4685
sg13
I0
sg14
g0
(g15
g2
Ntp4686
Rp4687
(dp4688
g19
(lp4689
sbsg52
Nsg53
g0
(g54
g2
Ntp4690
Rp4691
(dp4692
g58
(lp4693
g2019
asg14
g0
(g15
g2
Ntp4694
Rp4695
sg204
(lp4696
g4683
asg206
g0
(g2888
g2
Ntp4697
Rp4698
(dp4699
g2892
I0
sbsbsg177
g2894
sbg0
(g7
g2
Ntp4700
Rp4701
(dp4702
g11
S'auto_8047'
p4703
sg13
I0
sg14
g0
(g15
g2
Ntp4704
Rp4705
(dp4706
g19
(lp4707
sbsg52
Nsg53
g0
(g54
g2
Ntp4708
Rp4709
(dp4710
g58
(lp4711
g2019
asg14
g0
(g15
g2
Ntp4712
Rp4713
sg204
(lp4714
g4701
asg206
g0
(g2888
g2
Ntp4715
Rp4716
(dp4717
g2892
I1
sbsbsg177
g2894
sbtp4718
sg2049
(g0
(g149
g2
Ntp4719
Rp4720
(dp4721
g11
S'auto_8044'
p4722
sg13
Nsg14
g0
(g15
g2
Ntp4723
Rp4724
(dp4725
g19
(lp4726
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp4727
Rp4728
(dp4729
g182
(tsg183
S'int64'
p4730
sg185
g2899
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp4731
g197
tp4732
Rp4733
(I1
(tg2899
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p4734
tp4735
bsbg4720
tp4736
sg0
(g7
g2
Ntp4737
Rp4738
(dp4739
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4740
sg11
S'auto_8056'
p4741
sg14
g0
(g15
g2
Ntp4742
Rp4743
(dp4744
g19
(lp4745
(lp4746
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p4747
tp4748
a(g22
I72
g26
S'exec code in run_globals'
p4749
tp4750
a(g29
I249
g30
S'Model(hyperparams).train()'
p4751
tp4752
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p4753
tp4754
a(g37
I94
g38
S'dtype=theano.config.floatX)'
p4755
tp4756
aasbsg53
g0
(g54
g2
Ntp4757
Rp4758
(dp4759
g58
(lp4760
g0
(g7
g2
Ntp4761
Rp4762
(dp4763
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4764
sg11
S'auto_8060'
p4765
sg14
g0
(g15
g2
Ntp4766
Rp4767
(dp4768
g19
(lp4769
(lp4770
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p4771
tp4772
a(g22
I72
g26
S'exec code in run_globals'
p4773
tp4774
a(g29
I249
g30
S'Model(hyperparams).train()'
p4775
tp4776
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p4777
tp4778
a(g37
I94
g38
S'dtype=theano.config.floatX)'
p4779
tp4780
aasbsg53
g0
(g54
g2
Ntp4781
Rp4782
(dp4783
g58
(lp4784
g1900
asg1883
g1886
sg204
(lp4785
g4762
asg14
g0
(g15
g2
Ntp4786
Rp4787
(dp4788
g4120
(lp4789
S'local_subtensor_make_vector'
p4790
asg2143
(lp4791
g2886
asbsg2147
(dp4792
sg206
g3334
sbsg177
g0
(g178
g2
Ntp4793
Rp4794
(dp4795
g182
(I00
tp4796
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsbag3038
asg1883
g1886
sg204
(lp4797
g4738
asg14
g0
(g15
g2
Ntp4798
Rp4799
(dp4800
g4120
(lp4801
g4790
asg2143
(lp4802
S'local_subtensor_lift'
p4803
asbsg2147
(dp4804
sg206
g0
(g3067
g2
Ntp4805
Rp4806
(dp4807
g3071
(g2925
tp4808
sbsbsg177
g0
(g178
g2
Ntp4809
Rp4810
(dp4811
g182
(tsg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsb(tsg0
(g7
g2
Ntp4812
Rp4813
(dp4814
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4815
sg11
S'auto_7991'
p4816
sg14
g0
(g15
g2
Ntp4817
Rp4818
(dp4819
g19
g1490
sbsg53
g0
(g54
g2
Ntp4820
Rp4821
(dp4822
g58
(lp4823
g4664
ag2028
ag2049
asg1883
g1886
sg204
(lp4824
g4813
asg14
g0
(g15
g2
Ntp4825
Rp4826
(dp4827
g4120
(lp4828
g2628
asg2143
(lp4829
g2146
asbsg2147
(dp4830
sg206
g1021
sbsg177
g1705
sb(g4683
g4701
tp4831
sg0
(g7
g2
Ntp4832
Rp4833
(dp4834
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4835
sg11
S'auto_8002'
p4836
sg14
g0
(g15
g2
Ntp4837
Rp4838
(dp4839
g19
g767
sbsg53
g0
(g54
g2
Ntp4840
Rp4841
(dp4842
g58
(lp4843
g2001
ag1993
asg1883
g1886
sg204
(lp4844
g4833
asg14
g0
(g15
g2
Ntp4845
Rp4846
(dp4847
g4120
(lp4848
g2628
asg2143
(lp4849
g2146
asbsg2147
(dp4850
sg206
g621
sbsg177
g844
sb(g0
(g7
g2
Ntp4851
Rp4852
(dp4853
g11
S'auto_8049'
p4854
sg13
I0
sg14
g0
(g15
g2
Ntp4855
Rp4856
(dp4857
g19
(lp4858
sbsg52
Nsg53
g0
(g54
g2
Ntp4859
Rp4860
(dp4861
g58
(lp4862
g2001
asg14
g0
(g15
g2
Ntp4863
Rp4864
sg204
(lp4865
g4852
asg206
g0
(g2888
g2
Ntp4866
Rp4867
(dp4868
g2892
I0
sbsbsg177
g2894
sbg0
(g7
g2
Ntp4869
Rp4870
(dp4871
g11
S'auto_8050'
p4872
sg13
I0
sg14
g0
(g15
g2
Ntp4873
Rp4874
(dp4875
g19
(lp4876
sbsg52
Nsg53
g0
(g54
g2
Ntp4877
Rp4878
(dp4879
g58
(lp4880
g2001
asg14
g0
(g15
g2
Ntp4881
Rp4882
sg204
(lp4883
g4870
asg206
g0
(g2888
g2
Ntp4884
Rp4885
(dp4886
g2892
I1
sbsbsg177
g2894
sbtp4887
sg0
(g7
g2
Ntp4888
Rp4889
(dp4890
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4891
sg11
S'auto_7994'
p4892
sg14
g0
(g15
g2
Ntp4893
Rp4894
(dp4895
g19
g1381
sbsg53
g0
(g54
g2
Ntp4896
Rp4897
(dp4898
g58
(lp4899
g0
(g149
g2
Ntp4900
Rp4901
(dp4902
g11
S'auto_7993'
p4903
sg13
Nsg14
g0
(g15
g2
Ntp4904
Rp4905
(dp4906
g19
g568
sg175
Nsbsg52
Nsg177
g587
sg1892
(lp4907
sg193
g592
sbasg1883
g1886
sg204
(lp4908
g4889
asg14
g0
(g15
g2
Ntp4909
Rp4910
(dp4911
g4120
(lp4912
S'constant_folding'
p4913
asg2143
(lp4914
g2146
ag2146
asbsg2147
(dp4915
sg206
g1407
sbsg177
g1422
sb(g4720
g4720
tp4916
sg2355
(g4720
g0
(g7
g2
Ntp4917
Rp4918
(dp4919
g11
S'auto_8045'
p4920
sg13
I0
sg14
g0
(g15
g2
Ntp4921
Rp4922
(dp4923
g19
(lp4924
sbsg52
Nsg53
g0
(g54
g2
Ntp4925
Rp4926
(dp4927
g58
(lp4928
g2368
asg14
g0
(g15
g2
Ntp4929
Rp4930
sg204
(lp4931
g4918
asg206
g0
(g2888
g2
Ntp4932
Rp4933
(dp4934
g2892
I0
sbsbsg177
g2894
sbtp4935
sg1890
(g1900
g0
(g7
g2
Ntp4936
Rp4937
(dp4938
g11
S'auto_8052'
p4939
sg13
I0
sg14
g0
(g15
g2
Ntp4940
Rp4941
(dp4942
g19
(lp4943
sbsg52
Nsg53
g0
(g54
g2
Ntp4944
Rp4945
(dp4946
g58
(lp4947
g1890
asg14
g0
(g15
g2
Ntp4948
Rp4949
sg204
(lp4950
g4937
asg206
g0
(g2888
g2
Ntp4951
Rp4952
(dp4953
g2892
I1
sbsbsg177
g2894
sbtp4954
sg2851
(g2868
g2860
tp4955
sg0
(g7
g2
Ntp4956
Rp4957
(dp4958
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4959
sg11
S'auto_7989'
p4960
sg14
g0
(g15
g2
Ntp4961
Rp4962
(dp4963
g19
g1548
sbsg53
g0
(g54
g2
Ntp4964
Rp4965
(dp4966
g58
(lp4967
g0
(g149
g2
Ntp4968
Rp4969
(dp4970
g11
S'auto_7988'
p4971
sg13
Nsg14
g0
(g15
g2
Ntp4972
Rp4973
(dp4974
g19
g682
sg175
Nsbsg52
Nsg177
g701
sg1892
(lp4975
sg193
g706
sbasg1883
g1886
sg204
(lp4976
g4957
asg14
g0
(g15
g2
Ntp4977
Rp4978
(dp4979
g4120
(lp4980
g4913
asg2143
(lp4981
g2146
ag2146
asbsg2147
(dp4982
sg206
g1574
sbsg177
g1589
sb(g4720
g4720
tp4983
sg2001
(g4852
g4870
tp4984
sg0
(g7
g2
Ntp4985
Rp4986
(dp4987
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp4988
sg11
S'auto_8012'
p4989
sg14
g0
(g15
g2
Ntp4990
Rp4991
(dp4992
g19
g248
sbsg53
g0
(g54
g2
Ntp4993
Rp4994
(dp4995
g58
(lp4996
g0
(g7
g2
Ntp4997
Rp4998
(dp4999
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5000
sg11
S'auto_8010'
p5001
sg14
g0
(g15
g2
Ntp5002
Rp5003
(dp5004
g19
g277
sbsg53
g0
(g54
g2
Ntp5005
Rp5006
(dp5007
g58
(lp5008
g2112
ag2157
asg1883
g1886
sg204
(lp5009
g4998
asg14
g0
(g15
g2
Ntp5010
Rp5011
(dp5012
g4120
(lp5013
g2628
asg2143
(lp5014
g2146
asbsg2147
(dp5015
sg206
g1153
sbsg177
g1170
sbag0
(g7
g2
Ntp5016
Rp5017
(dp5018
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5019
sg11
S'auto_8011'
p5020
sg14
g0
(g15
g2
Ntp5021
Rp5022
(dp5023
g19
g1180
sbsg53
g0
(g54
g2
Ntp5024
Rp5025
(dp5026
g58
(lp5027
g4998
asg1883
g1886
sg204
(lp5028
g5017
asg14
g0
(g15
g2
Ntp5029
Rp5030
(dp5031
g4120
(lp5032
g2628
asg2143
(lp5033
g2146
asbsg2147
(dp5034
sg206
g499
sbsg177
g1206
sbasg1883
g1886
sg204
(lp5035
g4986
asg14
g0
(g15
g2
Ntp5036
Rp5037
(dp5038
g4120
(lp5039
g2628
asg2143
(lp5040
g2146
asbsg2147
(dp5041
sg206
g1153
sbsg177
g1213
sb(g1900
g4870
tp5042
sg5017
(g1900
g4870
tp5043
sg2019
(g4683
g4701
tp5044
sg2368
(g4918
tp5045
sg2126
(g4852
g4870
tp5046
sg0
(g7
g2
Ntp5047
Rp5048
(dp5049
g13
I0
sg52
S'max'
p5050
sg1883
g1886
sg1892
(lp5051
sg11
S'auto_8033'
p5052
sg14
g0
(g15
g2
Ntp5053
Rp5054
(dp5055
g19
(lp5056
g3367
asbsg53
g0
(g54
g2
Ntp5057
Rp5058
(dp5059
g58
(lp5060
g2851
asg1883
g1886
sg204
(lp5061
g5048
ag0
(g7
g2
Ntp5062
Rp5063
(dp5064
g13
I1
sg52
g1960
sg1883
g1886
sg1892
(lp5065
sg11
S'auto_8034'
p5066
sg14
g0
(g15
g2
Ntp5067
Rp5068
(dp5069
g19
(lp5070
(lp5071
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5072
tp5073
a(g22
I72
g26
S'exec code in run_globals'
p5074
tp5075
a(g29
I249
g30
S'Model(hyperparams).train()'
p5076
tp5077
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5078
tp5079
a(g37
I93
g38
S'T.argmax(target, axis=1)),'
p5080
tp5081
aasbsg53
g5058
sg177
g0
(g178
g2
Ntp5082
Rp5083
(dp5084
g182
(I00
tp5085
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp5086
Rp5087
(dp5088
g4120
(lp5089
g3386
asg2143
(lp5090
g2146
asbsg2147
(dp5091
sg206
g0
(ctheano.tensor.basic
MaxAndArgmax
p5092
g2
Ntp5093
Rp5094
(dp5095
g3006
g3392
sbsbsg177
g0
(g178
g2
Ntp5096
Rp5097
(dp5098
g182
(I00
tp5099
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsb(g2868
tp5100
sg0
(g7
g2
Ntp5101
Rp5102
(dp5103
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5104
sg11
S'auto_7997'
p5105
sg14
g0
(g15
g2
Ntp5106
Rp5107
(dp5108
g19
g1247
sbsg53
g0
(g54
g2
Ntp5109
Rp5110
(dp5111
g58
(lp5112
g0
(g7
g2
Ntp5113
Rp5114
(dp5115
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5116
sg11
S'auto_7996'
p5117
sg14
g0
(g15
g2
Ntp5118
Rp5119
(dp5120
g19
g1276
sbsg53
g0
(g54
g2
Ntp5121
Rp5122
(dp5123
g58
(lp5124
g0
(g7
g2
Ntp5125
Rp5126
(dp5127
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5128
sg11
S'auto_7995'
p5129
sg14
g0
(g15
g2
Ntp5130
Rp5131
(dp5132
g19
g1305
sbsg53
g0
(g54
g2
Ntp5133
Rp5134
(dp5135
g58
(lp5136
g2019
asg1883
g1886
sg204
(lp5137
g5126
asg14
g0
(g15
g2
Ntp5138
Rp5139
(dp5140
g4120
(lp5141
g2628
asg2143
(lp5142
g2146
asbsg2147
(dp5143
sg206
g499
sbsg177
g1371
sbag2010
asg1883
g1886
sg204
(lp5144
g5114
asg14
g0
(g15
g2
Ntp5145
Rp5146
(dp5147
g4120
(lp5148
g2628
asg2143
(lp5149
g2146
asbsg2147
(dp5150
sg206
g621
sbsg177
g1429
sbag1993
ag4813
asg1883
g1886
sg204
(lp5151
g5102
asg14
g0
(g15
g2
Ntp5152
Rp5153
(dp5154
g4120
(lp5155
g2628
asg2143
(lp5156
g2146
asbsg2147
(dp5157
sg206
g1021
sbsg177
g1712
sb(g4683
g4701
tp5158
sg5114
(g4683
g4701
tp5159
sg0
(g149
g2
Ntp5160
Rp5161
(dp5162
g11
S'auto_8013'
p5163
sg13
Nsg14
g0
(g15
g2
Ntp5164
Rp5165
(dp5166
g19
g157
sg175
Nsbsg52
Nsg177
g180
sg1892
(lp5167
sg193
g199
sb(tsg2904
(g0
(g149
g2
Ntp5168
Rp5169
(dp5170
g11
S'auto_8062'
p5171
sg13
Nsg14
g0
(g15
g2
Ntp5172
Rp5173
(dp5174
g19
(lp5175
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp5176
Rp5177
(dp5178
g182
(tsg183
S'int64'
p5179
sg185
g2899
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp5180
g197
tp5181
Rp5182
(I1
(tg2899
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p5183
tp5184
bsbtp5185
sg3078
(tsg0
(g7
g2
Ntp5186
Rp5187
(dp5188
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5189
sg11
S'auto_8015'
p5190
sg14
g0
(g15
g2
Ntp5191
Rp5192
(dp5193
g19
g96
sbsg53
g0
(g54
g2
Ntp5194
Rp5195
(dp5196
g58
(lp5197
g2093
ag4986
asg1883
g1886
sg204
(lp5198
g5187
asg14
g0
(g15
g2
Ntp5199
Rp5200
(dp5201
g4120
(lp5202
g2628
asg2143
(lp5203
g2146
asbsg2147
(dp5204
sg206
g1220
sbsg177
g1237
sb(g1900
g4870
tp5205
sg4233
(g1900
g4701
tp5206
sg3013
(tsg0
(g7
g2
Ntp5207
Rp5208
(dp5209
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5210
sg11
S'auto_7987'
p5211
sg14
g0
(g15
g2
Ntp5212
Rp5213
(dp5214
g19
g1606
sbsg53
g0
(g54
g2
Ntp5215
Rp5216
(dp5217
g58
(lp5218
g0
(g149
g2
Ntp5219
Rp5220
(dp5221
g11
S'auto_7986'
p5222
sg13
Nsg14
g0
(g15
g2
Ntp5223
Rp5224
(dp5225
g19
g883
sg175
Nsbsg52
Nsg177
g902
sg1892
(lp5226
sg193
g907
sbasg1883
g1886
sg204
(lp5227
g5208
asg14
g0
(g15
g2
Ntp5228
Rp5229
(dp5230
g4120
(lp5231
g4913
asg2143
(lp5232
g2146
ag2146
asbsg2147
(dp5233
sg206
g1632
sbsg177
g1647
sb(g4720
g4720
tp5234
sg4901
(tsg5220
(tsg0
(g7
g2
Ntp5235
Rp5236
(dp5237
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5238
sg11
S'auto_8059'
p5239
sg14
g0
(g15
g2
Ntp5240
Rp5241
(dp5242
g19
(lp5243
g4746
a(lp5244
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5245
tp5246
a(g22
I72
g26
S'exec code in run_globals'
p5247
tp5248
a(g29
I249
g30
S'Model(hyperparams).train()'
p5249
tp5250
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5251
tp5252
a(g37
I94
g38
S'dtype=theano.config.floatX)'
p5253
tp5254
aasbsg53
g0
(g54
g2
Ntp5255
Rp5256
(dp5257
g58
(lp5258
g1900
asg1883
g1886
sg204
(lp5259
g5236
asg14
g0
(g15
g2
Ntp5260
Rp5261
(dp5262
g4120
(lp5263
g2628
asg2143
(lp5264
g4803
asbsg2147
(dp5265
sg206
g3295
sbsg177
g0
(g178
g2
Ntp5266
Rp5267
(dp5268
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg5126
(g4683
g4701
tp5269
sg4969
(tsg0
(g7
g2
Ntp5270
Rp5271
(dp5272
g13
I0
sg52
g3080
sg1883
g1886
sg1892
(lp5273
sg11
S'auto_8032'
p5274
sg14
g0
(g15
g2
Ntp5275
Rp5276
(dp5277
g19
(lp5278
(lp5279
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5280
tp5281
a(g22
I72
g26
S'exec code in run_globals'
p5282
tp5283
a(g29
I249
g30
S'Model(hyperparams).train()'
p5284
tp5285
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5286
tp5287
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p5288
tp5289
aasbsg53
g0
(g54
g2
Ntp5290
Rp5291
(dp5292
g58
(lp5293
g0
(g7
g2
Ntp5294
Rp5295
(dp5296
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5297
sg11
S'auto_8031'
p5298
sg14
g0
(g15
g2
Ntp5299
Rp5300
(dp5301
g19
(lp5302
(lp5303
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5304
tp5305
a(g22
I72
g26
S'exec code in run_globals'
p5306
tp5307
a(g29
I249
g30
S'Model(hyperparams).train()'
p5308
tp5309
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5310
tp5311
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p5312
tp5313
aasbsg53
g0
(g54
g2
Ntp5314
Rp5315
(dp5316
g58
(lp5317
g2958
ag3013
asg1883
g1886
sg204
(lp5318
g5295
asg14
g0
(g15
g2
Ntp5319
Rp5320
(dp5321
g4120
(lp5322
g2628
asg2143
(lp5323
g2146
asbsg2147
(dp5324
sg206
g0
(g497
g2
Ntp5325
Rp5326
(dp5327
g501
g502
sg503
g3179
sg52
S'Elemwise{true_div,no_inplace}'
p5328
sg511
(dp5329
sg513
(S'true_divide'
p5330
I2
I1
tp5331
sg516
g0
(g517
g2
Ntp5332
Rp5333
(dp5334
g521
I0
sg522
(dp5335
sbsg524
I00
sg525
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p5336
sbsbsg177
g0
(g178
g2
Ntp5337
Rp5338
(dp5339
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag2950
asg1883
g1886
sg204
(lp5340
g5271
asg14
g0
(g15
g2
Ntp5341
Rp5342
(dp5343
g4120
(lp5344
g2628
asg2143
(lp5345
g2146
asbsg2147
(dp5346
sg206
g5326
sbsg177
g0
(g178
g2
Ntp5347
Rp5348
(dp5349
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg0
(g7
g2
Ntp5350
Rp5351
(dp5352
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5353
sg11
S'auto_8020'
p5354
sg14
g0
(g15
g2
Ntp5355
Rp5356
(dp5357
g19
(lp5358
(lp5359
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5360
tp5361
a(g22
I72
g26
S'exec code in run_globals'
p5362
tp5363
a(g29
I249
g30
S'Model(hyperparams).train()'
p5364
tp5365
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5366
tp5367
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p5368
tp5369
aasbsg53
g0
(g54
g2
Ntp5370
Rp5371
(dp5372
g58
(lp5373
g2049
ag0
(g7
g2
Ntp5374
Rp5375
(dp5376
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5377
sg11
S'auto_8018'
p5378
sg14
g0
(g15
g2
Ntp5379
Rp5380
(dp5381
g19
(lp5382
(lp5383
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5384
tp5385
a(g22
I72
g26
S'exec code in run_globals'
p5386
tp5387
a(g29
I249
g30
S'Model(hyperparams).train()'
p5388
tp5389
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5390
tp5391
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p5392
tp5393
aasbsg53
g0
(g54
g2
Ntp5394
Rp5395
(dp5396
g58
(lp5397
g2851
ag4233
asg1883
g1886
sg204
(lp5398
g5375
asg14
g0
(g15
g2
Ntp5399
Rp5400
(dp5401
g4120
(lp5402
g2628
asg2143
(lp5403
g2146
asbsg2147
(dp5404
sg206
g1220
sbsg177
g0
(g178
g2
Ntp5405
Rp5406
(dp5407
g182
(I00
I00
tp5408
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g1886
sg204
(lp5409
g5351
asg14
g0
(g15
g2
Ntp5410
Rp5411
(dp5412
g4120
(lp5413
g2628
asg2143
(lp5414
g2146
asbsg2147
(dp5415
sg206
g0
(g497
g2
Ntp5416
Rp5417
(dp5418
g501
g502
sg503
g3526
sg52
S'Elemwise{sub,no_inplace}'
p5419
sg511
(dp5420
sg513
(S'subtract'
p5421
I2
I1
tp5422
sg516
g0
(g517
g2
Ntp5423
Rp5424
(dp5425
g521
I0
sg522
(dp5426
sbsg524
I00
sg525
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p5427
sbsbsg177
g0
(g178
g2
Ntp5428
Rp5429
(dp5430
g182
(I00
I00
tp5431
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g2868
g2860
tp5432
sg0
(g7
g2
Ntp5433
Rp5434
(dp5435
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5436
sg11
S'auto_8016'
p5437
sg14
g0
(g15
g2
Ntp5438
Rp5439
(dp5440
g19
g67
sbsg53
g0
(g54
g2
Ntp5441
Rp5442
(dp5443
g58
(lp5444
g5187
ag5102
asg1883
g1886
sg204
(lp5445
g5434
asg14
g0
(g15
g2
Ntp5446
Rp5447
(dp5448
g4120
(lp5449
g2145
asg2143
(lp5450
g2146
asbsg2147
(dp5451
sg206
g1052
sbsg177
g1719
sb(g1900
g4701
tp5452
sg5063
(g2868
tp5453
sg5375
(g2868
g2860
tp5454
sg2157
(g4720
g0
(g7
g2
Ntp5455
Rp5456
(dp5457
g11
S'auto_8048'
p5458
sg13
I0
sg14
g0
(g15
g2
Ntp5459
Rp5460
(dp5461
g19
(lp5462
sbsg52
Nsg53
g0
(g54
g2
Ntp5463
Rp5464
(dp5465
g58
(lp5466
g2170
asg14
g0
(g15
g2
Ntp5467
Rp5468
sg204
(lp5469
g5456
asg206
g0
(g2888
g2
Ntp5470
Rp5471
(dp5472
g2892
I0
sbsbsg177
g2894
sbtp5473
sg0
(g7
g2
Ntp5474
Rp5475
(dp5476
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5477
sg11
S'auto_8009'
p5478
sg14
g0
(g15
g2
Ntp5479
Rp5480
(dp5481
g19
g306
sbsg53
g0
(g54
g2
Ntp5482
Rp5483
(dp5484
g58
(lp5485
g1890
ag0
(g7
g2
Ntp5486
Rp5487
(dp5488
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5489
sg11
S'auto_8008'
p5490
sg14
g0
(g15
g2
Ntp5491
Rp5492
(dp5493
g19
g359
sbsg53
g0
(g54
g2
Ntp5494
Rp5495
(dp5496
g58
(lp5497
g0
(g7
g2
Ntp5498
Rp5499
(dp5500
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5501
sg11
S'auto_8007'
p5502
sg14
g0
(g15
g2
Ntp5503
Rp5504
(dp5505
g19
g390
sbsg53
g0
(g54
g2
Ntp5506
Rp5507
(dp5508
g58
(lp5509
g0
(g7
g2
Ntp5510
Rp5511
(dp5512
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5513
sg11
S'auto_8006'
p5514
sg14
g0
(g15
g2
Ntp5515
Rp5516
(dp5517
g19
g419
sbsg53
g0
(g54
g2
Ntp5518
Rp5519
(dp5520
g58
(lp5521
g2001
asg1883
g1886
sg204
(lp5522
g5511
asg14
g0
(g15
g2
Ntp5523
Rp5524
(dp5525
g4120
(lp5526
g2628
asg2143
(lp5527
g2146
asbsg2147
(dp5528
sg206
g499
sbsg177
g528
sbag2010
asg1883
g1886
sg204
(lp5529
g5499
asg14
g0
(g15
g2
Ntp5530
Rp5531
(dp5532
g4120
(lp5533
g2628
asg2143
(lp5534
g2146
asbsg2147
(dp5535
sg206
g621
sbsg177
g638
sbag1993
ag0
(g7
g2
Ntp5536
Rp5537
(dp5538
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5539
sg11
S'auto_8003'
p5540
sg14
g0
(g15
g2
Ntp5541
Rp5542
(dp5543
g19
g738
sbsg53
g0
(g54
g2
Ntp5544
Rp5545
(dp5546
g58
(lp5547
g4833
ag2028
ag2049
asg1883
g1886
sg204
(lp5548
g5537
asg14
g0
(g15
g2
Ntp5549
Rp5550
(dp5551
g4120
(lp5552
g2628
asg2143
(lp5553
g2146
asbsg2147
(dp5554
sg206
g1021
sbsg177
g1037
sbasg1883
g1886
sg204
(lp5555
g5487
asg14
g0
(g15
g2
Ntp5556
Rp5557
(dp5558
g4120
(lp5559
g2628
asg2143
(lp5560
g2146
asbsg2147
(dp5561
sg206
g1021
sbsg177
g1044
sbasg1883
g1886
sg204
(lp5562
g5475
asg14
g0
(g15
g2
Ntp5563
Rp5564
(dp5565
g4120
(lp5566
g2145
asg2143
(lp5567
g2146
asbsg2147
(dp5568
sg206
g1052
sbsg177
g1054
sb(g1900
g4870
tp5569
sg5537
(g4852
g4870
tp5570
sg5511
(g4852
g4870
tp5571
sg0
(g7
g2
Ntp5572
Rp5573
(dp5574
g13
I1
sg52
g1960
sg1883
g1886
sg1892
(lp5575
sg11
S'auto_8036'
p5576
sg14
g0
(g15
g2
Ntp5577
Rp5578
(dp5579
g19
(lp5580
(lp5581
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5582
tp5583
a(g22
I72
g26
S'exec code in run_globals'
p5584
tp5585
a(g29
I249
g30
S'Model(hyperparams).train()'
p5586
tp5587
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5588
tp5589
a(g37
I92
g38
S'test_err = T.mean(T.neq(T.argmax(test_output, axis=1),'
p5590
tp5591
aasbsg53
g0
(g54
g2
Ntp5592
Rp5593
(dp5594
g58
(lp5595
g4233
asg1883
g1886
sg204
(lp5596
g0
(g7
g2
Ntp5597
Rp5598
(dp5599
g13
I0
sg52
g5050
sg1883
g1886
sg1892
(lp5600
sg11
S'auto_8035'
p5601
sg14
g0
(g15
g2
Ntp5602
Rp5603
(dp5604
g19
(lp5605
g1968
asbsg53
g5593
sg177
g0
(g178
g2
Ntp5606
Rp5607
(dp5608
g182
(I00
tp5609
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag5573
asg14
g0
(g15
g2
Ntp5610
Rp5611
(dp5612
g4120
(lp5613
g3386
asg2143
(lp5614
g2146
asbsg2147
(dp5615
sg206
g0
(g5092
g2
Ntp5616
Rp5617
(dp5618
g3006
g3587
sbsbsg177
g0
(g178
g2
Ntp5619
Rp5620
(dp5621
g182
(I00
tp5622
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsb(g1900
tp5623
sg0
(g7
g2
Ntp5624
Rp5625
(dp5626
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5627
sg11
S'auto_8014'
p5628
sg14
g0
(g15
g2
Ntp5629
Rp5630
(dp5631
g19
g127
sbsg53
g0
(g54
g2
Ntp5632
Rp5633
(dp5634
g58
(lp5635
g5161
asg1883
g1886
sg204
(lp5636
g5625
asg14
g0
(g15
g2
Ntp5637
Rp5638
(dp5639
g4120
(lp5640
g4913
asg2143
(lp5641
g2146
ag2146
asbsg2147
(dp5642
sg206
g209
sbsg177
g238
sb(g4720
g4720
tp5643
sg5598
(g1900
tp5644
sg1933
(g1900
tp5645
sg0
(g149
g2
Ntp5646
Rp5647
(dp5648
g11
S'auto_7984'
p5649
sg13
Nsg14
g0
(g15
g2
Ntp5650
Rp5651
(dp5652
g19
g968
sg175
Nsbsg52
Nsg177
g987
sg1892
(lp5653
sg193
g992
sb(tsg5487
(g4852
g4870
tp5654
sg0
(g7
g2
Ntp5655
Rp5656
(dp5657
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5658
sg11
S'auto_8038'
p5659
sg14
g0
(g15
g2
Ntp5660
Rp5661
(dp5662
g19
(lp5663
g4770
asbsg53
g0
(g54
g2
Ntp5664
Rp5665
(dp5666
g58
(lp5667
g1933
asg1883
g1886
sg204
(lp5668
g5656
asg14
g0
(g15
g2
Ntp5669
Rp5670
(dp5671
g4120
(lp5672
g2886
asg2143
(lp5673
g2146
asbsg2147
(dp5674
sg206
g0
(ctheano.compile.ops
Shape
p5675
g2
Ntp5676
Rp5677
sbsg177
g0
(g178
g2
Ntp5678
Rp5679
(dp5680
g182
(I00
tp5681
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsb(g4720
tp5682
sg5499
(g4852
g4870
tp5683
sg0
(g7
g2
Ntp5684
Rp5685
(dp5686
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5687
sg11
S'auto_8039'
p5688
sg14
g0
(g15
g2
Ntp5689
Rp5690
(dp5691
g19
(lp5692
g5244
asbsg53
g0
(g54
g2
Ntp5693
Rp5694
(dp5695
g58
(lp5696
g5656
asg1883
g1886
sg204
(lp5697
g5685
asg14
g0
(g15
g2
Ntp5698
Rp5699
(dp5700
g4120
(lp5701
g4803
asg2143
(lp5702
g2146
asbsg2147
(dp5703
sg206
g3295
sbsg177
g0
(g178
g2
Ntp5704
Rp5705
(dp5706
g182
(I00
tp5707
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g4720
tp5708
sg2112
(g1900
g4870
tp5709
sg4507
(tsg4390
(tsg0
(g7
g2
Ntp5710
Rp5711
(dp5712
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5713
sg11
S'auto_8041'
p5714
sg14
g0
(g15
g2
Ntp5715
Rp5716
(dp5717
g19
(lp5718
g4746
asbsg53
g0
(g54
g2
Ntp5719
Rp5720
(dp5721
g58
(lp5722
g5685
ag3038
asg1883
g1886
sg204
(lp5723
g5711
asg14
g0
(g15
g2
Ntp5724
Rp5725
(dp5726
g4120
(lp5727
g4803
asg2143
(lp5728
g2146
asbsg2147
(dp5729
sg206
g4806
sbsg177
g0
(g178
g2
Ntp5730
Rp5731
(dp5732
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg4762
(g4720
tp5733
sg4104
(g1900
g4870
tp5734
sg2958
(tsg1908
(tsg3358
(g2868
tp5735
sg0
(g7
g2
Ntp5736
Rp5737
(dp5738
g13
I0
sg52
g3080
sg1883
g1886
sg1892
(lp5739
sg11
S'auto_8043'
p5740
sg14
g0
(g15
g2
Ntp5741
Rp5742
(dp5743
g19
(lp5744
(lp5745
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5746
tp5747
a(g22
I72
g26
S'exec code in run_globals'
p5748
tp5749
a(g29
I249
g30
S'Model(hyperparams).train()'
p5750
tp5751
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5752
tp5753
a(g37
I94
g38
S'dtype=theano.config.floatX)'
p5754
tp5755
aasbsg53
g0
(g54
g2
Ntp5756
Rp5757
(dp5758
g58
(lp5759
g1908
ag5236
asg1883
g1886
sg204
(lp5760
g5737
asg14
g0
(g15
g2
Ntp5761
Rp5762
(dp5763
g4120
(lp5764
g2628
asg2143
(lp5765
g2146
asbsg2147
(dp5766
sg206
g5326
sbsg177
g0
(g178
g2
Ntp5767
Rp5768
(dp5769
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg3657
(tsg0
(g7
g2
Ntp5770
Rp5771
(dp5772
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5773
sg11
S'auto_8293'
p5774
sg14
g0
(g15
g2
Ntp5775
Rp5776
(dp5777
g19
(lp5778
sbsg53
g0
(g54
g2
Ntp5779
Rp5780
(dp5781
g58
(lp5782
g2093
ag4998
asg1883
g1886
sg204
(lp5783
g5771
asg14
g0
(g15
g2
Ntp5784
Rp5785
(dp5786
g4120
(lp5787
g2628
asg2143
(lp5788
g2628
asbsg2147
(dp5789
sg206
g0
(g497
g2
Ntp5790
Rp5791
(dp5792
g52
Nsg503
g0
(g2225
g2
Ntp5793
Rp5794
(dp5795
g58
(lp5796
g0
(g2193
g2
Ntp5797
Rp5798
(dp5799
g11
S'auto_8279'
p5800
sg13
Nsg14
g0
(g15
g2
Ntp5801
Rp5802
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp5803
Rp5804
(dp5805
g11
S'auto_8280'
p5806
sg13
Nsg14
g0
(g15
g2
Ntp5807
Rp5808
sg52
Nsg53
Nsg177
g2202
sbasg2248
I2
sg52
Nsg2249
(g2202
g2202
tp5809
sg204
(lp5810
g0
(g2193
g2
Ntp5811
Rp5812
(dp5813
g11
S'auto_8284'
p5814
sg13
I0
sg14
g0
(g15
g2
Ntp5815
Rp5816
(dp5817
g19
g2259
sbsg52
Nsg53
g0
(g54
g2
Ntp5818
Rp5819
(dp5820
g58
(lp5821
g5798
ag0
(g2193
g2
Ntp5822
Rp5823
(dp5824
g11
S'auto_8283'
p5825
sg13
I0
sg14
g0
(g15
g2
Ntp5826
Rp5827
(dp5828
g19
g2271
sbsg52
Nsg53
g0
(g54
g2
Ntp5829
Rp5830
(dp5831
g58
(lp5832
g5804
ag0
(g2193
g2
Ntp5833
Rp5834
(dp5835
g11
S'auto_8282'
p5836
sg13
I0
sg14
g0
(g15
g2
Ntp5837
Rp5838
(dp5839
g19
g2298
sbsg52
Nsg53
g0
(g54
g2
Ntp5840
Rp5841
(dp5842
g58
(lp5843
g5804
asg14
g0
(g15
g2
Ntp5844
Rp5845
sg204
(lp5846
g5834
asg206
g506
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp5847
Rp5848
sg204
(lp5849
g5823
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp5850
Rp5851
sg204
(lp5852
g5812
asg206
g1224
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = fabs(%(i1)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s + V%(id)s_tmp1;\n%(o0)s = %(i0)s * V%(id)s_tmp2;\n}\n'
p5853
sg2314
(g2202
tp5854
sg2322
(lp5855
S'%(nodename)s_subnode0'
p5856
aS'%(nodename)s_subnode1'
p5857
aS'%(nodename)s_subnode2'
p5858
asg2328
I1
sbsg511
(dp5859
sg513
Nsg516
g0
(g517
g2
Ntp5860
Rp5861
(dp5862
g521
Nsg522
(dp5863
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp5864
Rp5865
(dp5866
g182
(I00
I00
tp5867
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g1900
g4870
tp5868
sg2983
(g2868
g2860
tp5869
sg2170
(g5456
tp5870
sg4256
(g2868
g2860
tp5871
sg3038
(tsg5295
(tsg0
(g7
g2
Ntp5872
Rp5873
(dp5874
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5875
sg11
S'auto_8022'
p5876
sg14
g0
(g15
g2
Ntp5877
Rp5878
(dp5879
g19
(lp5880
(lp5881
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5882
tp5883
a(g22
I72
g26
S'exec code in run_globals'
p5884
tp5885
a(g29
I249
g30
S'Model(hyperparams).train()'
p5886
tp5887
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5888
tp5889
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p5890
tp5891
aasbsg53
g0
(g54
g2
Ntp5892
Rp5893
(dp5894
g58
(lp5895
g1993
ag5351
asg1883
g1886
sg204
(lp5896
g5873
asg14
g0
(g15
g2
Ntp5897
Rp5898
(dp5899
g4120
(lp5900
g2628
asg2143
(lp5901
g2146
asbsg2147
(dp5902
sg206
g0
(g497
g2
Ntp5903
Rp5904
(dp5905
g501
g502
sg503
g3535
sg52
S'Elemwise{maximum,no_inplace}'
p5906
sg511
(dp5907
sg513
(g3537
I2
I1
tp5908
sg516
g0
(g517
g2
Ntp5909
Rp5910
(dp5911
g521
I0
sg522
(dp5912
sbsg524
I00
sg525
S"elemwise maximum. See max for the maximum in one tensor\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p5913
sbsbsg177
g0
(g178
g2
Ntp5914
Rp5915
(dp5916
g182
(I00
I00
tp5917
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g2868
g2860
tp5918
sg1993
(g4720
g4720
tp5919
sg2010
(g4720
g4720
tp5920
sg1958
(g1900
tp5921
sg0
(g7
g2
Ntp5922
Rp5923
(dp5924
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5925
sg11
S'auto_7985'
p5926
sg14
g0
(g15
g2
Ntp5927
Rp5928
(dp5929
g19
g1657
sbsg53
g0
(g54
g2
Ntp5930
Rp5931
(dp5932
g58
(lp5933
g5647
asg1883
g1886
sg204
(lp5934
g5923
asg14
g0
(g15
g2
Ntp5935
Rp5936
(dp5937
g4120
(lp5938
g4913
asg2143
(lp5939
g2146
ag2146
asbsg2147
(dp5940
sg206
g1683
sbsg177
g1698
sb(g4720
g4720
tp5941
sg2071
(g4683
g4701
tp5942
sg4998
(g1900
g4870
tp5943
sg2347
(g1900
g4701
tp5944
sg1900
(tsg2950
(tsg2913
(g0
(g149
g2
Ntp5945
Rp5946
(dp5947
g11
S'auto_8055'
p5948
sg13
Nsg14
g0
(g15
g2
Ntp5949
Rp5950
(dp5951
g19
(lp5952
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp5953
Rp5954
(dp5955
g182
(tsg183
S'int64'
p5956
sg185
g2899
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp5957
g197
tp5958
Rp5959
(I1
(tg2899
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p5960
tp5961
bsbtp5962
sg1984
(g1900
g4701
tp5963
sg2922
(tsg0
(g7
g2
Ntp5964
Rp5965
(dp5966
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5967
sg11
S'auto_8024'
p5968
sg14
g0
(g15
g2
Ntp5969
Rp5970
(dp5971
g19
(lp5972
g3312
asbsg53
g0
(g54
g2
Ntp5973
Rp5974
(dp5975
g58
(lp5976
g0
(g7
g2
Ntp5977
Rp5978
(dp5979
g13
I0
sg52
Nsg1883
g1886
sg1892
(lp5980
sg11
S'auto_8023'
p5981
sg14
g0
(g15
g2
Ntp5982
Rp5983
(dp5984
g19
(lp5985
(lp5986
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p5987
tp5988
a(g22
I72
g26
S'exec code in run_globals'
p5989
tp5990
a(g29
I249
g30
S'Model(hyperparams).train()'
p5991
tp5992
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p5993
tp5994
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p5995
tp5996
aasbsg53
g0
(g54
g2
Ntp5997
Rp5998
(dp5999
g58
(lp6000
g5873
asg1883
g1886
sg204
(lp6001
g5978
asg14
g0
(g15
g2
Ntp6002
Rp6003
(dp6004
g4120
(lp6005
g2628
asg2143
(lp6006
g2146
asbsg2147
(dp6007
sg206
g0
(g497
g2
Ntp6008
Rp6009
(dp6010
g501
g502
sg503
g3543
sg52
S'Elemwise{sqr,no_inplace}'
p6011
sg511
(dp6012
sg513
(S'square'
p6013
I1
I1
tp6014
sg516
g0
(g517
g2
Ntp6015
Rp6016
(dp6017
g521
I0
sg522
(dp6018
sbsg524
I00
sg525
S"square of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p6019
sbsbsg177
g0
(g178
g2
Ntp6020
Rp6021
(dp6022
g182
(I00
I00
tp6023
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g1886
sg204
(lp6024
g5965
asg14
g0
(g15
g2
Ntp6025
Rp6026
(dp6027
g4120
(lp6028
g2886
asg2143
(lp6029
g2146
asbsg2147
(dp6030
sg206
g5677
sbsg177
g5679
sb(g5946
tp6031
sg2093
(g4720
g4720
tp6032
sg2868
(tsg2028
(g4720
g4720
tp6033
sg5978
(g2868
g2860
tp6034
sg2860
(tsg2079
(g1900
g4870
tp6035
ssS'lscalar_one'
p6036
g4720
sS'shape_of_reverse_index'
p6037
(dp6038
g5456
g3796
((lp6039
g2157
ag2170
atp6040
Rp6041
sg5737
g3796
((lp6042
tp6043
Rp6044
sg4918
g3796
((lp6045
g2368
ag2355
atp6046
Rp6047
sg4256
g3796
((lp6048
tp6049
Rp6050
sg4852
g3796
((lp6051
g4833
ag5511
ag5537
ag2126
ag5487
ag5499
ag2001
atp6052
Rp6053
sg4738
g3796
((lp6054
tp6055
Rp6056
sg5946
g3796
((lp6057
g5965
ag2913
atp6058
Rp6059
sg4720
g3796
((lp6060
g2157
ag4762
ag2028
ag5685
ag1993
ag2093
ag2049
ag4889
ag2355
ag5625
ag5923
ag5656
ag4957
ag2010
ag5208
atp6061
Rp6062
sg4507
g3796
((lp6063
tp6064
Rp6065
sg4390
g3796
((lp6066
tp6067
Rp6068
sg5487
g3796
((lp6069
tp6070
Rp6071
sg4889
g3796
((lp6072
tp6073
Rp6074
sg5978
g3796
((lp6075
tp6076
Rp6077
sg4233
g3796
((lp6078
tp6079
Rp6080
sg4104
g3796
((lp6081
tp6082
Rp6083
sg4957
g3796
((lp6084
tp6085
Rp6086
sg1900
g3796
((lp6087
g2347
ag4986
ag4998
ag1984
ag5017
ag4104
ag5475
ag2079
ag1890
ag2112
ag4233
ag5573
ag5771
ag1933
ag5434
ag5598
ag5187
ag1958
atp6088
Rp6089
sg4683
g3796
((lp6090
g5114
ag2071
ag2019
ag4664
ag5102
ag5126
ag4813
atp6091
Rp6092
sg5187
g3796
((lp6093
tp6094
Rp6095
sg5711
g3796
((lp6096
tp6097
Rp6098
sg5475
g3796
((lp6099
tp6100
Rp6101
sg4937
g3796
((lp6102
g1890
atp6103
Rp6104
sg5573
g3796
((lp6105
tp6106
Rp6107
sg5102
g3796
((lp6108
tp6109
Rp6110
sg5656
g3796
((lp6111
tp6112
Rp6113
sg5965
g3796
((lp6114
tp6115
Rp6116
sg5625
g3796
((lp6117
tp6118
Rp6119
sg2868
g3796
((lp6120
g5063
ag2983
ag5978
ag3358
ag5351
ag4256
ag2851
ag5048
ag5873
ag5375
atp6121
Rp6122
sg5434
g3796
((lp6123
tp6124
Rp6125
sg4701
g3796
((lp6126
g2347
ag5114
ag5434
ag2071
ag2019
ag4664
ag4233
ag1984
ag5102
ag5126
ag4813
atp6127
Rp6128
sg5063
g3796
((lp6129
tp6130
Rp6131
sg5923
g3796
((lp6132
tp6133
Rp6134
sg5169
g3796
((lp6135
g2904
atp6136
Rp6137
sg4870
g3796
((lp6138
g2126
ag4833
ag5511
ag5017
ag4998
ag4104
ag5537
ag5475
ag5487
ag5499
ag5771
ag5187
ag2112
ag2079
ag2001
ag4986
atp6139
Rp6140
sg5271
g3796
((lp6141
tp6142
Rp6143
sg2860
g3796
((lp6144
g2983
ag5978
ag5351
ag4256
ag2851
ag5873
ag5375
atp6145
Rp6146
sg5208
g3796
((lp6147
tp6148
Rp6149
sg5771
g3796
((lp6150
tp6151
Rp6152
ssbsS'apply_nodes'
p6153
g3796
((lp6154
g2855
ag2864
ag2908
ag1904
ag1989
ag2351
ag1997
ag3353
ag2979
ag2075
ag2089
ag2166
ag1954
ag1895
ag1980
ag2954
ag3034
ag2917
ag2122
ag2364
ag2878
ag1929
ag2015
atp6155
Rp6156
sS'variables'
p6157
g3796
((lp6158
g2049
ag2355
ag1890
ag2851
ag2001
ag3358
ag2019
ag3657
ag2368
ag2126
ag2983
ag2904
ag3078
ag2170
ag1933
ag1908
ag2958
ag3038
ag1993
ag2010
ag1958
ag2071
ag2347
ag1900
ag3013
ag2157
ag2950
ag2913
ag1984
ag2922
ag2112
ag2093
ag2868
ag2028
ag2860
ag2079
atp6159
Rp6160
sS'_features'
p6161
(lp6162
g0
(ctheano.gof.toolbox
ReplaceValidate
p6163
g2
Ntp6164
Rp6165
(dp6166
g4619
I00
sS'_nodes_removed'
p6167
g3796
((lp6168
tp6169
Rp6170
sba(itheano.compile.function_module
Supervisor
p6171
(dp6172
S'protected'
p6173
(lp6174
g1890
ag2851
ag2001
ag2170
ag2019
ag2368
asbag0
(ctheano.gof.toolbox
PreserveVariableAttributes
p6175
g2
Ntp6176
Rp6177
ag3791
ag4658
ag3875
asbsg204
(lp6178
g0
(ctheano.compile.io
SymbolicOutput
p6179
g2
Ntp6180
Rp6181
(dp6182
g1838
g0
(g7
g2
Ntp6183
Rp6184
(dp6185
g11
S'auto_7966'
p6186
sg13
I0
sg14
g0
(g15
g2
Ntp6187
Rp6188
(dp6189
g19
g5278
sbsg52
g3080
sg53
g0
(g54
g2
Ntp6190
Rp6191
(dp6192
g58
(lp6193
g0
(g7
g2
Ntp6194
Rp6195
(dp6196
g11
S'auto_7964'
p6197
sg13
I0
sg14
g0
(g15
g2
Ntp6198
Rp6199
(dp6200
g19
g5302
sbsg52
Nsg53
g0
(g54
g2
Ntp6201
Rp6202
(dp6203
g58
(lp6204
g0
(g7
g2
Ntp6205
Rp6206
(dp6207
g11
S'auto_7960'
p6208
sg13
I0
sg14
g0
(g15
g2
Ntp6209
Rp6210
(dp6211
g19
g2966
sbsg52
Nsg53
g0
(g54
g2
Ntp6212
Rp6213
(dp6214
g58
(lp6215
g0
(g7
g2
Ntp6216
Rp6217
(dp6218
g11
S'auto_7959'
p6219
sg13
I0
sg14
g0
(g15
g2
Ntp6220
Rp6221
(dp6222
g19
g5985
sbsg52
Nsg53
g0
(g54
g2
Ntp6223
Rp6224
(dp6225
g58
(lp6226
g0
(g7
g2
Ntp6227
Rp6228
(dp6229
g11
S'auto_7958'
p6230
sg13
I0
sg14
g0
(g15
g2
Ntp6231
Rp6232
(dp6233
g19
g5880
sbsg52
Nsg53
g0
(g54
g2
Ntp6234
Rp6235
(dp6236
g58
(lp6237
g0
(g7
g2
Ntp6238
Rp6239
(dp6240
g11
S'auto_7924'
p6241
sg13
I0
sg14
g0
(g15
g2
Ntp6242
Rp6243
(dp6244
g19
(lp6245
(lp6246
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p6247
tp6248
a(g22
I72
g26
S'exec code in run_globals'
p6249
tp6250
a(g29
I249
g30
S'Model(hyperparams).train()'
p6251
tp6252
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p6253
tp6254
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p6255
tp6256
aasbsg52
Nsg53
g0
(g54
g2
Ntp6257
Rp6258
(dp6259
g58
(lp6260
g676
asg14
g0
(g15
g2
Ntp6261
Rp6262
sg204
(lp6263
g6239
asg206
g0
(g207
g2
Ntp6264
Rp6265
(dp6266
g211
(lp6267
sg213
(lp6268
sg215
(lp6269
I0
aI1
asg217
g218
sg219
(tsg220
(lp6270
g222
asg223
I01
sg224
(g225
g225
tp6271
sg227
(dp6272
S'support_code_apply'
p6273
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p6274
ssg231
(dp6275
I0
(lp6276
I0
assg234
(lp6277
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p6278
asbsbsg177
g0
(g178
g2
Ntp6279
Rp6280
(dp6281
g182
(I01
I01
tp6282
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp6283
Rp6284
(dp6285
g11
S'auto_7957'
p6286
sg13
I0
sg14
g0
(g15
g2
Ntp6287
Rp6288
(dp6289
g19
g5358
sbsg52
Nsg53
g0
(g54
g2
Ntp6290
Rp6291
(dp6292
g58
(lp6293
g0
(g7
g2
Ntp6294
Rp6295
(dp6296
g11
S'auto_7925'
p6297
sg13
I0
sg14
g0
(g15
g2
Ntp6298
Rp6299
(dp6300
g19
(lp6301
(lp6302
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p6303
tp6304
a(g22
I72
g26
S'exec code in run_globals'
p6305
tp6306
a(g29
I249
g30
S'Model(hyperparams).train()'
p6307
tp6308
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p6309
tp6310
a(g37
I91
g38
S'test_loss = T.mean(T.sqr(T.maximum(0., 1. - target * test_output)))'
p6311
tp6312
aasbsg52
Nsg53
g0
(g54
g2
Ntp6313
Rp6314
(dp6315
g58
(lp6316
g962
asg14
g0
(g15
g2
Ntp6317
Rp6318
sg204
(lp6319
g6295
asg206
g0
(g207
g2
Ntp6320
Rp6321
(dp6322
g211
(lp6323
sg213
(lp6324
sg215
(lp6325
I0
aI1
asg217
g218
sg219
(tsg220
(lp6326
g222
asg223
I01
sg224
(g225
g225
tp6327
sg227
(dp6328
S'support_code_apply'
p6329
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p6330
ssg231
(dp6331
I0
(lp6332
I0
assg234
(lp6333
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p6334
asbsbsg177
g0
(g178
g2
Ntp6335
Rp6336
(dp6337
g182
(I01
I01
tp6338
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp6339
Rp6340
(dp6341
g11
S'auto_7956'
p6342
sg13
I0
sg14
g0
(g15
g2
Ntp6343
Rp6344
(dp6345
g19
g5382
sbsg52
Nsg53
g0
(g54
g2
Ntp6346
Rp6347
(dp6348
g58
(lp6349
g1845
ag0
(g7
g2
Ntp6350
Rp6351
(dp6352
g11
S'auto_7955'
p6353
sg13
I0
sg14
g0
(g15
g2
Ntp6354
Rp6355
(dp6356
g19
g20
sbsg52
Nsg53
g0
(g54
g2
Ntp6357
Rp6358
(dp6359
g58
(lp6360
g0
(g7
g2
Ntp6361
Rp6362
(dp6363
g11
S'auto_7953'
p6364
sg13
I0
sg14
g0
(g15
g2
Ntp6365
Rp6366
(dp6367
g19
g67
sbsg52
Nsg53
g0
(g54
g2
Ntp6368
Rp6369
(dp6370
g58
(lp6371
g0
(g7
g2
Ntp6372
Rp6373
(dp6374
g11
S'auto_7942'
p6375
sg13
I0
sg14
g0
(g15
g2
Ntp6376
Rp6377
(dp6378
g19
g96
sbsg52
Nsg53
g0
(g54
g2
Ntp6379
Rp6380
(dp6381
g58
(lp6382
g0
(g7
g2
Ntp6383
Rp6384
(dp6385
g11
S'auto_7926'
p6386
sg13
I0
sg14
g0
(g15
g2
Ntp6387
Rp6388
(dp6389
g19
g127
sbsg52
Nsg53
g0
(g54
g2
Ntp6390
Rp6391
(dp6392
g58
(lp6393
g151
asg14
g0
(g15
g2
Ntp6394
Rp6395
sg204
(lp6396
g6384
asg206
g209
sbsg177
g238
sbag0
(g7
g2
Ntp6397
Rp6398
(dp6399
g11
S'auto_7941'
p6400
sg13
I0
sg14
g0
(g15
g2
Ntp6401
Rp6402
(dp6403
g19
g248
sbsg52
Nsg53
g0
(g54
g2
Ntp6404
Rp6405
(dp6406
g58
(lp6407
g0
(g7
g2
Ntp6408
Rp6409
(dp6410
g11
S'auto_7939'
p6411
sg13
I0
sg14
g0
(g15
g2
Ntp6412
Rp6413
(dp6414
g19
g277
sbsg52
Nsg53
g0
(g54
g2
Ntp6415
Rp6416
(dp6417
g58
(lp6418
g0
(g7
g2
Ntp6419
Rp6420
(dp6421
g11
S'auto_7937'
p6422
sg13
I0
sg14
g0
(g15
g2
Ntp6423
Rp6424
(dp6425
g19
g306
sbsg52
Nsg53
g0
(g54
g2
Ntp6426
Rp6427
(dp6428
g58
(lp6429
g329
ag0
(g7
g2
Ntp6430
Rp6431
(dp6432
g11
S'auto_7936'
p6433
sg13
I0
sg14
g0
(g15
g2
Ntp6434
Rp6435
(dp6436
g19
g359
sbsg52
Nsg53
g0
(g54
g2
Ntp6437
Rp6438
(dp6439
g58
(lp6440
g0
(g7
g2
Ntp6441
Rp6442
(dp6443
g11
S'auto_7929'
p6444
sg13
I0
sg14
g0
(g15
g2
Ntp6445
Rp6446
(dp6447
g19
g390
sbsg52
Nsg53
g0
(g54
g2
Ntp6448
Rp6449
(dp6450
g58
(lp6451
g0
(g7
g2
Ntp6452
Rp6453
(dp6454
g11
S'auto_7927'
p6455
sg13
I0
sg14
g0
(g15
g2
Ntp6456
Rp6457
(dp6458
g19
g419
sbsg52
Nsg53
g0
(g54
g2
Ntp6459
Rp6460
(dp6461
g58
(lp6462
g443
asg14
g0
(g15
g2
Ntp6463
Rp6464
sg204
(lp6465
g6453
asg206
g499
sbsg177
g528
sbag0
(g7
g2
Ntp6466
Rp6467
(dp6468
g11
S'auto_7928'
p6469
sg13
I0
sg14
g0
(g15
g2
Ntp6470
Rp6471
(dp6472
g19
g539
sbsg52
Nsg53
g0
(g54
g2
Ntp6473
Rp6474
(dp6475
g58
(lp6476
g562
asg14
g0
(g15
g2
Ntp6477
Rp6478
sg204
(lp6479
g6467
asg206
g599
sbsg177
g614
sbasg14
g0
(g15
g2
Ntp6480
Rp6481
sg204
(lp6482
g6442
asg206
g621
sbsg177
g638
sbag0
(g7
g2
Ntp6483
Rp6484
(dp6485
g11
S'auto_7930'
p6486
sg13
I0
sg14
g0
(g15
g2
Ntp6487
Rp6488
(dp6489
g19
g653
sbsg52
Nsg53
g0
(g54
g2
Ntp6490
Rp6491
(dp6492
g58
(lp6493
g676
asg14
g0
(g15
g2
Ntp6494
Rp6495
sg204
(lp6496
g6484
asg206
g713
sbsg177
g728
sbag0
(g7
g2
Ntp6497
Rp6498
(dp6499
g11
S'auto_7935'
p6500
sg13
I0
sg14
g0
(g15
g2
Ntp6501
Rp6502
(dp6503
g19
g738
sbsg52
Nsg53
g0
(g54
g2
Ntp6504
Rp6505
(dp6506
g58
(lp6507
g0
(g7
g2
Ntp6508
Rp6509
(dp6510
g11
S'auto_7932'
p6511
sg13
I0
sg14
g0
(g15
g2
Ntp6512
Rp6513
(dp6514
g19
g767
sbsg52
Nsg53
g0
(g54
g2
Ntp6515
Rp6516
(dp6517
g58
(lp6518
g443
ag0
(g7
g2
Ntp6519
Rp6520
(dp6521
g11
S'auto_7931'
p6522
sg13
I0
sg14
g0
(g15
g2
Ntp6523
Rp6524
(dp6525
g19
g796
sbsg52
Nsg53
g0
(g54
g2
Ntp6526
Rp6527
(dp6528
g58
(lp6529
g676
asg14
g0
(g15
g2
Ntp6530
Rp6531
sg204
(lp6532
g6520
asg206
g822
sbsg177
g837
sbasg14
g0
(g15
g2
Ntp6533
Rp6534
sg204
(lp6535
g6509
asg206
g621
sbsg177
g844
sbag0
(g7
g2
Ntp6536
Rp6537
(dp6538
g11
S'auto_7933'
p6539
sg13
I0
sg14
g0
(g15
g2
Ntp6540
Rp6541
(dp6542
g19
g854
sbsg52
Nsg53
g0
(g54
g2
Ntp6543
Rp6544
(dp6545
g58
(lp6546
g877
asg14
g0
(g15
g2
Ntp6547
Rp6548
sg204
(lp6549
g6537
asg206
g914
sbsg177
g929
sbag0
(g7
g2
Ntp6550
Rp6551
(dp6552
g11
S'auto_7934'
p6553
sg13
I0
sg14
g0
(g15
g2
Ntp6554
Rp6555
(dp6556
g19
g939
sbsg52
Nsg53
g0
(g54
g2
Ntp6557
Rp6558
(dp6559
g58
(lp6560
g962
asg14
g0
(g15
g2
Ntp6561
Rp6562
sg204
(lp6563
g6551
asg206
g999
sbsg177
g1014
sbasg14
g0
(g15
g2
Ntp6564
Rp6565
sg204
(lp6566
g6498
asg206
g1021
sbsg177
g1037
sbasg14
g0
(g15
g2
Ntp6567
Rp6568
sg204
(lp6569
g6431
asg206
g1021
sbsg177
g1044
sbasg14
g0
(g15
g2
Ntp6570
Rp6571
sg204
(lp6572
g6420
asg206
g1052
sbsg177
g1054
sbag0
(g7
g2
Ntp6573
Rp6574
(dp6575
g11
S'auto_7938'
p6576
sg13
I0
sg14
g0
(g15
g2
Ntp6577
Rp6578
(dp6579
g19
g1065
sbsg52
Nsg53
g0
(g54
g2
Ntp6580
Rp6581
(dp6582
g58
(lp6583
g1088
asg14
g0
(g15
g2
Ntp6584
Rp6585
sg204
(lp6586
g6574
asg206
g1131
sbsg177
g1146
sbasg14
g0
(g15
g2
Ntp6587
Rp6588
sg204
(lp6589
g6409
asg206
g1153
sbsg177
g1170
sbag0
(g7
g2
Ntp6590
Rp6591
(dp6592
g11
S'auto_7940'
p6593
sg13
I0
sg14
g0
(g15
g2
Ntp6594
Rp6595
(dp6596
g19
g1180
sbsg52
Nsg53
g0
(g54
g2
Ntp6597
Rp6598
(dp6599
g58
(lp6600
g6409
asg14
g0
(g15
g2
Ntp6601
Rp6602
sg204
(lp6603
g6591
asg206
g499
sbsg177
g1206
sbasg14
g0
(g15
g2
Ntp6604
Rp6605
sg204
(lp6606
g6398
asg206
g1153
sbsg177
g1213
sbasg14
g0
(g15
g2
Ntp6607
Rp6608
sg204
(lp6609
g6373
asg206
g1220
sbsg177
g1237
sbag0
(g7
g2
Ntp6610
Rp6611
(dp6612
g11
S'auto_7952'
p6613
sg13
I0
sg14
g0
(g15
g2
Ntp6614
Rp6615
(dp6616
g19
g1247
sbsg52
Nsg53
g0
(g54
g2
Ntp6617
Rp6618
(dp6619
g58
(lp6620
g0
(g7
g2
Ntp6621
Rp6622
(dp6623
g11
S'auto_7945'
p6624
sg13
I0
sg14
g0
(g15
g2
Ntp6625
Rp6626
(dp6627
g19
g1276
sbsg52
Nsg53
g0
(g54
g2
Ntp6628
Rp6629
(dp6630
g58
(lp6631
g0
(g7
g2
Ntp6632
Rp6633
(dp6634
g11
S'auto_7943'
p6635
sg13
I0
sg14
g0
(g15
g2
Ntp6636
Rp6637
(dp6638
g19
g1305
sbsg52
Nsg53
g0
(g54
g2
Ntp6639
Rp6640
(dp6641
g58
(lp6642
g1328
asg14
g0
(g15
g2
Ntp6643
Rp6644
sg204
(lp6645
g6633
asg206
g499
sbsg177
g1371
sbag0
(g7
g2
Ntp6646
Rp6647
(dp6648
g11
S'auto_7944'
p6649
sg13
I0
sg14
g0
(g15
g2
Ntp6650
Rp6651
(dp6652
g19
g1381
sbsg52
Nsg53
g0
(g54
g2
Ntp6653
Rp6654
(dp6655
g58
(lp6656
g562
asg14
g0
(g15
g2
Ntp6657
Rp6658
sg204
(lp6659
g6647
asg206
g1407
sbsg177
g1422
sbasg14
g0
(g15
g2
Ntp6660
Rp6661
sg204
(lp6662
g6622
asg206
g621
sbsg177
g1429
sbag0
(g7
g2
Ntp6663
Rp6664
(dp6665
g11
S'auto_7946'
p6666
sg13
I0
sg14
g0
(g15
g2
Ntp6667
Rp6668
(dp6669
g19
g1439
sbsg52
Nsg53
g0
(g54
g2
Ntp6670
Rp6671
(dp6672
g58
(lp6673
g676
asg14
g0
(g15
g2
Ntp6674
Rp6675
sg204
(lp6676
g6664
asg206
g1465
sbsg177
g1480
sbag0
(g7
g2
Ntp6677
Rp6678
(dp6679
g11
S'auto_7951'
p6680
sg13
I0
sg14
g0
(g15
g2
Ntp6681
Rp6682
(dp6683
g19
g1490
sbsg52
Nsg53
g0
(g54
g2
Ntp6684
Rp6685
(dp6686
g58
(lp6687
g0
(g7
g2
Ntp6688
Rp6689
(dp6690
g11
S'auto_7948'
p6691
sg13
I0
sg14
g0
(g15
g2
Ntp6692
Rp6693
(dp6694
g19
g1519
sbsg52
Nsg53
g0
(g54
g2
Ntp6695
Rp6696
(dp6697
g58
(lp6698
g1328
ag0
(g7
g2
Ntp6699
Rp6700
(dp6701
g11
S'auto_7947'
p6702
sg13
I0
sg14
g0
(g15
g2
Ntp6703
Rp6704
(dp6705
g19
g1548
sbsg52
Nsg53
g0
(g54
g2
Ntp6706
Rp6707
(dp6708
g58
(lp6709
g676
asg14
g0
(g15
g2
Ntp6710
Rp6711
sg204
(lp6712
g6700
asg206
g1574
sbsg177
g1589
sbasg14
g0
(g15
g2
Ntp6713
Rp6714
sg204
(lp6715
g6689
asg206
g621
sbsg177
g1596
sbag0
(g7
g2
Ntp6716
Rp6717
(dp6718
g11
S'auto_7949'
p6719
sg13
I0
sg14
g0
(g15
g2
Ntp6720
Rp6721
(dp6722
g19
g1606
sbsg52
Nsg53
g0
(g54
g2
Ntp6723
Rp6724
(dp6725
g58
(lp6726
g877
asg14
g0
(g15
g2
Ntp6727
Rp6728
sg204
(lp6729
g6717
asg206
g1632
sbsg177
g1647
sbag0
(g7
g2
Ntp6730
Rp6731
(dp6732
g11
S'auto_7950'
p6733
sg13
I0
sg14
g0
(g15
g2
Ntp6734
Rp6735
(dp6736
g19
g1657
sbsg52
Nsg53
g0
(g54
g2
Ntp6737
Rp6738
(dp6739
g58
(lp6740
g962
asg14
g0
(g15
g2
Ntp6741
Rp6742
sg204
(lp6743
g6731
asg206
g1683
sbsg177
g1698
sbasg14
g0
(g15
g2
Ntp6744
Rp6745
sg204
(lp6746
g6678
asg206
g1021
sbsg177
g1705
sbasg14
g0
(g15
g2
Ntp6747
Rp6748
sg204
(lp6749
g6611
asg206
g1021
sbsg177
g1712
sbasg14
g0
(g15
g2
Ntp6750
Rp6751
sg204
(lp6752
g6362
asg206
g1052
sbsg177
g1719
sbag0
(g7
g2
Ntp6753
Rp6754
(dp6755
g11
S'auto_7954'
p6756
sg13
I0
sg14
g0
(g15
g2
Ntp6757
Rp6758
(dp6759
g19
g1730
sbsg52
Nsg53
g0
(g54
g2
Ntp6760
Rp6761
(dp6762
g58
(lp6763
g1753
asg14
g0
(g15
g2
Ntp6764
Rp6765
sg204
(lp6766
g6754
asg206
g1796
sbsg177
g1811
sbasg14
g0
(g15
g2
Ntp6767
Rp6768
sg204
(lp6769
g6351
asg206
g1153
sbsg177
g1818
sbasg14
g0
(g15
g2
Ntp6770
Rp6771
sg204
(lp6772
g6340
asg206
g1220
sbsg177
g5406
sbasg14
g0
(g15
g2
Ntp6773
Rp6774
sg204
(lp6775
g6284
asg206
g5417
sbsg177
g5429
sbasg14
g0
(g15
g2
Ntp6776
Rp6777
sg204
(lp6778
g6228
asg206
g5904
sbsg177
g5915
sbasg14
g0
(g15
g2
Ntp6779
Rp6780
sg204
(lp6781
g6217
asg206
g6009
sbsg177
g6021
sbasg14
g0
(g15
g2
Ntp6782
Rp6783
sg204
(lp6784
g6206
asg206
g3004
sbsg177
g3010
sbag0
(g7
g2
Ntp6785
Rp6786
(dp6787
g11
S'auto_7963'
p6788
sg13
I0
sg14
g0
(g15
g2
Ntp6789
Rp6790
(dp6791
g19
g3021
sbsg52
Nsg53
g0
(g54
g2
Ntp6792
Rp6793
(dp6794
g58
(lp6795
g0
(g7
g2
Ntp6796
Rp6797
(dp6798
g11
S'auto_7962'
p6799
sg13
I0
sg14
g0
(g15
g2
Ntp6800
Rp6801
(dp6802
g19
g3240
sbsg52
Nsg53
g0
(g54
g2
Ntp6803
Rp6804
(dp6805
g58
(lp6806
g0
(g7
g2
Ntp6807
Rp6808
(dp6809
g11
S'auto_7961'
p6810
sg13
I0
sg14
g0
(g15
g2
Ntp6811
Rp6812
(dp6813
g19
g5972
sbsg52
Nsg53
g0
(g54
g2
Ntp6814
Rp6815
(dp6816
g58
(lp6817
g6217
asg14
g0
(g15
g2
Ntp6818
Rp6819
sg204
(lp6820
g6808
asg206
g5677
sbsg177
g5679
sbasg14
g0
(g15
g2
Ntp6821
Rp6822
sg204
(lp6823
g6797
asg206
g3295
sbsg177
g3253
sbag0
(g2920
g2
Ntp6824
Rp6825
(dp6826
g11
S'auto_1281'
p6827
sg13
Nsg14
g0
(g15
g2
Ntp6828
Rp6829
(dp6830
g19
g3046
sbsg52
Nsg177
g2925
sg193
g2038
(g2899
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p6831
tp6832
Rp6833
sbasg14
g0
(g15
g2
Ntp6834
Rp6835
sg204
(lp6836
g6786
asg206
g3069
sbsg177
g3074
sbasg14
g0
(g15
g2
Ntp6837
Rp6838
sg204
(lp6839
g6195
asg206
g5326
sbsg177
g5338
sbag0
(g7
g2
Ntp6840
Rp6841
(dp6842
g11
S'auto_7965'
p6843
sg13
I0
sg14
g0
(g15
g2
Ntp6844
Rp6845
(dp6846
g19
g3210
sbsg52
Nsg53
g0
(g54
g2
Ntp6847
Rp6848
(dp6849
g58
(lp6850
g6797
ag0
(g2920
g2
Ntp6851
Rp6852
(dp6853
g11
S'auto_1287'
p6854
sg13
Nsg14
g0
(g15
g2
Ntp6855
Rp6856
(dp6857
g19
g2933
sbsg52
Nsg177
g2925
sg193
g2038
(g2899
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p6858
tp6859
Rp6860
sbasg14
g0
(g15
g2
Ntp6861
Rp6862
sg204
(lp6863
g6841
asg206
g3231
sbsg177
g3223
sbasg14
g0
(g15
g2
Ntp6864
Rp6865
sg204
(lp6866
g6184
asg206
g5326
sbsg177
g5348
sbsg1835
I00
sbag0
(g6179
g2
Ntp6867
Rp6868
(dp6869
g1838
g0
(g7
g2
Ntp6870
Rp6871
(dp6872
g11
S'auto_7976'
p6873
sg13
I0
sg14
g0
(g15
g2
Ntp6874
Rp6875
(dp6876
g19
g5744
sbsg52
g3080
sg53
g0
(g54
g2
Ntp6877
Rp6878
(dp6879
g58
(lp6880
g0
(g7
g2
Ntp6881
Rp6882
(dp6883
g11
S'auto_7972'
p6884
sg13
I0
sg14
g0
(g15
g2
Ntp6885
Rp6886
(dp6887
g19
g1916
sbsg52
Nsg53
g0
(g54
g2
Ntp6888
Rp6889
(dp6890
g58
(lp6891
g0
(g7
g2
Ntp6892
Rp6893
(dp6894
g11
S'auto_7971'
p6895
sg13
I0
sg14
g0
(g15
g2
Ntp6896
Rp6897
(dp6898
g19
g1941
sbsg52
Nsg53
g0
(g54
g2
Ntp6899
Rp6900
(dp6901
g58
(lp6902
g0
(g7
g2
Ntp6903
Rp6904
(dp6905
g11
S'auto_7968'
p6906
sg13
I1
sg14
g0
(g15
g2
Ntp6907
Rp6908
(dp6909
g19
g5580
sbsg52
g1960
sg53
g0
(g54
g2
Ntp6910
Rp6911
(dp6912
g58
(lp6913
g6351
asg14
g0
(g15
g2
Ntp6914
Rp6915
sg204
(lp6916
g0
(g7
g2
Ntp6917
Rp6918
(dp6919
g11
S'auto_7967'
p6920
sg13
I0
sg14
g0
(g15
g2
Ntp6921
Rp6922
(dp6923
g19
g5605
sbsg52
g5050
sg53
g6911
sg177
g5607
sbag6904
asg206
g5617
sbsg177
g5620
sbag0
(g7
g2
Ntp6924
Rp6925
(dp6926
g11
S'auto_7970'
p6927
sg13
I1
sg14
g0
(g15
g2
Ntp6928
Rp6929
(dp6930
g19
g5070
sbsg52
g1960
sg53
g0
(g54
g2
Ntp6931
Rp6932
(dp6933
g58
(lp6934
g1845
asg14
g0
(g15
g2
Ntp6935
Rp6936
sg204
(lp6937
g0
(g7
g2
Ntp6938
Rp6939
(dp6940
g11
S'auto_7969'
p6941
sg13
I0
sg14
g0
(g15
g2
Ntp6942
Rp6943
(dp6944
g19
g5056
sbsg52
g5050
sg53
g6932
sg177
g5097
sbag6925
asg206
g5094
sbsg177
g5083
sbasg14
g0
(g15
g2
Ntp6945
Rp6946
sg204
(lp6947
g6893
asg206
g3628
sbsg177
g3640
sbasg14
g0
(g15
g2
Ntp6948
Rp6949
sg204
(lp6950
g6882
asg206
g3650
sbsg177
g3653
sbag0
(g7
g2
Ntp6951
Rp6952
(dp6953
g11
S'auto_7975'
p6954
sg13
I0
sg14
g0
(g15
g2
Ntp6955
Rp6956
(dp6957
g19
g5718
sbsg52
Nsg53
g0
(g54
g2
Ntp6958
Rp6959
(dp6960
g58
(lp6961
g0
(g7
g2
Ntp6962
Rp6963
(dp6964
g11
S'auto_7974'
p6965
sg13
I0
sg14
g0
(g15
g2
Ntp6966
Rp6967
(dp6968
g19
g5692
sbsg52
Nsg53
g0
(g54
g2
Ntp6969
Rp6970
(dp6971
g58
(lp6972
g0
(g7
g2
Ntp6973
Rp6974
(dp6975
g11
S'auto_7973'
p6976
sg13
I0
sg14
g0
(g15
g2
Ntp6977
Rp6978
(dp6979
g19
g5663
sbsg52
Nsg53
g0
(g54
g2
Ntp6980
Rp6981
(dp6982
g58
(lp6983
g6893
asg14
g0
(g15
g2
Ntp6984
Rp6985
sg204
(lp6986
g6974
asg206
g5677
sbsg177
g5679
sbasg14
g0
(g15
g2
Ntp6987
Rp6988
sg204
(lp6989
g6963
asg206
g3295
sbsg177
g5705
sbag0
(g2920
g2
Ntp6990
Rp6991
(dp6992
g11
S'auto_1306'
p6993
sg13
Nsg14
g0
(g15
g2
Ntp6994
Rp6995
(dp6996
g19
(lp6997
(lp6998
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p6999
tp7000
a(g22
I72
g26
S'exec code in run_globals'
p7001
tp7002
a(g29
I249
g30
S'Model(hyperparams).train()'
p7003
tp7004
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7005
tp7006
a(g37
I94
g38
S'dtype=theano.config.floatX)'
p7007
tp7008
aasbsg52
Nsg177
g2925
sg193
g2038
(g2899
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p7009
tp7010
Rp7011
sbasg14
g0
(g15
g2
Ntp7012
Rp7013
sg204
(lp7014
g6952
asg206
g4806
sbsg177
g5731
sbasg14
g0
(g15
g2
Ntp7015
Rp7016
sg204
(lp7017
g6871
asg206
g5326
sbsg177
g5768
sbsg1835
I00
sbasS'expanded_inputs'
p7018
g1828
sS'linker'
p7019
g0
(ctheano.gof.vm
VM_Linker
p7020
g2
Ntp7021
Rp7022
(dp7023
S'use_cloop'
p7024
I01
sg1827
NsS'lazy'
p7025
NsS'allow_partial_eval'
p7026
Nsg1883
g1886
sS'c_thunks'
p7027
I01
sS'callback_input'
p7028
NsS'callback'
p7029
NsS'allow_gc'
p7030
I01
sS'no_recycling'
p7031
g3796
((lp7032
g3078
ag2958
ag1908
ag3657
atp7033
Rp7034
sS'updated_vars'
p7035
(dp7036
sbsS'function_builder'
p7037
ctheano.compile.function_module
Function
p7038
sg52
g4653
sS'on_unused_input'
p7039
NsS'mode'
p7040
g0
(ctheano.compile.mode
Mode
p7041
g2
Ntp7042
Rp7043
(S'cvm'
p7044
g0
(ctheano.gof.optdb
Query
p7045
g2
Ntp7046
Rp7047
(dp7048
g52
S'OPT_FAST_RUN'
p7049
sS'require'
p7050
g0
(g3850
g2
Ntp7051
Rp7052
(dp7053
g3854
g0
(g3855
g2
Ntp7054
Rp7055
(lp7056
g7055
ag7055
absg3859
(dp7057
sbsS'subquery'
p7058
(dp7059
sS'position_cutoff'
p7060
Finf
sS'exclude'
p7061
g0
(g3850
g2
Ntp7062
Rp7063
(dp7064
g3854
g0
(g3855
g2
Ntp7065
Rp7066
(lp7067
g7066
ag7066
absg3859
(dp7068
sbsS'include'
p7069
g0
(g3850
g2
Ntp7070
Rp7071
(dp7072
g3854
g0
(g3855
g2
Ntp7073
Rp7074
(lp7075
g0
(g3855
g2
Ntp7076
Rp7077
(lp7078
g7074
ag7074
aS'fast_run'
p7079
abag7077
absg3859
(dp7080
g7079
g7077
ssbsS'extra_optimizations'
p7081
(lp7082
sbtp7083
bsS'refeed'
p7084
(lp7085
I00
aI00
aI00
aI00
aI00
aI00
asS'indices'
p7086
(lp7087
(lp7088
g1831
aNa(lp7089
g1831
aaa(lp7090
g1841
aNa(lp7091
g1841
aaa(lp7092
g1868
aNa(lp7093
g1868
aaa(lp7094
g1871
aNa(lp7095
g1871
aaa(lp7096
g1874
aNa(lp7097
g1874
aaa(lp7098
g1877
aNa(lp7099
g1877
aaasS'return_none'
p7100
I00
sS'accept_inplace'
p7101
I00
sb(lp7102
g0
(g473
g2
Ntp7103
Rp7104
(dp7105
S'provided'
p7106
I1
sg52
g58
sg1879
I01
sg477
(lp7107
Nasg1836
I00
sg485
I00
sg486
I00
sg177
g348
sg492
Nsbag0
(g473
g2
Ntp7108
Rp7109
(dp7110
g7106
I1
sg52
g1843
sg1879
I01
sg477
(lp7111
Nasg1836
I00
sg485
I00
sg486
I00
sg177
g1864
sg492
Nsbag0
(g473
g2
Ntp7112
Rp7113
(dp7114
g7106
I0
sg52
g493
sg1879
I00
sg477
g478
sg1836
I01
sg485
I00
sg486
I00
sg177
g488
sg492
Nsbag0
(g473
g2
Ntp7115
Rp7116
(dp7117
g7106
I0
sg52
g197
sg1879
I00
sg477
g1115
sg1836
I01
sg485
I00
sg486
I00
sg177
g1123
sg492
Nsbag0
(g473
g2
Ntp7118
Rp7119
(dp7120
g7106
I0
sg52
g493
sg1879
I00
sg477
g1355
sg1836
I01
sg485
I00
sg486
I00
sg177
g1363
sg492
Nsbag0
(g473
g2
Ntp7121
Rp7122
(dp7123
g7106
I0
sg52
g197
sg1879
I00
sg477
g1780
sg1836
I01
sg485
I00
sg486
I00
sg177
g1788
sg492
Nsba(lp7124
NaNag481
ag1118
ag1358
ag1783
aI00
tp7125
Rp7126
sS'hyperparams'
p7127
g0
(ccrn.hyperparams
HyperparamsConfig
p7128
g3806
(I256
F0.15
F0.0001
I00
(lp7129
I64
aI3000
F0.0
F0.0
S'TERNARY'
p7130
F0.35
I00
F1.0
S'Glorot'
p7131
F0.001
F3e-07
S'exponential'
p7132
tp7133
tp7134
Rp7135
sS'mlp'
p7136
g0
(cbinary_connect.binary_connect
DenseLayer
p7137
g2
Ntp7138
Rp7139
(dp7140
S'binary'
p7141
I00
sg197
g1753
sg52
NsS'nonlinearity'
p7142
clasagne.nonlinearities
linear
p7143
sS'zero_threshold'
p7144
F0.35
sS'H'
p7145
F1.0
sS'input_shape'
p7146
(NI64
tp7147
sS'_srng'
p7148
g0
(ctheano.sandbox.rng_mrg
MRG_RandomStreams
p7149
g2
Ntp7150
Rp7151
(dp7152
S'state_updates'
p7153
(lp7154
sS'default_instance_seed'
p7155
I1836622165
sS'rstate'
p7156
g194
(g195
(I0
tp7157
g197
tp7158
Rp7159
(I1
(I6
tp7160
g186
(S'i4'
p7161
I0
I1
tp7162
Rp7163
(I3
S'<'
p7164
NNNI-1
I-1
I0
tp7165
bI00
S'U\xa1xmU\xa1xmU\xa1xmU\xa1xmU\xa1xmU\xa1xm'
p7166
tp7167
bsbsg493
g1328
sS'params'
p7168
g3969
((lp7169
(lp7170
g1328
ag3796
((lp7171
g7141
atp7172
Rp7173
aa(lp7174
g1753
ag3796
((lp7175
S'trainable'
p7176
atp7177
Rp7178
aatp7179
Rp7180
sS'W_LR_scale'
p7181
g2038
(g189
S'\xb8\xc2\xe0@'
p7182
tp7183
Rp7184
sS'ternary'
p7185
I01
sS'num_leading_axes'
p7186
I1
sS'stochastic'
p7187
I00
sS'get_output_kwargs'
p7188
(lp7189
sS'Wb'
p7190
g1241
sS'num_units'
p7191
I10
sS'input_layer'
p7192
g0
(clasagne.layers.noise
DropoutLayer
p7193
g2
Ntp7194
Rp7195
(dp7196
g52
NsS'rescale'
p7197
I01
sg7146
g7147
sg7148
g0
(g7149
g2
Ntp7198
Rp7199
(dp7200
g7153
(lp7201
sg7155
I1820320481
sg7156
g194
(g195
(I0
tp7202
g197
tp7203
Rp7204
(I1
(I6
tp7205
g7163
I00
S'\xe1\xe2\x7fl\xe1\xe2\x7fl\xe1\xe2\x7fl\xe1\xe2\x7fl\xe1\xe2\x7fl\xe1\xe2\x7fl'
p7206
tp7207
bsbsS'p'
p7208
F0.0
sg7168
g3969
((lp7209
tp7210
Rp7211
sg7192
g0
(g7137
g2
Ntp7212
Rp7213
(dp7214
g7141
I00
sg197
g1088
sg52
Nsg7142
clasagne.nonlinearities
rectify
p7215
sg7144
F0.35
sg7145
F1.0
sg7146
(NI196
tp7216
sg7148
g0
(g7149
g2
Ntp7217
Rp7218
(dp7219
g7153
(lp7220
sg7155
I2137449172
sg7156
g194
(g195
(I0
tp7221
g197
tp7222
Rp7223
(I1
(I6
tp7224
g7163
I00
S'\xd4\xe2f\x7f\xd4\xe2f\x7f\xd4\xe2f\x7f\xd4\xe2f\x7f\xd4\xe2f\x7f\xd4\xe2f\x7f'
p7225
tp7226
bsbsg493
g443
sg7168
g3969
((lp7227
(lp7228
g443
ag3796
((lp7229
g7141
atp7230
Rp7231
aa(lp7232
g1088
ag3796
((lp7233
g7176
atp7234
Rp7235
aatp7236
Rp7237
sg7181
g2038
(g189
S'Y\xa6RA'
p7238
tp7239
Rp7240
sg7185
I01
sg7186
I1
sg7187
I00
sg7188
(lp7241
sg7190
g353
sg7191
I64
sg7192
g0
(g7193
g2
Ntp7242
Rp7243
(dp7244
g52
Nsg7197
I01
sg7146
g7216
sg7148
g0
(g7149
g2
Ntp7245
Rp7246
(dp7247
g7153
(lp7248
sg7155
I822569776
sg7156
g194
(g195
(I0
tp7249
g197
tp7250
Rp7251
(I1
(I6
tp7252
g7163
I00
S'0k\x0710k\x0710k\x0710k\x0710k\x0710k\x071'
p7253
tp7254
bsbsg7208
F0.0
sg7168
g3969
((lp7255
tp7256
Rp7257
sg7192
g0
(clasagne.layers.input
InputLayer
p7258
g2
Ntp7259
Rp7260
(dp7261
S'shape'
p7262
g7216
sg7168
g3969
((lp7263
tp7264
Rp7265
sg52
NsS'input_var'
p7266
g329
sbsS'shared_axes'
p7267
(tsg7188
(lp7268
sbsbsg7267
(tsg7188
(lp7269
sbsbsS'train_fn'
p7270
g1822
(g0
(g1823
g2
Ntp7271
Rp7272
(dp7273
g1827
Nsg58
(lp7274
g0
(g1829
g2
Ntp7275
Rp7276
(dp7277
g52
g58
sg1833
Nsg1834
Nsg1835
Nsg485
I00
sg1836
I00
sg1837
I00
sg1838
g329
sg1839
I00
sg492
Nsbag0
(g1829
g2
Ntp7278
Rp7279
(dp7280
g52
g1843
sg1833
Nsg1834
Nsg1835
Nsg485
I00
sg1836
I00
sg1837
I00
sg1838
g1845
sg1839
I00
sg492
Nsbag0
(g1829
g2
Ntp7281
Rp7282
(dp7283
g52
S'LR'
p7284
sg1833
Nsg1834
Nsg1835
Nsg485
I00
sg1836
I00
sg1837
I00
sg1838
g0
(g7
g2
Ntp7285
Rp7286
(dp7287
g11
S'auto_5'
p7288
sg13
Nsg14
g0
(g15
g2
Ntp7289
Rp7290
(dp7291
g19
(lp7292
(lp7293
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7294
tp7295
a(g22
I72
g26
S'exec code in run_globals'
p7296
tp7297
a(g29
I249
g30
S'Model(hyperparams).train()'
p7298
tp7299
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7300
tp7301
a(g37
I13
g38
S"LR = T.scalar('LR', dtype=theano.config.floatX)"
p7302
tp7303
aasbsg52
g7284
sg53
Nsg177
g0
(g178
g2
Ntp7304
Rp7305
(dp7306
g182
(tsg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbsg1839
I00
sg492
Nsbag0
(g1829
g2
Ntp7307
Rp7308
(dp7309
g52
g493
sg1833
g0
(g7
g2
Ntp7310
Rp7311
(dp7312
g11
S'auto_1412'
p7313
sg13
I0
sg14
g0
(g15
g2
Ntp7314
Rp7315
(dp7316
g19
(lp7317
(lp7318
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7319
tp7320
a(g22
I72
g26
S'exec code in run_globals'
p7321
tp7322
a(g29
I249
g30
S'Model(hyperparams).train()'
p7323
tp7324
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7325
tp7326
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p7327
tp7328
a(S'binary_connect/binary_connect.py'
p7329
I219
S'clipping_scaling'
p7330
S'updates[param] = T.clip(updates[param], -layer.H,layer.H)'
p7331
tp7332
aasbsg52
Nsg53
g0
(g54
g2
Ntp7333
Rp7334
(dp7335
g58
(lp7336
g0
(g7
g2
Ntp7337
Rp7338
(dp7339
g11
S'auto_1409'
p7340
sg13
I0
sg14
g0
(g15
g2
Ntp7341
Rp7342
(dp7343
g19
(lp7344
(lp7345
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7346
tp7347
a(g22
I72
g26
S'exec code in run_globals'
p7348
tp7349
a(g29
I249
g30
S'Model(hyperparams).train()'
p7350
tp7351
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7352
tp7353
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p7354
tp7355
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p7356
tp7357
aasbsg52
Nsg53
g0
(g54
g2
Ntp7358
Rp7359
(dp7360
g58
(lp7361
g443
ag0
(g7
g2
Ntp7362
Rp7363
(dp7364
g11
S'auto_1408'
p7365
sg13
I0
sg14
g0
(g15
g2
Ntp7366
Rp7367
(dp7368
g19
(lp7369
(lp7370
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7371
tp7372
a(g22
I72
g26
S'exec code in run_globals'
p7373
tp7374
a(g29
I249
g30
S'Model(hyperparams).train()'
p7375
tp7376
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7377
tp7378
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p7379
tp7380
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p7381
tp7382
aasbsg52
Nsg53
g0
(g54
g2
Ntp7383
Rp7384
(dp7385
g58
(lp7386
g0
(g7
g2
Ntp7387
Rp7388
(dp7389
g11
S'auto_1391'
p7390
sg13
I0
sg14
g0
(g15
g2
Ntp7391
Rp7392
(dp7393
g19
(lp7394
(lp7395
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7396
tp7397
a(g22
I72
g26
S'exec code in run_globals'
p7398
tp7399
a(g29
I249
g30
S'Model(hyperparams).train()'
p7400
tp7401
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7402
tp7403
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p7404
tp7405
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p7406
tp7407
aasbsg52
Nsg53
g0
(g54
g2
Ntp7408
Rp7409
(dp7410
g58
(lp7411
g0
(g149
g2
Ntp7412
Rp7413
(dp7414
g11
S'auto_729'
p7415
sg13
Nsg14
g0
(g15
g2
Ntp7416
Rp7417
(dp7418
g19
(lp7419
(lp7420
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7421
tp7422
a(g22
I72
g26
S'exec code in run_globals'
p7423
tp7424
a(g29
I249
g30
S'Model(hyperparams).train()'
p7425
tp7426
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7427
tp7428
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p7429
tp7430
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p7431
tp7432
aasg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp7433
Rp7434
(dp7435
g182
(tsg183
S'float32'
p7436
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp7437
g197
tp7438
Rp7439
(I1
(tg189
I00
S'Y\xa6RA'
p7440
tp7441
bsbasg14
g0
(g15
g2
Ntp7442
Rp7443
sg204
(lp7444
g7388
asg206
g0
(g207
g2
Ntp7445
Rp7446
(dp7447
g211
(lp7448
sg213
(lp7449
sg215
(lp7450
I0
aI1
asg217
g218
sg219
(tsg220
(lp7451
g222
asg223
I01
sg224
(g225
g225
tp7452
sg227
(dp7453
S'support_code_apply'
p7454
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p7455
ssg231
(dp7456
I0
(lp7457
I0
assg234
(lp7458
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p7459
asbsbsg177
g0
(g178
g2
Ntp7460
Rp7461
(dp7462
g182
(I01
I01
tp7463
sg183
g7436
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp7464
Rp7465
(dp7466
g11
S'auto_1407'
p7467
sg13
I0
sg14
g0
(g15
g2
Ntp7468
Rp7469
(dp7470
g19
(lp7471
(lp7472
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7473
tp7474
a(g22
I72
g26
S'exec code in run_globals'
p7475
tp7476
a(g29
I249
g30
S'Model(hyperparams).train()'
p7477
tp7478
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7479
tp7480
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p7481
tp7482
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p7483
tp7484
aasbsg52
Nsg53
g0
(g54
g2
Ntp7485
Rp7486
(dp7487
g58
(lp7488
g0
(g7
g2
Ntp7489
Rp7490
(dp7491
g11
S'auto_1406'
p7492
sg13
I0
sg14
g0
(g15
g2
Ntp7493
Rp7494
(dp7495
g19
(lp7496
(lp7497
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7498
tp7499
a(g22
I72
g26
S'exec code in run_globals'
p7500
tp7501
a(g29
I249
g30
S'Model(hyperparams).train()'
p7502
tp7503
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7504
tp7505
a(g37
I74
g38
S'learning_rate=LR)'
p7506
tp7507
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/lasagne/updates.py'
p7508
I628
S'adam'
p7509
S'updates[param] = param - step'
p7510
tp7511
aasbsg52
Nsg53
g0
(g54
g2
Ntp7512
Rp7513
(dp7514
g58
(lp7515
g443
ag0
(g7
g2
Ntp7516
Rp7517
(dp7518
g11
S'auto_1405'
p7519
sg13
I0
sg14
g0
(g15
g2
Ntp7520
Rp7521
(dp7522
g19
(lp7523
(lp7524
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7525
tp7526
a(g22
I72
g26
S'exec code in run_globals'
p7527
tp7528
a(g29
I249
g30
S'Model(hyperparams).train()'
p7529
tp7530
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7531
tp7532
a(g37
I74
g38
S'learning_rate=LR)'
p7533
tp7534
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p7535
tp7536
aasbsg52
Nsg53
g0
(g54
g2
Ntp7537
Rp7538
(dp7539
g58
(lp7540
g0
(g7
g2
Ntp7541
Rp7542
(dp7543
g11
S'auto_1401'
p7544
sg13
I0
sg14
g0
(g15
g2
Ntp7545
Rp7546
(dp7547
g19
(lp7548
(lp7549
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7550
tp7551
a(g22
I72
g26
S'exec code in run_globals'
p7552
tp7553
a(g29
I249
g30
S'Model(hyperparams).train()'
p7554
tp7555
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7556
tp7557
a(g37
I74
g38
S'learning_rate=LR)'
p7558
tp7559
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p7560
tp7561
aasbsg52
Nsg53
g0
(g54
g2
Ntp7562
Rp7563
(dp7564
g58
(lp7565
g0
(g7
g2
Ntp7566
Rp7567
(dp7568
g11
S'auto_1400'
p7569
sg13
I0
sg14
g0
(g15
g2
Ntp7570
Rp7571
(dp7572
g19
(lp7573
(lp7574
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7575
tp7576
a(g22
I72
g26
S'exec code in run_globals'
p7577
tp7578
a(g29
I249
g30
S'Model(hyperparams).train()'
p7579
tp7580
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7581
tp7582
a(g37
I74
g38
S'learning_rate=LR)'
p7583
tp7584
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p7585
tp7586
aasbsg52
Nsg53
g0
(g54
g2
Ntp7587
Rp7588
(dp7589
g58
(lp7590
g0
(g7
g2
Ntp7591
Rp7592
(dp7593
g11
S'auto_1399'
p7594
sg13
I0
sg14
g0
(g15
g2
Ntp7595
Rp7596
(dp7597
g19
(lp7598
(lp7599
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7600
tp7601
a(g22
I72
g26
S'exec code in run_globals'
p7602
tp7603
a(g29
I249
g30
S'Model(hyperparams).train()'
p7604
tp7605
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7606
tp7607
a(g37
I74
g38
S'learning_rate=LR)'
p7608
tp7609
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7610
tp7611
aasbsg52
Nsg53
g0
(g54
g2
Ntp7612
Rp7613
(dp7614
g58
(lp7615
g0
(g7
g2
Ntp7616
Rp7617
(dp7618
g11
S'auto_1396'
p7619
sg13
I0
sg14
g0
(g15
g2
Ntp7620
Rp7621
(dp7622
g19
(lp7623
(lp7624
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7625
tp7626
a(g22
I72
g26
S'exec code in run_globals'
p7627
tp7628
a(g29
I249
g30
S'Model(hyperparams).train()'
p7629
tp7630
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7631
tp7632
a(g37
I74
g38
S'learning_rate=LR)'
p7633
tp7634
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7635
tp7636
aasbsg52
Nsg53
g0
(g54
g2
Ntp7637
Rp7638
(dp7639
g58
(lp7640
g7286
ag0
(g7
g2
Ntp7641
Rp7642
(dp7643
g11
S'auto_1395'
p7644
sg13
I0
sg14
g0
(g15
g2
Ntp7645
Rp7646
(dp7647
g19
(lp7648
(lp7649
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7650
tp7651
a(g22
I72
g26
S'exec code in run_globals'
p7652
tp7653
a(g29
I249
g30
S'Model(hyperparams).train()'
p7654
tp7655
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7656
tp7657
a(g37
I74
g38
S'learning_rate=LR)'
p7658
tp7659
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7660
tp7661
aasbsg52
Nsg53
g0
(g54
g2
Ntp7662
Rp7663
(dp7664
g58
(lp7665
g0
(g7
g2
Ntp7666
Rp7667
(dp7668
g11
S'auto_1394'
p7669
sg13
I0
sg14
g0
(g15
g2
Ntp7670
Rp7671
(dp7672
g19
(lp7673
(lp7674
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7675
tp7676
a(g22
I72
g26
S'exec code in run_globals'
p7677
tp7678
a(g29
I249
g30
S'Model(hyperparams).train()'
p7679
tp7680
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7681
tp7682
a(g37
I74
g38
S'learning_rate=LR)'
p7683
tp7684
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7685
tp7686
aasbsg52
Nsg53
g0
(g54
g2
Ntp7687
Rp7688
(dp7689
g58
(lp7690
g0
(g149
g2
Ntp7691
Rp7692
(dp7693
g11
S'auto_562'
p7694
sg13
Nsg14
g0
(g15
g2
Ntp7695
Rp7696
(dp7697
g19
(lp7698
(lp7699
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7700
tp7701
a(g22
I72
g26
S'exec code in run_globals'
p7702
tp7703
a(g29
I249
g30
S'Model(hyperparams).train()'
p7704
tp7705
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7706
tp7707
a(g37
I74
g38
S'learning_rate=LR)'
p7708
tp7709
a(g7508
I610
g7509
S'one = T.constant(1)'
p7710
tp7711
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp7712
Rp7713
(dp7714
g182
(tsg183
S'int8'
p7715
sg185
g186
(S'i1'
p7716
I0
I1
tp7717
Rp7718
(I3
S'|'
p7719
NNNI-1
I-1
I0
tp7720
bsg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp7721
g197
tp7722
Rp7723
(I1
(tg7718
I00
S'\x01'
p7724
tp7725
bsbag0
(g7
g2
Ntp7726
Rp7727
(dp7728
g11
S'auto_1393'
p7729
sg13
I0
sg14
g0
(g15
g2
Ntp7730
Rp7731
(dp7732
g19
(lp7733
(lp7734
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7735
tp7736
a(g22
I72
g26
S'exec code in run_globals'
p7737
tp7738
a(g29
I249
g30
S'Model(hyperparams).train()'
p7739
tp7740
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7741
tp7742
a(g37
I74
g38
S'learning_rate=LR)'
p7743
tp7744
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7745
tp7746
aasbsg52
Nsg53
g0
(g54
g2
Ntp7747
Rp7748
(dp7749
g58
(lp7750
g0
(g149
g2
Ntp7751
Rp7752
(dp7753
g11
S'auto_567'
p7754
sg13
Nsg14
g0
(g15
g2
Ntp7755
Rp7756
(dp7757
g19
(lp7758
(lp7759
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7760
tp7761
a(g22
I72
g26
S'exec code in run_globals'
p7762
tp7763
a(g29
I249
g30
S'Model(hyperparams).train()'
p7764
tp7765
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7766
tp7767
a(g37
I74
g38
S'learning_rate=LR)'
p7768
tp7769
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7770
tp7771
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp7772
Rp7773
(dp7774
g182
(tsg183
S'float32'
p7775
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp7776
g197
tp7777
Rp7778
(I1
(tg189
I00
S'w\xbe\x7f?'
p7779
tp7780
bsbag0
(g7
g2
Ntp7781
Rp7782
(dp7783
g11
S'auto_1392'
p7784
sg13
I0
sg14
g0
(g15
g2
Ntp7785
Rp7786
(dp7787
g19
(lp7788
(lp7789
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7790
tp7791
a(g22
I72
g26
S'exec code in run_globals'
p7792
tp7793
a(g29
I249
g30
S'Model(hyperparams).train()'
p7794
tp7795
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7796
tp7797
a(g37
I74
g38
S'learning_rate=LR)'
p7798
tp7799
a(g7508
I612
g7509
S't = t_prev + 1'
p7800
tp7801
aasbsg52
Nsg53
g0
(g54
g2
Ntp7802
Rp7803
(dp7804
g58
(lp7805
g0
(g441
g2
Ntp7806
Rp7807
(dp7808
g11
S'auto_561'
p7809
sg13
Nsg14
g0
(g15
g2
Ntp7810
Rp7811
(dp7812
g19
(lp7813
(lp7814
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7815
tp7816
a(g22
I72
g26
S'exec code in run_globals'
p7817
tp7818
a(g29
I249
g30
S'Model(hyperparams).train()'
p7819
tp7820
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7821
tp7822
a(g37
I74
g38
S'learning_rate=LR)'
p7823
tp7824
a(g7508
I606
g7509
S't_prev = theano.shared(utils.floatX(0.))'
p7825
tp7826
aasbsg472
g0
(g473
g2
Ntp7827
Rp7828
(dp7829
g52
Nsg477
(lp7830
g194
(g195
(I0
tp7831
g197
tp7832
Rp7833
(I1
(tg189
I00
S'\x80\xd2\x0eI'
p7834
tp7835
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp7836
Rp7837
(dp7838
g182
(tsg183
S'float32'
p7839
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g7837
sbag7692
asg14
g0
(g15
g2
Ntp7840
Rp7841
sg204
(lp7842
g7782
asg206
g1153
sbsg177
g0
(g178
g2
Ntp7843
Rp7844
(dp7845
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp7846
Rp7847
sg204
(lp7848
g7727
asg206
g0
(g497
g2
Ntp7849
Rp7850
(dp7851
g501
g502
sg503
g0
(ctheano.scalar.basic
Pow
p7852
g2
Ntp7853
Rp7854
(dp7855
g508
ctheano.scalar.basic
upcast_out_min8
p7856
sg52
S'pow'
p7857
sbsg52
S'Elemwise{pow,no_inplace}'
p7858
sg511
(dp7859
sg513
(S'power'
p7860
I2
I1
tp7861
sg516
g0
(g517
g2
Ntp7862
Rp7863
(dp7864
g521
I0
sg522
(dp7865
sbsg524
I00
sg525
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p7866
sbsbsg177
g0
(g178
g2
Ntp7867
Rp7868
(dp7869
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp7870
Rp7871
sg204
(lp7872
g7667
asg206
g5417
sbsg177
g0
(g178
g2
Ntp7873
Rp7874
(dp7875
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp7876
Rp7877
sg204
(lp7878
g7642
asg206
g0
(g497
g2
Ntp7879
Rp7880
(dp7881
g501
g502
sg503
g0
(ctheano.scalar.basic
Sqrt
p7882
g2
Ntp7883
Rp7884
(dp7885
g508
ctheano.scalar.basic
upgrade_to_float
p7886
sg52
S'sqrt'
p7887
sbsg52
S'Elemwise{sqrt,no_inplace}'
p7888
sg511
(dp7889
sg513
(g7887
I1
I1
tp7890
sg516
g0
(g517
g2
Ntp7891
Rp7892
(dp7893
g521
I0
sg522
(dp7894
sbsg524
I00
sg525
S"square root of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p7895
sbsbsg177
g0
(g178
g2
Ntp7896
Rp7897
(dp7898
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp7899
Rp7900
sg204
(lp7901
g7617
asg206
g1220
sbsg177
g0
(g178
g2
Ntp7902
Rp7903
(dp7904
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp7905
Rp7906
(dp7907
g11
S'auto_1398'
p7908
sg13
I0
sg14
g0
(g15
g2
Ntp7909
Rp7910
(dp7911
g19
(lp7912
(lp7913
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7914
tp7915
a(g22
I72
g26
S'exec code in run_globals'
p7916
tp7917
a(g29
I249
g30
S'Model(hyperparams).train()'
p7918
tp7919
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7920
tp7921
a(g37
I74
g38
S'learning_rate=LR)'
p7922
tp7923
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7924
tp7925
aasbsg52
Nsg53
g0
(g54
g2
Ntp7926
Rp7927
(dp7928
g58
(lp7929
g7692
ag0
(g7
g2
Ntp7930
Rp7931
(dp7932
g11
S'auto_1397'
p7933
sg13
I0
sg14
g0
(g15
g2
Ntp7934
Rp7935
(dp7936
g19
(lp7937
(lp7938
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7939
tp7940
a(g22
I72
g26
S'exec code in run_globals'
p7941
tp7942
a(g29
I249
g30
S'Model(hyperparams).train()'
p7943
tp7944
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7945
tp7946
a(g37
I74
g38
S'learning_rate=LR)'
p7947
tp7948
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7949
tp7950
aasbsg52
Nsg53
g0
(g54
g2
Ntp7951
Rp7952
(dp7953
g58
(lp7954
g0
(g149
g2
Ntp7955
Rp7956
(dp7957
g11
S'auto_583'
p7958
sg13
Nsg14
g0
(g15
g2
Ntp7959
Rp7960
(dp7961
g19
(lp7962
(lp7963
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p7964
tp7965
a(g22
I72
g26
S'exec code in run_globals'
p7966
tp7967
a(g29
I249
g30
S'Model(hyperparams).train()'
p7968
tp7969
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p7970
tp7971
a(g37
I74
g38
S'learning_rate=LR)'
p7972
tp7973
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p7974
tp7975
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp7976
Rp7977
(dp7978
g182
(tsg183
S'float32'
p7979
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp7980
g197
tp7981
Rp7982
(I1
(tg189
I00
S'fff?'
p7983
tp7984
bsbag7782
asg14
g0
(g15
g2
Ntp7985
Rp7986
sg204
(lp7987
g7931
asg206
g7850
sbsg177
g0
(g178
g2
Ntp7988
Rp7989
(dp7990
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp7991
Rp7992
sg204
(lp7993
g7906
asg206
g5417
sbsg177
g0
(g178
g2
Ntp7994
Rp7995
(dp7996
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp7997
Rp7998
sg204
(lp7999
g7592
asg206
g5326
sbsg177
g0
(g178
g2
Ntp8000
Rp8001
(dp8002
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp8003
Rp8004
sg204
(lp8005
g7567
asg206
g0
(g207
g2
Ntp8006
Rp8007
(dp8008
g211
(lp8009
sg213
(lp8010
sg215
(lp8011
I0
aI1
asg217
g218
sg219
(tsg220
(lp8012
g222
asg223
I01
sg224
(g225
g225
tp8013
sg227
(dp8014
S'support_code_apply'
p8015
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8016
ssg231
(dp8017
I0
(lp8018
I0
assg234
(lp8019
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8020
asbsbsg177
g0
(g178
g2
Ntp8021
Rp8022
(dp8023
g182
(I01
I01
tp8024
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8025
Rp8026
(dp8027
g11
S'auto_1382'
p8028
sg13
I0
sg14
g0
(g15
g2
Ntp8029
Rp8030
(dp8031
g19
(lp8032
(lp8033
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8034
tp8035
a(g22
I72
g26
S'exec code in run_globals'
p8036
tp8037
a(g29
I249
g30
S'Model(hyperparams).train()'
p8038
tp8039
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8040
tp8041
a(g37
I74
g38
S'learning_rate=LR)'
p8042
tp8043
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p8044
tp8045
aasbsg52
Nsg53
g0
(g54
g2
Ntp8046
Rp8047
(dp8048
g58
(lp8049
g0
(g7
g2
Ntp8050
Rp8051
(dp8052
g11
S'auto_1356'
p8053
sg13
I0
sg14
g0
(g15
g2
Ntp8054
Rp8055
(dp8056
g19
(lp8057
(lp8058
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8059
tp8060
a(g22
I72
g26
S'exec code in run_globals'
p8061
tp8062
a(g29
I249
g30
S'Model(hyperparams).train()'
p8063
tp8064
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8065
tp8066
a(g37
I74
g38
S'learning_rate=LR)'
p8067
tp8068
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p8069
tp8070
aasbsg52
Nsg53
g0
(g54
g2
Ntp8071
Rp8072
(dp8073
g58
(lp8074
g0
(g7
g2
Ntp8075
Rp8076
(dp8077
g11
S'auto_1355'
p8078
sg13
I0
sg14
g0
(g15
g2
Ntp8079
Rp8080
(dp8081
g19
(lp8082
(lp8083
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8084
tp8085
a(g22
I72
g26
S'exec code in run_globals'
p8086
tp8087
a(g29
I249
g30
S'Model(hyperparams).train()'
p8088
tp8089
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8090
tp8091
a(g37
I74
g38
S'learning_rate=LR)'
p8092
tp8093
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p8094
tp8095
aasbsg52
Nsg53
g0
(g54
g2
Ntp8096
Rp8097
(dp8098
g58
(lp8099
g7956
asg14
g0
(g15
g2
Ntp8100
Rp8101
sg204
(lp8102
g8076
asg206
g0
(g207
g2
Ntp8103
Rp8104
(dp8105
g211
(lp8106
sg213
(lp8107
sg215
(lp8108
I0
aI1
asg217
g218
sg219
(tsg220
(lp8109
g222
asg223
I01
sg224
(g225
g225
tp8110
sg227
(dp8111
S'support_code_apply'
p8112
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8113
ssg231
(dp8114
I0
(lp8115
I0
assg234
(lp8116
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8117
asbsbsg177
g0
(g178
g2
Ntp8118
Rp8119
(dp8120
g182
(I01
I01
tp8121
sg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp8122
Rp8123
(dp8124
g11
S'auto_596'
p8125
sg13
Nsg14
g0
(g15
g2
Ntp8126
Rp8127
(dp8128
g19
(lp8129
(lp8130
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8131
tp8132
a(g22
I72
g26
S'exec code in run_globals'
p8133
tp8134
a(g29
I249
g30
S'Model(hyperparams).train()'
p8135
tp8136
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8137
tp8138
a(g37
I74
g38
S'learning_rate=LR)'
p8139
tp8140
a(g7508
I618
g7509
S'broadcastable=param.broadcastable)'
p8141
tp8142
aasbsg472
g0
(g473
g2
Ntp8143
Rp8144
(dp8145
g52
Nsg477
(lp8146
g194
(g195
(I0
tp8147
g197
tp8148
Rp8149
(I1
(I196
I64
tp8150
g189
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00y;\xb3\xaf)5"\xae\xff\xee\xef.o\\\'0;\xb1\x8c\xb0y\'i\xafG\x0b\x89\xae\xb7\xe1\xbc\xae^\x1d\xcb/b=\xc9/\x04\x00\x00\x80\xd3H\xa5/\x9c\xd6\xe3\xafWo\x8d\xae\x19\x8e\xdf.\x9dyi/"\x9e80\xa6\x07\xb6\xaf\xd7\x1f9\xb0\xad\xc6\x0c\xaf\x0c;\xfd\xaf\xbb\\\x80\xaf\x04\x00\x00\x80@\\\x92/\x91BX/M\t\xfb.\x9eA-/\xf0\xc1f\xac\x905C\xaf\xe3\xad\xd3.\xa27i\xb0\x04\x00\x00\x80\xb5\x9f\t0\xf8\x10 \xb0\r\x00\xef. \xa9\xaa\xaf\x9c\x8b\x080SG[.\x05\xa7?\xae\xda&\x9f\xafO\xed\x08\xafj\xb2[\xb0a\xb1\xce.\xb9\xed|\xaf\x88v{\xb0\xd4\xae\xe5/\xcf\x9a\xde\xaf]a\xb3.$4\x84\xad\x14\xbc\xa1/v\xc0\xed\xaeDp30m\xb5\xf9-\x95\xf4\xee\xaf\x19)\xfe\xae\xf9\x87\xd2\xaf5=\x1a\xaf\xde\xaa\xa5/~\x16^/-\x17_-<4\x1a\xae\xc0@\xed.\x01\x9c\x82\xad\x91\x03\x00\xaf\x1e\xe1\x1e\xb2\xc2\xc9\x8f\xb0\x02\xb0T1.[\x942\x81n\xf9\xb2\x97\xad\xce\xb1\xb0\xf6\xf2\xb0\xe7n\'\xb1\xc0\x0c42Cc22\x04\x00\x00\x80\xf2\x83\x122C\xf7I\xb2\x82\xbf\xfa\xb0J+F1e\xf6\xce1:\xa7\xa32\xf9[!\xb24\x1a\xa4\xb2\x7f\x94y\xb1\x87y`\xb2d\x92\xe3\xb1\x04\x00\x00\x80}\xbd\x012\xd5\xb3\xbf1\x93\x87^1\xfc\x94\x991\xd1\x8d\xcc\xae\xc3\n\xad\xb1M\xa4;1\xe9\xbb\xce\xb2\x04\x00\x00\x80\xdb\xfds2\xc6\xe3\x8d\xb2;\xdcS1\xf4G\x17\xb2\\\x14r2\xc7`\xc20j\xe3\xa9\xb0?\x14\r\xb2\xa0\xc1r\xb1\xbc\xbf\xc2\xb2\xbc871\xfd4\xe0\xb1e\xe8\xde\xb2\xd9\x99K2\x9cSE\xb2\xb9\x02\x1f1\xcfa\xea\xafc^\x0f2\xed\xc0R\xb1\xea\x0f\x9f2UZ]0\x0f\xd2S\xb2\x8dLa\xb1\xc0\x9f:\xb2i\xb9\x88\xb1\xd9\xda\x122P\xde\xc41\xd8\xc1\xc5/j\xb1\x88\xb0\xb5OR1\x17\x8e\xe7\xafJ\xf4b\xb1X)\xff\xb2\xae\xecf\xb1"\x12\xcd\xb1\xdbBn3iK\xc8\xb3\x99\xf6\xa5\xb2\xca\x19\xc3\xb1\x0es\x06\xb2\xa5\x94\x103\xfd>\x0f3\x04\x00\x00\x80\x0bN\xeb2\xe7-"\xb3\tZ\xc9\xb1f!\x1f2\x111\xa62\x06j\x833s\x92\x01\xb3[\xc6\x83\xb3\xeeiH\xb2\tA4\xb3\xb6\xbd\xb6\xb2\x04\x00\x00\x80!]\xd02\x14\xf0\x992-\xb122^\xa7v2lB\xa4\xaf\x0f\xf4\x8a\xb2S\xad\x162\x1a\x02\xa6\xb3\x04\x00\x00\x80\x1c\xedC3B\xe0c\xb3\xe4\x1f*2c\xf5\xf2\xb2\rdB3#\x16\x9c1\xdek\x88\xb1\xf8\x92\xe2\xb2)\xefB\xb2Xb\x9c\xb3\xb1 \x132\x04\n\xb4\xb2M)\xd5\xb3\x0b~#39t\x1e\xb3E_\xff1\xb65\xbc\xb0P@\xe62`<)\xb2\x80t\x7f3A\xbf11\xbb\x17*\xb3\x86\xea4\xb2\x1c\xdc\x15\xb3\x8a\x94[\xb2\x9c\xd9\xeb2\t\x16\x9e2\xca\xcc\x9e0\xc3\x87[\xb1|\xe1(2\xaf\xf0\xb9\xb0\xc3>6\xb2,-\xa6\xb3Pd\x16\xb2\x96\xf7\xa5\xb4\x80+\x1b4\x9eq\x82\xb4\xa4+X\xb3e\x1f~\xb2\x83\x1f\xaf\xb2\xb6Q\xbc3\xb1\x94\xba3\x04\x00\x00\x80\x9f>\x993\xe9=\xd3\xb3\xde!\x83\xb2CE\xcf2\xcbwX3g++4.\xc5\xa8\xb3\xab\xa3+\xb4\x80\x85\x02\xb3\xd5\xc8\xea\xb3\x19\x06n\xb3\x04\x00\x00\x80\xf0\xb2\x873\xc8\x81H3\xfa\xbf\xe82\xbf\xa2 3\x1c\xf3U\xb0l\xf7&\xb3\x87B\xc42\xa0:X\xb4\x04\x00\x00\x80\xa42\xff3\x11h\x14\xb46\x97\xdd2\xa9:\x9e\xb3\xab2\xfd3?NK2\x01\xb11\xb2\x02\x8f\x93\xb3\xdd\xe7\xfd\xb2\x89\xb1K\xb4\xfe\xa2\xbf2!\x81j\xb3(\xa8\x12\xb5\xb8\xf3\xd43\xb5c\xce\xb3NP\xa62\xb0%u\xb1\x13\xf4\x953\xe7n\xdc\xb2\x1e^&4\xde\x84\xe71\x92\x8c\xdd\xb3\x90\xa5\xeb\xb2\x012\xc3\xb3\xf8\x00\x0f\xb3\x84\x99\x993\x07\xe9M3\x0e\xd7N1\xba\xf8\x0e\xb2x\xf8\xdb2\xb00r\xb1\xc1`\xed\xb2\xc9\xe9\xd5\xb3(\x98A\xb2.\xb2\x922\xb1\xbeG4r\xea\xa7\xb4f"\x8b\xb3}\x81\xa3\xb2\x12n\xe1\xb2\xb1j\xf23\xd5-\xf03\x04\x00\x00\x80:D\xc53O\xf6\x07\xb4W\xcd\xa8\xb2\xd3\x15\x053kS\x8b33W\\4\x89@\xd9\xb3\x03\xf2\\\xb4\x0b\x04(\xb3p\x1d\x17\xb403\x99\xb3\x04\x00\x00\x80;\xae\xae3\x8b\r\x813\x11\xc7\x153\xe6\xc7N3A\xb4\x89\xb0\xd9\xdeA\xb3p\xa3\xfc2\x0b,\x8b\xb4\x04\x00\x00\x80\xf0@$4\xdf\t?\xb4{\x9f\x0e3\xd5\xae\xcb\xb3h\xf7"4\xa9\xda\x822o\xbcd\xb2w\xf2\xbd\xb3\x03l#\xb3\x92\x1a\x83\xb4\xfc\xaf\xf62L\xef\x96\xb3g\x0f\x96\xb4\x1a\x10\t4\xc9\xd6\x04\xb4\xfe\x16\xd62\xd3\xc8\x9d\xb1\xa5\x07\xc13\xc4\xe0\r\xb3\xc9(V4d\x03\x152\xa4\x98\x0e\xb4\x83\xab\x17\xb3\xa9D\xfb\xb3y\x158\xb3<\xb9\xc53\xd3\x87\x843\xf3 \x851\xcb\n8\xb2\x8e\x94\r3\x99\xe1\x9b\xb1\xc2\xc8\x18\xb3\x14D\xd9\xb3\xea\xa0D\xb2\x8al\x113$\xe0J40\x8c\xaa\xb4\xaaP\x8d\xb3\xd8*\xa7\xb2\x90\xf6\xe4\xb2Z7\xf63\x84\xf1\xf33\x04\x00\x00\x80\xbc[\xc83\xd7\x17\n\xb4\xa0r\xab\xb2<\x7f\x073r\x82\x8d3K\xcb_45\xa8\xdc\xb3\x88h`\xb4/\xa6*\xb3\xc4{\x19\xb4\xe0\x99\x9b\xb3\x04\x00\x00\x80(G\xb13Z\x13\x833vM\x183\x94\x05R3\xaeV!3\x18\xa2l\xb3\x8fL\x003tZ\x8d\xb4\x04\x00\x00\x80\xfc\xd3&4d\x08B\xb4\xbd\xdb\x103\x15\xe0\xce\xb3K\x85%4\xb1\xe7\x842,Rh\xb2\x99\xec\xc0\xb3\xb9\xfb%\xb3\x9b(\x85\xb4\xc1\x8d\xfa2\xe5L\x99\xb3\x7fi\x98\xb4\x0c6\x0b4\xca\xeb\x06\xb4\xfaq\xd92\x00B\xa0\xb1\'\x0e\xc43\n\x1a\x10\xb3\x13\x84Y4GY\x172\xcb\xd4\x10\xb4\x11\x0c\x1a\xb3\x08\xe4]6\x07\xfc:\xb3\x91\xd2\xc83\x96\x9b\x863#7\x871-\xed:\xb2\xa1\xcc\x0f3,S\x9e\xb1\xc8-\x1b\xb3\x17\x82\xc9\xb3\x17^6\xb2r\xe0\x063W)<4\xa0-\x9e\xb4\xda\x10\x83\xb3~>\x9b\xb2d[\xd4\xb2\xd9[\xe435@\xe23\x04\x00\x00\x80\xa9\xd3\xb93\xdb\x13\x00\xb4\\\x03\x9f\xb2\xe7V\xfb2\x07?\x833\x19\x90O4D\xa7\xcc\xb3\xed!P\xb4\xbaE\x1e\xb3\x07Z\x0e\xb4\xd4P\x90\xb3\x04\x00\x00\x80\x07\x88\xa43S#s3>\xed!\xb3\x17\xcaB3\xb5\x14&4\x85x[\xb3\xdb\xfc\xed2\xf1\x19\x83\xb4\x04\x00\x00\x80z\xba\x1a4\xc6\xf53\xb4%Z\x063\x03\xdf\xbf\xb3\x0f\x84\x194\x15\x88v2\xbexW\xb2\x92\xee\xb2\xb3\xe6\xf1\x19\xb3}\x00w\xb4\xb5a\xe82\x8e.\x8e\xb3\xa7[\x8d\xb4N\x1d\x014gE\xfa\xb3\xad\xac\xc92p\xa2\x94\xb1\xfc\xd5\xb53\x7f\xa6\x05\xb3r\xbdI4-_\x0c2\xb5S\x06\xb4\xdf\xdf\x0e\xb3t\x8174\xfah-\xb3\xe3A\xba3\xa3\xb0y3G\xd1z1\x81^-\xb2\xb4^\x053\x7f\xd7\x92\xb1\x91\xec\x0f\xb3\xb2\xc2J\xb3C\x80\xb7\xb1\t\xb7\x872\xb5T\xbd3J)\x1f\xb4c\xe1\x03\xb3\xbb\x08\x1b\xb2\xadDc6-\xc7e3,\xa8c3\x04\x00\x00\x80T\xfb:3\xa0\xdf\x80\xb3X\x00 \xb2s\x1dc\xb6\xd9\x0f\x043U\xda\xd03\xe1\xecM\xb3\x12m\xd1\xb3\x8cA\x9f\xb2\x83<\x8f\xb3p6\x11\xb3\x04\x00\x00\x80\x0e\x84a\xb6.\xa6\xf42F\xfe\x8d2\x04\x00\xc422\x12d6\xb0\xd5\xdc\xb2\x83wo2\x87\xea\x03\xb4\x04\x00\x00\x80\xa8\xb0\x9b3\x1a\x14\xb5\xb3\xe9/\x872I\x10A\xb3Nx\x9a3Q\x10\xf81\x90\xcf\xd8\xb1A\x0b4\xb3\xd7\xe6\x9a\xb2z\x89\xf8\xb3l\xd3i2\xc8\x10\x0f\xb3\x8f<\x0e\xb4\xbc\xea\x813\x99\xd3{\xb3\x8c\xedJ2\xf5\x8e\x15\xb1J\xf763"{\x86\xb2l\xfe\xca3\x88>\x8d1l)\x87\xb3/\xc3\x8f\xb2\x03+n\xb3\x83|\xae\xb2:j;3\xe6=\xfb2D`\xfc0lr\xae\xb1\xe52\x8623\xc1\x13\xb1\x8e\xd1\x90\xb2A\xee\xb1\xb2\x8f\x07!\xb1\xe60\xee1F%&3\xa9\xab\x8b\xb3\x00vg\xb2{\x0c\x88\xb1\x07\xfe\x126\xbc\xa3\xc92>\xc7\xc72\x04\x00\x00\x80\x88\x15\xa42\x04/\xe2\xb2]h\x8c\xb1\xd1\xec\x12\xb6\x8b\xc7g2\xe6F739\xb5\xb4\xb2\xab\xc77\xb3\xf1\xc0\x0b\xb2>d\xfb\xb2-\xdc~\xb2\x04\x00\x00\x8009\x12\xb6\x87\xb0V2u\xb6\xf81\x81\xff+24X\x136\xa2\xcaA\xb2W$\xd21\x0b\x86g\xb3\x04\x00\x00\x80\xd9\x9f\x083`\xe7\x1e\xb3\xb6C\xed1\xd6k\xa9\xb2\xc0\x8d\x073\xaf\xafY1\x98B>\xb1\xf6\xfe\x9d\xb2\xbc\xee\x07\xb2\xf6\x19Z\xb3\x191\xcd1|\x17{\xb2\x05\xa3y\xb3\xcc\x03\xe42\xf5\xfc\xdc\xb2\xd6\x13\xb21Z>\x83\xb0d\x8f\xa02j\x06\xec\xb1\xa7"236\xe5\xf70T8\xed\xb2w\xd0\xfb\xb1\x8e\x00\xd1\xb2s\x1e\x19\xb2\xdbv\xa42\x95y\\2tx]0\xbe\x15\x1a\xb1\xab\x87\xeb1\x1e\xa9\x81\xb0!+\xfe\xb1\xf0\xe6\x80\xb1\xffP\xe9\xaf\xd6\x8e\xac0\x94\xba\xf01z^J\xb2\xa3\xae\'\xb1\x15\x1fE\xb0\x91\xd7\x87\xb0\xfe\x13\x921\xcb\xba\x901\x04\x00\x00\x80\xf2\xbdm1\xeb\xdb\xa3\xb1\xe4oK\xb0Q\xc7\xa00\xb6\xe9\'1u\xc6\x042\x01\xea\x82\xb1\xbf#\x05\xb2O}\xca\xb0\xf7\x1e\xb6\xb1<\xa28\xb1\x04\x00\x00\x80\x95\x85R1<\x88\x1b1\xd8i\xb40\\5\xf90l\xf5%\xae{d\x0c\xb1\xd7<\x980C\xba\'\xb2\x04\x00\x00\x80\x99\xf4\xc51u<\xe6\xb1\xf5\xe2\xab0\x91yu\xb1tg\xc41\xf7\xb3\x1d0\xa2\xd5\t\xb0\xb8\xebd\xb1\xfe\xf3\xc4\xb0\xfd\x00\x1e\xb2\xc7\xa6\x940`\xe75\xb1\x88\xd94\xb2\x88/\xa51Y\x18\xa0\xb1+\x02\x810\xb8(>\xaf\xd0\xa2h1\x1e\xfd\xaa\xb0\xe8\x0c\x012\x87\x96\xb3/\xb8\xda\xab\xb1\x17\xa9\xb6\xb0si\x97\xb1\xbb\xda\xdd\xb0\xf1Jn11\xb9\x1f1\xd8q /KR\xde\xafB\xa1\xaa0\xab\xdd;\xaf\xf9!\xb8\xb0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00GlM\xb1\x07\xe9\xb9\xaf\x94S\x870&\xd1\xbf1\xdb\xfa \xb2\xb3\x9c\x05\xb1\xdd\x11\x1d\xb0\x87{X\xb0\x93\xcbh1s\xa5f1\x04\x00\x00\x80\x08Z<1\xd7\x90\x82\xb13\x1a"\xb0q\x1c\x800\xc5\xcb\x051d\x98\xd31\x19\xa1P\xb1\x0c-\xd4\xb1\xe0X\xa1\xb0\x02\x1e\x91\xb1\x92\x1e\x13\xb1\x04\x00\x00\x80[\xbf\'1\x8f\xdc\xf70\x17\xdc\x8f0\xdc\x92\xc60S"{\xad\x02\xbc\xdf\xb0z\x9cr0\xf6\xa5\x05\xb2\x04\x00\x00\x80\x02\xbc\x9d1\xcbt\xb7\xb1V\xf6\x880D\x99C\xb1\x8f\x7f\x9c1.R\xfb/\\\xa8\xdb\xafyh6\xb1\x85\xef\x9c\xb0\xee\xcc\xfb\xb1s\xe5l0\xb0\xf1\x10\xb1\xae\x1a\x10\xb2r\x9f\x831\x1c"\x7f\xb1\xb0\x97M0\xb1\x85\x17\xafS^91.?\x88\xb0\xc6\xa8\xcd1M\x19\x8f/\xc4\xef\x88\xb1o\xa6\x91\xb0\x9bKq\xb1\x0b\xc7\xb0\xb0;\xe0=1s\x8a\xfe0\xbe\xb0\xff.\xc3\xbc\xb0\xaf\x01\xf6\x870\xd3\xb1\x15\xaf^\xb8\x92\xb0\xb8\xf9\xde\xb2\xb9\xcbI\xb1}\'\x152\xf74P3\x9c\x04\xaf\xb3W\x07\x91\xb2\xa3}\xaa\xb1\xe1\xfa\xea\xb1\xbc\xaf\xfc2\x9fZ\xfa2\x04\x00\x00\x80\xf1\x93\xcd2\xd8\xb8\r\xb3\x00\xf4\xaf\xb1\xca\x0e\x0b2m:\x912\xd8\xace3\xa7t\xe2\xb28Nf\xb32"/\xb2N\x84\x1d\xb3\x9b\xac\x9f\xb2\x04\x00\x00\x80\xad\x14\xb62Z`\xeb\xb5\xe0&\x1c2y\x8aW2c\x9e\x8c\xaf\x02\xdar\xb2\xad\xab\x032e\x11\x91\xb3\x04\x00\x00\x80L6+3\xba!G\xb3D\xaa\x142\xceO\xd4\xb2\xd0\xde)3\xcce\x881\x1fmn\xb1{\xfe\xc5\xb2y\xbcf0k\xa8\x88\xb3\xa6\x91\x002\xc0\xef\xef\xb5\xd5j\x9c\xb3\x94\xde\x0e3sw\n\xb3\xd5(\xdf1\'SM\xb2\x145\xc92t\xe3\x13\xb2b;_3]\x98_2!\xa3\x14\xb3g\x18\x1e\xb2&\xf9\x02\xb3\xe1\xe1?\xb2\x94\x19\xce2\'%\x8a2J\xb2\xeb5\xb8\xd6?\xb1\x01\x94\x132_|\xa2\xb0\xb9A\x1f\xb2~\x95\x8b\xb4\x06\xddj5\x7f\xdb\xba3\xb9V\x025\x90#[\xb5\xe0\x935\xb4\n\x0b~\xb3T\x19\x93\xb3\xeb.\x9e4\x1d\xb9\x9c4\x04\x00\x00\x80\xb8\xb8\x804\x0ep\xb1\xb4\xa6K\\\xb3g\xd5\xbc3\xd8\xd354,\xc7\x0f5>\xc3\x8d\xb4\x0c\xf1\x12\xb5\xf6D\xdb\xb3\x836\xc5\xb4\xbc\xd9s\xb4\x04\x00\x00\x80\x83\xa6\\4\xe8Y=\xb6\x07\x81\xc33\x0e\xee\x064\x83\xb63\xb1\xcd\x06\x18\xb4s\xda\xa43v\xa05\xb5\x04\x00\x00\x80\x0e\\\xd64\x1cJ\xf9\xb4b!\xba3\x8e\xe8\x84\xb4\x04\xae\xd44\x87\xc5*3\x98A\x15\xb3\x15\xe4w\xb4U\x06\x92\xb3\x02\xb8a\xb5N\xf8\xa03H0T\xb6\x1a\xd6C\xb5\xcf\xdf\xb24\xa3\\\xad\xb4\xf9\xb2\x8b3\x18\xf5i\xb38\xf7{4\x82(\xb9\xb3M\xed\r\xb6J\xb9g3w\x18\xba\xb4\xed\xef\xc5\xb3\x9d4\xa4\xb52=\xf0\xb3\xe06\x1e3\x97\xf5,4\x1d\xf5\xe75S\xc5\xaf\xb3\x0c\xc5\xb83\x04oK\xb22d\xc7\xb3\x1a\xfb\x98\xb5\x8e\x0c\x136\xc2\xd6h\xb4a\xfd\x0e6\xbahp\xb6\xb73G\xb5s@\xc7\xb4s`\xa1\xb4\xe4J\xad5\\\xef\xab5\x04\x00\x00\x80\x1a&\xea7\x04\xa9\xc2\xb5\xf1\x85n\xb4s\xec\xac\xb4\xe5yG5\xc6\xbb\x1d6\xc1\x85\x9b\xb5\x81X#\xb6\\\x8d\xf0\xb4\xe0q\xa9\xb6#\xc6\x91\xb5\x04\x00\x00\x80\x8d\x05w5:\xe2\xdd\xb4\x0f\xad\xdd\xb7\xc9\x06\x145\xef&E\xb2V\xc8&\xb5\xb5\xda\xb44\x85AG\xb6\x04\x00\x00\x80v*\xeb5q\xaf\x08\xb6[2\xcc4\x11\xcf\x91\xb5\x02S\xe95\xdfX;4S\xbe#\xb4\xd5\xf9\x87\xb5\xdc\x9d\xe8\xb4n\x9f\x8c\xb6\xe1\xb8#5\xd0\xda\xfb\xb5\x1bmq\xb6x<\xc45U0\xbe\xb5\x06\x81\x045)F\x01\xb4\xdb\xa5\x845I!\xcb\xb4A\xd5\x015\xe2\xa977\x91(\xcc\xb5\x10\xf2\xd7\xb4\t9U\xb7b\xc7\x03\xb5\xb5\xb8\xb1\xb4D\xbf=5*\x96\xfc\xb6\xf9\xba\x01\xb82\xb4\xca4\xfb-_\xb3\xab\xbe\xda\xb4&\xb2s\xb6\xd4\xdc\xa56\xb4\n\x01\xb7\xb5\xf5\xc16y\r#\xb7\x1c\x82\xca\xb6\x02h\xc7\xb6!H,\xb5\xf7\xe4i6\x129i6\x04\x00\x00\x80z\xe9\x977=\x06\x84\xb6\x18\xac\x18\xb5B\xdd\x1e\xb7iJ\x076\xdc\xf5\xd56\xe6\xf4R\xb6\xdc\x8b\xd6\xb6&=\x17\xb5{\xe1\xaf\xb7q\xfa\xc6\xb5\x04\x00\x00\x80W\xb4\x916\xd6J\xee5\xfa\x89\xcb\xb7\xc3\xca\xc85 \xb7\x05\xb3\x83\xe9\xe1\xb5URu50$\x07\xb7\x04\x00\x00\x80\x1c\x7f\x9f6\x9c\xfa\x905\t~\x8a5\xa9\xc8E\xb6e\x94\x846\xf6 \xfe4\x9b\x1c\xde\xb4#r8\xb6]\xb0\x9e\xb5J]\xe6\xb5\x0fq\x9f5\x01\x96\xd1\xb6\x0e\xe2\x92\xb6\xe0\x17\x856\xe1\xfd\x80\xb6\x0c\xb2\x95\xb4\x8a\x86-\xb4\xbb\xd5\xfe5\xd4\xc4\x89\xb5\x7f\x1bG\xb7\x03\x18\xdc6dw\x8a\xb6\xf3D\x0172<\xa1\xb7\xa6\xee\xb1\xb5\xa5\xaf\x9655\xb1\x006W\xe1\x08\xb8i\xa3\x9b\xb7\x0egb51\x15\x99\xb0\xf7[\x94\xb5ex\xe9\xb6\xa0\xd0@\xb7\xec\xbd\xbe\xb7L\xd897\xf3\x0c\x9c\xb7f\x82%\xb7\xe4]m\xb7\xbeI\xe5\xb4\x02\x8c\xe06%5\xdf6\x04\x00\x00\x80\x18\x10\xdd6\xab\xb5\xfc\xb6\xfa\x95\x98\xb5\x8f\xae]\xb7\x18{\x816\xc3\xc9L7\x13\xdb\xc9\xb6<UM\xb7\xa8\xe5\xa06\xd9o\x0c\xb7L\xff\xa47\x04\x00\x00\x80\x08(x7>#b6\x00\xf9\xf66\\+@6\x88\xf5\xd03\x97\xedW\xb6]\xc9\xea5\xe2Km\xb7\x04\x00\x00\x80\xae\xa5\x187 u\xc17\x82\x8b\x046PJ\xbd\xb6T@\xb96<7s5\xa6\x92T\xb5m\x86\xb0\xb6\xcd\xdf\x17\xb6\xfa\x07A7\x1e\xa4D\xb7\x13\xfd[6\x9d\xdc\xb87h\xf5\xfe6\xc8\x00\xf7\xb6S0\xcd\xb6\xdd\x1b\x93\xb4\xb9\xb4X\xb6D\xda\x03\xb6I\xe0\xbb\xb7+%\x14\xb8(\x85\x04\xb7N\xe187B,\xe2\xb7\xc8b*\xb63\xbe\x1a6\xd8Tv6!\xb8s\xb8\x0bv\xe25\xfdR\x1d5\xf4+\xb75\xd9\xc4\r\xb6\xf9\xf1\xba6\xa4\xff\x11\xb7}\xcd\x9e\xb7\xbfi\xaa7Y\xd6\xe7\xb77\xec\x8f\xb6\xc5w\x017d!\x14\xb6\x8c\xcf\x127\xf8\xce%7\x04\x00\x00\x80"\x82\x93\xb78\xb8;\xb7\xb3M\xe4\xb5\xe1\xe4\xf0\xb8\x86^\xc16\x8b&\x987\xb8\x89\xc2\xb6\xe6\x86\x98\xb77\xda 8\xaa;\x81\xb7\x9b\x97s8\x04\x00\x00\x80!\xb4$\xb8\xde\x90\xa77c\xd0r8B\x1f\x8e6\x91\xa88\xb6\x02\xd6\xa0\xb6\x01e.6\x87\xf3?\xb7\x04\x00\x00\x80\x90\xeab7!\x98t7j\x12E6e\xc9\x0c\xb7\x81\xd2,8\xc7\xaa\xb45d\x87\x9a\xb5Y \x03\xb7g\xc9X\xb6\x1e?\xbe\xb6\xadG\x87\xb7\x93\xa4\xaf7\xf6=k\xb7O&=7ry7\xb7\\\xe5\x0b8\n\xa9\xd9\xb4\t\xe7\x18\xb8)\xe3C\xb6\x1e\xa8\x856\xe6\xde\xac6\x10\xe1D\xb7L\x01\xcf\xb6\x05\x84\xb37\x18\xb5\x95\xb6^#j\xb5P\xfb\xb66\x1b\xf1\x0f\xb8\x8a\xfe95\x0c\x02\xcf5\xb8\xd5\x136\x1f\xc5R\xb6\xff\xf7\x068\x15\x1aP\xb7,\x1e\xa17\'\x0f\xa67t\x99\xe8\xb7n\x80L4GUf\xb6\xfabh5\x1a\ng6\xb0Y&7\x04\x00\x00\x80\x92)\xbc74V<\xb7N\xf8\xba\xb5\xa5\xc2\xd46#\x1a\xc26>R\x997N5\x00\xb7B\x07\x99\xb7\x8dYa8o\xf1\x90\xb7\xfd\xb3M7\x04\x00\x00\x80\xff{&\xb8?\xd7\t8\x9c\xc518l\xc0\x8f6\xb9\x84\x9f6\\]\xa1\xb6\xad\xf3.6\\\xc8\xc0\xb7\x04\x00\x00\x80\xd3\xdac7d\xa9^\xb7PVH6\x9aC\x0e\xb7q\x1e\x198\xd7B\xb55\xe6\xae\x026\x83\x8e\x03\xb7\x84\xe5E\xb6L\r\x93\xb7y\xe7(8\xf3\xb0\x86\xb6K\xd5\xcf\xb7\x08\xec37`\x068\xb7;\x8d\x04\xb8\x9ar\xda\xb4\xdeC\x0e\xb8D\x9f\xf1\xb5\x94\x8aW74r\x84\xb5\xc2\x86E\xb7\x7ft\r\xb7\x96\x87\x987\x93\x82\x90\xb6\xc9\xeb\xca6\xef\x96\xb76N\xf7\xf9\xb7l\x05B\xb5\xd0\t\x0c6\xf2a\x035\x8f\xa3S\xb6l\x16\xb05i\xa6/\xb7\xca\x1f\xd37~\xee@7a<\x9a\xb7\x0c\xb8,6C]\r\xb6\x85\x1c\xec2\x1b\xd4\xd6\xb3\x15\x9d\xdc6\x04\x00\x00\x80\x0ft\xe67T\xc5\xf9\xb6\xa5\xaf\xa3\xb5\xdfh\x83\xb8>\xf3\x7f6~\xa7J7\xa5\x91\xe2\xb6\xf6\xf1J\xb7\tm\x8c\xb7&=\xab\xb7\x07\x98\xcb\xb6\x04\x00\x00\x80\x1ew\x18\xb8\x8a\x9d\xa26\xfas\x0c\xb8}2?6/=\x0363\x00V\xb6\xb8\xdc\xe75\xeb\xaa\x7f\xb7\x04\x00\x00\x80\xfe\xde\x167\x87y/\xb7\xf0\x00\x036@\x1d\xbb\xb6okw7#cp5\xe5\xc9\xb66\xe6x\xae\xb6\xb0\x1b\x16\xb6\xae\xa7\xf8\xb6\x945\x018S\xe2\x89\xb6_\xaf\xc5\xb7c<\x077\x1e\x0f\xf4\xb6\xf6f\xf45\x06\xea\x90\xb4\x0b\x96\x8e6B\xed\xca7\x8f\xfe\x9e6\xf8R\x085\xa3\xfa\x02\xb7\x85\xadb\xb7\xa69\x944&\x02*\xb6\xc9\xb9\x977=~s6Ae\x14\xb6}\t\x80\xb5\xb3"\x026\xd0\x0bw\xb6DV\x0c\xb6\x95\x0el\xb7t&\xb163\x9a\x14\xb8\xad\xc5P6U\t\xf1\xb6nz\xe7\xb5\xa2i\xd3\xb4\xd5\xc6\xea\xb4\xcdk+6yb,6\x04\x00\x00\x80s=\x086\x10+C\xb6s\xb7s\xb4\n\x83b\xb6\'\xff\xc75\xcfJ\x9e6\xa5\xed\x1b\xb6@\x94\x9e\xb6wu"7\xcbt\\\xb6\x18}\x1d\xb6\x04\x00\x00\x80N\x18F7\xfc\xde\xb55\t5Y5\xd0\xebP5k\xc4:4\xc27\xa7\xb5\x82S55\xa2\xc6\xc7\xb6\x04\x00\x00\x80\x91\xc7k67\x1d\x89\xb6\xc6\xbaL5q\xd2\x11\xb6\x0e\x8f#6\xfa\xd5\xbb4\xd3+\xa4\xb4\xb6T\x08\xb6\xef\x95j\xb5\xc0\x1f\xca\xb5\x1d\xc3\xb75&\xa9\xd8\xb5\xe0\x838\xb7?&C6\x00\xb3>\xb6\xa8\xa8\x1951|\xe2\xb3\x91@\x11\xb8\xfa\xa8K\xb5\x06k\x9b6\xe9\xa7U4\xf3\xb0L\xb6t\x02^\xb5Zg\x1d\xb6[\x1f\x84\xb58\xe3\xe66\n>\xbe5\xc1RP\xb5\xc2y\x16\xb8\xe6QK58\x07?\xb7\xcdP[\xb5D\xb2,\xb5\xac\xd2\xa2\xb55\xe454!\xb5\x9b\xb4nt\xd8\xb5\x9d\xb4\xb3\xb4\x88\xd7\xd2\xb3\x13L\x11\xb4C\x86P5\xb1\xcd\x1a5\x04\x00\x00\x80;\x9d\xfc4\xacC/\xb5\x86\x98\xd9\xb3\xae\x9d,4\xb5\x99\xb34X\x04\x8e5\xb9\x06\x0c\xb5\x1eh\x8e\xb5\xfc\xe9X\xb4"\xccB\xb5\xe2Q\xc5\xb4\x04\x00\x00\x80P\xe9\xce5\x99[\xa64A\x19A4|\x8a\xf33<\x82\xb1\xb1\x1c*\x96\xb4\x84\xd5"4\xf2f\xb3\xb5\x04\x00\x00\x80\xe9\xbbS5\xf7Bv\xb5\xc0\xd974\xb8G\x03\xb5\xf0\xab85\x08\xae\xa83\xa0m\x93\xb3\xc8\xda\xf4\xb4k\xa9R\xb4i\x00\xa9\xb5\xeb=j4\xa3\x90\xc2\xb4\xab\xb1\xf2\xb5\xec\xae05\x0b=+\xb5\xf4\xfc\t4 e\xcb\xb26\xf1\xe1\xb6\xec\xe36\xb4k\x08\x8a5\x89\x16@3\xf0\xd07\xb5\x19\xd4\x9f6\x7fI\xfc\xb4\xe5Km\xb4\x86J]5?\xd7\xaa4\xd8\xa7f\xb6b\n\xaa\xb6\xab\x8164\xaf\xcb\xb54\xf8\xf2D\xb4\x84g\x99\xb3\xa8E\xfa\xb1f\x19\xb92\xa1\x1c\x014z\x13Y\xb4O\xde3\xb3wrS\xb2\xda\xb6\x91\xb2\xbb\xb1\x9c3r?\x9b3\x04\x00\x00\x80\x0c\x05\x7f3t\xc4\xaf\xb3\xce8Z\xb2\x86v\xac2\xad\x1d43\xb2l\x0e4\x9fm\x8c\xb3\xc3\xd0\x0e\xb4\x8e4\xd9\xb2D[\xc3\xb3J\rF\xb3\x04\x00\x00\x80\x89\x0b\x803\xdc\xd5&3\xea\xa9\xc12\xce\x82\x063\x8e\x042\xb0q\x98\x16\xb3+M\xa32\xc6\xea3\xb4\x04\x00\x00\x80\x7fW\xd43\xeb\xf7\xf6\xb3\xdd`\xb82\xe0\xa7\x83\xb3~\xad\xd23\xff))2\xf3\xd9\x13\xb2\xb5\x8eu\xb3?D\xd3\xb2\x98|)\xb4dt\x9f2\x9f\x1fC\xb3-\xfeA\xb4\xc20\xb13\xdf\xba\xab\xb3[b\x8a2\x9a\xfaK\xb1\xec\x8ay3Ej\xb7\xb2\xd9m\n4\xbc\xa3\xc01\x02X\xb8\xb3\xf0\x12\xc4\xb2jj\xa2\xb3D\xfa\xed\xb2L\x9c\x7f3\xc9T+3\x1c\x0b=\xb4\xa1\xaa.\xb3\xc8\x07\xb72\xfd\xfb\xdd1\xb2\x83\xc5\xb2\xae\x0cT\xb0R\xe8\xbf\xae\xb1\xee\x8d//\x01\xc60\xf0s&\xb1\x15\xec\t\xb0\xfa""\xafIw_\xaf\x04Np0%\x16n0\x04\x00\x00\x80@\x8cC0\x0f\xc7\x86\xb0\xd8T\'\xafn>\x84/\xab\x1c\n0\xc3k\xda0\xf9[W\xb0:\x05\xdb\xb0L\x8d\xa6\xafd\xcc\x95\xb0\x7f\xdd\x17\xb0\x04\x00\x00\x80\xa0(-0j\xdb\xff/\x17\x80\x94/\xb2\xfa\xcc/\'\x81\x08\xad\xa6\xf3\xe6\xaf\xfdoz/\xa4\xf5\t\xb1\x04\x00\x00\x80\x96\xd2\xa20\xcb_\xbd\xb0`a\x8d/\x8a\xe8I\xb0\xef\x8b\xa10\xd0\xb6\x01/>\xbe\xe2\xae\xd1J<\xb0\x86\xff\xa1\xaf)\xf6\x01\xb1\xc0\x89t/\xa6\x9e\x15\xb0\xb6\xc0\x14\xb1h\xde\x870\x82\xae\x83\xb0q9T/\xebh\x1c\xae\x1eY?0U\xa4\x8c\xaf"K\xd40\x0c\xb7\x93.\x99Z\x8d\xb06Y\x96\xaf=\x14y\xb0\xe3z\xb6\xaf<\x00D0<`\x030\x1b\xf8\x03.\x8dV\xd8\xb1\xc7X\x8c/\x08\x86\x1a\xae\xfes\x97\xaf\xb6\xda?\xaf|\xa1\xad\xadCj\x80.\xa5%\xb3/\xa7\x99\x16\xb0\xcf\x92\xf9\xae\xee\xb1\x12\xae\xf5.J\xae(kY/_iW/\x04\x00\x00\x80\x9c\xec0/\x1b\xe2s\xaf&e\x17\xae`Lo.\xbc\xea\xf9.u\x9e\xc5/Q\xd9B\xafN)\xc6\xaf\x9b\xb0\x96\xae*\x88\x87\xaf\xdff\t\xaf\x04\x00\x00\x80\xdb\xaa\x1c/]}\xe7.\x83[\x86.\x1au\xb9.m\x02\xf7\xab\xce\xf4\xd0\xae\x0f\x96b.\x1c\xa4\xf9\xaf\x04\x00\x00\x80\xd1P\x93/\xaaV\xab\xaf\xc8\xd4\x7f.\xd2\xad6\xafF)\x92/\x83\xb8\xea-+&\xcd\xad\x10\\*\xaf\xe0\x91\x92\xae&+\xeb\xaf\xab?].\xc6^\x07\xaf\xf9\x95\x06\xb0\x98\xdbu/\xf8Gn\xafA\x03@.\x8a\x83\r\xad\xde\x1f-/\xac~~\xae6\x13\xc0/\x9e\xa5\x85-\x85\xc8\x7f\xaf\x94\x07\x88\xaeu[a\xaf\xdb\x19\xa5\xae\x8bU1/S\xba\xed.\x08\xcd\xee,B\x10\xa5\xad\xf7\xf5}.\x9f\xce\x0b\xadl\x07\x89\xae\xf5\xa5\xdc\xb2l\xb2G\xb1\x19\xb0\x132\xaa\x08N3\xe03\xad\xb3a\x89\xa9\xb2\x18\xb6\xa8\xb1\x17\x87\xe8\xb1\xbd\xc6\x053\xb4\xbd\xf72\x04\x00\x00\x80<z\xcb2->\x0c\xb3\xe9\x1d\xae\xb1>\x9b\t2h\xb6\x8f2/Gc3\x9b\x17\xe0\xb2\xc7\xf4c\xb3EN-\xb2r\xdf\x1b\xb3\x01\x06\x9e\xb2\x04\x00\x00\x80/.\xb42\xbc\x1d\x852\xab\x85\x1a2\xab\x82U2s\n\x8e\xaf%Qp\xb2\xe4K\x022\xcb\x8d\x8f\xb3\x04\x00\x00\x80\xd9l)3\xad\rE\xb3\x0c\x1d\x132\x8c\x18\xd2\xb2\xa2\x14(3^\xf9\x861.\xf0k\xb1y\xed\xc3\xb2V\x0b\xe9\xb1I;\x87\xb3Dt\xfe1\xdb\xaf\x9b\xb2\xe7\xc8\x9a\xb3\xablX\xb5~\x05\t\xb3\x9d\xd4\xdc1\x96\xe6\xaf5~\x1b\xc72SX\x12\xb2\xf1\xe6\\3v\xb4\x191\xfe\x15\x13\xb3\x00r\x1c\xb2\xf7\x96\x01\xb37\xe1=\xb2\xea\xf2\xcb2\x0b\xb4\x882o\xf7\xaf56\xd6=\xb1\xb8\t\x122\x16\xca\xa0\xb0\xc3\xa3Q\xb2/\x1f\x91\xb5}&A\xb6\x1a\xa8h4#\\\xca\xb5\x13:\xa0\xb5\x1b\x19\xfa\xb4B\xe6\x01\xb4Y\x164\xb4n\x17Q7\xed"C5\x04\x00\x00\x80\x88E 5\xa1\xed\\\xb5;%\t\xb4b\xc6X4\xded\xe24\xbf\x04\xb35\xce\xa1,\xb5\xca\xfa\xd0\xb5\xa9\x81\x88\xb4\x18Q\xe3\xb4\xde\xf05\xb5\x04\x00\x00\x80k\'\r5\x0e\'p\xb48ls4o\x00\xa84\xb4K{\xb1\x07\x86\xbc\xb4dBM4\xe6$\xe2\xb5\x04\x00\x00\x80-s\x855\x82\xc5Z\xb6\xeb\x9e\xd95\x17|%\xb5H\xd8H\xb8\xc4\x85\xf135\xd3\xb9\xb3-S\x1a\xb5\xfbM;\xb4\xcb9\xd5\xb5\x9c\xea\xaf7\xb6\x1d\xcf\xb7l\x05\xe7\xb5&\xe1[\xb8z\xdaW\xb5\xa2\xf0-4\xcb\xbe\xc75Z[\x135\x8c\x8af\xb4\x13\xff\xad5\xc4Q\xbc3L\xb5g\xb5o>\x07\xb6QE\x9b\xb7\xac\x8f\x95\xb4\xd3h!5+Z\xd74\xd3\xae\x007\x06\x87\x95\xb3\n\x84]4\x9fK\xfd\xb2r\xbb\xb5\xb4\t\x05\xcf\xb7\'C(\xb7\x96g\xad5\xae\xb7\x1b\xb66\xe9V6\xdf&\xd815\xc3\xc1\xb5/\x1a\x8b\xb5rEl\xb8\x104\x946\x04\x00\x00\x80\xc9\x14j6\x93\xc4\xa7\xb6\xbfNP\xb5\xe8\xc6\xae5m\xf1+6\xb0u\x197Q\xadQ\xb7\xdaGT\xb7yY\xcf\xb5\xc7\xedJ6\x8f\xf1\xe1\xb6\x04\x00\x00\x80+\xfe\xce77\xf6*\xb7L\xe0\xb85\x9e\x8d\xfc5\xee\xf0)\xb3\x9de\x0f\xb6<\xe4\x9b53\xe4*\xb7\x04\x00\x00\x80\xe8\xb4\xca6x\xd9\x1e89\xce\x967\xdb]{\xb6\xbd5\xec\xb7\x01f,5(Y\x0e\xb5c\x9ai\xb6\xd8\xb4\x93\xb6\xa1\x9db8\xe5/\x178\xb8\xcc\x91\xb8t\x80:\xb8\xae\xf3\xe2\xb7\xa2\xd5\xcc\xb6\xf4D\x965\r\xca\x1241z\x9e6\xb5\xc9\xae\xb52\xe3\'\xb7\xf2z\xb77\xa6\xfa\xaf\xb6\xc5\xb1\x0f\xb7\x90m\xf6\xb7\xe2-\xe3\xb5D\xaaF6\x95\x8e#6\x14eY6\x9a\x14^\xb6\xe7\xef\x015\x00`@\xb4\xfb-\x07\xb6\x8e\xe4_\xb8\xb6\x87W\xb6\x16!\xc9\xb75P\x857\xb5\xbc\x90\xb7{\x13\x0f7L$Y\xb7\x03\x18g\xb6\xf1/\x9d\xb8c\xf3u7\x04\x00\x00\x80e%p8)\x00h\xb7!\xdd*\xb6\xeb=\x8e\xb3\x82\xb8\x0e7\x93\x86\xf57\xbd\xec\xf2\xb7\x002\x80\xb8j\xdd!5CB\x91\xb8\xc4\xb3p8\x04\x00\x00\x80-"f8A\xcc\x0c8\xd1!8\xb8\x7fD\x187\x1b\xf6\x895\xcd\xd2\xf6\xb6\xa3;\xc65\x8d\xddp\xb7\x04\x00\x00\x80\x107\xa87?"R8Ng\xf57W\x94Q\xb7\xdc|h\xb7\xfa\xcb\x8a6T\xc8\x1a\xb5\xb00q\xb8p\xa7\x02\xb8>s\x9b8\xfd\xa4\xb8\xb7\xf3\x0c\x8e8<\x89\xb8\xb8\xf8\xaf\x807\xec+J6\xdf\xed\x0c\xb8\xc5\x1c\x836\xfbt5\xb6\xe8\xfa\x857\xb0+\xa1\xb6\xa7\xbes8\xba\x11\x92\xb7\xd3\xa6[\xb8\']$8\xba\r\xc17S$\x187P\xc0\x0771\x9f\xcb\xb7,\xf3\xde\xb7\xb6\xf5\xf2\xb6PV\xa6\xb7\x80J\x82\xb6R\x11\xc1\xb8\x15\xb5\x8a\xb7\xbeV+\xb7%7\x988\xfa\xbe\x83\xb8\xb6\xa0\x1e\xb8j\xed\x197\xde\xd7\xec4\xb5f\x18\xb9\x8e\xf6\x0b8\x04\x00\x00\x80\xf9\xdbh8\xbf\x9c\xf3\xb7_\x95\x0b\xb7\x01C\xc74\xdd\x04\xa27O\xaa\x8c8;,,\xb8\x87d\x05\xb9{\xc6\x148\x1b\xcc-8\x1d\xa6.9\x04\x00\x00\x80\x95\x9b\x088\x93\xfe\xb48\xc1\x8d\x04\xb8q\x03<8\x1aZ\xe77\xf7\xc6!\xb7\xcd{&7s{y\xb8\x04\x00\x00\x80l&#8\xaaq\x858\x8fN<8\xe4M.\xb8nS\xb4\xb73\x85]7\x17c\xd9\xb8\x10.\xcb\xb8\xe1\xa7e\xb6\x0b\xc5\xf78pU\xed\xb8"\xc4\xdb8\xea\x92\xdc\xb8\x85 \x1b8\xbd\xa5\xda\xb7\xad\xbb?\xb8J\xac\x135\xfdG\r\xb8\x98&\x1c\xb7\xa3[\x8e\xb7\xd8\xb3\x8b\xb6P\x16\'\xb8a\xf1^\xb7\xf7\xdej8\x17\x8f 8J\x0b\xd17\xba+o8\xa5\xf7\x81\xb8X\xe0B\xb7\xa0\x93*7\xef!\xe4\xb4\x9f\x93\x84\xb7"3\xcf6\xc5\xb6E\xb8\xa9\x8e\xdd8[5\xfc8\xd3\x99\x1f\xb9\x8c\x9e\x0e6\xb9\x82\x818P\x0608]\xb8}\xb9k{{8\x04\x00\x00\x80^\xbe\xf17\x9a#\x11\xb9d!\xb9\xb7\x03\xa7^\xb8\x03\xb5\xce7\x0b\x0e\xde8\x0f\xe8\x90\xb8\xaeNX8d1\x049\x1b\xbf\x0b9\xe5Xq9\x04\x00\x00\x80\xa09+\xb8*\xeeQ9\xec$Y\xb8T]\xc47\x89\xc538\x9f7\x967\x8d\xb2\xbd\xb7\x18\xf6L9\x04\x00\x00\x80\x06\xeaC\xb8\n\xaew\xb8\xfa*\xf07\xd2\xe5\x91\xb8\xc1\xfdI\xb8\x1aZ\r7\x86\xbe<\xb9\xc7p\x9c\xb8\xce\xef\xb1\xb7\xfe\x07\xbf8`\xe4\x11\xb9\xd1Y\xc7\xb8\xdd\x8bt9\xa6\xd4W6\xbcxC\xb9\xc4\xdb\xec6.\x0e\xc2\xb6\xa8T\xf4\xb8\t\x15R8E_:8\xe7\xd8\xd7\xb8\x7f+\x92\xb8\x91\xfeK949\x9d\xb8\x0f]\x029Ns\x0f8\xbe<\xcb8\xd6Kh\xb8\xd6\xe3\x0b80\xc0\x007\xc5\xa4\x059\xac\xac\x1b\xb8\x0f\x88\x9f9\xa7L\x009\xd7\xf8\xa18\x1a\x9f)9\xb8/R\xb9N\x15/8\x94a\x007\x0c\xc2m8A\xf9V\xb9\xb9}\xbc8\x04\x00\x00\x80\x18\x8b\xd1\xb8\xe6m\x8b\xb8H\xba=\xb7<\x18\x88\xb8\x04k\x1f\xb4\xaec\xf08\x01\x14\xa9\xb8\xd6\xa5\x978\xbap\t9q\xd5E\xb8S.\xb68\x04\x00\x00\x00I\x80\x03\xb9\xcc\xb1S9_1%8\x87G\x8a\xb5\x18 \x827\xda@\xfe\xb7\xdc\xd4\x8d\xb87Q,\xb7\x04\x00\x00\x80g\x0fL7\xd0:\x90\xb8zZ\x078V\xd0i\xb8\xf8\xbd \xb4}m:7\xde\x1d\x1e\xb8\xfeO\xa4\xb8\xe5v \xb8\xce\xbd\x989\xeb\x9f\xe9\xb8\x89^1\xb9b\xb3\x00\xb7[\xb9\x837\x1dB\x05\xb9\xc6\x14\xa88\x0e\xdb`\xb6\xb2\xdbT\xb9\x8c\xf0\x968[\x97\x8f8\xcd\xfe;60\t\xf0\xb7`Q\x1a9\xb9\x9c\r\xb9\xa9|w8UO\xe9\xb6z\x1d\xbb8\x81\x00\xe7\xb7htI\xb7S$\xb8\xb8\',*9\xfbS\x048\xb2\xe2\xbe9\xaa\x9d\xe27R\x89\xa8\xb8\xca\x86I\xb8lO\x10\xb9\xb9\xa0\xd87 YO\xb8\xd72I7\xb6`\xbf\xb8_T\xca8\x04\x00\x00\x80D\x86\x11\xb9m#\x91\xb6\xcesl\xb6\xe46z9~\xf6V8s\xc1!97\xd7\x80\xb6\xf0e+7\xdc\xf3x8\xdd\xf67\xb9\xb4\x94\xd8\xb8\x04\x00\x00\x00!\xdf\xb7\xb8v\x0e\xd9\xb7\x04p>8\xbb~\xe9\xb8\x1ck\x01\xb8\xd7\x94"\xb8\xe5\xc6\x17\xb8H\xfat\xb9\x04\x00\x00\x80&\xb7\xb68\x99\x05\xf24\xd4\x92\xcd8\x02p\xb2\xb8\xf9f\x058\xba\xfe/7\xe4\x1dB\xb7A\x9b\x92\xb8\x9a\t\xdf7Ru\x119\xd4)\xc96g\xc4>\xb9ia*\xb9+Yy813}\xb8ct\x11\xb9\xb2TQ\xb6\xb6\xcci\xb9yC\'9\x10\xc0\x80\xb8\xa5A\x13\xb7BQ\xb9\xb8:\xb0!\xb8\xac\x00\xec\xb8\xf3j\xc0\xb8`E\x81\xb8\xff\x9eC8wX\x80\xb8h\x9c\xde8mY\x19\xb8\xde\xdc\x1a9k\xae\xc54\xca\xc9[9\x19A\\\xb9\xe4z\x83\xb9\xfbD\xb7\xb8i\xbf5\xb7g\xcdE\xb8\xa6Zp6@\xc2\xa5\xb6\xe9x\x92\xb8\xf0\x91_8\x04\x00\x00\x80J\x14S\xb9\xac\x1d\xac8\x94\xba\xae7\xe7\x84\r8\x1e\xdb\x0785\xdd\xf881"\x019@\xce\x87\xb8S\x0e\xc4\xb7\xad\x1dX\xb9)\xeb\x9a\xb8\x04\x00\x00\x00\x9d\xbd\xc36@@\x1c\xb9\x9e}\xd47\xa2T\xc5\xb8\xdf8\xc2\xb7%\x15\xe5\xb7\xee\xde\x138[\xa6\x0e\xb9\x04\x00\x00\x80Ce\x9f8\x940M\xb8oI\xf08G\xe1C\xb8>\xb3\xd5\xb7\x90W\xf06*\x7f|\xb6?\xd7e\xb8\xa8\xb4\xef8I!&\xb9\xe0\x0b48\r\x12\xee\xb8dB\x01\xb9e\x9f$8\xd4\x15\x027K\x1277UK\x11\xb6\xb8\xe3\x0f\xb9\x995^7\x8f\xd0G\xb9r@\x087;\x80V\xb8x\xe2\xc7\xb8\xa8q\xdd\xb8\x80W\x14\xb9\x16<N\xb8\xc6p\xf37\x7f\xf3z\xb6el]9e\x9d\x9a\xb8\x90o\xcf7\xaa}\x86\xb7\x88\xb4N\xb6\xc3\xf1\xea\xb8\x03\xe4\xdb\xb9\x0f,\xa98\x00#\x88\xb8\x85#|\xb8Y\xad\x857\xa1\x90\x0c\xb7\x10\xdd\xeb\xb7\xd9\xd1\xca7\x04\x00\x00\x80\x9a\x02:\xb9\x00\x9e\xbb\xb7o\x13i\xb8\x82\xad\xcb7\r\xdfm7\xd1\x18D8\x0c\xef}\xb7y_?\xb8t<V\xb70f*\xb8\x82\xe9~\xb8\x04\x00\x00\x80\xc5\xe1\x048}\xfa\x1d7\x1e\xd3\xc16\xb2x\x937D\x93\x02\xb6\xedkP\xb7\xc7~\x86\xb8\xcf4o\xb8\x04\x00\x00\x80Ee\r8(\xd2\x12\xb8\xf0\x19G7a\x9d\x1f\xb7\xef\xf2\xef\xb7\x92_`6\x13s:\xb6\xee\xd2z\xb8\xcfI\x9b\xb6TJI\xb7\xa8J\x908\xfbLE\xb7\x8eoC\xb8\xc2\xa8\xcb7\xae\xec\x18\xb8\xdc\xd3.7\x17$\x8e51\x1a\xf7\xb7`\x1d\xf3\xb6-\x82O\xb8\xb9\xd9\xbf5\xe7\xa2\xf7\xb7^\xcd)\xb7t\xba\xc6\xb7\xe9S\x03\xb9\x8f\xcch\xb8v?c7\x9b\xe7:7\xccg\x989\x9e\x95\xb58X\xf0\n\xb8\xe1\xbe\xc9\xb6\xf0\x07\x0c\xb7\xdb\xa8\x11\xb8\xb9\xdd\x8a\xb9\xe0\xed-77\x89\xba\xb7\xce\xcd\xaf\xb7\xa2\xca\xfb47\xb2\xbd\xb5\xc3P\x91\xb7\xa4t\x057\x04\x00\x00\x80P\x96\xe0\xb8\xe3N\x00\xb7-\xe2\xbb\xb6\x04\xaf\x0c6Ck\x9a6T*z7cn\xf1\xb6(\xe7w\xb7\x1f\xdd[\xb8!\x9a\x1f\xb7|/(\xb8\x04\x00\x00\x80Dc\x1e6\x8d3\x8d6kz&6\x10\x95\xc78\xa9\xcc\xbf6\xf6\xbf\x84\xb6\xd3\x85\xce\xb8\xbc\xa3\xc26\x04\x00\x00\x80T\x9c67\xe4LT\xb7\xe3\x92\x1e6\xec\x84\xd97=\xa5\x07\xb7\xeaj\x915r1~\xb5\xdfs5\xb8$\x9c5\xb6\xd6\x83S\xb7}\x0f\x089\xb7N\xbe\xb6\x9aR\xbf6fC\x177$\x9d{\xb7\xc7$]6\x11\xf7\x8f6G6\x9c8<\xaa\x1d\xb6\n\x9c\x0872\x99%5x\x00!\xb7\x9fq\x1a7\xb0\xcf\n\xb7N\x89v\xb7IJ\xec\xb6:H\x936\xb3v\xef\xb6\x04\xb6\x089\xbcj\xd97\xf7\xeb\xf16\r=(\xb6\x94\x80\xc4\xb5\x8d\x16^\xb4Q\xde\x1a\xb6\x01\x18\x99\xb7\xd4l\x8e\xb6c:`\xb5N\xbe\x8a\xb4\xaf\xf5\xac\xb4\xac\x9e\xc0\xb76\xbc\xcb5\x04\x00\x00\x80\xf7\x12\xa85\\\xd5\x9c\xb5yA\xa67\xc1S\xe24\xf6\xf8r5\xa9\x8bG6|I\xb8\xb5\x85k;\xb6\xa6\xe6\x00\xb7\xfc\xcd\xfb\xb5_sy\xb6\x04\x00\x00\x80P\xe1\xa15\x1c\xf1Z5/&\xfe4/\x82\xd57\xa5\xeeA\xb4;\xa1E\xb5^Y\xd8\xb72"o5\x04\x00\x00\x80\x15v\x0b6\x15\r"\xb6\xbb\xf6\xf14\'&\x106\x10=\n6b\xff]4P\x07B\xb4\xa7#\xdb\xb7\xfb\x9f\n\xb5\xd3k^\xb6\xdf\xc6\x8f7S\x08\x80\xb5\xd5\x14\xb07\xef\x87\xe85I\xad\x04\xb60d\xba4"B\x086\xd5P\xa95(\xb3\xf0\xb4\x07\xab56]\xce\xfc3c8\xef\xb5\xc8\xb4\x00\xb5H$\xd5\xb5\xe9\xda\x1b\xb5C\xa1\xa75|\xd7`58#2\xb6\x9dU\xe2\xb7Pd\xf8\xb4/\x9e\x196p\x99\x01\xb56\xa6R\xb3\xf6\xa3\xbe\xb1\xc1\xfe\x8c2u\xb2\xc43\x8cZ%\xb4\xec\x02\t\xb3\xe0\x10!\xb2~\xfd]\xb2\xca"n3\xa9\x83l3\x04\x00\x00\x80\xabAB37\xe3\x85\xb3\xf59&\xb2\xdf^\x83233\t3\x87\xfa\xd83\xea\xefU\xb3\xf8\x92\xd9\xb3\xbds\xa5\xb2*\xcf\x94\xb3\xc5\xdc\x16\xb3\x04\x00\x00\x80\xe8\x03,3\xdd*\xfe2\r\x85\x932.\xa0\xcb2p\x9a\x07\xb0:m\xe5\xb2\xccA \xb4\x11\n\t\xb4\x04\x00\x00\x80W\xbf\xa13\xa8\x1f\xbc\xb3br\x8c2\x17\xd9H\xb3\xd8z\xa03\x87\xdb\x002\x07?\xe1\xb1\x80\xa1;\xb3\xaa\xed\xa0\xb2v\x1a\x01\xb4Z\xecr2\xbb\xa1\x14\xb3\xe4\xc2\x13\xb4\xb8\xf8\x863\xd7\xd8\x82\xb3\xba\xd2R2\x90`\x1b\xb1\xa2\x15>3\x8b\xb6\x8b\xb2@\xe4\xd23W\xbd\x921\xa4k\x8c\xb3\r[\x95\xb2-ow\xb3Sq\xac\xb2\xe5\xb4B3&\x82\x023\xf1\x18\x031}\xa1\xdb\xb1\x85k\x8b2\xd4\x80\x19\xb1\xf5s\x96\xb2\xda\xf4\xc3\xb1\xe5W1\xb0-)\x031:\xfa62\xfc\xd1\x99\xb2\xe2\xc5\xa3\xb4\xe2\xd4\x95\xb0\xa7\x81\xce\xb07\x11\xde1u\x04\xdc1\x04\x00\x00\x80\x08\xb5\xb41\x0b\x19\xf9\xb1\xd2\xa1\x9a\xb07j\xf40\xb0B\x7f1\xd0\x16\xa84\xd7\x03\xc7\xb1;\x1b\xa8\xb4p\xe9\x19\xb1\x05n\n\xb2\xf6V\x8c\xb1\x04\x00\x00\x80f\x04\xa01zpl1\xef:\t1<l=1\xd9I|\xae\x93lU\xb1Zn\xe70\x91\xfa~\xb2\x04\x00\x00\x80\xf7\xc4\xf43\x84\x00/\xb2\x90\xa6\x021\xbe\x95\xba\xb1EI\x152I\xbdo0\x16\x89Q\xb0\x90\x00\xae\xb1A>P4`2p\xb2\xb6\xfa\xe10\xbeC\x8a\xb1\xa6v\x89\xb2U\x1d\xfb1\xa9_\xf3\xb1A\x1e\xc40\x1d\x8a\x90\xaf~\xd3\xb01)m\xcb3\x91.D2\'\x81\x080J\xa0\x02\xb2%\xf0\n\xb1\xfd,\xe6\xb1\x90\xa1(\xb17 \xb51f\xcer1%\xe8s/\xb7\x97(\xb0\x07\xb2\x011\xcb\xcb\x8e\xaf|\xf5\x0b\xb1\xe0\xd9\x8c\xb4\x1b\xf4\xfe\xb2\xb7\x8d\xbc3\x9d\x85\x035\xd0 ]\xb5q\x1f\xa6\xb4\xe4dW\xb3*o\x94\xb3\xc7\x1d\xa34R%\x9e4\x04\x00\x00\x80\xd8\xe3\x814e\x0c\xb3\xb45Z_\xb3\xb4\xae\xaf3dz74\x97p%5\\E\xed\xb7\xfc\x85\x9e7\x82B\xdd\xb3\xc8r\xe8\xb4\xb3\xbfI\xb4\x04\x00\x00\x80f\tf4\x1a\xf3)4[G\xc53\x9c\'\x084\x1dX5\xb1&]\'\xb5\x84Y\xa63\x8aF7\xb5\x04\x00\x00\x80e\x82\x005\xeb\xa7\xfb\xb4\r\xbc\x993k\x1d\x86\xb4\xb3\x9d\xd64\x88\xc3\xa0\xb76\xca\n\xb3%$z\xb4a\xb4\xd0\xb3\x84\xa6,\xb5an\xa231\x18\xdc7\xd7U~5\xa6\x7f\xb44\x83\xef\xae\xb4\xa3\xf7\x8c3cP\x175g3~4\x9d\x9f\x86\xb3[\x03\r5G<\xc42\xec\xc8\xbb\xb4/#_\xb4\xa9\xeb\xac\xb5\xca\xf2\xf2\xb3\xe40\x824\x92\xab\xa1\xb7DL/2O]\xf2\xb2kI\xba3\xbcGM\xb2\xfc\x8b\xcf\xb3b\xe6i\xb66M\xf1\xb6g\x0f\x9c5cg\xd7\xb5\x12D.\xb8\x19\xb4\xa0\xb3Ud$\xb5\x1d~v\xb5\xb3`\xcf\xb7XO\x836\x04\x00\x00\x80!\xbeW6\x11\xae\x04\xb6\x12\xa38\xb5\xe8\xde\x915\xf5W\x186\x8b\xed\xf06\xca\xf1\xce\xb8`\xa5#8\xce\xb6\xb7\xb5<\xab\x1d\xb7\x94\x8c\xcc\xb6\x04\x00\x00\x80\xd7\xca\xb06\xb2/c4k\xcd\xa35\xe6\x19\xe25\xd2\xbc\r\xb3K]5\xb8.\x1f\x8a5C-\x18\xb7\x04\x00\x00\x80\xb9\x99\xb36W\xf9\'9Ax;\xb7~\xb7^\xb6\xe2\xf6\xc7\xb8|\xc0\n\xb89\x11x8\xf4\xb0O\xb6\xc9\x0e\xa1\xb5\xb8\xa0\x1f9\x91\x84G6\xb6\xea\x0e8;P\x9a\xb7\xb2V\x93\xb8\xd4\xacb5\x8a\xc6j5G\x0e\xa569\xf7\xa86\xc7\xaf\xe75,\xd9\xc36\xa3\xe0\xee6\x0b\t\x9c\xb6\x03\xd8\x9c\xb7m\x90\xfa\xb6\xf2P\xc9\xb5\x16\xd4W62\xbe\x81\xb8\xac\xb3\xe8\xb6\xdb<\xc9\xb4:\x7f:6Ar*\xb4\xadD{\xb5$\x05\x06\xb8\xe0\x01i\xb8\xf9\xb3\x85\xb6\x16\xe4.7\xefq\x9e\xb8ZW\xd48Z\xc8\x16\xb7\x9c*3\xb6\x10)\x08\xb9$r\xdc7\x04\x00\x00\x80\xb6\xab\x1c7E}E\xb73\x1c\x94\xb6}:\xcc6aV*7\xf5\xdd\x118\x88\t&\xb9\xe6<w8\xc4i\xcd\xb6\xb6<\x8c\xb8TY\x9a7\x04\x00\x00\x80\xd3WG8\xdb\'|8\xaf\xe9\xb06\xbdP\xfc6\xf3\xc5\x9f4C\x04\x0f\xb9\xd8\xd3\xd75\x8e\xc2%\xb8\x04\x00\x00\x80h\x93%8l\x93\x0c:|U(\xb9e|x\xb7IE0\xb9\x94&\xd9\xb7\x81\xd6\x129\x17\xe6\x08\xb8~\xc6"\xb7\xb5\xaf\xe99!\x98\xbb7\xcao\xda\xb7\x1e\x02\xfd\xb8>\xa60\xb9&\x1c\xcf7\xc3\xea \xb7\x8cZ\xec6\xb8\x9687xS6\xb6\x03/\xf6\xb6\\\x8e!8\x87Q\xae\xb7z\xc9e\xb8`]@\xb88\x0f\xe1\xb65bo7\xa8\xa5\x95\xb8/\xdf_\xb8\xd9\x14\n\xb7\x97R\x007\xed\x1c>\xb5:\x88c86\xd6\x9a\xb8\xeb\x9b\x1d8A\xedM9\x07\xeb\x199\xe8>\x83\xb8e\x0c\xcf7z\x15\xd0\xb7\xc3\xda\x0b8=pl\xb9\x16v\x818\x04\x00\x00\x80\xecZ\x8e8\x13yE8\x9d\xab\xd6\xb7{\x8f\x817\x893\xe47\xb1\xca\xc68\xc9\xfe4\xb9\x87\xc1\\8\xa9[\xf7\xb6\xa0\xe3Q8\xbf\x8b\x049\x04\x00\x00\x80\xee\xb9r8\xb5\'_9J\xa3\'\xb8\x96?Y8nc\x908\xfc\x1aQ\xb9S\xf7\xd75\xd9\xda\x9b\xb8\x04\x00\x00\x00S\xbf\xbf82R\x0b:\x9f%(\xb9\xe0_B\xb8\xda>"\xb9\xacG\xf06~\xe05\xb6\x02x\x0c\xb9\xdc\xc4\x86\xb8\xa8\xbc\x08:\xba\xa9\x08\xb9\xc2\xd9=9\xa4\x99^\xb9\x0b\x00\x10\xb9 \xf9m8\x83\xd4\x02\xb9\xef/\x1e\xb8w\xcf\xd9\xb88M\xf77\x0c\xc3w\xb7\xab\t\x118\x8dX\xa9\xb7HF\xfb\xb8\xc2E\x068#RI8\x97\x7f98\xf3\xf8\xe3\xb6\xc8"\xbb7{\xd4U\xb8Y\xf4\xb17\xb0!\xb08u\x85x9x\'\xb6\xb8\xc8\x1aV8\xc6\x98\xd29\xee\x97\x859\x0b\x1c\xc19\xb6J\x14\xb8\x99\x16\x8d5\x11\xecx8\xf1\xeaD\xb9o\xc6 \xb8\x04\x00\x00\x80\xc1\t\x8b8`G\xe79\x90\x93\xe7\xb7\x177\xbe7\xa7@Z8G\x05R9\xcbeA9#\xbf\xc68O\x80\xb38\xc3\x99-9\x14)\xc88\x04\x00\x00\x80`\x88F8\xfe-\n\xb9|\xd0\xfc\xb7\x83\x0b&9\x96}\x089m>)\xb8\x10,\x99\xb8P\x1a\xf48\x04\x00\x00\x00@\xe6\x03\xb7\x82,\xe09\x05\xdd\xd5\xb8\xb0j~\xb8\xef\xae\xc2\xb8\xbfJ\x056\x80 \x8f\xb9~\x88\xf4\xb8\xe2\x8a\x879)\xfa\x999g\xe5N\xb8\x96\x80\x898|\xb0\xcc\xb6\x87H\xaf\xb8kh\xa6\xb7x_&\xb9M[\xa9\xb8w\xceG\xb9G"\x8d\xb8\xbf\xd8\xac8\\\xc9\xbe\xb8\x8d\xae\xbf\xb8\t\xa849\xec2\xd58B\xe9\xc3\xb7\xbeZ\x868\xa4A\xf38\xdbK{8_\xa0\x0b\xb8\x06\xa3\xc4\xb7\x14h\x0b9\xb5/S9\'\x95\xa16\x88e\xb78d\x18\xeb96\xa4\x969\xa2l\xce9anA8\xb4\x8f\xcb8\n\n\x88\xb83\xa3\x08\xb9\xa5\x16&\xb9\x04\x00\x00\x80\xadP;\xb8{aN9\x1c\x84\xaa\xb7\x17)X\xb8\xe1\x95>8Z5\xd883\xe9\xba8@3R9\xde\xdc\xc38Yo\x939$\xb5\xed8\x04\x00\x00\x00Qc\xb7\xb8\xae,m6R\x15\x1f8\xdej\xfd8f7v8V\xcd\x889\x1b\xe4\x02\xb9\xf9D\xaf9\x04\x00\x00\x00\xa7\xef\xf3\xb8%\t\xa09\xf0WY6\x12\xa2*8[Z=\xb7\x81\xc7\x1482\\\xd2\xb9\x00\x07[\xb8\\\xb4"9\x1dY\xb49\x1a\xe3<6c\t\xc38}\xbf\xb79\x94\x8a\x91\xb8\x87\xaeN9Sh(8\x87\xbf\xa5\xb8;\x81\xd3\xb8\re\x1b\xb8Z(89oL\xeb\xb7\x07aE\xb8\x91\x10\xa29`\xe5\x919h\xfe\xae7r\x8c\x80\xb7N\t\xba8\x8f\xb9\x078dV\xc9\xb6\xb6#F\xb9\xf2\x7f\xac8\xe3\x95\xaa8\xe7Y\xf6\xb8s\xfe\x89\xb8\xc8z\x05:\xd5-H8\xce\xb9\xec9E\x0bY8&\x07\xd77\x914b\xb9\xf2\x87\x86\xb8\xec\x86\xe27\x04\x00\x00\x80\x83Y\xb9\xb8"2Q9\xa7\xd6\xff7\xb8\xe8\xe58j\x91>8\xc00\x17\xb9-Ns9\x15h\xad\xb7\xd3wA\xb7R\x13\xf69\xd6*\xab\xb8\x04\x00\x00\x00\xb8\xc2\xa2\xb7\x19m\x1a\xb9VX\x8e8eV\xef\xb88Cw\xb7\xc8z6\xb7\x88\xf1\xb0\xb8\xc4Y\xe7\xb9\x04\x00\x00\x00AT\x009\xc8\x1a\xf08\x85\xbd\xed8\x8eK\xf88\xb0dt8 *\xa08\xe3\xcd\xce\xb9E\xe2*8\x0e\x95O9\x0bGL92\xd4\xd4\xb8\xf6y\xeb8\x8bP\x88\xb9\xbd^\xb2\xb8y\xbf\xab9y\xeb\x1d9\x18\x97^\xb7*.\x9f\xb8\xbf\xb2\xc7\xb8V4\xcd\xb7\x16\x8b\xcb6@\xe5\x808v \x189\xf8\x08\x8b9p[`8,\xbd\x9c\xb8-\xb4\t9\x94\xa1\x02\xb8\xe6$\x149?\x8f\x0f\xb96Y\xa27g\xb8B7?\xed\n\xb8\xa3\xce$\xb9V\xcbz9]S;\xb7\x0f\x96\xc19\xca.@8\xb8\xf1\x81\xb8\x86\xf7\x19\xb9\xdf\x81K9\x85\xd4N6\x04\x00\x00\x00\x9d%\x89\xb8\r\xa7\x959l\xfc\x9b8\x07\x91\xe38\x9f\x80\xb88\x9f\t\xc18\x92\x0c\x8d9\xce1D89S_\xb8Wl\xbd8\x8f\x8c\x1c\xb9\x04\x00\x00\x00\xc5\xbf\xf47\r\xd8~\xb8F\xdd\x908lj\xc7\xb8\x08G\xa88\xbf\xffg\xb9G_D7\r\x8a\xa0\xb9\x04\x00\x00\x00O\x8f\xc87\xb7H/9\xb3\xd2\x039n\x9f#9X\x19\xa56_\n78\r\xd5~\xb8\xffl\x169\xb8\xf0n9\xc6\xfb\x9a\xb8\xba4.8\xb5\x86>\xb9jk\xc9\xb8\x1b\xda\x85\xb7\x85\xd3a9\xa1w\xa7\xb8_\x9f\x877\x85\xd3R\xb8/\x9fw9\xed\xdb\x1b\xb9\x06%\xce7m\x0f\xb67\xd2W\xa6\xb8\xf3\xeei\xb78=\xa1\xb6\xc9\xe8;\xb8\x86\x06n8V\x8ev\xb81\x05\x129I\x16\xd1\xb8Pb\x878 \xea\x8e8\xb7\xa3;9@\x04\xc5\xb8\x12n\xe1\xb8\x18\xecE8\xc6\x1eL9\tI\xd77[\x1aq\xb8B\xc5\x0e\xb9r\xac\x7f9\x99V\xca\xb8\x04\x00\x00\x80\xfcs\x14\xb9\xfd8\xca9\xd2\xa6]8s\x0c\xfc8L\x8d\x8e8\x07I\x9c9c6\xfa9<\xaf\xce7\xf8@\xe0\xb7\xba\xfem\xb9\xf6\xa6\t\xb9\x04\x00\x00\x00\xaa+\x868\xe71\n\xba\xcc \x0c9BRw\xb8\xa4\x1c\x02\xb9\xd23/\xb9\xa71\x9e8\x8az\xa1\xb9\x04\x00\x00\x80e\xc1\r9*\x96.9\xb1\xfd\xbb8V\xd6\xec8\xdc\x0e\xde\xb7\x8e\x91@7\xbcL\x139(\x84\xc18)\x83\xe89\x8d7\xc6\xb81\x07\x029\t\xc69\xb9\x94\xbc\x1a\xb9f\xacQ\xb6\x1bi\xe88p\x8fo8\x83\xe2\xa37\x00\xb7\xa7\xb7\x0f\xb1x7S\x8fH\xb9\xec\xbb\x198;jc9jF\xad\xb9k\xfb\x16\xb929q\xb9\xdc\x16\x83\xb8\xa7\x9dV8@\x86i\xb7\xb4AW9d)#\xb9SC!9\xed\xec\xca\xb6,\xc7d8\xb1\x8a\xcf\xb8y_H\xb8\xc9\xecR9\'\xb4)8\xb0&\x91\xb8Fh\x0f\xb7\x18"\xa9\xb8\xe1\xa1\x1b8\xebq\xd48\x04\x00\x00\x80;\xe3\x07\xb8\x04\x81\x068*\x8a\xd866=x8\xd5\xce\x008\xb4\xbb>9>O\xe08 +&\xb8\xe7\xfd\xb3\xb8\xf5\x95\xcb\xb8+\xb0\x13\xb8\x04\x00\x00\x80\x94\x1b\xc078Y\x04\xb99\xc3\xb27\x0e}j\xb8\xcc\xc8\xe5\xb8\rq\x0b89$0\xb8\xab-\x15\xb8\x04\x00\x00\x80\xae\xe6u8\xff\xe7\x18\xb8\\\xc7\x82\xb7\xbb\xe3\x9c7\xc36\x06\xb8Q\xbf\x1c\xb7\n\xbd\t8\xc3\xc0\r\xb864\n9u\xe9\x078\x9d,\xaf7\xc4\x0ed\xb6|\xbf\xc28\x1f\x05\xf87\x1c\x83<8\xaf\x19\x887\xd4Z$7\xf0\xf558&Y\xb7\xb7\xc9\xbdP\xb9\xb7\xa6\xd15\xf4\x8e\xbe8\xa6\xa0\xbf\xb7q\xaf\x8b\xb8V\xda\x03\xb9J\t\x19\xb9\xda8W6\x1e\xe5\xf88\x88u\xa68* \xc08\x8ao\\\xb8\xf5\xdc\xc7\xb7\xc2\xdf\xa4\xb7\xf1\xe0@\xb7,7.\xb99h\x838\x01\x04\x95\xb8\xb2\xdeb\xb8\xa9\xb8\x84\xb6\xc0\xe8\xcb7$pN\xb6\x7f\xe6\xac7\x04\x00\x00\x80f}\x13\xb8\xff\x97u\xb8\x1b^O8PP\xd46>\xef\x9c\xb5\xf8\xc4l8m\x90\xd4\xb7\xb8"X\xb8K_\x97\xb8\x91\x02\xf1\xb7v\xeag\xb8\x04\x00\x00\x80\xde\x08U7\xd8\xa5?7VP\xf56K\xab\x14\xb6v^`6\xed\xadf8\x90\xec\x04\xb9\xednk7\x04\x00\x00\x80\xb9\xf7\x158\x04Q\x1d\xb8Eg2\xb7\x96\xe2a\xb8\xe9\xe3\x887\xb4\xeaO6\x8b\x81\xa15\x9fU\xff\xb8|\x87A\xb7:\xe2\x90\xb7wBu8L\xc0\x067\xe4\xab\x8b\xb7S\x84\xc47[\xfe\x12\xb7\xdd\xb9\xb16\x14\xf0\x137\xbc[\n8\x82%\x165\x8a\x16j7c\xa5\x13\xb6\xee\xce\xff\xb7,\xe7:\xb7\x85\xb8\xcd\xb70\xb2\x99\xb7\x03y\x05\xb9\xafV\xf66\xf9\x12\xe57\x9e?\x8d8-\xd2!8\xdf2\x06\xb8\x7f\x96\xb8\xb7{\xeb\x9b\xb6\xdb\xdf\xb76\x18\xb0\x7f\xb7K\n\xb7\xb6 \x021\xb7\x96qB\xb6\xa1Zn\xb5\xada\x9b7\x8e7\xd2\xb6\xdd\xf7\x916\x04\x00\x00\x80\x9d\xbc\x8f6dt\x91\xb6\x7f\xe3\xb47\xc6h\xc25\xc2\x10\xab\xb7\x02\xdd\xd76@L\x9e\xb6R\xfd \xb7]o\x84\xb7\xae\xef\xef\xb6&\xf2\xbd\xb7\x04\x00\x00\x80{A\x9a6\xb6\x10<68p\xda5lfD\xb5=\n\xd4\xb4Sc\x0b\xb6NT\xc2\xb6\xce\xd0\x9c\xb7\x04\x00\x00\x80_\xe9\xfa6\xa12\x0b\xb7\xf6\xd8\xcf5\xee+\x9b\xb7\x9c|\xed6\xb5\xb0>5\x07O\n\xb5\x9f\xf7H\xb8\x86&\xee\xb5\xf1\x05\xe3\xb6\xb6D\xb67\x04\xf4[\xb6R\xaf\xa8\xb6\xf9\xbc\xc76\x8d\xf3\xe67\xb5\x9d\x9d5\xe6\x15y6\xca\xb5\x8c67\xe4B6\xe2\x0b\x1c7}-\xdc4\x03V\x11\xb7\xf0\xed\x9e\xb5\xff\x14\xb7\xb6m\x1a\x06\xb67\x0e\x906\xdd8\x10\xb4(\xd7\x94\xb3L\xe3\x0f4\x9a\xed\xfe\xb6\xb6,\r\xb7M\xa5\xde\xb5O8\x8c\xb4\xa3H\x934D\xc8\xb43\xc2\xee\x025\x8aE[\xb5\xadg6\xb4\xd4mV\xb3\xe7\xc4\x93\xb3\x95\xa3\x9e4\xedo\x9d4\x04\x00\x00\x80*\'\x7f4\x06?\xb2\xb4\xa6L]\xb35\xe5\xae3\xe6E:4\xd5\xed\\5\x9bh\x8e\xb4\x15\xd4\x10\xb5\xb9D\xdc\xb3\x90\x1c\xc6\xb4M\xd8H\xb4\x04\x00\x00\x80\x8a\x01e4,0)4\x13e\xc43r\x8b\x074\xfa\xeb?\xb2\x91A\x15\xb45\'\xc2\xb3\xee\x8e6\xb5\x04\x00\x00\x80\xb5L\xf24\x8as\xfa\xb4\xff\xfb\xba3\x0c`\x14\xb5\x18\xa6\xd54\xb2\x8c+3\xb9\xef\x15\xb3\'\xf6\x0f\xb5\xfd>\xd6\xb3}\xe0+\xb5\xf3\xb1\xa13\x0e\xe0E\xb4u\xbaD\xb5u\xb0\xb34\x06\'\xae\xb4\xf2U\x8c3\x0f\xdbN\xb2\xd6\x0f}4z\x00\xba\xb3\x9da\x0c5S[\xc32\x8a\xf1\xba\xb4\xcd\xd6\xc6\xb3\xc8\xb4\xa4\xb4jU\xf1\xb3\x90\x9b\x814V\xbf-4A\x88.2\x00\x11\x944\x91\x9c\xb93\x8ab]\xb2\xc5L\xc8\xb3\x99\xbc$\xb3\xcc\x16\x95\xb1O\x87\\2W\xd3\x993KP\x01\xb4\x0f\x93Z\xb3\x1a9\xe25\x17\x9b-\xb2\x07\xb0:3\xdb\xf683\x04\x00\x00\x80\xba\xea\x173[iQ\xb3\x05\xff\x01\xb2\x8ayM2\xac\x97\xd62<f\xe13\xd9N\'\xb3x\xdd\xe1\xb3\x00d\x81\xb2\x17\xc0h\xb3-\xf6\xeb\xb2\x04\x00\x00\x80\xf6\x85\x063\x10\xc5\xc62\xc4\xbbf2w>\x9f2\xc3\x18\xd4\xaf\xe5k\xb3\xb25\x8fB2\x08[\xd6\xb3\x04\x00\x00\x80\xca4\xb63\xe7\x1e\x93\xb3\xba\xab[2\xb7\xdb\x1c\xb3\xfc\\\xdb\xb5X\x8b\xc91\xf4&\xb0\xb1\xb9G\x12\xb3\xad\xb4{\xb2\xbe\xed\xc9\xb3\xf8\xf9=2\x04y\xe8\xb2+ \xe7\xb3f\x1bS3\xe1\x99L\xb3g\xdf$2\xf1\x05\xf3\xb0|\xa7\x143C<\x97\xb1\x1e\xed\xa43i\x83e1/\xa1[\xb3\xeb\x9ai\xb2\x14\x81A\xb3\x15l\xe5\xb5\xd6D\x183E\x06~\xb3E\x0c\xcd0\x97\xbb\x8d\xb1&\xe9\xe45\x84\x17\xf0\xb0BRk\xb2\'h\x8f\xb5\t\xc9\x01\xb4\x96\xf9\xbf4\x90\xe8\x056\x02$a\xb6\x10\x8d:\xb5sM[\xb4\xad \x97\xb4\xfb\x83\xa25\xf0\x03\xa15\x04\x00\x00\x808?\x845\x02L\xb6\xb5:Tb\xb4\xcb\xde\xb24\xb0\xce:5>\xb7\x136 \x18\x14\xb8\x98\xc7\x0c8QF\xe1\xb4\x86\xdf\x13\xb6\xe0hM\xb5\x04\x00\x00\x80\xf85j5\x91\x08-5\xc1\xdb\xc84\x14\xa0\n5c\xa18\xb2\xdd\xed\xd8\xb6G^\xa94\xe6\x99:\xb6\x04\x00\x00\x80\xb73\xdc5\xe1\xde\t\xb6\xcc\xd2\xa04j\x8c\x88\xb5\xb2\x82\xda5\xa4\xdf\x96\xb8SG\xf4\xb5\x1a\xae~\xb5\x8a\x1d\xdb\xb4\x84\xc8/\xb6\xed`\xa54\xca\x84\xa78\xb1\x19%\xb6\xf3\xc5\xb75\x01\x98\xbb\xb5t\x86\x8f4\xbc\x8eS\xb3\x1fh\x815\xb0:\xbe\xb4d\x92\x0f6\xd5\xcb\xc73;1\xbf\xb5\xa92\x16\xb6g;?\xb6\x8f\xd1\xf6\xb4\xa9\x8d\x845\xd6\xfc\xa1\xb8\x84\x7f23B\xc3\xf6\xb3\xa5\xce\xbd4R\x01Q\xb3#\xd6\xd0\xb4\xf6\xd5\xf4\xb6[@\xb8\xb6\xb3\\\x895\xa6\xe6A\xb7<\xb0_\xb7\x92\x11U\xb6\xa0\xf7\xb1\xb5G\xe5.7\x89%\x7f\xb8sq\t7\x04\x00\x00\x80\xac\xa9\xd36\xe1\x85\x178\xc43\xc1\xb5\x99+\x1a7_w\x9f6Z\x8b\xe27\xc7\xdb\xe0\xb8\xdd\xe4:9\xb5M@\xb6\xaa\xba\x82\xb7\xeeP\x1d\xb7\x04\x00\x00\x80\xe4\x80\x1d7\x8e\x9d \xb7\x92\xb1(6"\xacl6\x8b\x19\x906\xac=\x9d\xb8M\x8b\x106J\x9a\x9b\xb7\x04\x00\x00\x808"C7|;\xda8o\x1d\xb0\xb7j!\xe9\xb6\x9f\xef"\xb7\x1c\r\xad\xb8\xc5\'\xf47\xf2q\xd9\xb6\x0e\xef$\xb5\xba\x97\xbb7F-\r64\xa2\xbc8JO\xe8\xb7b\xf1\x018\x0f\x91\x0e86\xf4\xf55\xc3\x05x\xb7m}\x017\x16T\xae4\x04v\xc36R7\x077\x11W"\xb7\xfd\xef\x1b\xb8\x9f\xd7K\xb7\x0f\x83I\xb6,\x90\xe16\xbcj%\xb9\xbeb\xb2\xb60\x19\x8b\xb5D\x8fi68\xc4\xb1\xb4\xaes:6\x00\x14\x07\xb8\x10\x91\xeb\xb7\xa5\x10 9\x02H\x95\xb71\x94\x9f\xb8m\x92}8\xf9J\xc3\xb6\x9f&\xc58\xea\n\xc7\xb8)\x03y8\x04\x00\x00\x80\xf9V/8\xc0\xbc\xf87y\xf0\xa6\xb6\xb6gJ8Z4\x977\x12\x8b\xc28\x88\x8bY\xb9d\x91R9\x0e\x071\xb7\\Se\xb7_\x08\xe18\x04\x00\x00\x80\xbc\xd2:8\x8f6\x128\xa5\x88\x8d6\x80\x85`7\xd7\x13\xbe7\xef_f\xb9z(\x178A\xedu\xb8\x04\x00\x00\x80U\x0c\xcf8\x9a\x93\xbd9F\xf6w\xb96\x0c\xdc\xb7\xe5f\xdb7\x88\x92\xee\xb8\xed\xcbQ9&dm\xb8t\x9fM\xb7\xd0]\x0b9\xe9Q$\xb6\x94O88\x8e\x95\xb2\xb8\xda6\x8e8\xaa\xaa\xb28\x95|\r7\xf6\xa4M\xb8\xdaN\x068\xc1\x82\x8b5\xd2\xd9\xb66\xff\xec$8\xa2I\x0b\xb8\xd9cH\xb9+q\xd1\xb7\x93\xf7B\xb7?\x96\xd67{\xfd_\xb9\x8f\x88\xd1\xb7\'\xce\x95\xb7\xda\x91O\xb8\x928\xb4\xb7dj\xe56\xff5\x1e\xb9l\xf0\x168\x8f%\xe19 p\x838\x92{\x168`\x97\xc85\x1cZ\xc6\xb7\xf6\xda\xdc8\xfb\x1b;\xb9\xd0\xddj8\x04\x00\x00\x80]\x1e\x159\xb6\xea\x187;}\xca\xb7\xe6\xea`8\x8e\x06=8\xb6d\x1c9c\xed\xc8\xb9\xcaT*9>_J7\x10\xfd39\x1e+\x928\x04\x00\x00\x80\x81\x9f\xca8\x0c\xddI9\x7f\xb0\x80\xb8\xc5Mt8@?\xbe8`\x93\xcd\xb7Fi\xe68h/\xe5\xb8\x04\x00\x00\x00\x00*L\xb8\xd2\xd6\x809`\xc3n\xb9;8\x9b\xb8\xf9\x86\x898yd\x8a\xb8\xf5/\xce\xb84\xa7\n\xb9\xe9\xc2\x01\xb9/d\xc7\xb8\xc1\xd7a\xb95\x15\x0c9\x16\xcb$\xb9\x978\xb48=\x83O9\\\x00+\xb8\x13N\x83\xb8_\xa1\xc48\xac;\xe9\xb8\x88\xe8H8\x8cz\x8c7\x93\x8e\xb87\xc8\x1d\xe1\xb8u\xea\x12\xb8\x89\xe9\x15\xb8\xfdw\xbf8\xc6\x19\xf7\xb8\x06#\xd0\xb6\xd2\x80\xc5\xb8\x96\xca\x11\xb9\x85:h7\x86\x12\xde\xb7\xa9\x11\xb1\xb8\x8e\x04\xf28\r#\x9c9?$\\9a\xad\x00:\t\xf8\xd2\xb7\x9d\xe1.\xb8\xd0\xd06\xb8\x01\xe8\xa98\xe7\xa7\xaa\xb9\x04\x00\x00\x80<\xe7\xb97l\xa2G9\x81w9\xb7\x83\xb9\x8b8\x02\xf9\xa68Q\x9e\x968\xd4x\t\xb9\xf2*\xa89!i\x059\xa4\xf4\x87\xb8\x02\xbaM\xb8\x04\x00\x00\x00\'\xe2\x82\xb7p\xb2Q\xb8\x14\x1a=7\xca\x0c\xa28#7\xf37YXT9-\xef\x019\x88\xb9\xa09\x04\x00\x00\x00z6\x84\xb9\x8fi\x8e8p*\x9e\xb8\x1e3\xcf8\xa4\xd2>9\x1a@>76y\x069\x9b\xfe\x9a8\xe4RQ8\t\x1d\x88\xb9\xa2O.8k\xb8\x93\xb8\xa7Q\xfc9\x7f\xaf\xbc8\xd0\xfb@9#\xca/\xb7\xfe\x9c\r\xb8/u\x9b8\xd8\x1c\x88\xb9\xbf\xd3\x189\xc8|\xc1\xb8\xc9[\xdb8\xf7\xbb\xae9\x84k\x80\xb6\x99;\x17\xb8\x7f\x02\xff8F\xda\x1f\xb9\xcf\x06*8\xf5*\x0f\xb8\x15\xba\xc3\xb8\xeb\xe1\x029\xaf\xbcB\xb98\xda37\x04\xab08\xca\x06\xff8\xe0; \xb5\xd8\xaee9\x8c`\xb07\x9b:\xe27\x06\xc4,\xb9k\xe5\n9\xe6\xd0_\xb9\x04\x00\x00\x80@\xdf\x058\xc1\xff#9\xe2W\x907e\x04\x1297\xdb\n8f\xb8t\xb9\x9b\xd8\xe5\xb8\xd8*\x949r\n\x1d\xb86\xd5\xab9\xd5\xe7\r\xb9\x04\x00\x00\x00\xe8=\xeb\xb8\x019\xe8\xb8\xad\xaa\x8c8W\xa1\xe8\xb8\xea\xb9l\xb8\xe5\xc3\x05\xb9\xf3\xb4\xed\xb7\x04\x9e\x90\xb9\x04\x00\x00\x00q\x85\xee\xb7\x0c\x06\x9d5\x18\xbc!\xb9]\x81\x1a8\xac|091\x0e\x187p\x9f\x129t\xef\x1b9\x1e\xc3i8]r\x0297\xf738\x0b\xdd\r8[\xedc\xb9a\xb8\x169\xd0?\xe88^\xb7a8\xfb.\xd67+\x0fZ8\xcf\xd8\x8c\xb9`\x8b7\xb8}\x9d\xe87\x83\xb8\xeb8\x1c\x83w\xb7\x9d\xf9)9\xc7\xe7\xf27\x1a4\x898\x8e\x98I\xb9\t\x95 7\xc5\xcb"7\x9a>_8"\x80\xb28\xf9\xb5D\xb9[d\xad\xb7\xc2bw\xb7\xed\xb7\x1b8\x14\x88\xc3\xb8<\xc2\xc99qo{\xb8]U\xe8\xb8k\xc3U\xb8\xd37H9\xd8\xa3o\xb8\x04\x00\x00\x00B/\xc06u\x96t9\xdd1)8\r\xa4+8\x84\xd5H6&<A\xb9\x1aWT9-\x93{8\xc9\xda\x86\xb8\xc5*\xc99\r\x82\x8c\xb9\x04\x00\x00\x80\xb0\xba\xad7P:\x9d\xb95\xf5\xb2\xb7\xfe\x0e\x07\xb9\x80Ap8o\x1aI\xb9)\xcb\xe14(\xab\x82\xb9\x04\x00\x00\x00\xbad\x0e8U\xe2\x8e\xb8\xe9\xd5[\xb9E\xbb\xdd8c\xc319r\xaf\x187\x06_K\xb8\x04\xcc\x828\x16\xd519{\xdf"9\xb9\xef\x8f\xb7\xef\xf1v9\xf8\x11,\xb9\x15\xb9\x0b9a\xdb\x1f8[\xfdX8D/\xb17\x81\t>\xb8\x08\r\x86\xb9\x9e\xf5u\xb9\xb0\x10\xc97\xf9\xe3L8\x19"G\xb6\xb7\xa1\x8f9U\xce\xb58&\xd5a7y\xab\t\xb9\x1c\x96\x0c7\xc9x\xf18\xccA\x1f9\x91t\xa0\xb8z;\xa9\xb8\xb9F29\x9b\x0bq8\xa3\xad\x129K\xc0\xfd8\x8d\xee\xe69uL!\xb8\xafl\x80\xb8\x07\xb8\xd2\xb8 \x0f\xaf9\x1a\x07\x98\xb9\x04\x00\x00\x00e\x1e\x13\xb9=\xf6\xe49\x90\x95%\xb84\x8d\xb38\x87\xda\x1c8\xbe\x83B\xb9\x1a\xf3\xbb9\xe5\x95\x94\xb7\xf3B\x91\xb8\xb0\x02\x969\xc0\x1e\x1e\xb9\x04\x00\x00\x80\x93\r\xaa8/\xf9\xa4\xb8\xceD\x977\xc7\x07\xfd8\xe0\x1c\xeb8\x16\x1d\x19\xb8\xe2\x13\x0e\xb9\x927\x86\xb9\x04\x00\x00\x00\x9aA\xed\xb8\x93\xe6\xb6\xb8AQ2\xb9\xb1\x88\x866\t{\x19\xb9\xb6/\x0b8r 0\xb9\xa4\xbcI7a\x04v9&\r\xe78\xeb\x97\x1d87\xf3\x03\xb9\x9e1D\xb9=h\xa57\xea$\xd68\x9b\xccn\xb8\xf3\xc9\x0c7\xdf\xf8\x119\x10o\xa4\xb9\xde\xcfx\xb9\xd1Y\xe87\xaa\xa5&8T\xa5\xd5\xb8\x80w\xbc\xb8/\xad\x157\xe4\xe6z8\xdb\xc87\xb8\x8b\x19k7\xf1\xc6\xf28\x84\xe4?8t\x13P8>(\x048V\x0e89\x9d\x16\xa67\xd3\\\xd09\x91\xb9\xe97\xac\x83^9\x0e\x08\x039\xdfKx\xb8\xe1\xcf\xe6\xb8\xc5\x87\xa69\xed\xaf\x04\xb9\x04\x00\x00\x80\xec\x80\x8d8.\x1e\x909K\xc9E83\xd4L8T\xad\x808\xe8\xff\xb38i\x1a\xf38ctu9\xab}\x89\xb6M#\x90\xb9\x1d\xaa\x05\xb9\x04\x00\x00\x00\n"\xc38LB\x0b\xb8H\xda\xe48\xca\xae\xea8\xab \xfd\xb8\x8d\x8dO8\xf47\x9b\xb6K\xfc\x0b\xb9\x04\x00\x00\x00u\xe1j\xb9\xa1\xc0\x809\x89c\x9c\xb8\xe2)\xa6\xb7\xb9z\x967\xb8\x89\x868n\x16_9\xa4\xf8\x9c8r\xbe\x109L\x7f\x7f9\xf7f\x149G\xea\xf0\xb8\xec\xc8Z\xb7i\xeeQ\xb6J\xde\xef8\xf3)\x948.\xf3\xd07VZ\xa26h\xaa\xd7\xb8\x16\x8c/\xb9\xd1>K\xb7T9\x1a9\x9c\xce"\xb9\x9a}\xff\xb8\xd9\x03%\xb9.t\xaa8\x02Y\x83\xb8\xe1\x11\xaa\xb7\x93\x85\x9c7\x02B\xdd\xb8B\xea\xfa8\xf1\xe1!\xb9*\xe6N8\xbeEZ\xb8R\xb7\xb89\xa9\xc8?9\xea?\xf07\x84\x17\xfa7p\x86\x8f\xb8N\xea)\xb95\xcd\x149\xaeG\x9d\xb6\x04\x00\x00\x80=\xe9\x7f8\n\xf12\xb8\x0b\xady8\xe7\xba\xd67$y\x048\xfdS$9\x02\xe4\x88\xb88\xcb\x0f9\x05\x10R\xb6N\x93\xff\xb8\xc2\xfa\xef\xb5\x04\x00\x00\x80\x8av\x948\xad\xcb\xb88\x07\x17q8\x07\x8bi8\x0f\x96\xdf\xb8;\xbf\xbd9\xb0\xf3\x01\xb9\xa7\x0b\x02:\x04\x00\x00\x80-\x8c%\xb9\xcf\xba\x859g1\x82\xb8>\xacX8v\x19\x128\xfdCE\xb7=2\xee\xb7@\x1c\x119\x7f\x87\x97\xb7iC\xf79\x8a\x84\x807\xa0}c\xb8\x1c\xdf#:*\x16N8P\xcfS8r\xbe\x078@\x11g8\xa8id6\xd5)\xe8\xb7B\xd3j\xb9\x14\x9f\xb5\xb8\xf1us9s\x12\x829C\x87\x94\xb8B\xacp\xb8\x88\xd8\xae\xb8\xc9\x9f\xed\xb6V\x0e\xc38\x9e\xacI\xb7\x1d+X6R\xdd\xca\xb8h7{\xb8\x12\xc8\xd9\xb7\xd9\t\x117m\x17\\9\xadG$9;\x96 \xb9\x05\xc2$\xb90\xa1\xa5\xb6\x84\xceV\xb8_\xa1J8f\xab\xbe7\x04\x00\x00\x80}\xe1\x088\xc7{\xe3\xb8\xe4\x8a\xcd7\xcf\xb7\x1d7\x1d\x06\xf96~\x82\x1b8_X\xfa\xb7\xabj\x92\xb8\x1b\x87F\xb7\xa0\xcf-\xb8i\x9a\xf05\x04\x00\x00\x80\xaa\xde\xca7\xe7\x06|7A\xc2\xfe6\x02\xcd\x9971\xa6\xa37 \x84&9\xe8\x1f\x8b\xb9\x17\xfa\xf37\x04\x00\x00\x80\xba\xc4R8~O*\xb8\xc1E\xe7\xb7\xd2\xaf\xc7\xb8J\xd7\x0f8m\xbf\xe06<\xca \xb6e\xa1S\xb8\xa0IS\xb7.$\xd1\xb79\xff\xae7\xe8(\x9c\xb7\x05\xfb\x938\\\xa5\x9e7\xa1%F8\xc8\xd4v7x\xa8\xd47\xdf\xaa&8\xf6\xb4\xa16\xc9\xe1\xb9\xb8\xe3\xde\x9b\xb8DS\xc18\x1b\xc4\x1f\xb7.\x19\xfe\xb7\xf1;\xb0\xb6\x82\xdeJ\xb9\x1d\x8fX\xb7L\x89\xcd8\xce$i\xb6(\r1\xb7M\xcb\x89\xb8\x99AS\xb8A.\xa3\xb6(\xb6?6)\x0f\xaa7J\x89\x187\xe2\x1fC\xb7\xc20:\xb6\xe5\x89y\xb53\t\x937+\xa6\xa06\xf3jj6\x04\x00\x00\x80\x80e\x966\xe3\x81\xb1\xb7g\xe9\n6\xb0\x88\xcb5\x07\xe7\xa2\xb6\xb6\x93\x1f7K\xba\xa5\xb6\xa4\x8b(\xb75\xed\xf6\xb5\xa7\xde\xe9\xb6U\xae\xa3\xb7\x04\x00\x00\x80\xa9\xc0\x906q\xe4D69.\xe45z\xc4\x076\x8b\xe9\xa75\'A\xe25\x0e\x15\x018\xca\x1f\x1a\xb7\x04\x00\x00\x80\x00y\x047)\xbb\x11\xb7)\x9a\xd95\xb3\xeb\x12\xb8!\xa2\xf86\xa8[J5\xa6g)\xb5\xce8\xf2\xb7\x157\x8e\xb6\x08\x1d\xd05\xc1t\xbf7\xe2Ff\xb6\xd9r\x9b\xb6\xee\x1c\xd16\x8e\xd7\xe37TO\xb25\xfd\xd0q6\x16\x15\x936L\xeb\x1f6N_#7s\xe9\xda\xb3\x98\xaa\x83\xb7\x1bv\x90\xb5\x14\xab\xbf\xb6\xe6\x16\xcc5\xdd\xd5\x966"\xce\xec\xb6z\x1cK4\xb0s\x06\xb5=\xd0\x8d\xb5\xe5,P\xb7\xb6\x15\xe9\xb5\xecw\x83\xb4!\xf6\xed\xb2P\xfe\xaf3\x80\x85\xf54\xe5eN\xb5C\x05+\xb4\xbf\x0bI\xb3\xe4\x8b\x8a\xb3\x82\xfc\x944\xde\xb5\x944\x04\x00\x00\x80\xa2yr4\x10\x1f\xa7\xb4\xc1|O\xb3\xc7\xfa\xa33\x0e)\xbf\xb4\xba9\x0e5<\x85\x85\xb4N\xca\x07\xb5W\x85\xce\xb3/\xbf\xb9\xb4\x7f\xf7\x8a4\x04\x00\x00\x80\x8e\xb6V4\xf0\xa0\x1e4L#\xb83}+\xfe3a\x08\x8c\xb2\xf95\x0f\xb4?-\xaa83\x1b,\xb5\x04\x00\x00\x80\x91w\xd14\xe9\xd1\xea\xb4\x03O\xaf3\x13P3\xb5yP\xc84\xbb\xd7 3\x19\x94\x0c\xb3tzi\xb4\xd5\xdf\xc8\xb3I&!\xb5m\x9c\x973z\x869\xb4Cs8\xb5oy\xa84I\xc5\xa3\xb4\xb5\x93\x833%\xf6A\xb2}Dm4\x99d\xae\xb3\xa4\x9e\x035\xd1\xf3\xbc2\x9bF\xaf\xb4\xd2m\xba\xb3&m\x9a\xb4xE\xe2\xb3u\ts4o\x7f\x185u\xa3#2Z8\xe2\xb2\xef\x06\xae3\x1c\x9b?\xb2q\xcc\xbb\xb3,\xf3]\xb3\x12\xde\xc8\xb1 \x8f\x942\xcf?\xcf3q9.\xb4\x94\\\x10\xb3\x0f\xdf964\xe6i\xb28\x86{3\xda3y3\x04\x00\x00\x80\x82\xadL3\xf9\x11\x8d\xb3\xd9$/\xb2\x0ck\x8a2p\x8f\x103h\x9e\xe43\x06ja\xb3\n?\xe5\xb3\xfcS\xae\xb2\xd6\xca\x9c\xb3\xa4\xf4\x1e\xb3\x04\x00\x00\x80I>53\xc2\xe6\x053\x03o\x9b2\xaf\x8c\xd62\xb7\xe0\x0e\xb0\x0f\xbc\xf1\xb2\xa8\x10\x832\x95f\x10\xb4\x04\x00\x00\x80\xb4l\xaa3C7\xc6\xb35\xfb\x932\xd2US\xb3\r@5\xb63\xc5\x072bT\xed\xb1Z\x15E\xb3\x19\xac\xbe\xb2\x83\x07\x08\xb4\x91\xf4\x7f2\xf4\x9a\x1c\xb3\xa8\xb2\x1b\xb4Z6\x8e3k\xd4\x89\xb3\x15"^2_\xb6#\xb1+HH3X5\x93\xb2\x8b4\xde3\x9a\x9c\x9a1\x1c\xf4\x93\xb3C^\x9d\xb2\xaaZ\x82\xb3\xc3\x06<\xb6\xe9&M3o\xd8\xc02|!\n1\xf4\xf4\xbe\xb1\x91\xae;6\xee\xbc!\xb16\x86\x9e\xb2\x96,\x90\xb5\xc9z\x02\xb4\x86\x00\xc14\x17N$\xb7-\x96U\xb6~\x8c;\xb5\xd2y\\\xb4\xac\xef\x97\xb4\x94b\xa35}\xe0\xa15\x04\x00\x00\x80\x08\x82=\xb6\x85\r/78\x8ac\xb4\xcd\xd3\xb34\xd9\x1f<5[\xbf\x076\xeb\xf6\x91\xb5\xf7Dw7\xe2z\xe2\xb4 u\xfb\xb5;\x82N\xb5\x04\x00\x00\x80\xc8vk5\x97\xf5-5\xe3\xee\xc94\xf6]\x0b5V\xc96\xb2\xd6\xe2<\xb4NF\xaa4Q\x99;\xb6\x04\x00\x00\x80p^\xdd5\xf2\\\xc8\xb5\xd5\xe5\xb15tG\x89\xb5q\xac\xdb5\xed\x8e\xa7\xb6)!\xf2\xb6\x81\x05\x80\xb5u\xfd\xdc\xb4\x94$r\xb7xC\xa64\xc8{\x827y\x83I\xb6\xab\xc1\xb85\xd9>\x04\xb6\x0eK\x904\xdapU\xb3^\x19\x825#H\xbf\xb4\rW\x106\x89\xdd\xc83\x1e7\xc0\xb5\x9cA\x10\xb6\xd5Y\xa9\xb5\xa9#\xf8\xb4:C\x855LCX\xb7\x1bt33\x8c\x82\xfa\xb3\x87\xd8\xbe4\xa2\x1fR\xb3\xd6\xc9\xcf\xb4\x10\xfc\xfc\xb6\xa1\x11!\xb5\xfd\x08\x9e8t\xeb\xbe\xb7*\xda\xce\xb7\xa28\xa3\xb6h\xc7#\xb6.n\x848IL\xe46\x9a\x01\x0e7\x04\x00\x00\x80hQ\x0b6\xd6\x08R8\xd4\xed\xcd\xb5\xfb[\xeb7\r\xf5\xa46\x82\xe3O8\xfa6$8\x04\xcf\x828\x98\xf9c\xb6\xb4|\xc1\xb7\xddl\x93\xb6\x04\x00\x00\x80\x15\xd5\x927\x85\xe2\x886{o[6\xa9\x8ct6\xd0\x85\xf57\xec\x05J\xb7]^\x1564\xee<\xb7\x04\x00\x00\x80$\xfaq7:\xe7\xc57<\xc6\t6\x8b\xe1\xf0\xb6\x98\xcb\x837\xad\xe2\r\xb8\xbf\xd0\xe2\xb7\xdc~\xce\xb6\xd5A\\\xb4\x9fBr\xb8\xd8\x15.6R\xc8f8\x12\xeb\x1a\xb6F\xb2\'7q\x13\x1a893\xfd5\x9a\x9b*\xb6\x11\xa5\xe56\x95\xff4\xb6\x1c\x0e\x187E\x15\x987\xff\xa3/\xb7\x03\x98\x8e\xb8\x92U\x15\xb7J\x90Y\xb6Cd\xd3\xb6\xdb+\xe6\xb8\x7f\x0b\x1c\xb4\xe7\xdcZ\xb5-\x8eV\xb76\xa6\xb5\xb4\xc4\x9c\x83\xb7\x7f\xe6<\xb8\xee\xd2\xfb\xb69\xf2\xc59\xe6s\xee\xb8\xa4\x87\xca\xb8\xcd\xaf\xfe\xb7\xf0\xda&\xb7\xd1W\x958F7\xac\xb8\xbctQ7\x04\x00\x00\x80\xc1\xfc\x828\xf4\xb2r\xb8]\xbe\xff\xb6\x10|\xbf7\x86(\xba7\xb0\x99\x838xg&\xb6 \x0e\xbe\xb7^I\x9f\xb6\xaaix8zS\r9\x04\x00\x00\x80\x1e7\xf67\xcdv.8\xd1\x91\t7\xd8d\x847\xeeq\x8a8W\x0c\x038H\xe6\xb572\x9f$\xb8\x04\x00\x00\x80\x1d2N\xb8DC\xeb7\x81\x13\x08\xb8\x93\xdd\x05\xb8k\xe8\x8f8\xa6\x82\x89\xb8\x17\xf7\x029\xd6\n\xb3\xb8\xb4\x83\x01\xb7\xf3\x08\xb5\xb9\xa9\xe4\x115\xdcd\x0c8 d\x07\xb9\xe17\x8a8\x05\x04\x849Qa\x0b7\xe1R\x198v\x15\x068_BP\xb6\x87\xdeL8\x9f)\xce7\\R\r\xb8\xad8\x8a\xb9\x92\xb7_6\xe6\x17\x82\xb7\x1e4\x80\xb6\x9aQ\x97\xb9\xd2T\xd4\xb6\xa3,\x85\xb7\x0b\xb9\x82\xb9T,\r\xb8K\x08d\xb8\x1c|\x99\xb9\xe2<\x08\xb8\xdf\xb2\xb39%\xc8\x07\xb7\xd8\x1b\x169\xbf\xd4\x99\xb8>K\x89\xb7\r\x07\xee8\xe3\xd7\xb5\xb90\'\xbf\xb9\x04\x00\x00\x80)\xb8\x0c9\x87~\xa7\xb8\x08q\x9d\xb7\xdc\xe3\xc77\xdc\xe6{8\xbbRU6\x06\x86\x03\xb9i\x9a)\xb9-+\x1a7_\x08\xcb95\xc1c\xb5\x04\x00\x00\x80\xc7%\xe08\xf6<\x1a9\xee\xdat\xb8x\x8d\xc17\xb5&\xc784\xc889\xe4K`8\xfc\x80\x0e9\x04\x00\x00\x80\x12o\x1a\xb8\xa0\xd6\xd0\xb8\xaeQ\xb38\xfa\xed\xf5\xb6zc\xeb8k\x83/7j\xd2Z\xb90C\x02\xb8\xd4\x88|\xb7L\xff\x12\xba\x0cXA\xb9G\x82\x889\xb0")9\x8e\xad\xed8;\xf8x9\xac\x0e\x068Hn/8#d\xcb8\x05\x9f\x9b\xb9\x1a\\\x1a9\xa0\xe2,\xb81%\x109\xf9\xa8R7Gl\x1a9~\x02\xe5\xb7\xbb\xb1\x7f8q\xe0\xa2\xb8\xf3\xda\xe4\xb6\x06M\xc5\xb8\xe27x\xb9\x07G\x15\xb9"_O\xb9\\3Q\xb8`\x16R7\xc4\xca\x968\x07=\x0c8\xbeG\x838\xa0\xf9\x89\xb8L\xcf\x828\xb9]\x8e\xb8\xd4\xe6\x13\xb9\xc94\x85\xb9\x04\x00\x00\x00\t$\x828\xc7\xb9\xbc\xb8\xf1\x91\xb9\xb7\x06\x02\x90\xb8\x19\xf5\x1c8\xf3\xd2\xb3\xb9\xd3\x0b@\xb9]\xe1!8\xb6\xe1I7\x9b\x17!9\xb5\xb4i\xb8\x04\x00\x00\x00\xb8\xe7\xcb\xb8\x19g\xad9^l\x88\xb7\xc2J\xc2\xb6\x16i\xc3\xb84\xc3\xb58\x04\x954\xb81GR8\x04\x00\x00\x80\x8aw\\\xb8\xb3\x0fi\xb9*\xa6x8b6\xd78?\xcd\xcb8\x88\x02\xa5\xb7\xca\x12\xcd\xb7\x1c\x8fd9\xef\x10w\xb8\xc0\x00\x1f\xb9\xcb\x8a\xa3\xb7\xd8\x83v9\xe5\x9e>9\xe9\xdd\x009\xc0z\x9d8\x90\xe8\x0f9>\x14\xa48\xcf4\x059)S\xbd\xb9\t\xea!9\t:\xb6\xb7\xa1\xd4\xdb8\xffvX9\xf5\x15\xc29Y\x1e.7Z\xacc8\x9a\x91n8\x04v\xf0\xb7\xea\xe0,\xb8\xd9W8\xb8:\x13\xa67\xcb\xa55\xb9\xb0\x94\xf2\xb7\xd0\xfb\xb9\xb8\xd9?\x089\x12\xa2\x1a\xb9\xb88\xa2\xb9\xf5Ml7*O\xbe7X\x11\xe3\xb8#\xecB\xb8\xdbf\xa5\xb8\x04\x00\x00\x00\xe22\xcc7\x1d\xab\x13\xb9\xaemj7\xb2 =9\xb7\x96\xb3\xb8\xa2\xfe]\xb8\x9d/\x87\xb9(\xe4\x858%-58\x98bL9\x16\x82x\xb8\x04\x00\x00\x80!\x0fu\xb8\xfc\xb2\x14\xb8VB[7X\xa4\xa5\xb8\xeacT8\xef\x1az8H\xbdG\xb8j\xc45\xb9\x04\x00\x00\x80\xd5\x18W8d\xf3A\xb9U{\xec7P\x9e\xce6\x92\xdc\x8b\xb8A\xdd\xbe\xb8\x88n\x84\xb7\x11\xf7\x05\xb8S\xc8\xa3\xb8\x9c\x9ee7V\x10\x169f\x00\x92\xb8\xbc\xec\x94\xb9E\x9dL8S\xaa\xaf\xb8\xa6\x7f\xd18\x1b\xd328\xafe\xac8\x81i\xcb\xb8\xf1\x82G\xb9\xc9l\xbd7\xabA\n\xb8\xbf \xb6\xb7\xfc-G9a\x8e\xad8\x8f|X8\x00,-9\xe0\x08\x87\xb8\x9f\xdb\xaf8+\\\xfb7K\xd0&9\xfbg\x87\xb8\xf7\xe3\x95\xb8\xab\xa7\xa8\xb8\xbd\xe0R9\xda\xe8.\xb8\n\xfc\x829\xb7\xadM7\xb1\xb1\x00\xb9\x0e\x18\xc7\xb8\xb5\\\xa38\xf4\x11\x8f7\x04\x00\x00\x00\n\xbb\xb0\xb8\xbe\xda\xae9\xda~\x8b\xb8W\xcc\x94\xb7\x10\xc2\xd8\xb8\x0f\xdd\x8c8j\xd6\x8e9D\x0f\x878\xb1\\B\xb8t t9\xe1\xa3\xdf8\x04\x00\x00\x80\x83\x13\xc4\xb7\xcfd\xc1\xb9\x02$\x93\xb7\xf3s\xa98\xbc1\x1e\xb7\x98DD9\xfe\x1dD\xb8t\x1f?\xb9\x04\x00\x00\x00\x1e\x0e$\xb8\x19\xc9\x82\xb9,_@8u\xbd\xaa\xb8y\xf4!\xb9\xef\xb9\xf5\xb8\xca\xfc\xe1\xb8\xdd,\xb1\xb7\x9e\xf5\x7f9yH\xe5\xb8\xbf\xb1\xfd8\tk\x85\xb9\x153)\xb9\x13\xb65\xb7\xc7\x1bn\xb7\xb6b\x048R\xcdf\xb7\xf5\xd6\xcf8\x9d\xcd\xbe82-~\xb9\x16,\xe37n\x06\xa8\xb8lne\xb6\x83\xe3\xea\xb8\xb8\x8ek\xb7\xf7\x80\xb68OS\x149\'P\xfe\xb75\x82\xcc8<\x8bO8\xd6/\xef8pa\xf68\xfaN0\xb9\xfee\r\xb9\xe8N\xa99\xfd2|7n\xf6\xcb8\x87\xb3\x0b9\x84c\xd3\xb7\x9b}\xc28\x0e\xa3\x008\xb3\xb5L\xb9\x04\x00\x00\x00FKZ8\xf5\xa3.8\x1bO\x94\xb7\xde\xd0\x149\xf8Gw\xb8\xf9\x9d3\xb9*\x82\xa37NR49\x85$\x857U\x82\xcb9\xccb\xe5\xb7\x04\x00\x00\x00\xda\xaf\xc07\xd5/59%\x08*\xb8\xa5\xce\xfe8\xcb\xa5\t9\x8f(\x109\x97\xb3J\xb91\xe2K\xb9\x04\x00\x00\x00\xf6\xe4\x80\xb9\xe6\xcex\xb9\xa90\xb5\xb6\xccY\xd0\xb88<\xe9\xb8}\x163\xb8\xa3\x9f\xaf\xb9O^\x88\xb8\x00\xbc!\xb7>|\xc3\xb9\x92\xb5\x0b9\xb6\x11\xc9\xb8\xddQ\xf7\xb8\x8e\xe8\'\xb8*\xe2\x9c8jl\xe9\xb8\xben\x92\xb7NB\x1a9\x9b\x8a\x9d\xb9\x07\xc0\xea\xb8\xfa\x9e\xc678\xbb\xe27\x8b\xb3\xaa8l\xe9\x94\xb8~>\x95\xb8O\xef\xd88\xb2\x9a\xb68\x93\x96y\xb8,\x11\x08\xb9>\xf2q7\xfb\x8a\xee8\xa0\x02%8\xf2\xd9\x9a\xb8[\x16\xb4\xb87)\x989\x9d\xb0\x99\xb5\xba\xa2A\xb8]\xd7\x1c9y"\x95\xb8>\xe2F8\x05\\\xa98X\x1e\xdf\xb8\x04\x00\x00\x80\xcb\xd1\x1d93 n\xb9\xe3R\xca8\xea\x7f\xc58\x11>R\xb8;c\xb38\xdf\x8de\xb9\x7f"\xaa9\x89\x10\'8\xa2?\x04\xb9\xe41=8\x04\x00\x00\x00fG\xd97\x9a\x7f\x9b9\xed\xbeB\xb4 a\xc48\xec\xf1\x89\xb8\xc2\xee,9\xc3\xf2\x11\xb8\xd8\xa6\x899\x04\x00\x00\x00\xfd\xfa\x99\xb9\xb3\x91\x9f9\xfd=8\xb9\xe7\x00\xb4\xb83B\x848\xea+\xae79E"9A\x1f\xb1\xb5\xff\xc6\x1d\xb9e\xf9:9\xab\xa8\xb48\x1c\x14\xdb\xb7%\x99\xa29+\xa7\x0f7[\xb2\x1f8c]\x828Bi\x7f6$EJ\xb8=\x0br\xb9\xc3\x1d\x01\xb9>gs\xb7H\xd1E9\xc1\xe8\x038\x7f\x04\xd2\xb8\x1a\xf2\x8c\xb8\x11\x0e\xab8\x852\xad8\xdc}\x817=\xc1\x06\xb9\\\x1b\x19\xb9\xe5-#\xb85\xf0\xd3\xb8\x92\x007\xb71\x08q8\x18\xf6\xfb9\xa4\\39\xb5\xf9<8D\x9f\x84\xb8\x86\x04\x88\xb8\x08\xc9\x04\xb9\xa0\x14\xca8A\x1e\x13\xb8\x04\x00\x00\x80m\xb6\x069\xb1x\x01\xb8.\xbbe7\xba\xd7\xb97\xf2u\x19\xb8\xc8\xe4\xca7\xea{\x81\xb8bH\x079\xf6\x94a7\x10,\xd8\xb8G\xb109\x04\x00\x00\x80w\xec\x198\x1a\xb3\xfe8auq\xb7L\x1fi8\xc6X\xbb\xb8@u\xa39\x9a\xd9U8\x1btt9\x04\x00\x00\x80\x8f*\xa4\xb8\xf7\x9b\xae9G\xe2\xa0\xb8\xb4\x83\xfc8\xdf\xb7\xb98\xfa#\xfa\xb56\x93\xab\xb6\x93\x0ed9C\r\x8c\xb7H\x7fG:\xef\xfb\xe27Bb\xa2\xb6\xc5\xb8\x959n\x94\x0f8$n\x9f8O\xcf\xac72\xbaY8\xbd\x18\x888f\x1a\x95\xb8^\x94}\xb9\xd3f\x14\xb7\xd1\xd5K9\xf2\x0e\xdd8\x80@{\xb8~\xf1\xc5\xb7t\xb0\x0f\xb9\xdc+\xfd\xb7P\xd0\xca8OQ\x9f\xb8\x15T^\xb8\xbd\x88\x97\xb7\xe4\x8d\x19\xb8C)\xb6\xb7\x8efE8\\U\xf38\xca\x8d,9\x98\xdc\x0b\xb9\xdb\xae\x17\xb9\xfe\xc8\xdd\xb5\xd5x\x19\xb9\xd1\xabN8_\x94\xf47\x04\x00\x00\x80DOP8\xe2\xc2\xc6\xb8Q\x04\xd3\xb6!\x9a\xf26\x9a\xc7\x11\xb8\xec\x9b"82\x86\x97\xb7\x872R\xb8\xaaY\x11\xb7\xec\xf2\x0f\xb8\x84D\x90\xb6\x04\x00\x00\x80\x87|\xde7\xe4\xb5^7\xe28\xf5\xb7T$l7}\xed\x9d6\xb50\x109\xac\xd7\xca\xb8u\x83\x97\xb6\x04\x00\x00\x80\x04d\x0f8\xbc\xd7k8\x1c( \xb7\xc1\xec\xfb\xb7)\x15\x138\xbcv\xe86\xbbB\x15\xb5\x87\xcf\x84\xb7\xf4<\x0f7&\xc8G8\x1eU\xdf7\x01\x86\x82\xb7\n\xc9c6^\x9f\xc47\xbe\x9e\xc2\xb7\xd8\xfa\xec6s#q6\x87\x8d\xd073Rt\xb6CD`\xb8;\xda\n\xb8\xed\x1c_8G\x9c\x8c\xb7\xd72$\xb7)\xd0\x16\xb7O\x0b\x1b\xb9\xbc\x9dt7\xb0\xf7\x878s\xd9\x1b\xb7\x92/(6\xab\x90G5mO\x9c\xb7\x89E?\xb6\xac{E\xb5%\x17S\xb6\x8ar\xb86C\xb4.\xb7M\xf9\xf7\xb5M@(6\xbfa\x13\xb7#\xcb\x1171\xb4W6\x04\x00\x00\x80\xec\xca\x906\x8fs\x9a\xb6\x85\xee\x16\xb5R\x92n5A\xe2\xfc\xb7,\xb8\xcb6\xd0AB\xb67\x8f\xc5\xb6q\xe5\x95\xb5\x93p8\xb6\xb7r\x80\xb7\x04\x00\x00\x80\xb9+\'7d\xc9\xe65\x81\xa0\x01\xb6Q\xe6\xa95\xf97\x9d6<f\xe16\xfcX\xef7\xacP\x12\xb7\x04\x00\x00\x80A\xf8\xd06r\xd1\xaa\xb6\xbd$\x905\x97\xfb\x14\xb7\xa2\xb7\x916\xddO\x075@[\xcb\xb4\x9eq\xdd\xb5Fq\xce\xb7\xf6\xed|\xb6\x05\xa2"7\x87\xf5\x06\xb6>\xc1\xe1\xb6o\x1cu6J\xcdv\xb6%k]5\xb0\x8d-5A\x99,6\xd5\xbb}\xb5\xdf \xbc60QZ7\x03|]\xb7\xb6\xb3\x87\xb5>\xac`\xb6c\x97\xa4\xb5n\x93\xc8\xb6\x94\tZ7^QC\xb6(\xf0\x9a\xb4\x860}5\xa7\x81\xe75\xe0\x9c\x88\xb5c\xd3\xdc\xb3\xa5\xd9G\xb2\x86\xce\x133\x163N4\x8bW\xad\xb4e\xa1\x8f\xb3\x99\xd7\xa8\xb2\xe8\xb6\xe8\xb2\xe1?\xfa3\xe6\x89\x054\x04\x00\x00\x80y\xf1\xcb3\x0f[\x0c\xb4\xbdA\xae\xb2\x93\xb7\t3\xe3a)\xb5\xf9uc4\xbdE\xe0\xb3\xcc\x15d\xb4\xf5q-\xb3\x89\xff\x1b\xb4\xb2\x89\x057\x04\x00\x00\x80HS\xb43%9\x853\xf7\xa5\x1a3~vU3R\x8a\x07\xb1v\xdep\xb3\x0b\xf0\x9b7`\xcb\x8f\xb4\x04\x00\x00\x80*(34@6E\xb4T;\x133\xa1j\x08\xb7\x8f;(4*\x15\x872\xaf l\xb2\x9b#\xc4\xb3\xf0\xb3(\xb3"W\x87\xb4\xb0\xa8\xfe2\xe8\xcf\x9b\xb3\xc6\xe8\x9a\xb4\xf6}\r4\xf1Z\r\xb4\x82\x8d\x03\xb5\x99\xed\xa2\xb1}D\xc73\x81v\x12\xb3m\x14]4\xfc0L2F4\x13\xb43\x92\x1c\xb3\xa5\xb1\x01\xb4N\x08>\xb3\xe8\x1c\xcc3]cK5Hn\x891K\xfd=\xb2\xc9\'\x123+\xeb\xa0\xb1\xa9\xb8\x1d\xb3\t\xd4\x9c\xb2~\xee\r\xb1\x1b\xf1\xd11\xdfp\x123(6v\xb3\x8a\x02L\xb2\xb7\xd3o\xb1\x89E\xa5\xb1\xb0\xb9\xb12\xb4\x15\xb02\x04\x00\x00\x80\xb9\x9f\x902\xc6[\xc7\xb2\xd7\x82w\xb1V\x9c\xc31iJL2]\x8a!3\xb2F\x9f\xb2\xdb\xfb!\xb3\xad[\xf6\xb1\xa9\x93\xdd\xb2G\xa2`\xb2\x04\x00\x00\x80\xb6\x10\x802J:=2 \xa8\xdb1i\x99\x172A\xeaI\xaf\xdb\xce*\xb2\'8\xb91\xad\x10L\xb3\x04\x00\x00\x80}\xd7\xf02\xd8\x0e\x0c\xb3\xbdr\xb81\xfaS\x95\xb2@\xf2\xee2g\xde?1\x99\xc2\'\xb1\xffA\x8b\xb2O\x9f\xef\xb1\x1b<@\xb33\xdb\xb41\x02P]\xb2\xb6\x07\\\xb3\xf7\xf8\xc82u\xc7\xc2\xb2/\xf5\x9c1E[g\xb0\x93\x84\x8d2^\x08\xd0\xb1:\x02\x1d3\xc2~\xda0\x02\x16\xd1\xb2\xf4c\xde\xb1\xf96\xb8\xb2\x8b\xf5\x06\xb2\x80\xf5\x902\xacSB2@4C0\xbc\xed\x06\xb1\xa3\x98\xcf1\xd5\x90d\xb0:\x06\xe0\xb1g\xf3\x08\xb5r\xc1w\xb3\xa5<74\x93\xbd\xc9\xb5\xa4~\x8d\xb6\r\x00\xa2\xb4$R\xd1\xb3\x10:\x10\xb4:\x1e\x1b5\xc7\xaf\x195\x04\x00\x00\x80\xba\xec\xd0\xb6\xdb\x8d\xf25S"\x0c\xb4\x97\xba*4\x95\xd1\xb54\xf3\xd9>5\x1a\x04\x0b\xb5u\xa8\x8b\xb5e\x05W\xb4\xfc\xc7\x80\xb5m\x0f\xc4\xb4\x04\x00\x00\x80\xed\x8c\xdf4](\xa54Y\xb7?4\xd0P\x844\xb0\xd6\xae\xb1\xa5\x81|\xb6\xbf\xa8!4\xc0\x16\xb2\xb5\x04\x00\x00\x80\xec"R5\x83\x99t\xb5\xfc@\xfb5WU\x02\xb5\xb87P5\x80\x9e\x106\x1e\x14p\xb7\xdb\x1b\xf3\xb4_$Q\xb4r\xb0x\xb6\xdf\xd9\x1d4K)\xc1\xb4\xa0\xc0\xbd\xb5\x99h/5-\xf7)\xb5\x17\xfe\x084i\xed\xc9\xb2\x86\x08\xf74!\x925\xb4{\t\x895\xbf\xb3>3s}6\xb5\xde6\xac\xb5M\xc8 \xb5\xa0\x95k\xb4\xfd\xc7\x1f\xb7\xa8\xe9\x037\xc9_\xaa2\xc1\ty\xb3/054\xfe}\xc7\xb29\x87C\xb4\xed\xc0\xe7\xb6\xbeQP\xb5\xdc9\x009\x02\xe5\x887N\xfa\x05\xb8rZ\xa0\xb6&\xea\xbb\xb5\x92\xc6\x898qP\x0384w\xde6\x04\x00\x00\x00\xcc\x85N\xb68JB\xb7{\x96\xd0\xb5\xbdf\x1f\xb6\xa11\x9f6\'.M8\x0e\xe7\xcb6\xfe\x16k\xb7\xd2\x9a\xa2\xb6J,\xfa\xb7\xdb\xf4:\xb6\x04\x00\x00\x80\x96I\x867D]\x817\xa1;\x156\x17cj6\x1c\xe2C7\xf07\x977\xec.\x0f6Y+\x14\xb7\x04\x00\x00\x80\xa0\x00\xf5\xb7\x83\xd2>\xb8q\xc8\xb57\xc1\xe2\xe6\xb6\xad\x80H7\xd9{\t\xb6gLi\xb7+\x99\x1f7F=9\xb6t\xeew\xb7\xec\xef\x007\xe1C\xac\xb6\xbe\x84^\xb6\xc4\x93\xcf6\x16=#\xb4\xd1d\x1c\xb7\xffG&7D\x12\xe16\xfe\xe8,\xb6\xb7#>7\x10\x05\xdf7\r\x0f\xef\xb7\x0b\xb2h\xb8\x18<h\xb7\x0e\x9en\xb7\xf7\xc0}\xb8\xf1\xcb\x8d\xb7[\x80\x10\xb5P"S\xb5\x9c_\xd2\xb6x\x86\xe959B#\xb7\xce/\x1d\xb8l\x11\xfe\xb6\xba\x94\xdc9\xb1\xb5U8\x19{\x13\xb9\xebw\xf3\xb7\xca\xb6\xd8\xb6\x14\xd8\xf88\xac\xcb\xa18\x92?O\xb8\x04\x00\x00\x00S\x82\xde8\x86\xe0\x05\xb9\x1an\x05\xb7p0>5\xc0\xd4\xe27_\x99\xdf8\xa6\xc1\xb85Z\x01\x9b\xb8A~x6\xe7\xd4\\\xb8\xde}+8\x04\x00\x00\x809\xb4\xc26\xc8\x95L8\xe6 \x98\xb7v\x05\x937\xa3\xe5\x138A\xb3\xa19\xa2\xa6\x858%m\x85\xb8\x04\x00\x00\x80D\x94P\xb9\x0eK\xa3\xb8\xe4\xc0\xc68o\xdb\x0f\xb8d\xca\x9e8\x03\'\xf6\xb7\x1b4[9\xd2\xa7\xce\xb8\x8c2\xbf\xb6\xd2\xdc\x9d\xb9X\xc3\xc87\x8eH\xf1\xb7\x1b\xb5\xff\xb8\xcbe\xa96}\x19\xb98\xbe\xf7!7f2\x848\xa1\xf9\x1b8\xfd\x01\x887\xb5\xcf\x9089\xbbl\xb7a:\xf57\xe8\x88\xa3\xb9:)D\xb8\xa2\x90\x8d\xb7\xc0\x93\x14\xb9A\xd0:\xb9\x0b5\t\xb8\xf2\xb2\xc9\xb7R\x12-\xb9v!u7\'F\x99\xb7\x9b\x98\x9a\xb8d\xb6\xba\xb7\xec\xbc69W\x85\x0f9\xba\xb4\xfc6\xf9\x8aX\xb8h,\xb26\xedUB8x\x88\x947uo\xb4\xb9\x04\x00\x00\x00\xa36z9)w\xa9\xb6\x1d#\x94\xb7L\x81+5\x93.\xf77\x95\x93\x927D\xf55\xb8\x84\xe2>\xb9\x10\x10\x9e\xb7\xad\x17\xa49\xae\xef\x169\x04\x00\x00\x00\xe4\x8dU8\xd8{\xa78\x0bO\xa4\xb8\x04\x03-8>\xa9|\xb8_lT9)@\xb27\x9c\xdaN9\x04\x00\x00\x80\x16\xe8\x97\xb8\n\x85|\xb8;\x8b\x83\xb8\xbcr\x14\xb8\xf1\xf5\x898\xb3I\xad8\xdd\xee\x8b\xb9B\t\xe6\xb7\xea\xc7K\xb7\xd3\xaa\xab\xb9\xd9\x82~7\x0c\x0e\xe77}\xe0\xa89\xbd~\x987K\xe0"\xb7<V\xac7$N28q\xb7\x948v\xb4w\xb9\x96j\x179\\\x82r\xb6>\xc0Q9-?\x019s\xc6\x0b8\xb2\x08\x817\x0e\xc0\x01\xb9W\xc5\xab\xb7\x8d\r\x98\xb654\xc6\xb8E\xc2\x84\xb8<N\xb0\xb8\xa0\xaaX\xb8Vs\x8d9\x92\xe5\xb4\xb4E1F\xb9G\xb0-9\xec\xbe`8\x90{\x08\xb8\xb9\x92\xa08\xd2u\r\xb9\xeb\xe2\xfe\xb7\x13\xf8\xf2\xb7\x04\x00\x00\x00\x98*V7\xd7\xba\xbc\xb8\xf9h\xba\xb7\xbf\xbe\x8c\xb8,L\x9c\xb7\x84\xe9\xda\xb9\x07\x1a\'\xb8\x8a\xdf\x03\xb8\xf3d]7O\'\xb09\x85S99\x04\x00\x00\x00K@\x7f\xb8-YN9\xa1(\x18\xb8\xa9L\xfa\xb6\xa7\xed\x81\xb8V]H9O\xa9&8s\xdd\x07\xb9\x04\x00\x00\x807G\x85\xb9\xcb\xab\x1e\xb9\xa9?}8\xee0\'9{\xda\xda\xb7n{,9R|\x9b\xb9\x99\xb1>9-ZF\xb8\xde,w\xb9\xb526\xb8%\xff\xc88\xa0\x10\x96\xb8sI4\xb8\xbd\x87\x8e6\xc9D\xc48K/n7Z=z\xb8\xedn\xaa\xb9\x99O\xe88\xe9c\x847\xdb\xcb\x16\xb88\x90|9\xa6\x13\x0b9\xf5Ab\xb7"3\x1a\xb9\x15*\xae8\xd1\x81\x95\xb8J\xab\xc68m4S8\xed\xd6\xee\xb8\xa5\x1b+\xb8\xb4\x9f\xa88\xb2\x1d\xb27\xb4\x80U\xb9\x17\x81\xd08\xf0\xea\x078\xa6\x86\xaf\xb8-\xa3U\xb8\xf0\x92\xf1\xb7Q\x9e\x7f\xb8\xd8[\x15\xb8\x04\x00\x00\x80\x87\xc8\xb37Z\xf9\xf9\xb8\xd7\xee\x10\xb7Y\xf9\xbb7`\x81M\xb7\xbe\'1\xb9]c\x91\xb7\xcf5\xcf\xb8T\xb0\xce7f\xa189\xad\x0c\x199\x04\x00\x00\x00D\x8b#8\xbb\x1a39cC\xea\xb6\xf8\xac\x8c\xb8IY\xc7\xb8\x10-\x8e9\xd2\xff\x049p\xa7j\xb9\x04\x00\x00\x80]::\xb9\x11@\xab\xb8"\xd8\xa88$\xde\xb48\xfa\xa4N\xb7M\x0b\x1e9D\x81\x1d\xb9\x18d?6\x0f\x10\xd3\xb8\xc5\xf6Y\xb9E\x03\xde\xb8\x1b\x01Z8\xff\xf5\x88\xb9\xa2\xf3\xce\xb8\xd9\xbd\x11\xb9\x81\xeb79\x821\xf8\xb7\xd6\x87^\xb7.6\xa9\xb8:\xe9\xf45\xe9M\x008On\xa1\xb8\x11Z\xda8\xadBO9\x93\xae\x1a8\x1e\xa9\x16\xb9xG\xe98\x8a\xcbl\xb8\xf6\x9f\xff89\xe6\xe67qlN8\xed@\x11\xb8\xb2%~8\xd0\x9a\xbf\xb7,g\xbd8b/\t8\xafh\xd38A\x81N8\x02n{\xb8\x85\x18o8\xe1v\xd28\xc8\xd9f8\x04\x00\x00\x00\x95\x98j9^\x86w8\x9a\xec\x89\xb7dz\x89\xb8<\xa5b8\xff\xb53\xb98p\x7f\xb7\x97\xae\xcc8v\xa3\xc87\xdd\x85\x8a8\xd7\xe5\xbe8\x04\x00\x00\x00\xbe\x1f\x957\xe4D\xc49c\xd0D\xb8\xbd\x82\xbb\xb7\x91\xd7-\xb9\x87\xcdW9<\xa0\xa08\x9d\xf1\xcf\xb9\x04\x00\x00\x00\xc8\xcc\xe8\xb8\xde+\x94\xb9[\xd8\xe087\x9d\xbb\xb8\xe7\x88\xc9\xb8;\xd0\xe08\xecO58+z\x13\xb9\xb6\xd0\xda\xb8\xd7\xe4\xa3\xb9P\x10\x99\xb8\xf3\xf6\'\xb7\xdbm\x9b\xb9]T\xe7\xb8\x9c\xbd\xb4\xb7*\xb3\xb87\xc8\xe9S7\xd9\n\x0e9h\xbd\xe0\xb8\x1a\xc0\xf6\xb64~\x866vu\x0f9\xa3A\xb07!n\x9e8\xdb3\x07\xb9>\x1d\x825\x83:\xa48.\xe7\x13\xb8\xc9R\xdc\xb7\xf93\x118\x9a\xcb\xdc\xb7\xe9\x99\xd18\x85Lt8V{\xc5\xb8\xa7\x03W9\xae\xdb\xa7\xb6\xa6\\\x159")\x179\x08\x0f67\xbd\xa7o8\xbc\xde\xd77\xa7\x19\xd7\xb8\x04\x00\x00\x80$\x06\xa78\x967\xa69b\xee\x9a8\xcf,\xc87\x96in8\xe5<\xd6\xb7n\xf7\xcf8\xed\xe2\x0f9\xd5:\xb88\xd11q9\x9aw\x84\xb7\x04\x00\x00\x00z\x9aV\xb8\xe4B,\xb9\xcf\x11\x02\xb8\x19\xee\xaf7\x1dq\xcc\xb8\x17\x03\xa78\x13\xf1\xc87\xa8md9\x04\x00\x00\x00\xedD\xb27\xcb\x9b:9\xe5\xe4<8\x15\xc1\xfa\xb8l\xfb\x1c\xb8\xf1\x07g\xb8\x1f\x0e\x08\xb9S`:\xb9\x85\xa1\x119\xea.(\xb9\xa1r\x0f\xb8u\xaeP\xb9\xd1{\x9f9\xd9i\xf28\xa5\xa0\xca7\xf8K\xaa7\xed\xf5\xb57\x96"D\xb5$Wt\xb8@\xd4\x8d\xb7\x95[\r8\x95\xddv9<Y\x909(S\x0c\xb9T\xee\x8e8\xa1\x9c\x818C\xb7\x8a\xb7&q\x8e7\x9b`\xbb\xb7\xe8\x1e\xe6\xb8\xb8\x10Q\xb8\xebH\x1b8\xd6\xd3\x16\xb8\xe9\x100\xb7\x192\x8a9\x7f\xf9!9\x8ea\x878P{\xd2\xb7\x83\x95X\xb7~L\x048X`\xa8\xb7\x9ac\x0b\xb9\x04\x00\x00\x80\xd06\x028\xd8\xf0p\xb73=\xbd8\x12I\xa38-\x0fX8g\x9c!9\xa7\xc8\xbe7z\\\x979a)\xbd8\xdbU*\xb9\xfe\xa1=8\x04\x00\x00\x00\xbc\xee\xf3\xb8D\xb5\x86\xb8h\x9c\xda7\x0f\x9a\x978i\x8c\xe2\xb8\x1c\xa4\xa98\xf8I\xa88\xf9\x1ap9\x04\x00\x00\x80_\xf3N\xb9\xc2\xfa\xac9\xbe\xc0\x90\xb90\xe6\x9d\xb8\x9c.\x928i\x00\xa4\xb8]\xc7\x0f\xb8\xec3\xff\xb6\x05\xc4,9W\x05\xed9\xce&M8\xf6\xbe\x8a\xb8\xd9839\x81*68\xbe\xe7\x91\xb8\xc0\x10\x1a8+l\xf67\x94\xe0\x1c8X<\x84\xb9\xd3\xe6h\xb9T\xd0\x9c\xb8+\x92b9l\x98\x9d\xb8:\xfd\xa0\xb8\x87\t\x06\xb8\xab\xfc\xc6\xb7\x07\xa4\xaa\xb8\x9c\xb0$9\x80\x8b\x89\xb8\x1a\x80\x13\xb9\x11\x83U\xb8\x84.\x87\xb86>\xc8\xb8\xb8Xy8\xd5a\x01:}\xaaN9\x9b\xea\x96\xb8\x8b3<\xb9a\xeaF8\xf5X\xa1\xb8E\xa22\xb8~V\x8c7\x04\x00\x00\x80\xe8\x92\xc6853\xb9\xb8A\xdf\xe87{\xea27:=\xbb5\x1c\x0b\x908\x02\xcd\x1c\xb8|\xb2\xbb8\x85\x1d\x1c8\xad}\'\xb9\x1bl!9\x04\x00\x00\x80<\x96S\xb8\x1d6\x928iW=\xb7\x8b\x85b8\xb1\x9f\x9d\xb8\x9e\xf7_9\xcc\xd7v\xb8\xb8\xf8\x95\xb8\x04\x00\x00\x80l>{7\xff\xcd\x9593\xfb\x92\xb7\xefD\r6/tk8\xa9"K\xb8\r\x9cp6\xb5\xdb\xa28\x8df4\xb8\xd9\xb6 :hJ\xd77\xd6\xd0-60`\x088M\xe0\xe6\xb7R\x93Y\xb8\x14\x0b[7\x14\xa8\x047\xd9\xab\xf17\n)y\xb8v\xe0a\xb9\x00\xbcP\xb8A\xaf\x8e8>\xb8\x82\xb8\xfe\xcdD\xb8\x00Y\xb9\xb7\xae\x061\xb92\x87\x977+\xf2\xfd8\x1e\xfb\x90\xb8\xbfg\xd97\xe9\xb6\xd1\xb6A;\x7f\xb7\xfdc\xa0\xb7>\n\xc17j\x03D8\x1fW\xca89L\xa8\xb8P\x1c\xae\xb8@\xb0J7cj\xff\xb8\'\x9c\xd17\xd8\xa1\xda7\x04\x00\x00\x80\xa7t\xa18(RJ\xb8K\x0e\x88\xb6\x1c\xb3\xef6c\xc4\xc7\xb7\xfa\xdd08\xa04\xaa\xb7H`1\xb8\r:\x17\xb4G\xfd\x10\xb8I\xb0\x129\x04\x00\x00\x80I\xdfd7\xde\xe2`79\x93\x01\xb9\x173\xfb7\xf8\xb0\x138\x0b/\n8\x98\x15`\xb9\xecVh\xb8\x04\x00\x00\x80\xdd\x0fE8]\xbf\x887)\xe7\xd86\xa2\xc3\x99\xb7\xac7\x068\x0c\x9e\xaa\xb5S\x91\xa96\x0b\xcb\x00\xb7q\xccF\xb8s\x9a*7\xd9x(8\xd4\x02\x82\xb7v\x01\x8e\xb8\xa1k\xe17\xf2\x8d\xda\xb78\xb6\xad6\xa7\xf3\xdd\xb6\xa8\x8e(8l{\x93\xb6\xe5\xf3\xf66\xe5i\x9a\xb7YW\xd8\xb7BKI\xb8C\xb2\xff6\xb2\x9f\x14\xb7\'\x9a\x9d\xb8\x05\xe9|8\x1d\xe9\xa5\xb7\xba\xdd\xd1\xb6\xd8\xdb\x177\xaf\x96"8\xc2n\xcc\xb6\xb3\xc1@\xb6\x93^\xf0\xb4\xca\x06l7p\r"7\xc0[\x17\xb7y4\xad\xb5\x8f\x02\x177n\x8fR6\x87\xbe97\x11\x84X6\x04\x00\x00\x80I9Q7\xa1\xf8\xaa\xb6l\x1b\x18\xb5\xfa\xf6&6o3/\xb6]\t\xc76\xe9\x9aJ\xb6\xe0\x17\xc7\xb6\xd59\xf4\xb5\xc1@\x8d\xb6[\xb8\xb76\x04\x00\x00\x80\xfaC67\x19\x94\xe85\x9b)\xa3\xb7dT\xba5\xa99\xa46\xed\xf4\xd1\xb5\x10\xc3\x08\xb9\xf5\xbc\xff\xb6\x04\x00\x00\x80p\'\xd56\xf5$\xac\xb6f\x84\x805\xc5C\x8b6\x91\xd9\x926<,\x90\xb5o"*6/\xa9\xa45\xac\xd1\xbf\xb7\x1f\x86\xa4\xb6\x0fJ^5@\x0c\x08\xb6_\xad\xc3\xb7\x96\x03w6\xd8\xbep\xb6m\xea@5\x8c\xa4\xac\xb5I\x8816u\xbe\x7f\xb5s}i6[\xe5\x857r~\x80\xb6u\x1a\xe2\xb7lkb\xb6\xa1\xe0\xa5\xb5:5\xb8\xb6\xac4X8^\xf3\xbe\xb5\x9f\x07\xa3\xb4\xc5\'\x7f5\xf0\\\xe26g\xac\x89\xb5$~Y\xb3j\xd5\xc4\xb1w\x93\x912=;\xca3\xc4\xb9*\xb4lv\r\xb3\x96~4\xb2\xbe3e\xb2zzv3\xb42t3\x04\x00\x00\x80E\x91H3\xbd<\x8a\xb3w\xa0+\xb2\xcf=45C\xa8\r3\x19\x07\xe03WC[\xb3\x7f\xa4\xe0\xb3\xc8\xd3\xaa\xb2\x0b\x15\x98\xb3u\xc3\x1b\xb3\x04\x00\x00\x80\x88\x9a13a6\x033b\x9f\x9a2\xb5=\xd22N\x0c\xa5\xb1\x8c\x1e\xed\xb2u&p\xb7;\x80\r\xb4\x04\x00\x00\x80\x91\x00\xa73><\xc2\xb3r\x02\x912\\\x17O\xb3\x88\xb1\xa538\x0b\x052\xaeT\xe1\xb1\xd7\x1eA\xb3\x12(\xa6\xb21L\x05\xb4\xb6\xd0z2\xc5u\x19\xb39\x92\x18\xb4M[\x8b3\xd9\x0f\x87\xb3@V6\xb5\xef\xbc0\xb5\x1fAD3\x8c@\x90\xb23\xbe\xd93\xe7\xf2\xa71~\xfb\x90\xb3\xdc0+5\xb7w\x7f\xb3\t*\xbb\xb2<\x08I3\x90\xbf\x063C[\x071|\x1e\xbb\xb1\x0e\xf3\x8f2{}\x1e\xb1@W\x9b\xb2\x1ay\x8b\xb1=s\xfc\xafz\xb5\xba05<\x022\xfc\xf6Z\xb2\xba\xfd\x14\xb5nIU\xb0g\xfb\x92\xb0\xc0\x0e\x9e1;\x99\x9c1\x04\x00\x00\x80\x8a\x9e\x801\xf4K\xb1\xb1\xde\x1e\\\xb0\xb0\xf6\xad0\xde\xae51\xee\xa9\x0f2e\xa6\x8d\xb1\xdf\x0e\x10\xb2[\x18\xdb\xb0f\x0e\xc5\xb1k\xc6G\xb1\x04\x00\x00\x80C\xc9c1sI(1EY\xc30\x9b\xd2\x061\xae\x913\xae\xdf\xe7\x17\xb1\xe9\xb8\xa40\x84{5\xb2\x04\x00\x00\x80t0\xd61\x04\x1e\xf9\xb1\x11\xd8\xa4/\x86\xcd\x84\xb1\xc0\x82\xd41\xc2\xa2*0<#\x15\xb0\xa7\xb1w\xb1\xc9\x1a\xd5\xb0\x1c\xf6*\xb2\x8c\xd7\xa00<\xd2D\xb1C\xaeC\xb2n\xbb\xb21a9\xad\xb1\x95\x96\x8b0\xef\xc0M\xaf\xbe\xb6{1\xd5\x02\xb9\xb0.\xa2\x0b2\xc6P\xc2/\x9e\xf2\xb9\xb1\xa4\xc7\xc5\xb0\x0b\xc6\xa3\xb1W\x0c\xf0\xb0\xd3\xea\x801g\xd2,1,\x9a-/Z\xfe\xef\xafz\x9f\xb80\xa7EK\xaf\xa1;\xc7\xb0tE\x9f\xb4{_\x0f\xb3\xc4\x12\xd43\x8d\xed\x135\xd5\xa2\xe9\xb5Be\xeb\xb4\x9a<\xc8\xb7\x82\xf8\x17\xb4\xa8\x87\xb34s\xdf\xb14\x04\x00\x00\x80\x9c\xd0\x924\x00b\xc9\xb4q\x17\x1c\xb4\xd3\x98\xc53\xd5\xd7N4K.#5\r@\xc57a|#\xb5\x13\xdc\xf8\xb3\x8eu?39\xeab\xb4\x04\x00\x00\x80\x9f]\x814b\xe5=4 \xe3\xdd3~#\x194z\x8fK\xb1\x9aP\n\xb6\xa8\x19\xbb3\xafxN\xb5\x04\x00\x00\x80\xb0I\xf34X\x7f\r\xb5h\x95\xd85)\xd8\x96\xb4ya\xf14@\x1f\xd1\xb4\xd4\xe7\xb1\xb6\xb6\xac\x8c\xb4\xf5\n\xf2\xb3w2B\xb5Y\xb1\xb63N\x8f_\xb4\xcf\xac\xba7h\x03\xcb4\xcb\xc1\xc4\xb46\x8d\x9e3\xe8\xbca\xb2u\xf4\x8e4)%\xd2\xb3\xce\xce\xc2\xb7\xc7\xb6\xdc2+w\xc47\xc2\xa4\xe0\xb3\xd6\x15\xba\xb4`T\x08\xb48\xd2\xa2\xb7\xc5\x7f\x01\xb6D\x02O2\xda\x1c\t\xb3\x07\xb4\xd13#\xb0b\xb2\x98L\xe2\xb3\x81\xab\x08\xb7\xde\xa4H\xb6\xd4\xa6Z6>\xdf\xd37\xd4\x1a\xa9\xb7\x105p\xb7\x92\xdf\xfc\xb7\x97\xba\x1e\xb6\xf1\x1f-\xb5[q\x0b7\x04\x00\x00\x80\x97\xe3\x896\x00{\xe0\xb7\xff\rf\xb5Z-\xaa\xb6%\x18{6\xd2nn8yJ+8&M\xa3\xb7\xd8\xa8\xd8\xb6P\xa5l\xb8g\x12\n\xb8\x04\x00\x00\x80\x12\x13b\xb73 \xca6\xfd\xd6\xdd\xb6R\xb9\xd34\xa1\xffx6\x9f=\x0f7\xa1?66\xfb\xd4\xe6\xb7\x04\x00\x00\x80\x7f\x1c\xa56k\xa3\x95\xb7\x01\x99W8:\xf1\x12\xb7\x7f\xb1\x8a7\xba\xa0\x1c5p\x95{7\xff\xd2\xcf\xb6u\xc5k\xb6m7u\xb7\xa0\xdfV6\x1e\x1c\xec\xb6]\xde48\xca6\xa6\xb7\x89\x03B\xb7\xd0\xff\xbe5\x87Ig\xb4rb\x0e7\x03\x1b\'\xb6\x10V\x83\xb7|`A6\x1d\xdb\xfd6|\xce#\xb8wr\x8a\xb65l\xa2\xb6u\x91\x05\xb9h\xcb\xc67\xcd\x13\xe2\xb6\x92\xa0\x83\xb5\xf3\'X6\xde\xf9h7\xa8r\\\xb6\xe5\xe6/\xb8\x80\xe8q\xb8\x117\x0e9A\xbf\xcd8\x14\xe2\xe9\xb8uH\x14\xb8\xff\xbb\xce\xb7\xf0\xa0!9\xaa\xf8N8&\xf635\x04\x00\x00\x80%\x1aA9m\t\xef\xb8Kd\xaf\xb6B\x9b\xe4\xb5\x86\xba\x03\xb8\xe6\t\xeb8\xd9\xd5\xc27\xfa\x94\xcd\xb8px\x1a\xb8\xde\xc6\x9b\xb9b0\x9e8\x04\x00\x00\x80\x87\x9c"\xb8\xa6\xd9\xfa7\x8d\xca9\xb8\xa9Nq7h\xe0\x12\xb9\x15|\xb59<[\xb38\x0e\xbfI\xb9\x04\x00\x00\x80\x86\x0f\x04\xb8n\xb9\xbc\xb8\xc9\x04W7\x8b\x02\xcd\xb7I4\xa08\x9cy\xf0\xb6pv\x949bp\xa1\xb8\x9a X\xb7\xb9<\xdf\xb8\x1c3@8\xacv%\xb8\x9c\xfa\xb8\xb8\xa7\x04I\xb8\x95=\x8d\xb8I\xc9;7\xbe\xbf\xb86\xabj-8\x0c\x86p\xb7\xb3\xe6\xdb\xb7\xf3Q7\xb7\xdb\xef\xaf8\x8bh\xb2\xb9\x9f\xdc\xb2\xb7\xe5\xe3\x9f\xb7F\x90\'\xb9\x0c\xf12\xb7\x89o\x1c\xb8\xc5\xb6\x93\xb7W:\x9a7\x86\xfaD6\xc2n\x83\xb7\x1b\x10\x079D\x9dQ\xb8\x1b\xe9\x92\xb9\x9d$\x0f9\xf8\x1cE\xb9G\xe7-\xb8\xd1\xa4\xce7\x95\xb5\xaf8\x9b}\xaa8d?\x81\xb9\x04\x00\x00\x00\x9ar-\xb6Cx\xef7p\xd6\x9b\xb7U5\xf4\xb6\x1b\xbe\x8c\xb7":39Xx\xa07xeH\xb9-\xbd%\xb8\x02\xb4Z\xb7\x0f\x97M9\x04\x00\x00\x80z9)\xb8\xc1r\t9\xc8\x9d\x0b\xb8\x02\xda\xc38|\x94\xe4\xb8yv59\xae\x84\xd18?\r\xc09\x04\x00\x00\x80\xd9\x12\x119\xfbQ\x17\xb9K3\xdf6\x12[\xb4\xb8 \xb7&9\n\xfe?\xb8>\x04\x819A\x96\x96\xb83\n\x0e\xb8}G)\xb9\x18\xec\xf78\xf5\x15\xf6\xb8\x86O\x969N\xfe\x1f\xb8\xc7\xb2\x0b\xb9E\xf1\x897A\x8b\x18\xb8\\\x8a^\xb8W\x9a\xf7\xb7"E\xb7\xb7\xda\xc0\xd16\x05\x82\x16\xb8\xcb}w\xb8\xa8K\xed\xb8#\x8c\xf17\x8d\x16\x848\xdf~E8\x85Y\xa7\xb8\xdc$\xd98\x06_\xa28^\xfc2\xb7\xa9\xcd\xdc\xb7\x1f\xe3\xf98\x08\xdb\x7f\xb8\x8b\x0f\xcc\xb9\x97\xab58\x8b\xdb.\xb9j\x9e\x177\xd4\xee*7\x0e\xec\xdd\xb7\rb_9)\xa0+9\x04\x00\x00\x00~zi\xb9\x1b\x1bw\xb8\x90\xeb\xb7\xb7g\xae\xe2\xb7<"}\xb8\xf2RQ\xb8Y\x9f\x1e8\xfb\xb1\x88\xb9WO\x1d7\xae\xd5\xc99\xf5z\x109\x04\x00\x00\x002\xd0\\\xb8\x9e\x9d\xef8o\xf1L\xb7%\t\r9\xc0\xcd\xd4\xb8\x1a2S8\xee\x85\'\xb8]\xc6\xc1\xb9\x04\x00\x00\x80\xd6\x91\x069\x82N,\xb9"]\x9e8\x9c0\x966\xf6\xb1m9\xc9\\\x908\xeb\xbc\x88\xb8\xe7\xdcK\xb8\x19A\x82\xb8D\xedX\xb9}\x12S9\x99\x8e\x06\xb9\xa1\x1e\x05\xba\xf3u\x90\xb8\x84\x9cH\xb8\n\xdb\x0f9\xc82\xb1\xb7\xa6:1\xb9\x1af6\xb90\xc6\xea\xb7\xe5\x99N8\xa1 _\xb7bfX\xb8\x10\x8e\x05\xb9\x01\xcb)\xb8\x15MR8\xa8m\x199?\xcb\x18\xb8\x1av\x029g\xdb\xba7\xd8\xd5\xce8\xc7\xc1\xce\xb7j\xbb\xcb\xb8\x11\xc6I8\xd1\n\x19\xb9\xef\xf3\x139\xbab\x9a\xb8$\x91\xca\xb8iA4\xb8\xa8\xb6\x9a7\xaa\x88g9\xc7-\xb39\x04\x00\x00\x00\x05+\'8 \xa7\xc6\xb8Z\xe9\x07\xb6\xd5\x1d\xb28\xf9\xaa}\xb71b\xaa\xb9\x81{\x01\xb8\xc0\x1a\x8a\xb9t\xe0\x8e\xb7\xb2\x9f\xe1\xb6\xf0\xf2 9\x04\x00\x00\x00X\x04"\xb6\xfc\xd6j9\x86\xbf \xb8\xab\x8a\x83\xb8\';H\xb9\xaa\xe3\xfb8i\xaa\x179+L\xeb\xb9\x04\x00\x00\x00[\x80\x029\xaa-\x04\xb95\x03\xc48\x80\xfeh9\x02\x95\x159r\xf0\x9e8_\xccD9v\xfc\xee8\x9b89\xb9\xf9\xb3;\xb9o\x1a\x089+\xea\xde\xb8\x04v\xd2\xb9\x03\x16\x81\xb8\xc0\xf8\x818\xa3\xdf\xca9W\x84E7!\xfd\x958Nt\xfb8\xe4U\xc28\x86i>8!\x02\xf17\xd6\xad$\xb9\tm\xc2\xb8\x9d\x074\xb72\xe6c\xb8Y>\xbe8\xbd\xa2\xa98\xe9\xbb\x1d\xb8\r4V8\x1b\xab>9O\xd7\x11\xb8e# \xb9\xa0\x98\x83\xb7v\x1b}9\xc7~\x128\xab\xac\x8c\xb9\xa1\xceb8\x80[\xc9\xb6\x877W8\x0c\xca\xcf8\x9f\x15!9\x04\x00\x00\x00%\xaa@9\xb9\xd0"\xb9\xc5\xa8\xa88\'\xf7\xcf8\x0e\xc5\x898-\x01\xb7\xb9d\xe0A\xb9b\x0bH\xb9F"H\xb8g\xcb\x159\xff\xb1\xc28\x04\x00\x00\x80\xd5\xeb{5\x88\xa0\xbf9\xe6=\xc8\xb7v=\xec6\xf52\xf9\xb7\xb4z\x928\xfa\x85\xc0\xb7.5\xf7\xb8\x04\x00\x00\x002\'\x8b9\x03I\x049\xc3\xdb\xb68Q{\x0f9\\Y&8`q\xc18\x13\xca\xd488m\xb58+\xee\xcc\xb9`:\\\xb8C\x08\x99\xb7\xfeZ\xd28]c\xaa\xb8\xa9\x8e5\xb8\x04\xdf\xff8\xaeF\x1f\xb8\x15\x9b\x1d8\x16\x03I8\xab\xa4\x18\xb8\xdac\x0e\xb8\x93\r\xcf7\xec\xf0\x019\x8a~\x0c\xb9u\x81\x928\xe1A\xdd8\x80\xe0\x9a\xb8uE<8a<<8c8\x10\xb9b\xb9\x86\xb8\xd8\x18$9~2K86\x97"\xb9?5)\xb8\x10U\xa79\xe7\xb4\x998\xa8\xf4$\xb8\xb8\xf0:8\xa5\x06\xbd\xb7\x98u@8\xb9,\x0b8gl\xed\xb8\x04\x00\x00\x80\xa2I:8\xe8|\xa4\xb86\xdc\x8b8\xfe\x7f\xf6\xb8\xc1.\xdb8\x12\xcc^\xb8\x049h\xb98\xbb\x99\xb8\r\xe9\xed\xb7\xe3\xad\\9f&\xe67\x04\x00\x00\x80s\xe5{7\xc69\x849\xb7s\x925\x05x1\xb8`\x1f-\xb9\xfc\t\xc37*\'!\xb9\x9e&\xad9\x04\x00\x00\x00\x84\x9a=8\xca\xd1\x9f9CG\xab\xb8\x1e>\xaa8\x07\x97\x8f8\xdcZ\x01\xb8:Ev\xb9\x0fH\xd37\n\xfdK\xb9\x8e$\x909\x97v@\xb9\x8e*\x819\x8e2\xc59-F<9c\xee\x1f5\xd7\xddE8\x94V08G\xea\xbe8\xa4\xcfZ7<pS\xb9\xe8\x9f\xca7\xd5.\x1f9\xa0\xf1\x837\x8eh79\x16hD7o\xe5\x03\xb7\xf3\x1f\x8c\xb8\xe3r\xc28\x14\xc6\x00\xb9\t\xc0\xb3\xb8J\x17\x9f87\xba\x109\xc9\xd7<9\x8d\x05\xfe7\xcc\xa8;9\x80,\'9\x14\xf4\xcc9b-Z\xb8;p\xf1\xb7\x86\x84\xfb7\xd5\x95\xad\xb8o\xc33\xb7\x04\x00\x00\x80)\xbb\xca\xb8\x98\x7f\xa99UM\x0c87\x88\x1b8\xce\xa2\x928\x0e\xad\x929\xed|\x949\xf42\x979~\x15\xc18\x15j\x90\xb9>r\x93\xb8\x04\x00\x00\x00\xed\xed\xab\xb6<\xf6h\xb9\xcbG\x8a7\xaf@\x188\x8c\x81\xf7\xb7\xbe768\xb6\xefR\xb9\xde\x9d\xe3\xb8\x04\x00\x00\x80\x1f\xddQ\xb9\x06\x10\xac9\xb4\x0f\x87\xb9\x9b\x03|\xb8+\xcc9\xb8u\x85\x81\xb8\xd9s\x8f9\xc3G\xb0\xb7\xf3]\xba9oQ*:}Cs\xb8\xed\xca]8e\x8e\xe5\xb8L\xc4\x079+[\x0f\xb9wi$8\x12\xdfi\xb5\xe3\xb8\xfc8\xf8jT\xb9&\\\\\xb9r9\xae\xb8\xe4c\x1a8sc\xa7\xb9\x89\xae\xfd\xb7\xcaX\xf8\xb7~\x8ej\xb8%\xee{\xb9Z\xe4\xf38\x100\x128\x0e\xe6\x8e\xb7\x92\xf2\x13\xb7\x0b\x1058\xb3\xb10\xb9OM\xab\xb7\xb3:(9\x0e\xc3\xe28\xbd\xa1\xa0\xb8]\x97\xe3\xb8-\xf1\xe77\xc1\x96\xd7\xb8\xa6#-\xb8\x9a^K8\x04\x00\x00\x80\xce\xe8\xf4\xb8\xf2\x95\xde6e\x93u6\xaa\xe2\xa27rw\x148wi\xf48\xb1\xea\xe78R{\x087\xde\x12\xb18\xcc\xa18\xb9\xa4|\x01\xb9\x04\x00\x00\x80\x914\x8d\xb7}\xb3\xaa6\xe5O\x9b7\x1d\xa2#8\xd9I88\xc7%\xf18\x9f\x8bE\xb9g\xc0D\xb9\x04\x00\x00\x80\xdd\x06l8\xe5\xcf\x9d8\xc5\xe3\xca7\x91\'Z\xb8\x02x|8\x89@\x8a\xb8\xc8\xee\xa38*_,\xb7\xbd127\xfc\xae\x059l7r8c\xb3n\xb8\x1e\x88\x82\xb8b\xfc\xa4\xb7\x10\xa2\xa0\xb8~\xa9g7oz57::\x84\xb7\xbd\x1f\xdf\xb7\xa8\x9f\xe9\xb7\xd8\xb5h\xb8D0Y\xb83\xd1\xca\xb8\xb6Hl\xb8\xf2\xa7\xc0\xb7~\xe1\xb4\xb8\xa8\x8d\xa57\xd9\xb2\xbf\xb86\xfe\x849\xb2\x96\xac7aWT\xb8\xe6\x86\x8a7`\xaf\xf6\xb7\xaff\x02\xb7\xae|r\xb9\x1e#>8\xc2\xae\x92\xb8 \xe0\x0b\xb8KV\xd16\x82Ue\xb8\xca\xdf\xf18\xa7\xbb\xd17\x04\x00\x00\x80N\xd3\xfe\xb7\xc0\x8e\xcb\xb7\x9b\x90\x95\xb6\xf5\xac\x1c7"h\x897<EC8\xfe\x98.6d\xd7M\xb8\x0bP\x997\xa1`\xe6\xb7yj{9\x04\x00\x00\x80\xa1\x14\x11\xb8\xb3\xf2\x8f7Z.\x10\xb9s-\x018\x9d,Z8I\xcfO\xb7\xbc/*\xb9\x9eN\x83\xb8\x04\x00\x00\x80\x8c\xf9\x848fT)\xb8o\x0e\xf46X\xb3\x80\xb7\xdf\x82\xcd7\x97\xf7\x016k\r\xf27s\x00\xda\xb7\xbe\xb8C\xb8P\x9b3\xb8\xf2J%89}\xed\xb7\x05.\x8f\xb8"\xc7\xe6\xb6\x96N\xeb\xb7\xac\xe9\xdb6\xe5=\x8b7L!\x138S\xcd\xd9\xb6\xbcf58\xdd[S\xb5;\xf7(\xb8K\x12>\xb8f\xc5*7\xd2s&\xb7?\xe0\xb6\xb6\x08\xaaW\xb7\x9e\xaa\x9c\xb8\xfe\x86I9\x86N97\x81\xc0\x8d7\xc0\r1\xb7\xf5\xacx\xb63\xe0\xfb\xb4\t>\x927\xc1\x8bg7\xba\xd6C\xb7\x16\xa5\x05\xb4\xa3\x00\xb77\xc7\xe285Z\xbfd7\x19\xaa\x8b6\x04\x00\x00\x80\x9e\xa3 7\xcd0\x89\xb6\xce;D\xb5\xac\xb9\x886\xcd\x94E6\xaa\x12\x007\x8d\x8bU\xb5\xdfl\x00\xb7\x08e1\xb6\xd6\x1e}\xb6w/\xbb8\x04\x00\x00\x80\x12\xe4K\xb6j\x06\x166\xb8\xab\x95\xb7Xb\xf05Fm\xcd7\xa4l\x07\xb6\xf6n\x9e\xb8!\x16+\xb7\x04\x00\x00\x80z0\xe36o!\xde\xb67B\x875\xc2\x06\xc3\xb5\x1e\xb6\xbb6w\x80\xaf5B\x89\x174\xd3\xca95C\xf9\xbd\xb5{B\x17\xb7Kc\x8f5\xec\x95X\xb6\xfd9\x06\xb8,V\x9f6\xa5i\x9a\xb6\x81Y\x885?\x03\x83\xb7\xd6\xd3k6xZ\x85\xb5}{\x0f7\x86Sj7bj\x05\xb7\x86\x8d\xbc\xb7\xf8\xffc\xb6\xdd\xe3\xe4\xb5\x07\xdbe6\xc3\xc9\xb0\xb6b\x80&\xb6\xe2\x0b\xb6\xb6\x91\x96\xa45=\xa7\xfe5\xda\x9c\xb1\xb5\xed\x1c\x96\xb3\xa5\xda\x07\xb2\xbd\xf3\xc82\x9f+\x0c4<\xabk\xb49FC\xb3\xc8C\x0c\xb5\xdb1\x9e\xb2\x06%\xaa3\x82\x8b\xa83\x04\x00\x00\x80en\x8a3s\xd2\xbe\xb3\xa4\xe9l\xb2\x93\x91[5\x04\x8bC3\x98\x9f\x1a4\r\x1c\x98\xb3\xcf\xfd\x1c\xb4&\xcf\xeb\xb2\x10\xa2\xd2\xb3\xe6\x03W\xb3\x04\x00\x00\x80\xc7)u3\x02 53\x93n\xb25\x9d>\x0e3\xc5\xd7T7\x81~#\xb3w\xd6\xc02f\x99B\xb4\x04\x00\x00\x80p\x87\xe63\x8f\x0f\x06\xb4\xa8+\xc82\x14\xef\x8e\xb3\xf4\xb8\xe43,\xa772\xd7\x83 \xb2\xa3O\x84\xb3\x9f\\\xe5\xb2\xe0\x008\xb4\xb6\x1c\xad2\x98\xd5S\xb3\xcc\x9bR\xb4,^\xc03Wp\xba\xb3\xa5<\x962:=\x80\xb7\x89m\x873\xf6\x1f\xc7\xb2#I\x164B\xfc\xaf5\x0e"\xc8\xb3\xf9@O5"L\xb0\xb3).\x01\xb3~\xc0\x8a3\x84\x01:3\xc5\xda:1B$\x01\xb2\x04\xb5\xc62\x85\xc7Z\xb1\x88n\xd6\xb2>\x9ea\xb1\xf2/\xcc\xaf\xb2\x03\x970\xb1\xac\xd21\x97\x1a1\xb2i\xc4\x84\xb4\xec\x82,\xb0\xd9\xc3m\xb0o\xae\x7f1;R}1\x04\x00\x00\x80\x82\x0fP1\xd7f\x8f\xb1\xe1\t2\xb0\xb6\xb4\x8c0\x13\xf3\x121\xb6e\xe81\xc4#e\xb1\xfd\x08\xe9\xb1\x925\xb1\xb0<b\x9f\xb11\x95!\xb1\x04\x00\x00\x80!=81K\x1d\x081\xa9\x00\x9e0s\x18\xda0\xd1<\x11\xae\xe0\xba\xf5\xb0.;\x850\x8d\xc9\x12\xb2\x04\x00\x00\x80\xc7=\xad1\xeb}\xc9\xb1Um\x960\xfe\xd3V\xb18\xe2\xab1\xa4\x03\n0z@\xf1\xaf9WH\xb1;]\xac\xb0\x0eG\n\xb2\xc1\x17\x820\x911\x1f\xb1kE\x1e\xb2\x0f\x90\x901\x95\x1b\x8c\xb1\xeb\xcda0\x0bk&\xaf\x93\x97K11\xa4\x95\xb0\xb3\xe0\xe11\xc2*\x9d/\x1df\x96\xb1\x13\xf8\x9f\xb02\x82\x84\xb1\x15(\xc2\xb0\xea\x8aP1K\xc8\x0b1\xd1i\x0c/\xd1\x1c\xc2\xaf\xcdS\x950\xcc\xd1\x8e/\xef$\xa1\xb0\x12\xbf<\xb4 \xe7r\xb8\xc6\xe6\xbb8\xac\x14x5{\xae\xcc\xb5\x7f7^\xb7\x83x\xa7\xb8\xd9 \xbe\xb5L\xbf\x135\'b\x125\x04\x00\x00\x80\xfc\x95\xb13?\xbb%\xb5[\x12\xef\xb3\xa9\x9d"4\xe4\xd4\xa94\xc53\x865\xb8C\xa68\x99b[\xb6\xa4\xcdL\xb4\xb5\xcb2\xb5Z\xbe\xba\xb4\x04\x00\x00\x80g\xed\xd44am\x8d4\x17\x9b64x\xd3=7d@\x9b\xb5\xa3\x0cY\xb4.\xfa\x194\x069\xa8\xb5\x04\x00\x00\x80\xa17H5\xf1\xddh\xb5[b!5\xa2G\xf8\xb4\x00\xb8\x945\xeb\n\x1e49\x89\x9d\xb4X\x89\xe7\xb4\x95\xf9F\xb4\xb0*\xa0\xb5\x9fY\x164x\xfb\xb7\xb4\xa5\xbc\xa38\xd3\x1d\xac\xb5\xaa\xec!\xb5\x8f{\x024V\t\x97\xb2J>A7I\xf1,\xb4\xfe\x89.\xb9\xe4\xa353P\xeb\xa58(\xab9\xb4\x80\x1a\x19\xb5\xb2c`\xb4\xc4\xd3\x8b\xb6\nk^4Q\x94\x9a4\xb1V`\xb3i\x94,4\xc19\xb2\xb2\x98<:\xb4\xc0\xab\x98\xb7)\x8e\x01\xb8\x16t*9\x99\xe3"9\xca\x0b\x0e\xb8\x8f\x04"\xb9\x16\x81\xb4\xb8F\xa6F\xb8\rt\xc97\xc0#97\x04\x00\x00\x801\x91\xaf8\r\x8d\xa7\xb7\x97\x81\xa16\xb1\x17\x836\x1d\xe6\xe3\xb6V\xa2\xda7\x87\x1b\xaf8\x15\xf5\x17\xb8 \xaf\xa81\xdc+\x8a\xb8\xc3\x8d2\xb8\x04\x00\x00\x80\xc4\xe2\xbe\xb7\xe5\x9b\xf66\'\xb3\xc4\xb7\x87\xa1\xa77\xec.\xd2\xb6\x85x\x958\xa5E\x8e6\xa7>\x16\xb8\x04\x00\x00\x80V\xfe\xba7G\x19\xbb\xb7\x81z\xc16\xc7tH\xb7\xda\xa9\xe975\x06\t6z\x0c\xff4g3\x88\xb7\xfd\x94\xa0\xb6\xd0\x15\xfe\xb7\x82\xceq7_W0\xb7xb\x0e9$\xe5\xb76\x07\x89\x82\xb7\xf7GV6\xb1_\xca6t\xce\x088\x98Y\x86\xb6+\x82\x93\xb9\xb4{\x8e\xb7\x7f[k8\x86\xf9G\xb8\xa8zs5\xf4\xe2\xb4\xb6v,o\xb9x\xfe\x806\xf1\xc6\x079>+\xc4\xb5\xb5c\x9f6\xde,\x8d\xb81\xde\x96\xb6\x89T\x04\xb8G\xf37\xb8\xa8X\xc89Y\xf949\x9cy\xf0\xb8\x1d\xcf%\xb9\xa6\xaa\xdd\xb8\x16\xb5\x98\xb8$\x1f\xe97\x8f]#8\x04\x00\x00\x80X\xabX9\xf6\xfd\x95\xb8\xfe\xf7J7\x14(\x11\xb7\xdf>\xca4\xc5c\xc98\xa0\xc6\x019\xc2\x99\x05\xb9\xaa\xed\xae\xb7\x1c\xd5\x82\xb9\xab\x16\xb98\x04\x00\x00\x80\xbf\x14\n\xb8\xba\xaa\x068\xb3\x8b\x1d\xb7\x82v\x9f7\x90\xef\x90\xb87\tU9\xf60\x078=\xdb\xea\xb8\x04\x00\x00\x80\x9a1\xb58i]\xa9\xb8\xb2\x80\xef7\xfaI\xad\xb7.\xfd\xab8\xad\xc8\xc66\xe9\x98\x079\x1b$-\xb8\xb7\xf9\x93\xb7\xc3 \xf7\xb8\xa6\xee\x8f8g\x95S\xb8\x01\x1e39\xe7\xc0\xe08\x9bGn\xb8\xfc\x06\x817hcP7+\x19\xf07T&\xec\xb7\x80\x9c\xbb\xb9h\xa7\x97\xb7WU\x9e8\xa5\x8d\x1a\xb9\xd5\xc7\xb9\xb7\xf0\x8d\xa2\xb7\xb6\xd1\xea\xb8\x17UK\xb7m\x95\xac8\xcf\xe0\xce\xb72\x83\x867\xfb\xde#\xb9\x81c2\xb7\xe5\x86E9v35\xb9\xfbx\xad\xb9\x8f\x04\xbc\xb898N\xb9U\x1dh\xb6n\xcc\xdb\xb7\x8f-\n9\xb3Z_6\xd4\x04\x10\xb9\x04\x00\x00\x80y\x894\xb9\x07\xa5\x81\xb8|\xeac6\xdf\xed\xd4\xb7\xb6\nA7\xb3fv9\xad\xf6\x858\xd9\x97E\xb9\xb6\xbe\t\xb89p\xb1\xb9\x16\to9\x04\x00\x00\x00\x87\x0f\xbb\xb8\xb3S*9\xb8\x94G8\x06]\xed8\xe7\x97\x868x\xa6q8\xce\x00\xb78\xb9\xa8\n:\x04\x00\x00\x80\xf4\x06#9N\xf9\x0e\xb9\xcci\x05\xb7+d\x99\xb8\x8fn\x1e9^\x98\x15\xb8\xc9\x93\x009\xb6\x1a~\xb8\x04\xfc\xc8\xb88?<\xb9X\x98\xe98\x83Ht\xb8\x16\xc0\x1e:\xee\xa2\t9\xa4\xde\xe6\xb8\x0b[\xbe7\x98\x15\xcf\xb7H\x87\xfc\xb8L\x8c\xc5\xb7p_\xa8\xb9\xbfbB8ft\x8e\xb8Tw\x93\xb8G\x05\xef\xb7\x01\x92)\xb8\x0e\x8758\x91f(87L\xc1\xb8\xad3\xe48\x1d\xc2\xe470\xe8\x08\xb9S]98^\xb7\x948\x16\xd1h\xb9\xe6\xce\x08\xb9\x84/\xf0\xb8\x942+\xb9\\\xcc\xf77?\xcb\x99\xb8I\xa8\x06\xb9\x01&\x8e9DGH\xb9\x04\x00\x00\x80\x14\xd5F\xb9\x81\xd5X8P\x8f\x1d8N\x19\xe08\xc9$a6\xee\x1bB94J\xef7\xd99\x86\xb9y\x1d\x8e8\x95\xca\xae\xb9\x0c\xf9\x1d7\x04\x00\x00\x00\xdb\xf9\x86\xb8m\x99]9A\x08c\xb7kh\x968\xd8\x81b9x\x0e\xf28\xc2C\x9b\xb9\x0e\x18\xcc\xb8\x04\x00\x00\x80\xee\xc5a9\xd9\x17\xb5\xb8\xc0\xad\x807>`\x0b\xb9\x95h\x9a8\xf1\x80\x12\xb8"4E9s\x01\x01\xb9]8"\xb9czo7#>&9\xe5\xbf\x9e\xb8W\xea\xbd\xb8\t\xcd\xf37\xfd\x8b\x00\xb9y\x0e98(\x07f\xb7\xa3\xfa\x17\xb8T\x1fR8\xe7\xda\x99\xb9\xdeX\xa97\xbff\xb3\xb8\x19\xe7Q\xb9si\xe3\xb8\xe0\x10\x15\xb9\x9bj<6\xad\x87P6\x81\xe7\x91\xb8#\xb1\xe88p\xc9\xb87\x17\x0e+9:\x94\x948\xd7q\xc5\xb8v"\xd4\xb8\x1c5\xa79\xe8\x99y\xb95\xde\x84\xb9\x9d\xaa\x1b8\x1b\x7fS\xb81^\x8d\xb8\xe2\xe8Z9\x7f\xf46\xb8\x04\x00\x00\x80G\xf8\xff8\xd5\x1f\x9b\xb8\x97h~8\xcf\x0c\xe78\xaa\xa1\xf4\xb7\xe8u\x969Gr\r\xb9\xd0O\xfe\xb8\xd1\x1e.\xb8\xe5:_\xb9\xc5\x85\x05\xb7\x04\x00\x00\x80\x8b\xc9\xd95\xc0\x0bQ9\\Y\xe4\xb8\xea\xfc\xd2\xb6A\xa2w9\x0cw\x0f9\n&\x90\xb9\xf6# \xb9\x04\x00\x00\x00\xa6\x02p9\xc3-\xc88\xc0\x9c\xb07\xebm\x06\xb9\xa6\r\xe58y\x03G\xb8\x9a\xf1L\xb96\xaa\xcc\xb8@\x92\xa8\xb9\x9c\xd0\xb59{\x89 9yA"\xb9\xc8\xc4)\xb8\xf5\x17\xf88u-\xc08\xaf\x9d\x859Z\xddJ8\xe8\x00\xda6\x85|\x988\xc3\x9ay\xb9Q=\x997Dc#\xb9\xe9\x87 \xb9\xa8s\xd6\xb8\xf7\x7f\xad7\xa9\x96G\xb8z\x1f\x1a7\x19)\xd58\x00\xb1\x80\xb8\xf4\x98\xe7\xb8^\xbc\x029\xbd\xd0\x109\x8f\xf7\xce\xb8\xa3\x7fT\xb85Z\x9e9{\xbc\x08\xb9\xbe\xc7\x878\xe3\x8a\\8R\x9e\x9b\xb8\xa0\xec\x08\xb9\x91\xae@9\xe0\t`\xb9\x04\x00\x00\x00:A]92 \x8b\xb8\xce\xf2\x928\x81\x0f\xba6\xb7\xc3#\xb5\r\x8bm\xb9\x8b(\xeb\xb8\x98W~7I\xe7\r\xb9"\xb4v9\xf8\xe6-\xb7\x04\x00\x00\x80O\xf5"8\xe0\xee\x0891Uk\xb7\xfc\xb1\xf57c\xcb\x9a9\xd7\xe6\xe88\x17\xac\xbb\xb9+\xdf\xbc9\x04\x00\x00\x00o\x9c_9L\x12w9#\xe1\x948\xdeT\xc58Pf#9G!\xc08\x0b\xa1\xf0\xb9\xff\xb1\xae8\n^\xac\xb9O\xef\xc19C\r&9&<R\xb9\xa2\xf1\xf89\xb9\xed%8\x91\xf2\xf18|\x97R\xb6\x01\xa2\t7;\x90Z8\xa7\x05\xdd\xb8\x904\x86\xb9\x17\xab\xac8zrl\xb8\x85\xd0p9\xa8}\xde\xb8\x13\xeey7{\x84\xa0\xb8H\xaf\x03\xb8\x86\xe8\xca8\xb2\xcdw\xb8\xfc\xebt\xb8{\x84\xb1\xb7a\x81m\xb7~\xb0\xab\xb8X\x08\x91\xb80\xf3\x809\xf6\x9a\x0b9\xa8\x08\x01:\xf9rb8UmN\xb8\x1fG\xbd\xb8\xd0V\xcd8\xb5=\x19\xb9\x04\x00\x00\x80\xbd\xf1\xba8\xbfa\xc29R\x07\x86\xb7\x83B\x817\xfa\\,8\xdbr\x1b72@a9\x1d\xfb\x049\xc4c\x1a\xb9\xc4\xec\x1d9x\xa9 \xb8\x04\x00\x00\x80\x83\x9b28\xce\xbd\xe9\xb8u\x97\xb9\xb6\'\x8d\xbb\xb8`_\x9e\xb8.=\x919m\xa9J\xb7\xd5\x99<\xb8\x04\x00\x00\x80}\xc4\t\xb9\xd1\xf4p96\xf2,\xb9NR+9\x92\xce\xa98\x80Z\x8f\xb71\xef\xb8\xb9do\xf68\xbf\xdf\x959\x99\xda\xc89=\xfa\xe47\xc0!\x08\xb8\x1b\x03n8\x9ab\x938\xcd\xed\x12\xb8\x94D\x038\xcb\x91\xec\xb6\xf0\xbf\x0399"\x84\xb8\xca\xd3\x99\xb9\xc2\xc2;\xb8\x82\xea*9\xbb\xbb\x7f\xb8\n\x13%\xb8\x1a\x10\x9d\xb8&\xc8\xf2\xb8\xa8\x8b\x08\xb9\xff\xf6U8\xa2\xc6\xc2\xb8\xb4\x92\xdb5n\x0c-9e\xe2\xf68E\x11\x899\xa0\x84I\xb9\xe5\xc6\x919\x94\x8bc85E\x009\x7f\xe7P\xb8\x0e\x07 \xb8\xf8g\xad\xb8\xcb.\x99\xb8\x01\xf8\x8d8\x04\x00\x00\x80\xf4q\x10\xb9:\x1dS9\xb36\x9c\xb7\xf65\x8b\xb7>-\x158xo\x859\xb2\xf8\x159\xa0a?8<\x1d\x16\xb8\x15\x9dz\xb9\x01\x12\xc2\xb8\x04\x00\x00\x00m\xb8\x11\xb9\xdb\xef\x139\x069\n\xb8^7\xb48\xf2\xa2\xfb8\x1bk\x198\x85\x15\xbb\xb7\x1dk\x8a\xb9\x04\x00\x00\x80W\xebs\xb8E\xc6\xf28\xe1\x0b\x13\xb9!\n\x9e\xb54\xfb5\xb9\x15\xd9\x9b\xb8s\xbb\x969\xb8\xa7\x0b6x\xf5C9\x9c_9\xb8|\xe7\xe8\xb7D\x91\x9d9\xf0\x0e9\xb9y\x1f!8H\xa25\xb9\xc4BU8\xe2n \xb7)G\x0f9.\xba\x10\xb9Jo\x8d\xb9g\xf8q\xb8\xa3q\xd1\xb6ds\xdb\xb9\xff\x12\xa48\x1d\xab"\xb8[ \xb9\xb8\x8a\xd9\x8a\xb9\xefYP\xb8~a\x089\x88_d8\xa2U\x1c9\xb6\xb3B9\x1d\xe5\x02\xb9\xc4\xb8"\xb9\x9c\x80m9Jm\xa18\xe2\x84-\xb9\xa6\x0f\xa2\xb8\xa5\x07N\xb8\xce>\x008t\x8aW\xb9r\xea\x8b8\x04\x00\x00\x00\xdb\xdd\xbb8\x86\x04\x1e\xb8f(;\xb7\x1ao\xa17\xce\xd7\x1f8\x9bQ\x1f9y\xb8\xcd\xb7\xdd!\xd3\xb8\x8d\xc9\x9c8\xa3\x83B\xb9\x06\x0b)\xb9\x04\x00\x00\x80\x08\xe6\x98\xb7(\t%9M\x18\x9d\xb8(\x8f\x1a8f\x81\xcf8\xb5\x9c=8\xbeM|\xb8\xf7!\x12\xb9\x04\x00\x00\x80+\xa2\x039\x01\xd2\x03\xb9\xd8\x85\xf06\x17\x8fE\xb8<\'\xaf7\x93\xbb\x82\xb8\xabB\x049ci\x81\xb8\xb4J\xa3\xb8\xea"&\xb9\x92\xce\x178\x15\xfb\x81\xb7\x9awg\xb8\xff\x98d\xb7\xc1\x91\xc8\xb8G\xdc\x8f7W\x84\xf3\xb7\xae\'\x9a7\x02\x0c\xba\xb7\xe84"\xb9\x9b\x17\xa57\x19\xab\x19\xb8`\x97\xcc\xb8\xfcm\x9a\xb6\xf8"\xc6\xb7\xc5\xa9Q\xb7@\xf2K\xb8\xfccx\xb9\xad\xdc[9.\x01\xb87rS\xe9\xb7\xab9\xf98b\x11P\xb8N\xc0\x87\xb7\x0f\xfdZ7\xfd\xe0\xd57T\xa4\x8a\xb8\\\x8d,\xb8s\xad\x80\xb7\xe0\x88>7\\-\x827\'p\xbc7\x04\x00\x00\x00\nt\x079bf\x0f7\x8b\x8f\x8f\xb6\x91\xab38\x8b\x85t7\x16\x03\x808\xe2\xc7\xed7\x85\xc7V\xb8\xb5`\x1e8\x91x\x8b\xb8\x9a\xd5i9\x04\x00\x00\x80l\xdd\x10\xb7\xefL\x937n\xaf\xc3\xb8\'Y\xfe7\xc6h\x8b8\xe6\rG\xb7\xa4`+\xb7\r\x0e\x86\xb8\x04\x00\x00\x80\xf1\x8d\\8\xa5~\xca\xb8D^\xf95\xd8\x90\x93\xb7\xaf)B7]9\xc86\x0f\xc8\xe48\xd9\xc0L\xb8\xa0\xef\xbf\xb6\xc2\xedX\xb8\xc5\xa1\xc36\xc8\x9c!\xb8\xd5\xdc\xba\xb8\xd0\x85\xd6\xb7 *\xe2\xb7x\xf4\xf16\x7f\xad\xab\xb7cD\xeb7\xdc\xa3\xeb\xb6rO\x10\xb7\t6\xd27\xf9\xac\xf2\xb7\xff9|\xb8R\x86\x057\xcd\x96\x1c\xb7\xe9\x07\x837\xc6\xfb?\xb8\nw\xb5\xb8S\xe6\x7f\xb8r\x89+7(\x19\x8b\xb7\xfaSB\xb7\x18)y\xb6\xb1\xa2\xd6\xb5\t\x80R6\xb3&\r\xb8\x81\x95C\xb7\x85\r"\xb6\x83\xd7=\xb6\xa5G\x83\xb5\xb6\x0c\x938\x8c\xe0\x8b6\x04\x00\x00\x80\x9eP\x007*\xfb\xbf\xb5k\xfa@\xb52$\xf47yH"6\x89\x90\x017\x13!3\xb6\xfb\xac\x00\xb7o\xa3\xd26f\xd5\x00\xb7\xfd+\x1f9\x04\x00\x00\x80\xa1AJ7EQ\x166J\xbe\x886[\xda\xf05\xeb&88\x8b\xaf\x07\xb6\xd1\xe6\x965\x93\xa6[\xb7\x04\x00\x00\x80}\x0e\xcd6\x02\xb7\xdb\xb7\x81\x89F\xb5\x05 m\xb6E\xa5\xa16\xf5z\x8a5\xf0MS7\'\x98\xaf\xb3\xdc\x8f\xbe\xb5\xac\xf4\x0e\xb7\xdd\xaa\x8f5D{\xb6\xb6<\xe4\x03\xb8\xb6\xa5\x9f6Cc\x96\xb6\xb1\xa2\xc15\x923\x865f\xa3\x8f\xb6e\x0fB\xb5L\x84R\xb6\xd3\xe7*7\xa9\x17\xa6\xb6\x92\x1bw\xb6\x0b\xfbS\xb6\x83j\xd6\xb5y\x0ef6W\x19\x8b\xb7h\xa2F\xb6\xe6\xa0f\xb6\xb8\xf4\x0367\xccU5\xd7\xca\xb1\xb5R\x1a\xfa\xb3\x98Xb\xb2.g\'3_\x1c_4\xd9R\xc4\xb4H\xac\xa2\xb3\xc7\r\x8f\xb5\xaf\xc8\x03\xb3W\xb7\r4\xf6g\x0c4\x04\x00\x00\x80\xcc\xa3\xe63\xcd\xf6\x1e\xb4\x1b\\\xc5\xb2R\xe7\x185\x97\xe5\xa23\x0e\xcf\x804\xa9\x01\xfe\xb3\x8e)\x81\xb4\xc4pD\xb3\xafh\xfe\xb3>\x1e\xb3\xb3\x04\x00\x00\x80\x1a\xe6\xc73\xcb\xe2\x963{c\xbe4\x8b\xc3q3\xa7\x92\xcc6\xd72\x88\xb3\x9a\xb0\x133\xa5\xb1\x8a\xb4\x04\x00\x00\x80\xba\n@4\xba[_\xb4u\xc0&3L$\xee\xb3r\x89>4\xee\xfd\x982\x80\xb7\x85\xb2\x9b\x16\x9f\xb3\xe3\x11?\xb3\xa7H\x99\xb4\xf75\x103?x\xb0\xb3\xb8r\xaf\xb4E@ 4\x04P\x1b\xb4/O\xfa2\xdc\xbd\xe2\xb6\x073\xb73z\xe1%\xb3\x01dz4RB.2u\xb8&\xb4\x80\x91m1\x08\xe3\x12\xb4\x19:W\xb3\x98,\xe73\xb5\xf3\x9a3\xb8\xd8\xc2\xb4\xeeW\x0b5^\x88%3m2\xbe4\xce\xa12\xb3C\x04\xba\xb1\xeeX(\xb0\xf8\x03\xf90.\xb2-2\x8e\x04\x92\xb2\xc2\xfaq\xb1\xffRP\xb0\n\x08\xc4\xb0\x95\xcd\xd21l\xdb\xd01\x04\x00\x00\x80u\x8a\xab1`v\xec\xb1\xd6\xc9\x92\xb0a\x04\xe80\x04Pr1\x1a\x9b?2\x8c\xeb\xbc\xb1\xb8!@\xb2\xce\x1a\x12\xb1ph\x03\xb2\x958\x85\xb1\x04\x00\x00\x80\x80\xe6\x9711r`1\xf1D\x021{\xd031W~o\xae$\x99J\xb1\x1d\xb1\xdb0\x8a\x0br\xb2\x04\x00\x00\x80N\xd5\x0e2\x08 &\xb2\xf9\x0b\xf80\xd9\x1e\xb1\xb1\xc2\xb6\r2!\x94c0\x08\xe8F\xb0\x0e-\xa5\xb1(\x1c\x0e\xb1N\x03d\xb2A\x84\xd60Q@\x83\xb1\x9f}\x82\xb2z`\xee1\xe2\x07\xe7\xb1\x94+\xba095\x89\xafM\xdb\xa71U\xc0\xf6\xb0\r;:2\x8e\x94\x010\x18\x00\xf8\xb1\x00\xe4\x03\xb1\x0b\x80\xda\xb1\xcc\x13 \xb14\xf0\xab1\x90~f1\xee\x88g/y\n \xb0\xc6;\xf60z\x8d\x87\xaf\n\xdc\x04\xb1\xd0\xef\x0c\xb68\x98\xd0\xb8\x01q\'9!T\x166\n\x01j\xb6$\xf3\xd3\xb7\x16A\x92\xb7\xbb\xc2\x08\xb5\xd4\xe9\xa85\xa6Z\xa75\x04\x00\x00\x80+^\xd5\xb5My\xbd\xb5,=k\xb4k\xe9\xb94T)B5Qm\x196a\x01\x8778\xd8A\xb7\xa2$\xea\xb4-\x97\xd2\xb5\x01\x7fU\xb5\x04\x00\x00\x80#as5[O45\x00\xc4\xd04\xd4o\x9177jv\xb6\xd0\xd5!\xb5+\t\xb04\xf6\xd6A\xb6\x04\x00\x00\x80\xa7#\x036\x15\x1d\x05\xb6\xa4\xc1\xc64\xf5\xeb\x8d\xb58\x98\x986\x94<\x105\xd6(\x1e\xb4cZ\x84\xb5\xf7\xa7\xe3\xb4\rzN\xb7V\xce\xab4\xd8VR\xb5\xa2\x82l7\x86\xdd\xe9\xb6\x1d\x1f\xb9\xb5\xc37\x964\xa1\xe4Z\xb3\xe2\xa9\x957\xcf\xb7\xc5\xb4*\x0f#\xb9`\xa9\xcf3\xb6\x0b\x847\x87^\xd4\xb4_\x11\xaf\xb5\xf0\xc1\x02\xb5C\xa7\xc3\xb6\x13\xb185\xb1%)\xb7\x03=\x00\xb4\xbbR55\xec\x97T\xb3\xaf\xea\xd4\xb4\x99\xb754J\x98\xc3\xb8\x063\x909\xf0\x18*9\x11,T\xb8\xe6VS\xb9\'D4\xb8\x9e\x01\xa9\xb5#\x1858A\xb0\x957\x04\x00\x00\x80ZN\xdc7\x96\x13\xac\xb7\xbc\xd4\xf33r\xa1\xa86\xf1\xb3@6xB\x0b85\xc2\xb27V\xfa0\xb8J\xdc\xfd\xb6\xc6\xc0\x0f\xb8\xdf\xd3\xd3\xb7\x04\x00\x00\x80\xfdL\x936\xc5\xe0/7\x01\x9e\xf8\xb6xf\x088\xcdj\xe7\xb7\xe9\xc6T7\xc7\xe1$7\x86\xa90\xb8\x04\x00\x00\x80\xb0v\x1c8y\xa5\xed\xb79\x1e\xb46J\x0e\xb0\xb7m\xd1\xb57\xe8SA6\x91\x0e\n71*4\xb72\x8d\xce\xb6\x1ef\x83\xb8\t\xa8\x008\x00$\x8a\xb78`M8\xa3`Y\xb6C\xfa\x9a\xb7q,\x8f6\x8bJ\x03\xb5`\xe8^8\xa8\r\xb4\xb69\x16\xa1\xb9?|\xaa\xb6-\n\x8e7\xff\xf8\x8c\xb7/\xa4k\xb6\x18\xad\xe8\xb6\x06/?\xb9\xd8\x8b\'7B\xb3\xaf8\xdd3\xac6Zb\x116j\x8456\xa4^\xc1\xb6\x82l\xbc8N\x84%\xb8\xde\xf2\x9b9\tx\x00\xb8\x8c\x92\x1b\xb9\xe7\x9c=\xb9\x0c\xec\x83\xb85\xde\xaa\xb8S\xdc78\xca\xbdQ8\x04\x00\x00\x80\xed\t\x8b8\xe4sY\xb8}\xdb67\xbe\x8dF7\xab\x85\x106f4\xcc8x\x83\xb7\xb6\xcb\xb6\x90\xb8\xce\xf3\x13\xb8\xe6\xbc\x17\xb9H\xb7\x90\xb8\x04\x00\x00\x80\xd7\xeb(\xb8\x90r88\xe5\x1e\xf3\xb4\xeb\xea\xc27N(\n\xb8kI!\xb7\xcf\xdb\x1d\xb9\xde\xca\xab\xb8\x04\x00\x00\x80\xab\xd1\x808\xeb\x94\xaf\xb8`\xe3\xd67\x15\xb8\xdb\xb7\\\xe9\xf67\x19\xd847d\xa4\x808\x8c\xa2\xf7\xb7\x96\xc8\xaa\xb7z\x02\xec\xb8.\xcb\xb48\xbe\xb1\xe5\xb8\x11\x07\xe38\xa94\n9\xd4>T\xb8\x0cD\x0f8g\xd3\xe2\xb6d"\xc07\xd3\xa0\x83\xb7Nd\x9d\xb9\xb4\x0e\x9e\xb8P\xb3T\xb7\xfc#|\xb8\x83\xa9\xdd\xb7\x0e\x8e\xe0\xb7\xa0\xcd\xc5\xb8C\xc7\x1d8x\x00"\xb8\x19\xd4$\xb8\x07\xa0\x87\xb6\x18a\x87\xb890\x90\xb5F\x88}5\x8c\x0e6\xb9Xr\x8a\xb9p\xb4\x80\xb8D\xd5r\xb9=\xa31\xb8\xa5\xa4*\xb88k\xd5\xb8\xb1f\xba\xb8\xa3\xd3\xac8\x04\x00\x00\x80\x9a\xd0\x93\xb9\x10\x8f\xa4\xb8hC\x928\x17_\x068N047\x97\x82"9m`\xab\xb6\x88\x9f\x80\xb9\xa8\x18^7\xa6\xfc\x9c\xb9\xbey29\x04\x00\x00\x00\x02\xd1\x1a\xb9\xb6ji7#$\xc18\xc5\xbe\xc48\xac\xecv6\n%M\xb8\xf7\xcd\xd7\xb9z\xab\x999\x04\x00\x00\x80\xf2\x87\xe78\xb4L\xc0\xb7\xee.\xcc7\xea<q\xb8\\\xec\x9a7v\x88\x957\xc8:$8\r\xd0x\xb8\x11S\x96\xb8\xf3\xc3\xc9\xb8\x89\xdd\xfd8W\xce\xdf\xb8\xcf9\xaf9\x9eL\x9e8\xeeC\xc7\xb8\x98=\x0c8\xc9\xa2\x1f\xb8t\x05\x0f\xb9\x00\xa6\xcc\xb5+\x93\x9f\xb9\xb3\xa7\x8f7!\x1cf\xb8\x0f\xc9l\xb7\xef\xc1~8o\xdb\xde\xb8\x14s\x05\xb8\xe0\xee\x1e9]\xfa\x91\xb8=@\xdb8\x88\x93\xb47\xcf\xebc\xb9\x02\xcf\xbc\xb7H8\n\xb8ET1\xb9\x92\xfc\xaa8\xce\x89L7M\xfa_\xb9\xe9\x91\x987\xa9\xf7z\xb8\xc4\x0f\x15\xb9\xa3\xe3;9\xcc\x8bW\xb7\x04\x00\x00\x80p\x0ch\xb8O\xc1,\xb9\x0f\xbc\x8e8\xfa\x8a\xf38\xc9*68\xe0Mq96`\xc88\xa3f\xdd\xb8v^\x0e9\xae\xa7\xb0\xb9Z\xd9(\xb8\x04\x00\x00\x80q\x1d\x83\xb8\xa3\x84\xa4\xb6\xbd#\x1569\xae+\xb7\xc8a\xe98)E\x1c\xb8\xec;\xeb\xb9\x89\x91\xc09\x04\x00\x00\x00!5\x0f9\x12^#99LA7|\x16\x00\xb9\x1ct\xe77zx\x007\xd1o\x138T\x1b\xe9\xb8f\xd2\xc5\xb8\x12t\xe19\x94\xe1\x888\x0b\xb7\x8d\xb8i0\x07:&Q\x988}\xff\x94\xb8\xa1\x82O8\xe1\xf1|\xb7\xc1\x1a\xdb\xb8\x88\r\xc58\xc6\xb1\xa8\xb9\xedn+8\xbbC\xba\xb8\xfc\x17x8\x92S\xe6\xb7m\x1d\xbe\xb8&\xeb+\xb8O\t.8]\xd8\xca\xb8\x95\nU8\xb3\x0e\xed\xb7\xab\x05\x088.*\x82\xb3Y\xe8\t\xb9\xf9\xde\x0b\xb9\xdcw\xb29s\xefZ\xb9,`\xc38\x9a:\xca8\x933\xab\xb8*N\x1e\xb9;\xe7\x898_\xc3\xc87\x04\x00\x00\x80\xe5\x16m9Y\xb3\x0b9\xaf\x96\xb28\xdb6U\xb7\xdexC8v)U9\xe5\xf3U9\xcb\x8c\xef8\x08\xf6\xd44\xf1\x7fh\xb9\xb7\xfa\x03\xb9\x04\x00\x00\x80\xf6A\x83\xb8\xce\x03V\xb8\xf8J\x97\xb8\x91\x89\xeb\xb7\n\x8d\xc08\xcb\xf2\xb4\xb8\x98\rG\xb9\x99\xc6\xcd9\x04\x00\x00\x00\xf7\xeb%9\xf1g\x8c9\x85\xb2%8mv\x14\xb9FT\xf88\xb6\xfbC\xb8\x05\x16\x057\x01\t\xd8\xb8\x0ett8X\xfb\x9c9J\xf9\xc088\xd0\xc1\xb8\xaf\xd0\xdf9\x0bDT9\x1e\n\x0c9~\xe0G9\x8d\x92\x8c\xb7a\x95\xda\xb8{\xfe\x8a8\xd4z\x83\xb9\xf8\x94\xa98\x8a\x80\xdd\xb8\x84\xd5\x8d9a\xab\xfb\xb7\xd2\xd7\xc98\xbc\xe97\xb7\xc5\x85\x108\x11\xed$\xb8t\xd1\xad\xb8+\x1a2\xb9n\xf1\xcc8\xb6=L9\xb1\xb7k\xb9;\xc3\x95\xb8\\\x01J9\xb8v*\xb9V\xfd\x00:\r,U8\xca\x89\xd9\xb8\x06\xf7\xe9\xb8\x8a\x1b\x119\xe2\x0e1\xb9\x04\x00\x00\x00\x80\xd6\xfd8\xc1G\xea9\xa3\xe0F7<\xb1\xb7\xb8X\xf1\x9d7a\x94p\xb9z\xdc\x989i\xbb\xa18*\x85\x05\xb8\x91\xe8\x819s\x8f\xfc\xb8\x04\x00\x00\x80\x07\x97\xa1\xb8y\x1d\x9b\xb9\x07\xb7\xab\xb6^\xa0\x91\xb8b\xe9\x0b9~\x1d`\xb8\xc2y\x089o\xb5a9\x04\x00\x00\x00\x8d\xc0|7e\xb7\xa29\x01G\xdb\xb8B~j8|!W9f\x9e\x179<\xda\xd6\xb9\xda\xc1\xdf8\xd0W(9pf\xd29A\xcf\x198\x06\xa6J\xb9^\x1e%9\xe6\xa2\xf18\xc8\xdfF9\x99\xb8>\xb8D\xaa\xa1\xb8\xbeSa\xb8\xc5\xd8\xbd\xb8ER\x86\xb9\xe6$\x0f8\x03V\xaa8\x03\xca]9\x85\xeeM\xb8\x1a\x06\xe4\xb8\x08\t\x088S\xf4x8xB\xe3\xb7\xdc\xc5m8\x15E+\xb8$)\x9f\xb8\x8b]W8\xe6LI\xb8\xcd\xfc5\xb8k-\x829k\'\x94\xb7\xc7K\xd18\t\x0e\x02\xb7\x9e^\x187_\x10\xad\xb8+\xad\x1b9y\xbe\x1a\xb9\x04\x00\x00\x80\x92~\xb7\xb8\x10\xbd?9\x91\xc8\xc1\xb7k\xa8K9F|Y8\xfc\xc2Q\xb8\x0e`\x1572\xdc\x939\x0f7\xf16\xc1\xd4\xe98\xf0\x14\x94\xb8\x04\x00\x00\x80q\xa0\x0e\xb9\x82\xe0\xfe\xb6\xee2\xbf8\x7fs\x90\xb8\x8b\r\x87\xb8\x07\xc0T9p>H9A\xcf\xa9\xb9\x04\x00\x00\x80\xf4\xeao\xb9\x1aj}7\xe6h\xa1\xb8\xd1\x9b\x178\x08\x11\x199\xfb\xe3\xd1\xb7\xdf\x95J\xb8\xb5\xa7I8\xf7Sd9u\x0el8\xfd\xaf\x898 ]\x10\xb9  \xcb\xb9\r6#9\x91\x7fK\xb9\xd2\xae\xb2\xb89\x87\x108\xdc\xe5\x9170&\xc5\xb8\xcden\xb9;TP\xb8\xa6U,9fN\x01\xb9\xd93G\xb8\xeb\x13r\xb8j\xb6\x98\xb7l\x1cS\xb9\xe7\xff\x89\xb6oqX9\xf8K\x149\x17\xd1+8\x1a\xa7\x14\xb9\xf8C\xa99\xbeg\xd4\xb8\x12\n\xc79x\x94\x13\xb9\xa8Dm\xb9\x80\xd6\x8a\xb8\xd5\xb0\n\xb8\xf9vH\xb6\x84\x0b\x05\xb8\xbe9\xc78\x04\x00\x00\x80B F\xb6\x98\xe3\x9d\xb8\xcb\xb2\x93\xb7n\xe1\x8f\xb8Q\xac\xfd7;\xa8i9<\xb4\x8a\xb9St*\xb8Q\xac\xca6\xcb\xa1\xbd\xb8mdD6\x04\x00\x00\x00\xc0\xda\xf5\xb8V\xd7\x149;\xa9\x91\xb8\xe2\xe9\xce8\x80\xdb\xfd7\xd3\x1c@\xb8G\xa4\x156\xbb,k\xb9\x04\x00\x00\x80<W\xea8\x88\x95\x86\xb8\x0c\xbf\x84\xb8./\x18\xb7\x88\x99\r\xb8\x90\x1e{\xb87/99=\'\xa3\xb8j\xeb\xd9\xb7%\xb1\xa9\xb9\xdaT\xff7\xdd\x9b\xed8\xb5\x1f\x0b\xb9L\xac%9\xa7gd\xb9&|\x8f7\xcc\xfd{7Hl\x9470eH\xb8\xddN$\xb9\x8b\x8b\x078CJ\xd0\xb8m\xdf\x95\xb9\x08\x08\x9b\xb8\x13$ \xb8v\xba\xc6\xb8\x02zY\xb9\xa9\x13\x04\xb9 \xf17\xb8\xfe\xca\xd08%3\x1e9eRy\xb8$\x00\xec\xb8jH\x8c\xb8j\x89*9\x17\xc5\x14\xb9\x16\x93\x04\xb9\xbc\xad\xb5\xb8\x9e\x8d\x08\xb8\x08tM7^\xe8\x07\xb9\xe9\xa3\xc98\x04\x00\x00\x80\xd8w\x7f9\x85W\x12\xb6o\x12\x19\xb7\xc6{\xb97\xfc,\x068\x0e\xce\xec8\x80\x95M\xb8\xce\xa7Q\xb9}\xfe\xd68`\xce\xfb\xb8#W\xe8\xb7\x04\x00\x00\x809!\x848t"b7\x17K\x11\xb8\xf5T\x808\xa4\xdf}7\x1f\x1bz\xb8\x85\xb4\xd76@L\xbe\xb8\x04\x00\x00\x807\x18\x139f\xcd\x8c\xb8\x1f}\x9f\xb6\x97Q9\xb8\x07i\x83\xb8_\x8bj\xb7\xfa\xfa\xca8L\xc0\xe4\xb8\xffS\x97\xb7u\x81%\xb9 +M\xb7\xb8\xa0\xe68\xb2\x0f\x83\xb8\x86\xb8+\xb9d\x00\x9d\xb8{\xfb\xb1\xb7\xb3-b5R\x1f\x89\xb7\xb4\xb7\xa4\xb7x5\xf1\xb8\x9f\x84\xeb8\xcc\xac\x8e\xb8\xc8\xe44\xb8\x96\xcb09\x8c\x82\xb0\xb7\xb8bT\xb8v`\x9689\xb3\x10\xb9\x83\xec\xb3\xb8\xaf\x92\x038\xa4\x99\xa8\xb8\x18?\xdb\xb7\xa1\xdc?\xb8\xa6\xb7\xaf\xb7R\xb6\xd86\x9e\x7f\xf3\xb8\xf2\xf7V\xb8\xdf\x7f\x0e\xb8\xe6M\xd1\xb6\x7fd\x178\x95lC\xb8-\x85\xa07\x04\x00\x00\x00s<\xd28\x0c\x1e\xea7\x8em=\xb6\xe7\x0c\xb77\x86;:7\xb6\xb4\xa48\x18\x1e\xff6\xdf\x05\x19\xb8\x1e\xd8\x848N\\\x82\xb8n)\t9\x04\x00\x00\x80\x04\x1d\x7f8\xc6%\x0e7\xef\xc9\xd97\xa2\xce\xec74&p5\xa9\xaf\x1b\xb7~\x9d\xac6=\x07:\xb8\x04\x00\x00\x80A\xae\x0b8i\xac\x90\xb8=\xeb\xbf6D\x11\x88\xb7\x1a:y7\xf5]\x037\xd2\x7f&9{#`\xb8\xb0g\xa3\xb6\xf03\x84\xb8\xe4^\xb5\xb6L\x9a\x9e\xb7\xe0\xfeZ\xb8\x1f\xf5\xe75\xe2]\x02\xb6\xed\xbe\xf6\xb7(\xa4\x80\xb7\xe3\x81K5%\xcd\xbd\xb6\xf6\x7fm\xb8l\x92\x848b\xf9\xbe\xb7\na\x13\xb8\xc0\x8e\xc07v\xba\xf2\xb6F\x15\xb3\xb6\xe2)\x187\x01\x8c\xd1\xb7\xd1\xf5y\xb7\xde\xd4\xf26\xbf\\\x0e\xb8\xae%L\xb7\xd4\xbaC\xb6`X\xfb\xb6\xd2\x9b\x0566 !\xb8r\xa4\x19\xb7\xc5\x84\xfe\xb5\xea0\xac\xb5\xc06N\xb5\xe6X\x0b8Q\xc3[6\x04\x00\x00\x80@\xfd\x058\x0c\xba\x886\xe4\x97\x9b\xb4!\xda\xa27\x1d\xf7\xfe5\x94\x91\x0e7\x15\xa5m\xb6\xbbQ\xc1\xb6yp\x127\x19\xb6\x88\xb6\x9b\x1a\n9\x04\x00\x00\x80\xa5}\x068v*\xec5\xbd\x98%7(4\xbd5oUh4b-\xd5\xb5Tgg5\x11\xaf\xfe\xb6\x04\x00\x00\x80\xa0J\x966\xcd\xdd\xa0\xb7,\x8e\x845\x80^:\xb6\x03\x92m6R[\x115\xe1\xf3\x0c8\x01W\x8c\xb6\xdci\x95\xb5\x00+\xe0\xb6\xd1\xb7a5\x88&\xc25e\xe7\xf7\xb7\xfa\xd2z6\xbd\xb0R\xb4NX/\xb7\n\xc2M\xb6\x8dR&\xb7\xb1\xd5\x81\xb5+\xef\xc1\xb7\xd5x\xc17\xc3\xa2\x82\xb6\xf1\xc4\x8a\xb5Ais4\x051\xa0\xb5\x97\xea46\xc5\x87\xf25\xd2\xda\\6w.T3\xfe\xb3L6\x81\xa1\x0e\xb4\xc5l\x8a\xb5t\x1f\xbd\xb3\x99(+\xb2v,\xfd2s\xe9 4\xc2t\x94\xb41\x05v\xb3\xab*\x92\xb2\x08N\xc7\xb2\xbaR\xd63>X\xd43\x04\x00\x00\x80\xc3g\xae3:i\xf0\xb3Z=\x95\xb25\xe4\xeb2\xdc[v3/\xceB4&\x13\xc0\xb3\x0eWC\xb4`\x8b\x14\xb3U!\x05\xb4\x15r\x87\xb3\x04\x00\x00\x80~\x01\x993\xa91d3\xd2q\x043*\xd163K~s\xb0:\xfbM\xb34\\\xdf2=\x16v\xb4\x04\x00\x00\x80\xe57\x1140\xe6(\xb4Z0\xfc2\x01\x14\xb4\xb3\x8e\x14\x104\x0eag2]:J\xb2\'\xef\xa7\xb3\xd4{\x10\xb3\x05\xd2g\xb4I\x19\xda25l\x025r\xab\x84\xb4}[\xf23~\xe3\xea\xb3fG\xbd2r\x7f\x8b\xb1]=\x00\xb5\x1f\xdf\xfa\xb2\xa5U=4\xa0\xbe\x032B$\xfc\xb3\xcc\x17\x06\xb3\xc5%7\xb4L\xcb"\xb34\xcf\xae3\xe0Wj3\xcb\x19\xc0\xb1\xde6,\xb2ZX\xfa2\x0f\xd1\x89\xb1\xfc\x13\x07\xb3\xc8\xe5\x06\xb2\xf8*t\xb0x\x9541\xf1\xec{2\x17\xc8\xd3\xb2:{\xaf\xb1\xd4\xc4\\\xb0\x03)\x0e\xb1X\xdf\x182\x17v\x172\x04\x00\x00\x80\xb8\xcc\xf81\xfdz+\xb2>\xe6\xd4\xb0\xb1A(1\x0e\xb9\xaf1j\xf3\x8a2\xce\x00\t\xb2\nU\x8b\xb2[\xe8S\xb1|\x97>\xb2\xac8\xc1\xb1\x04\x00\x00\x80DP\xdc1*\xc4\xa21\xb0\xf0<1Yf\x821p\xad\xad\xae%\xec\x92\xb1\x8bQ\x1f1f\x87\xaf\xb2\x04\x00\x00\x80\xa8)O2\xe3\xf1p\xb2\x9b\xe1319r\x00\xb2J\x88M2\xbf\t\xa50\xc0>\x90\xb0z\x91\xef\xb1&\x1dN\xb1XZ\xa5\xb2\xc3\x90\x1b1K]\xbe\xb1\xe8B\xbd\xb2f\xde,2\x9b\x8a\'\xb2J\x02\x071\xed\x00\xc7\xaf\xd0t\xf31\x19\xf12\xb1\x83\r\x872\xe5\xf0;0\xfe\xd83\xb2\xa6J?\xb1Nt\x1e\xb2],h\xb1N`\xf91\x03\'\xa71K\xe8\xa7/\xdf\x1eh\xb0\xf1\x9021\x96\x9a\xc4\xafp\xb2@\xb1\xfen\xae6\x06\xed\xf9\xb8\x0cq 9\xfc\xb4,6\xdc\xbf\x88\xb6\xaa\x05\xd1\xb6\xcf4\x87\xb4\xa6\x96\xb7\xb4:m\xc55\xa2\x99\xc35\x04\x00\x00\x80r\xdf\xd5\xb6\x07t\xdd\xb5\xccv\x89\xb4AJ\xd94\x97\xeeb5\xa1q36\xb4\xed\xb0\xb5Lt\x92\xb7\xb3\xd4\x08\xb5K"\xf6\xb5\xa8\x87y\xb5\x04\x00\x00\x80{?\x8e5\x91:R5G\x00\xf44\xe5d\x945\x1a\xb1\xb8\xb3\x10\xbd=\xb5;\xbf\xcd4u\xaeb\xb6\x04\x00\x00\x80\xf0\xa4\t6\x9a\x94\x1b\xb6cM\xe84\xc0\xe0\xa5\xb5\xe6\xa9f\xb6="U4\xa7\xce9\xb4\xd2\xb3\x9a\xb5\xdb\x16\x05\xb5\xb7\x1c\xbe\xb6\xa9\xa3\xb74\xd4im\xb57\x0eo\xb6\x82\xcc\xe9\xb6\xc8]\xd8\xb5\x1br\xaf4\x1fWJ1o7\xc85\xc2\x16\xe7\xb4~+\x11\xb9\xf8\xb5\xf23=B\xe8\xb5\xae\t\xf7\xb4\x1f\xa2\xcc\xb5h\x82\x16\xb5\xf2\x8a\xf6\xb6*\xddW5\x15\xf97\xb6\xee\xe1\x15\xb4\xfa\xa4\xe24\xda\xe5}\xb3\xe1Z\xda\xb6\x8c8L7\xfeV\xed\xb8VC\x8f9\x87\xec\x089\xfa\xa52\xb8\x9efG\xb9\xe78Y\xb7\xa7*\xf2\xb5\x9e\x85?8\xac\xdb\x887\x04\x00\x00\x80\xef|F8\xe0\x8f\xab\xb6\xc3\x8b0\xb7\xda\x08\x986I~47\xbd\x1b\xfb7\xda\x88\x03\xb7\x14\xf9\xdb7\xdb\xa9\xc1\xb6[7\xac\xb7\x9d\x89\xa7\xb6\x04\x00\x00\x807\xbch7\x86}\xc68\xa0\xb8\xaa6\xd0u\x877\xde!2\xb56a\x1a\xb7\x17\x99\x0f\xb8\xb1\xf6\x04\xb7\x04\x00\x00\x80\x00\x9a\xf7\xb7\xb7\x8b\xd9\xb7cL\xa76\xa6\x92\x06\xb8\xff\xd2\xef\xb65|\x067\x1f\xd6\xdc\xb5\x98.\xa5\xb7\x9e\xfd\xbc5\x9c\xfa&\xb88T$7\xdd\xc7[\xb7\x82\x84(\xb8\xac\xbf\xc3\xb7\\O\xbc\xb6Z\xba\x836h\x13j5\xbf"\x1c8h\x88\xa2\xb6w\xd4\x85\xb9bH\xa65Vg\x11\xb7@3\xad\xb6\xe9\t\x83\xb7\xbe\xef\x0f\xb7e>\xf6\xb8-\xc1\x167^7\xb18}?q69\xf6\xe8\xb6\xae\xe1\x97\xb5"\x01\xbb\xb7\xfb\xdd78\xc2\x97t8\xf2\xed\xd49f\\\x00\xb9\x12V\xc9\xb8\xd2\x10^\xb9\xb7\x9a\xeb6{\x1f\x18\xb7\xd8\xa3a8\xa4\xa6c8\x04\x00\x00\x80\x1f\xd1\xd18\xa1\n\x968f7B7!9}7\x1aR\xcc7\xdf\xbd\xde8fGm8+\xf5c8\xe9z\x80\xb7\x17\xaeg\xb81\x8a\x0e\xb9\x04\x00\x00\x80+\x13J8h\xb3Y8\xa6\xaa\\7\x04{\x8d\xb8H?\x8673\x1f\xfb\xb7+\x7f\xad\xb9\xa9\xc6\xd56\x04\x00\x00\x80&\xeb\x8b\xb6o\x82U8\x0f:\xc27\x1bE\xbb\xb8\x063\x058\xa6\xb4#8\xe8\xbc\xd17\xdeu}\xb8)O\xa68vU\xae9\x90\xa5[8%c\x9d\xb8sY\xd1\xb8\x8fz\x9c8\xa4\x01\x10\xb8\x80\xf0\x9e\xb6\xa9\xfcd7\xe6\xbd\x8c\xb8\x8b?\x9f\xb7\xa8\xecl\xb9\x88\x1b7\xb8\xbdlJ8=7\xf6\xb7\x1ew\xaa\xb8\x11\xdb\x83\xb8\xd7Mp\xb8!z\x038\x0c#\xc17\x0bv\xb5\xb7\xe9\xa0\xb67#\xf5\xbf\xb6\xa6\xc5\xf9\xb4\x8d\xc9\xeb8\x15E\xa8\xb8\x89\xaa\xac\xb9\x1c\x9c\x8b\xb5\xea\xce\xc2\xb8\n/e\xb7\xe12\xee8iY\xf2\xb7\xaa\xc8j\xb8\xc3~\xd08\x04\x00\x00\x80\xb2~\xc5\xb9?h\xfc\xb8^\xd3\x8d8\xed7m8\xb6\x87\x847F\x0cr9\x14\xb6\xb58\x91\x8a`8\xbf\xd5\xdc6\xd8T\'\xb9\\\x9d,8\x04\x00\x00\x00\x13N\x14\xb8a\xa0\x14\xb9P\x0c\xa78\x91\xb6\xa18\x0bPd8@ 9\xb8\xe0\x0f\xa2\xb9X\x97T\xb9\x04\x00\x00\x80\x16o\x179\xdd>\xb597\x12\x0c\xb8\xcd)\xf6\xb8\x1f!:\xb89\x9d\x148\x95\xcd\xa37@\xab\xca\xb8V\xf6\xab8\xeb\n\x06:4W\xec7\xac\xc9\x8d\xb8\x1d\xb4-\xb9oj\xe78\xc6L\x9a\xb81t\xa1\xb8\'z-8\x93\xf1\xc9\xb81V\xfd7\x92v\\\xb9\xde\xde\xc4\xb8\xf6\xc7\xf3\xb8\x90\xc4\x95\xb8\\\x19U\xb7\xe3EU\xb9j9|7\xe3\xec\x1291\x7f\xe08\x89z\x119\xf6\x91N9\xc5\xf6\xbd\xb8\xda\xf7\\\xb7\x1a\x12?\xb9\xbfvW\xb9m\x06\x81\xb9\xc4f\t6f\xb4t9\x13f#\xb7O\xbe\xbd8T+\xd8\xb7E\xd7+\xb9\xb6e\xf18\x04\x00\x00\x80\xaem;\xb9\x9c\xfe\xa09\xe2\x02\xdc8yz 9=\xe8\x8d8p\xf9\x889\x90\xa0\xc09uq\x91\xb8\x90\xd9\xb88W\xbcc\xb9cR\x1f9\x04\x00\x00\x80\x87W\xd3\xb8+\xa6\x97\xb9f\xce\x958S\xda\xda7\x9cz\xac8\xf8\x13\xbc\xb8\xfd\x96m\xb99\xfb\x9d\xb9\x04\x00\x00\x00\xd5<.9\xb5jh9-\x16\xeb8\xc6\xfa\xfd\xb8y\x90?7\xe5\xd8]5\xcf\xa6\x8a8\xd6\xb3 \xb9B\x1b\xac9O$\xec8\xb4\xa2Y\xb7\x9a\xa0\xaa\xb8\xa6iD\xb9\x1cX\x178n\x9e\xf86\xd9\xd6\x92\xb8\xf7\x9a\xf2\xb7(\x90\xae\xb7l\x1d\xe08/\xe9L\xb9\x90\x0fK\xb8\t\x0f%\xb9\xda\x90=\xb8Y"\x06\xb7\x91\xdb\xa28\xb85!8\xf8\xe9f9\xf5\x03\xaa7\xf8\xeb\x029\xe4\x18\xf7\xb7\xf5{\x927\xbb\xc3\x9f8\xefw,\xb9\xa7\xbfe8cM\x1a\xb9\xccQa9\xc5\x1a\x8b9e\xe9\xc26,;^8u\xdd\x118\x8a\xfck7\x04n\xc38\x04\x00\x00\x80\x85\xdd\xbf7\xde8\xf69\x94Bl6\rS\xcc\xb8~\xcet8\xc57.9\xf4R\x999\x8f\x92\xf880\xe3\xb38\x8d\x07#\xb9\x13\xdcA8\x04\x00\x00\x80<\x1c\xd1\xb8 1\x1e\xb8\x88\xcf/\xb8p\x07i\xb8\xc1\x1eF\xb8\x7f\x0e3\xb9\xcc`Z8\xad^\xcc9\x04\x00\x00\x00\xe64\x129\x89\xd9v9\x8f\xbf\xa4\xb8\x86,\'8\\\x08@9*z\x02\xb8\xc51\x998\x9el\xd468\xeb19\x8b\x84~9\xa7\xf2\xad84\x0f5\xb9\xdb\x94\xbe9>M\t9\xd5\xcc\x859\x1f\xc4\xb68f\xf98\xb8\x15\xb2\x1f\xb9h\xf9\xb08\x10\xca\xca6rP\x0b\xb8^\x83M\xb8\xa0F\xb99\x80\xfd\xda7\x82\xf7@\xb8\x19\xf6o8\x86\x9a\xe08\x88\x1c\xd1\xb6`$\x1e9\xc7\x0c\xc5\xb8k`\x988\xde0R9l\xe0\xaf\xb7U\xe2\x1c9}e\xfe6\xdf\xbe[9d\xb3\xb98je\xc47\x80\x14y\xb6\xa1\x99\x07\xb86\xdd\xa78\x02\x8d\xd9\xb7\x04\x00\x00\x80\x04\x96j\xb7o\xc4\x88\xb7\xd6\x05,\xb8\xe9M\x1d9\xc4\xb7I8;\x86[\xb9\xd4\x17d\xb9\xa0T\x929o\xb4\xa68M\x0e\x879\x04\x11\x11\xb8\x04\x00\x00\x00\xe1\xbdd\xb89\x08f9\x94bH\xb7\xbb\x02\t\xb9\xd1;C6\x98\x07*\xb9\x0c2\xa39\xc3\xd2u\xb9\x04\x00\x00\x00\x04\x00L\xb8\x1a\xeb\xfc8\xf7J\xe9\xb8yg\xe58D\xcf\r9\xb5k\xca8A\xb6\xa4\xb9\xef\xe7\xb78\xd7\xe5\xc2\xb8G?\xa49\x9e\x16\x968\xaf\x0f\x85\xb922\xa5\xb9\xf4\x9d\x089\xb9\xba`8\x11]\x98\xb6\x9c\x1b!\xb6\x89\xcd\x8e\xb9`\x17I\xb9\xb4?\x139\xb0\x11\x0f\xb9\x14L\x9d8AC\xd86\x15k$\xb8\x1a\xb0\x9e\xb8\xd4\x8b68\x16\xe7\x917\x17\x05\xc96\xcdH\x1e9\x82#X\xb8@\xa8\xcc8\xd7y\x88\xb8\x0b\x9f\xa59\xd1\x9a$\xb8\x96\xbdP9\x87\x8f09\xb6\xc3\x82\xb9\x19\x9f\xb1\xb8\x02\x06\xef7\x13\x18\x0e\xb7\xdf\x07e8\xd3\xf8*\xb9\x04\x00\x00\x80\x94X\x00\xb9\xbaV\x11\xb9\x7f\x8b9\xb8\xe4}\x1a9\x0c\r\x8d\xb7jS\xe87}b\x95\xb9J,\x159#\xa2P8\x16\xdc\x939,}\xa78\x04\x00\x00\x00P\xe1\xbe6w\x1d_9\x04\xa1<\xb8\x9b\xf6\xd88c\xec?8\x99\x82e9\x171\x019\x80|\xc6\xb9\x04\x00\x00\x80\x12\x11\x02\xb9\xb4\x80N\xb8\xcac\xff8*>"\xb8*A\x947\xd6\x84\xc3\xb8\x8e\x0b\x13\xb9\x96\x04\xa28\xf86j\xb7\x15N\xb4\xb9\xe36\xcc7Co\xb4\xb8h\xce\xd1\xb9}\xce\xcf88\x95\xe0\xb8\\,}\xb9U2a8\xcdl\xa7\xb9e\x8c\x0c\xb9\xf8\xd2U92\xc6\xce\xb8\xd5S\x108\x8b\xe9l\xb8~T\xaf\xb8\x93-\x81\xb80\xc4\x988I\xb5f\xb9\xa4\x9ch7\xfau\xcd\xb8\xf9\xc3\x86\xb8\x8eU\xd78\xcb\x06\x18\xb9s\r\xf35h\xdf\x07\xb9\\\xb2\xa28\x1d\xf5\x16\xb8x\xed%\xb9?\xac\x8c\xb8r\xa21\xb7\xd9V\xce\xb7\x80%\xe6\xb8\xf3r\xd08\x04\x00\x00\x80\x87:o8=@\xab\xb8~\xe3\r\xb8\xa8\xf2\x91\xb8\x8d\xfe\x068\x1b}\x159\xf9\xe1X\xb9\x10) \xb8S\x9d\xa18\xb4$\x979\x1c\x8e\xc36\x04\x00\x00\x80\xbf\x88\xbf7\x9d\x07@9U\x07P\xb8\xf1V\xfe8\x97\x05\x81\xb7\xd8\xd3\xcf\xb8,\xa5 8Qm\x1a\xb9\x04\x00\x00\x80;\x9a*9\x1b9\xfd\xb6V\x89\xb48(\xb3\x15\xb8\xfb5\xa67\xb9\xc8\xb1\xb87\x054\xb9M\x1f(\xb9\x83\xb9\xcc\xb7\x9a\xaf\xe9\xb9>4\xbf\xb8\'\xbf\xa89ou\xf1\xb8C\x91\xe0\xb8\xd4\x91\xa0\xb8\x91\xa5\x18\xb9\xe2qS7\xe5\xc9F\xb9Vy\x0e7\xf4\xae\x988\xdfs\t\xb8;6\xd8\xb8\t\xb1T\xb9?e89\x93<0\xb8 \x9aA\xb8\xbdu\x8c\xb8\xc2\x05\xe1\xb8\x98c\t\xb9\xfe\x0fL\xb8\x01\xbe\x808\x03\x825\xb9V\x17\xcf\xb842\xca\xb8\x7f\xd0\xbc7\xd0\xea\x1c\xb8\xbe\xe1\x9a\xb8\xab&q\xb8\x92/4\xb8!\xbe\t\xb6\r9\xbd\xb8r3q8\x04\x00\x00\x80&|e8\n\x95\x13\xb8\x9b\x9eg\xb7\x8dF\r\xb7\x88\xf1\xa67\xc7\x92\x8b8\xf4\x14\xa6\xb7\x86\xf4\x14\xb9*r\x1c8RT\xf4\xb7\xf0\xda\xd4\xb7\x04\x00\x00\x80\xb9M=8v+\xf6724\xc25<UE8\x12\xf3\x8a7\xffZ\x9e\xb8s\n\xdc7\x1b;t\xb8\x04\x00\x00\x80\xa5\x91\xbc8Y}B8\xbf{\xc6\xb7\xb3\x87\xed\xb7+\x1e\x82\xb8\x92\xc08\xb7\x7fe\xa7\xb8Z,4\xb9\xa5\xe2B\xb7;\xe6I\xb9\x82\xa4\xdb\xb7\xccd\x0f8\xb0\xfe\x1f8n\x16\x08\xb9\xe2\xe3\xf17\xd2\x84\\\xb7\xae\xa4\xaf5y\xff\x90\xb79h5\xb7\xf1\xb8\x02\xb70\x17\xbe7\xd8\xff*\xb8\x17Aa\xb7\xcc\x9449Vb[\xb7\xf1}\x10\xb9d\xbf\xa78\xf0\x15\x8e\xb8\x8c\xc1\xa5\xb7\x1f\x01\x8b\xb86\xeb\x07\xb9l=\xbd\xb7\xe1\xc88\xb7\x18\xa6\xa7\xb7\x05\xdb!8]\x12\x1b\xb7\x03\n\xd4\xb7\x14\xca\xf5\xb6A\x93\x8a\xb7\xed\x0b\x138\xa5j\xdb\xb8\xf4(*7\x04\x00\x00\x80N\xe6)7\xcc\xb5\x1e\xb6\x12\'\xe2\xb5"\xd9\x8e\xb7\x8fj\xc56\x91=n8y\xac\xa97\xdc"\x9c\xb7j\x95O6Qp\xe2\xb7\xf4\x1b\x159\x04\x00\x00\x80\x1c\xe6R8=]\xb66\x1dq\x955\xbap\xbc6\xcd4\x9b\xb5\x87\x0f\xa5\xb6\xcf4\x846\xe4L\xc5\xb7\x04\x00\x00\x807\x0eZ7Y\xdd\xc67\x81\xe2\xcb6>\x84\x0c\xb7\x8b\xeb\xa3\xb6e\xc1\xa16\x13\xf4\x089_\t\x15\xb8<\x1cg\xb6\xb2H\x14\xb8\x01\x03\x044\x7f\x87\x88\xb6\x1c\xb6\x98\xb7\xae\x0c.7\x00\x8b\x088\xae\x8c\x91\xb6SX\x984\xe7\x95\xc96w\xefH\xb6\xe5\xe4\xc8\xb6G\xb8:8\x94\nK\xb7\x9e\xb8e\xb6$9\xaf6z4{\xb6\xe3\r\x02\xb7\x93\xc9\xbb6\x9c\xac$\xb8\x9aA\xb05\xdds\x843I\x85\x95\xb6Q\xffZ\xb6\x9bq\xcf\xb5u\x10\x1b\xb72\x98;6\x8c\xb0\x95\xb5f\xd6\xa2\xb60\xed\x86\xb5\xea\xb5\x9e\xb4\xb0y\xda\xb4\x8e\x12\xb6\xb6M\xea\xe85\x04\x00\x00\x80\xdfL\xbf5\x8b9\xba5\x88\xc1:\xb4\x1c\xe3\x115\xb9\x1c\x875C\xadU6b\xbe\xd2\xb5fCV\xb6`[(\xb5\xc5c\x14\xb6\x93\xbf\xe47\x04\x00\x00\x80\xb4]\xde7\xbfLz5\x94\xad\x185\xef\x86H5\x04\x8a\x85\xb2}\xefa\xb5t\xff\xf44\x89\xf6\x86\xb6\x04\x00\x00\x80>I\x1f6\xec\xa0?7CO\n5\xdc\x85\xc5\xb5\xa5\xdb\n6)\xcb}4\xa8M\x808\x18+\xb8\xb5\xc1z\x1e\xb5\xcd\xb8\xd3\xb6\x0c:\xef4\x8b\x81\xaf6^$\xf5\xb7\xa3\xf3\x046\xa4\x82z6t\x80r\xb7\xa5\x92\x98\xb3\x8b\xe4V\xb6\xad\x96\t\xb5\xc2?\x81\xb6\x1d\xb5\xd67\x0b\x1c\x0c\xb6Y\xd1+\xb5\xc7\xd9$\xb4\x80K\xcd\xb5\xa6]\xbf5\xbd\x85\x805\xbd\xb3\x137\xf3\x07U3)\xa9*6\xd0*\x97\xb3\xcc\x85\x15\xb5\xba\xcaL\xb3\xcd3\xcf\xb1 \x13\x892\x9b8\xbf3\x7f\xc1 \xb4\x9f3\x05\xb3Y\x96\x1c\xb2\xf2cW\xb2\x83\x14h3\x0f\xf0e3\x04\x00\x00\x80\xe2\xda<3(*\x82\xb3\xb7\x9a!\xb2mo\x7f2\x8cb\x053\xfd\xf1\xd23\x04\xfdO\xb31\x86\xd3\xb3\xfd\xd9\xa0\xb2\xe0\xab\x90\xb3\xde\xaa\x12\xb3\x04\x00\x00\x80o;\'3\xa2\x19\xf72\xfej\x8f2\xb0\xf6\xc52\xe2\xd4\x03\xb0\x14\x0c\xdf\xb2\xb0\xddq2\xdc<\x05\xb4\x04\x00\x00\x80\xf6?\x9d3\x84\xe4\xb6\xb3\x9e\x8a\x882q\xffB\xb3|\x04\x9c3\x91\x8c\xfa1\xa0\xfb\xda\xb1\x04\xd95\xb3\x1et\x9c\xb2\xe7\x06\xfb\xb3#+l2\xde\x0b56Z\xa9\x0f\xb4\xf07\x833uY~\xb3\x03\xf6L2w\x0e\x17\xb1\x99u4\xb6\n\xd4\x87\xb2Z\x05\xcd3\xc6\xa8\x8e1\x12\x84\x88\xb3\xaa$\x91\xb2\xd8\x8dp\xb3Lh\xb0\xb2\xe5J=3D\xc2\xfd2\xa7\xe7\xfe0\xdd1\xb0\xb1\x12\x8b\x872\x12<\x15\xb1\xfbD\x92\xb2\'2\xe3\xafv\x9dM\xae\x04\x12\x18/\xd8%T0\xa6W\xb2\xb0\x16\xc6\x93\xaf\xc2\xb7\xad\xaexm\xef\xae\x15\xbc\x000\xb9\x17\xff/\x04\x00\x00\x80\xfa\x83\xd1/\x91g\x10\xb0\xa0H\xb3\xae\x9a\xb0\r/&\xfa\x93/\xc0\x05j0\xff\xbd\xe6\xaf-\xaaj\xb0\xd3r2\xaf\x91\x7f \xb0v\xb6\xa2\xaf\x04\x00\x00\x80\xf7\x86\xb9/\xfc\x10\x89/\x84\x1b\x1f/\xe4\x9e[/\xd7@\x92\xac\xc6rw\xaf\xb3)\x06/U\xd0\x93\xb0\x04\x00\x00\x80\xebs.0\xa3\xe6J\xb0\x9cz\x17/\x97T\xd8\xaf\xee\x15-0\xb5\xfa\x8a.\x87\xf0r\xae\xdf\xbd\xc9\xaf\xc4\x91-\xaf\x9a>\x8b\xb0\xa7\x00\x03/\x92N\xa0\xaf\xc2`\x9f\xb0\xdd\x92\x110g\x16\r\xb0"b\xe3.\x0c\x95\xa7\xad\x0c\x04\xcd/\n\xb0\x16\xaf\x13uc0\x1dD\x1e.\\s\x17\xb0x\x16!\xaflo\x05\xb0\xad\x83C\xafA\x00\xd2/\x8a\xc2\x8c/Se\x8d-`xC\xae\x1d_\x16/\x9c\x8f\xa5\xadkE"\xaf\xf6\xda\xfd\xb4$p\xb9\xb76\xab\xf97\x94\xcer5\xc5\x8a\x886oD\xa8\xb4\xd1\xd2\xc6\xb3\xce\x03\t\xb4\xa7X\x135\xb4\xfa\x115\x04\x00\x00\x80\x8b\x16C\xb5v\xe9\xa66c+\xcd\xb3\xb4*"4\xde\\\xa94\xf2\xeb\x855a\x0b\x04\xb5\xe8E\x08\xb7\xe6<L\xb4\x88\xb17\xb5Z:\xba\xb4\x04\x00\x00\x80\xeeV\xd44\xe9\xdd\x9c4\t\x1a64I\x81n4Ld\xa7\xb1\xd0\x9a\x8d\xb4S\x8d\x194\x01-\xa9\xb5\x04\x00\x00\x80*\xaaG5`9h\xb5\xe7^-4\xbe\xaa\xf5\xb4\xd2\xe2\\5\x8d\x10\x9f3h\x03\x8b\xb3\xf3\xe5\xe6\xb4X\xa7F\xb4$k\x9f\xb5\xa1~\x084p\x11\xb1\xb4\xaeM\xbc\xb5\xe3\x01\xef\xb5;z!\xb5^\x1f\x024\x16\xcd\xbf\xb2\x11\xa5\xea4\x11w,\xb4\xca\x96\xda\xb7w#53\x95V-\xb5<^8\xb40\xb9\x18\xb5\x1d\xc5_\xb4\x9dI\xcd4K\x1a\xa14\xf2\xb6\xcf2(\xb8_\xb3.\xd3+4\x1e|\xbd\xb2:\x93\x9e\xb6\xdbP\xfb4.m\xb8\xb8q\x06\x9e8\xa6\x1e\xac6\xeb\x15?9\xbb\x80y\xb8\xc3\xc0\xd2\xb6f\x98\xd1\xb5\x82\n-7\x98\x97\xdf6\x04\x00\x00\x80\xcaB\xba7\xaa\xe1M9\xae\xc1J\xb7SW\xf85)\xae\x816Q~\xc57\xfb$M9\x19\xf2\xa8\xb5]b\x1c\xb6J\xa7\x0c\xb7\xb6\xf5-\xb6\x04\x00\x00\x80\x13\x11\xa36\xe8\xff#\xb9Fo\x0b6\xac\xc5\xc06\x01\x98)4\xdb\xfdo\xb6:2\x98\xb8\xd5\xd5\x1a7\x04\x00\x00\x80\x95\xf6\xd1\xb7\x88\xcc1\xb7\\\xb9\x046%\x01\x02\xb7\x81\x9d\xf15\xb8\xbf)6#\xe5T\xb5\xbbh9\xb6RXQ9\xcc@\x8d\xb6\xf4\xdb\xf55\xea\xf2\x8d\xb6\xa5\x18\x8c\xb7v\xebb\xb7f-\xc9\xb6\xdb\xde\xcb5\xefU\x0f7\x84\xd9\xd5\xb6]G\x04\xb6r\x18\x93\xb8\x7f\xb2\n5%\x8c\x897\x85+\r\xb6\xf5\x8d\xe8\xb6\x0f\xf3\xbe\xb6\x9d_\xbf\xb7d`n6\xbe<\x058\x00\x9bo\xb5{.\xf4\xb6?\x85\x9b\xb4~\xa7\xb1\xb7i\xd5\x92\xb6\xc3\x87\xa16\x08\xe0K9\xf9\xeb)7^S\xbf97\x9a\x1c\xb9E\x13\x148qX\xf3\xb6\xc3\xad\xd78\\\x13\x028\x04\x00\x00\x80\xe2u\x049bM\x869\xa9K\xad\xb2\xe4"\x107\xe9t;\xb4$\xf8\xf28:\x1f\x05:\xca\xc6\xfd8\x04\xe9/\xb7\x01]\x06\xb8\xca\xf7\x90\xb8\x04\x00\x00\x80\x8aE\xd37\x08!\xba\xb97\n\x177f\xcd\xd66\x03^\xa16\xa3\x13\x8d\xb7@\x12\xb7\xb9Bf\x13\xb7\x04\x00\x00\x80\xf9\\\xbb\xb8\x1eI\xda8\x04\xeeW8\x8a`\xb6\xb8\x96\xdb\x9a7\xd0\xb2\xab6\x8cB\x976m\xa7\x9b\xb8\xf0\xd1\x06:<\xff\x06:\x0c\x00\x9c7q>\xbc\xb7T(\xa2\xb8\xac\xb4\xb3\xb8\xd9\xdb\xa3\xb7\xfd\'<\xb5\xb7\xfa\x0480\xb3\xe5\xb6\xc7r87\x9e`\xd8\xb8\xa0\xd5\x1166\xecI9D{5\xb8\xdc\x13\x18\xb8\xb9S\x93\xb8\x0e{"\xb8h\x9d\x148\xa55O8\xbe\x02-\xb5$\xc3k7\x8b{\xdc\xb5\xa7\x10\xf3\xb7\xa7\xbd\x049\x93\xd6L9\xae\xf3+\xb8R.\xf08\x85\x1cz9O\x00>\xb7\xb6\xb5;81 \x9d\xb7>\xe1\xfb8ix\xa18\x04\x00\x00\x80\x8f\xf3\xd1\xb7,\x1d\x8f9\xa4-\xba8\x80\xda\xf17\xd6\xbc\x9f7\xc1o\x199\xea\x88\xab9&"\xbb9\x85#\x13\xb8g\xd1\x9b\xb8\x82\xe8\xd9\xb8\x04\x00\x00\x009+O8\xc3\xbdH\xb92S\xa97\xd4\x97\x04\xb7e\xda\xef7\xb9\xf3\xe7\xb7\xec$\x04\xb9s\x8b\x80\xb9\x04\x00\x00\x80\xf5d\x7f\xb8\xa75\x999\xbb\xeb\x838uT\x1f\xb9!*\x87\xb8\xb8\xe9\xfe\xb6\x89J\xcb7*a\xe2\xb81\xf7\xa29z\xb8q:eY\xc371\xf9\x058\x9f1!\xb9)\x14l7\x82\xaav\xb8\xe0\xc6\xce\xb8yo\x0c8 \x9e\xb9\xb7\xb5\xe3\x878}\xe6\x838\xf4\xc1\x1a\xb8\xd1M\xde6\x97\xba\x00\xb8\xef^\x95\xb7\xc2*\x04\xb9\x1c\xa9\x06\xb7\xf8)\x9e8\xd4\x81\x129\x15\x0f\xaf8\x9c\x8ft9\x9b\xdf\xc7\xb5\xa9`\xbd\xb7\x9b\xfcT9\x01\xb1\x819\xc6\xb6W\xb9\x05\xab\x899\xa2\x99K\xb8\x85\xa8\xa98\xecc\x168\x84\x98[\xb8\x83$-8!\xbc\xb57\x04\x00\x00\x80\xd4Q\x92\xb9\xb6\x94B9\x894\xb9\xb7U\xc4\x9a8\xfd\x94\xa94\x05\x96b9\xdb\x84]8\x9a-\x989\xdf\x98+6nU\x05\xb9\xdf\xadp\xb8\x04\x00\x00\x00\xa9\x81>\xb8v\x9a\xe48\xc5\xe0\x958\xbd&\x1284\xdcL84\x12\xb3\xb7\xb6\xbdU\xb9\xd8\x8b}\xb9\x04\x00\x00\x00q\x8e\xf77\xefr\x8d9v\x01\xff8\x10\x8a\x1f\xb9!\x03J\xb9\xadW\xdd\xb7z\x05\x1a8b\x0e=\xb9-\xbb\xae8\x0e\xe2\t::,8\xb8\x96\xbc*\xb8\x89\x10\x7f\xb9\xbc5\x1b7\xcb\x89\xc88&t\x888\xff\xc68\xb6l\xe9<\xb8 \x8b\x1f9W\xac\xf98\xe6\xb8\x10\xb8d\x86)8od%\xb8\x1e\xb967\xa9\xdbN8S\xd0Q82\xaa\x029\x1c\xb3\x908\x8c\xccN9A\\\xa1\xb8\xb6\x19\x8b\xb6\x1c\x1c\xdd7"k\xdd8\xbctS9\xc3\x1a\xe4\xb8g\xe2\x9b9a\xfa\x19\xb8K!\x1a9:\xc7\xad\xb7\xa3\x99\xc7\xb7\x15\xbc\xc6\xb8zo\x198\x04\x00\x00\x805\xe8\x85\xb9\xaa\x85\xb7\xb8D\xc2\x90\xb8\xb7P\xaf8\xf0\xa7\x987~v\'9\xb5#\x95\xb9\x97\xee\xc17HO\xe8\xb7x\xfc\x91\xb8y[\x1c8\x04\x00\x00\x00\xa7w\xd27\\\x80\x9c9,|\x848\xea\x00\x98\xb8\x16\xcc\xfc\xb6\xf0\xe8\xf5\xb8\x01\xf8\xd78\xe1\xd8k9\x04\x00\x00\x00\xd7\xd3\xd78\x82,\xf78\x99 \xae\xb8\x05\xeb\x159\xc9\x0eG\xb9jD\xa97\xb0CZ8\xc5\xf3\x9d8J\x84\x8a\xb9\xd0\x88e9\x14\xce\x80\xb8\x1dj\xc1\xb8A\xbe\x1b9\x80\t0\xb8I\xae?9\xf8\xf9\xc58\xc7\x94\xc36K+\xe8\xb7M\xd4\xcf7\xa8^\\9\xb8\x1a\xcf\xb7\xc6ob8b\xcd\x8b9\x9d\xdb\xc07\x1b\xbf\xdd7Ma\xbe87\xdf*9\xa2\xd5 \xb7k\xb8\x9d8\xc7\xdfM\xb9\xc2\xe6%8\xfbw\x8c8;Q\x089\xd8\xae\x908\xfc\x16+9\xa2\x07\xa68q\x8a\xf6\xb8B\xed\xdf8\xb5\xf4\xdf\xb6\x11\x15\x97\xb8\xef\xae\x86\xb8\x8a\xca\x90\xb6\x04\x00\x00\x00W\x18K\xb9\xa1\xbc\x17\xb9\xc6PZ\xb8(6\xef8lO\t\xb7x%^\xb9P\xe7\xd7\xb9\xa3\xb5f7\xd4h\xa9\xb7\xb7\xe9\x9b9\xf1\x1a\xea8\x04\x00\x00\x00\xa5\xc1\x9c8\xf3\xbaB9\xee`\x858\xcd\x9b\xa6\xb6\xc9d\xb48\xd7~\xc87\x87\x13\xfd82\x14n\xb8\x04\x00\x00\x00j\xc4\xa27!:?\xb9o \n7\x95\x14"8\xa2\x99\x0f\xb9\x9a\xb638\xe8\xb2M\xb9\x03\xdf\x069\xa5\xe1)\xb9\x96\x9e\xe8\xb9\x88B\xcf\xb8\xe5\xc5\xbe8c\xc5c\xb9\x92T\x8a\xb8"\xe5\x139\xf0\xde \xb8$\x14y7>\x9c\x1a\xb8\xa5u\xa2\xb9Q\xcc\\9i\x84\xb1\xb7s\x9a\xc78\xb3\xef\x8c7r5\xd28\x059\x8b8\x98\xa9\xdb8\xa8nI8WE\xb56.\xcf`\xb7T\x02\x80\xb9r\xd468W\x95u\xb8\xe9\xf8`\xb8mr\xe3\xb7\xf4\x08\xdb8\x02\xbb\xbe8\x04K"\xb9\xebU\xd2\xb5\x10k\x837\xe1\xc8\xc07~E\x0f\xb9z!\x0c\xb9\x04\x00\x00\x80\xc1x\x90\xb8\x12\xc8\xb7\xb8\x86A\x92\xb77s?8\x13W\r\xb8\x07\xf2\x19\xb8\n\xbb\x80\xb9+\x8e\xd8\xb6\xf4\xf186\x12V\x04:WQ\x9f8\x04\x00\x00\x80,p\'8\x8b_ 9\xb4\x17\xe87\x8fw\xc08\x85\xa5\x068\x95k\xa59\xdd\x0c\x838\xc5\xb1}\xb9\x04\x00\x00\x80\xc92\x05\xb9\xea\xcf\xf7\xb8<\x80\xbd8h\x8dp\xb8U2\x97\xb8\xdf\x86\xe0\xb8+\xa0\x93\xb9\xe4\x1cc\xb8\xe0d\x84\xb7aA\xdd\xb9\x83T\xdb\xb8\x7f\xad\xd69\x90\x9d\xbb\xb9\x9eq\xcb\xb8\x16\x8a\x009\xdc\xb8\x1f\xb9\xa7\x86f8\xd2q\t\xb8r,\xbc\xb8\x1dN\x109\xf3*\x825:\x97\xa98\xe1\x0b\xba\xb7\xe5\xc9\x7f9\x89\xae\t8\xb4|\xa18\x9d\x8bP\xb9\xa5p\xd47\n\xa0@\xb8\x93)Z\xb9\xb0`\x928\x1b"\xb8\xb8m~\x05\xb9\x9e\xa5}\xb8\x98TF\xb6]\x80Q\xb7\xc3\xa5\xca\xb81\x86J\xb6(E\xf86\x10\xe7\xc36\x0e\x9bS\xb9\x04\xca\x137\x04\x00\x00\x80\xb4\xa7\x958\xcb%(\xb8\xf6\x1b\xd5\xb6\xf8\x85#8d\xad\xae7?\xf9\x9c7\x87\xa0\x90\xb8\x08\xb0\xd4\xb8h\x96\x048\xde\xa1]9\xf6\x9b\x7f\xb7\x04\x00\x00\x80,(\x008\xaf\xa1U8\xa1\x1ba7\xbe\xf868\x84\xdc\xa3\xb8\xb4\x89\x9c\xb8\xda%T8uGL\xb8\x04\x00\x00\x80\x1f\xfc\x828=\xd4\xd585n\t7\xe4\xe3 \xb8T\xd2\x88\xb8x\xbe,\xb8(\xe7\x0e\xb8\xa5r\x87\xb9\x049H\xb7.\xfc\x01\xba\x80\xaf2\xb8\xb4"\xbb8y\xf8\xaa\xb8\x0b\xef\xbd\xb8\xc1X\x8a9\xba\xd9\x85\xb8\xbc\x80c7i5t8e\x80i8$\x1al8\x07x5\xb7\x1di\n\xb8~qE\xb9\x84\xe5\xf58\x16r\x15\xb8-\xc5/7\xb6q\xb9\xb7\x05 \x93\xb6{6;\xb66\xf2f\xb90\x13\xfc6\xe8\x8a|\xb8\x97\x84\x81\xb7\tE\x8e\xb8-7\x136\xb6\x01\xb2\xb6>\x89\r\xb84h\x80\xb6d\xb6\xa8\xb7\xab\xce\n8\xb3\xea\x1c\xb9\xed\xbb\x047\x04\x00\x00\x80.\xc6\xc68\xeaee\xb7qH\x0e\xb6\xce\x86\xcb6g~\xeb6\x0b\xf5@8s\x107\xb79#\x997\x06\xcb\xa06}:4\xb8\xbaF\xb98\x04\x00\x00\x80\xd3N\x917:\xe8\xd86\xb0\xb6;6)\x99\x127\xad\x94\xf37sd\xbb\xb8\xbc\xd3\x048\xcb\xd5P\xb7\x04\x00\x00\x80\x91&\xf76m\x1f\x049\xddl\x88\xb8\x831\x1c\xb7\xec\x8b\x8f\xb7Y\x04\xfa5\x92gj\xb7\xcdk\xc9\xb8\xd2\xbe\x89\xb6\x9e\xb3\xa3\xb9\xa5_K\xb7\xd9\xde\x9d\xb7\x9e\x8a\t8P\xdf\x18\xb7\xbc\x0f\x999v\xa0\xa9\xb8/u\x93\xb44\x06\x028\xc9\x94\x12\xb5\xfd*\xda\xb6\xf3o\xe26\x9bXr\xb7\t\xd8\xbc6&L>7\x01\x1ft\xb7\x91TD\xb8\x90\xd2A8&\xcb\t\xb8[\xd6u\xb5\x9f\xc5N\xb9B\x08 \xb8W\x0e~\xb6\xc9\x1f;\xb6\xd0[=\xb78\xf6\x197*\xffh5\x18\xe4\x12\xb7\x12l\xf3\xb56\xd8\xca\xb6\xa3@\x8c7wM\x9e\xb8&\x01P6\x04\x00\x00\x80\xdd\x8e,6\x15\x80=\xb6\x96\xa9\x13\xb5Akt5Y\xc1\xf35\x16\xf8\xcb7\x00\xac?\xb6\xbe\x7f\xb6\xb6~\'\x9f\xb5\xc8\x18\xc8\xb7\xfa\xa7A7\x04\x00\x00\x80G\xf5)8D\xc8\xe15\x95\xc2\x885\xab\xea\xb45\x1f\xac\xc3\xb5w\xcd\xcb\xb5,\xbe\x166E\xec\xf3\xb6\x04\x00\x00\x80\xc6[\x016\x04\x95\x158\xe4ez5\xdc\x0b&\xb6!\xbc%\xb7\x03_\xa63\xba[!9\xdc\x9dn\xb6\xc0\xf4\x8e\xb5\xbe\x8eB\xb8e\x95\x975\xdc\xc2$\xb6c\x8a\xcb\xb7\x16\xb9o6Ihe8\xe0h\x934]\x06\n\xb4\xabV\xc36\x96\x0e\x82\xb5\x00\x7f\x80\xb6o\xb6!8\xd2\xa7{\xb6\x1a^\xb0\xb5z\x06j\xb6\xb4\xf5\x9f\xb5x\x0c\r6Wt\x016\xfc}\xdb\xb7U\'\xbd\xb3D/\xca\xb7\xdab)\xb4\xf5\xa5\x85\xb5\x86\xfb\xcd\xb4f\xe5\x15\xb6:\xed\x196\xab\xbbX4\xc1\xb0\xa1\xb5\xa6\x81\x85\xb4\xff*\x9d\xb3\x89\x8a\xd8\xb3_\x1f\xbd\xb3FF\xe74\x04\x00\x00\x80N\xf2\xbd4 \x1e\x005<\x8b\xa2\xb3\xf2\xce\x1d4\xd8\xb0\x854\xf0+T5Va\xd1\xb4\x02\xc1T\xb5e\xc9!\xb4`\x9a \xb5i\xa1\x12\xb5\x04\x00\x00\x80\xb4\xc4u7a\x89x4\x13\x98L4U\x1dG4u\x99\x84\xb1\rX`\xb4\x9fE\xf33\x85\x04\x86\xb5\x04\x00\x00\x80\xff)\x1e5\xe9\x17;\xb5\xd7U\t4\xaa!\xc4\xb4kD\x8c5r\x01|3\xbe\xeaq8D\xbf\xb6\xb4\xf7\\\x1d\xb4x\x1bP\xb6\x9e\x8a\xed3\xc5V\x91\xb4\xeb\xf3p\xb7\x9d\x06\x045\xaa8\x04\xb5\n\'\xce3V\xef\x97\xb2"\xfd\xbf5\xb5\x9f\x08\xb4\xf3S3\xb6\x98\x12q7\x97i\t\xb5\x9c\xa7w\xb4\x1b\xc6\xf1\xb4<\x02K\xb5\xa4^\xbe4\xf2;\x7f4k\x80\x91\xb6\x0681\xb3\xef\xeb\'59\x1a\x96\xb2\xad\x1e\x13\xb4\x8a\x9b\x07\xb2\x1dtu\xb0\xc5\x8851_@}2n\xe5\xd4\xb2\xaag\xb0\xb1(`\xcf\xb0}\xbb\x0e\xb1S\xad\x192*B\x182\x04\x00\x00\x80\xf5\x1b\xfa1\tb,\xb2\x19\x05\xd6\xb0q$)1\xd1\xa5\xb01\xa2\xae\x8b2e\xb9\t\xb2\xc5\x10\x8c\xb2\xe0\x05U\xb1I\x98?\xb2\x00=\xc2\xb1\x04\x00\x00\x80\x1dy\xdd17\x9f\xa31D\xef=1\n\x16\x831\x8d\x97\xae\xae\x1a\xb2\x93\xb1E( 1\xe5s\xb0\xb2\x04\x00\x00\x80\xc8@P2\x846r\xb2\xfc\xd341I\x1f\x01\xb2\nO\x123\x1c\xe8\xa50!\x01\x91\xb0B\xd4\xf0\xb1T2O\xb1"9\xa6\xb2bb\x1c1\xc7]\xbf\xb1\xe9A\xbe\xb2Q\xc7-2Yl(\xb27\xb8\x071\x1d\r\xc8\xaf\xd5\xbc\xf41\xa5\xe23\xb1z\xc3\x872\x13\xee<0O\xcb4\xb2\xdc?@\xb1\xcfI\x1f\xb2Cei\xb1N\xb0\xfa1=\x08\xa81c\xca\xa8/\xa4Wi\xb0\x8c\x8131^\xa3\xc5\xaf\x11\xb6A\xb1\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xd7@:\xb3\xc3\x8f\xa8\xb1(Uy2\xbf\xea\xad3\xafF\x197\x91I\xf2\xb2\x91i\x0e\xb2\xe3GD\xb2,\x12S3p\x1fQ3\x04\x00\x00\x80R\xc2+3G\xc9\x0f6\xab\xf9\x12\xb2\xf5Oh2\xec\x9e\xf22\x8c\xad\xdc6\x10)=\xb3\xb5\xc7\x8a\xb4cJ\x92\xb2=\x93\x83\xb3\xf9c\x05\xb3\x04\x00\x00\x80\xf8\x17\x183\xcc\xa0\xd22^o\x822\r\x0b\xb42\xef\xcc\xef\xaf"\xdb\xca\xb2\xa5\xf8[2]Z\xf2\xb3\x04\x00\x00\x80\xd2\x03\x8f3!V\xa6\xb3g\xa9c2\x1f-,\xb3T{\x903\x16\xf5$4\xdf(\xc7\xb1\xd7b%\xb3\xa8Y\x86\xb2\x90M\xe4\xb3&\xffr2\x01k\x03\xb3\x1e\xa8\x02\xb4\xdb\xa0g3\x1eSg\xb3.h:2\xdaa\t\xb1\xfb\x11(3\xaf\x10w\xb2\xb1w\xba3\xc7\xbe\x811\xddPx\xb3\xed\x0e\x84\xb23\xc7Z\xb3\xeeG\xa0\xb23(,3\x9d\xc9\xe62\xbbD\xf20\x9a>\xa0\xb1\xf7\x8bv2\xb6\xb9\x07\xb1\xcd!\x93\xb2\x8b$K\xb5\xcc\xd8\xb7\xb33i\x065R\xc8\xc55\x0e\x16\x9a8\x07)\x04\xb5>\x90\x1a\xb48?U\xb4\xc0&m5\xa6vd5\x04\x00\x00\x80\x90U;5\xab\x88\xa8\xb7\x08r\xe8\xb4\xe4`}4I\x91\xe45JT\xd78\xc5G\xb48\xc5\x03T\xb6d\x8e\x9f\xb4\xa2\x81\x8f\xb5u\xa0\x88\xb4\x04\x00\x00\x80\xaf\xe2%5k\xc8\xb5\xb8LC\x8e4\x90\xb6\xc44i\xc5\x02\xb2j?\xdd\xb4\x83)\xa03\xca\xc4%\xb6\x04\x00\x00\x80\xe4\x05\x8d\xb6|k\xb5\xb5{)\x864\x97\xe09\xb5>9\xa15\x8d\xc4\x8f5\x1e8\xd9\xb3\x1cb4\xb5\xac\x90\xb68\x9f\xa6\xfb6\x86\xd9\xd94\xc3\x1b<\xb5R\x81\x0e\xb6\xe8X\x115}?{\xb5yOK4\n7,6\xa2O75\xc5|\x85\xb4\xbf\xd8\xc95\xb5\x82\x8d3\xb1\x9c\xea\xb5\x8a\x08\x90\xb4{\x9fn\xb5\xb5\xd0\xae\xb4\xb6\xcc;5\x93\xcd\xd04l\xdd\x083\x8a\xc6\xae\xb3d\xf8\xa23\x9b\x07\x14\xb3\xb0C\x0c\xb5=T\x8b\xb6\x17S\x84\xb7Fu\x156\xbfR\x1f7\x9b\x87\x038\xc2\x80L\xb6N\xfe|\xb5\xbc\xc6!\xb6\x91\xc0#7F\r\xb56\x04\x00\x00\x80#\xbe57\x97j,\xb6\xaa\x05\x007\xa2\xc8\xce53dn7\xdb\x83\x95\xb7\x94\xed\xea8\xe8\r87\xf96\x02\xb6\x95;\xea\xb6\xc1[\xc04\x04\x00\x00\x80Na\x876V\xbb\t\xb9\xfa3\xe85\x1e\\A7\xcf\xd0\xe4\xb3\x8c)\xc6\xb5 \xd0\x9c\xb8\xcd\xa7\x9c\xb7\x04\x00\x00\x80\x96\xb7\\\xb7\xa8\xc4\x92\xb7$\xbf\xe27kEN\xb7\x87\t\xc46\xc6I\xe7\xb6r\xea-\xb5`R6\xb7\xa6\x0c\xf68\x80C\xb28\xc9\x86H73&\x9e\xb60\x99h\xb7>>P\xb7|\xd0\xc4\xb6>\xec\xa55/\x05\x068\xaf\x86\xcf6B\xf5\xb57-a$7\x9a\xf9\xe64\xae\x18\xeb8\xb4\x16\xeb\xb5\xc49\xdd\xb6\x85\x05\x87\xb6g\xc2\x996o\xc9R6p\xd1S4\xae\xa2\x0e\xb5|\x8f\x8d5\xcb\xb8\x8c\xb4\xb6*\xc6\xb6\xc1\x12v\xb7\xf4\xe5\x96\xb7XC\x8c7WP\xc57W\xb9\x0b\xb9\xe5J\x847\xac\rC\xb6\x9c1\xb9\xb6\xd1\x1dt8p2\x867\x04\x00\x00\x80\xbc-\xd47\xfd\x93.\xb8g\x19\xfe7\xb3\x9f\xac6\x14\xb9\x8176\xe2\xf57(v\xa9\xb7\x8c\xedn8\xd0b\xd9\xb6{\x93\xc3\xb7<\xd0\xe8\xb7\x04\x00\x00\x80X\x02b7orm\xb8\x82]\xcc6:$\xd35z\xbe\xff4\x02\x86\xb17\n\xdd\xcd\xb7\x80v\xeb\xb8\x04\x00\x00\x80\xe7\x8d\x8c\xb6\xc8\xd9\x8f\xb6\x06q\x878\xc3g\x89\xb7M\xaf\xc7\xb7\x9d\xd6\xd9\xb7\xe6K\xf4\xb4\xad\x95\xab\xb7;\x83\xbc\xb8Fb\xde8\xd5\x87K8[\xf6\x1c\xb8r#B\xb8\xd2\xa9\xcf\xb8f\x1f8\xb6@=\x8e6\xcc\xd8\t7]\xce\x807\x88\x1b98.\xb8\t8\xa3\xd2\xc05\x17\xa4D9\xe2\x01\x8c\xb7\x17\x1b\xae\xb7[\xb7,\xb5u\xf8\x7f7\xe1\x87\xef7\x94\x85+5\x0f\x1f\xee\xb5Q\x9d(8<g\x8d\xb5\x82:\x82\xb8\xcf\xc2N\xb8\xa9\x8eL\xb6DD48\xf9iY8Wi\xe8\xb8{\x99\t9\x86\xd0\xb8\xb6`\xcb\xf6\xb7\xc0H\xca8K\xf8\x03\xb9\x04\x00\x00\x80J\xee\x9d7\xd1\x9dy7\x8dd\xe4\xb6d\xd5&7\xf0\x00\x9e7c\xfa\r8\xe1\xab\xe3\xb8\x83\x16\xc58\x04G?\xb7\x97L\xc0\xb7\x93of\xb8\x04\x00\x00\x80\x18m\xda7e^\xe88<\xa2@7\xe6!3\xb8\x97\x18\x19\xb8\x10@U8(n\xd17\xce\xe8.\xb8\x04\x00\x00\x00\xc7\xbb\x028^\x11:9\x8e\xf3R\xb9B\xa9\x928\xeb\xdc\x13\xb7v\x91\x14\xb8\x0e\x87#\xb1K\x98\x1f8\x9f%\xb7\xb8\xf1\xc5H9\x06bf8b\xca\xe8\xb7GM\r\xb9\r\n\x97\xb8\xd2\x11\r8\xf1\x8f?8\t\xc0\xba\xb5aT\xf87\xbe\xeby\xb8\xc0J\x838\xc9T:6\xb5\x87%9\xb1A\x836\xe20\x80\xb7HYl7\xce>\xf77\x01\xc7\xe3\xb4*\x06\xa35\xc1:f\xb6\x955B6\xd0\xa6\xdc\xb5U\x97*8m\xafw\xb8\xc6\xd2\x0f6\xe5\xd489\xac4\x978\x9a\x0e\x829\x8bS\r9N\x83\xc2\xb6\xa2\xa0B\xb9\xaf4\xc08\xa2Vu\xb8\x04\x00\x00\x80JD\xb4\xb7\x11S\r\xb8\xc1\x1b,\xb7$\x8eG7\x08\x85:6\xf9U\xf1\xb7\xc6v\x83\xb9+\xad\x998\xd4\x9c?\xb7\x8e\xc5?73\x83\xb3\xb8\x04\x00\x00\x80\x1a\xa5\x028\xc3w$9\x83\x17_7w:\x94\xb5\xd6Tj\xb6I\x81\xa4\xb7\x7f\xea\xb48\xa7\xf6\xaa7\x04\x00\x00\x00$">6\xd1\x02\xf78\xb4\xa9L\xb9\r\xa9<9\xda\xec\x977\xe2\xd698\x95\xe9z\xb69\xe9k9|\x93\'\xb9y]\xaa\xb8\x03"\x898\x11\xc7B9WT\xee\xb8\xcaS\x1a6O2\x879\xc1i/7JA\xd25\xbc\x86\x198\x9c\xdb\x10\xb9\x82\xd2\x9d8esc6Q\xf7l5\xdb\x1aC8\x88\xb2\xb28\xf6\x1d\x84\xb6\x03\xe1\x138\xc6\xe9\x0c\xb8\xcf*\xc75#\xd3\x89\xb6\x15n\x11\xb9\t\xe2f\xb6\xa5q\xb48\xb1\x13\xa3\xb8\xfa\x97%6LX\xfa8/A|8\xfe;\x938{p\x0e7\xc4<\x87\xb6\xc2\xfeS\xb8}#u\xb8\xac\x7fj\xb7\x04\x00\x00\x00:\x8be7\x9f?\x0c\xb8\x8d4\xc9\xb6\xef\x8e 7\x8d.\xb2\xb3AB\xbc\xb9]Q`\xb9\nD1\xb8j\xe7\x08\xb7\xf7\x13\x129\xa4\x86\x8b\xb8\x04\x00\x00\x80&\xb4\xd17\xe9\xa8^8\xff\x16\xf27sb\xb87\xdc\x99+8L\xc3\xee\xb8\x1f\xd1\x128@\x10\xcd\xb8\x04\x00\x00\x00\x9b\x87\x02\xb8\x06\xb8\xe0\xb7Sbh\xb5\x97\xc5\xc17b\x9e\xc7\xb7w\x8e\x975J\xfb\xa48\xbc<\xff8\x9b[\xd2\xb8H\xa4F\xb9)\xa7?8\xd7\xc739A\xd4\xcd\xb8\x07s\xe8\xb6\x85WR9r\x81\xac8h\x99\x086Fy\xfb74\xab\xb4\xb9cP\x808\x8a\xfa0\xb6|^\xe8\xb4-\xec\xb3\xb8\xbe\xa1O8D\x8dD\xb6\xc0n\xed7\xcc\xfe\x0e\xb9\x83B\r7\x84\\W\xb6bo\xe6\xb8\xc1\xb5\xd5\xb6k\x1cI\xb7\xa9A\xa7\xb8\x08\xe2\xd2\xb5\xb6(\x816\x0cP\x0f8\xb3\xb4j\xb8\x9e^\xa35tr-70\xedJ8W\t\r\xb9\nU!\xb9\x04\x00\x00\x00\x13\xac\x907\xe3!\x9c\xb7\x1f\x81l\xb6!\xc2\xb96\xc7\x89/7kH\xaa\xb8B\x8a8\xb9_\xbb\x1b82 \x94\xb6\x009\xa69^BH\xb8\x04\x00\x00\x80\x0b\xbet7q\xb9^7\x18\x93\x147q\xc3\x1d8\xd8\x00\x0e81\xcd\x9d9\xe8\xb1\x0f7\xd8={\xb8\x04\x00\x00\x80vJt\xb9\xc4L!\xb6\x14\xe9\x8e7\xb0P\xab\xb7\x0f\xd8\x067\xb3\xa7f\xb8_l^\xb8\xeb\x0e\xd5\xb8\xaa\x0b\xdb\xb6\x1fG\xd0\xb8\x02\x18\xa77?\xaa\xa08\xe6\x17\xae\xb8C?~\xb7\xf1=\xce8j\xb6%\xb8\xec{\xf97\x8e\xd6\x9179j\xa0\xb8\x1a\x07\x168\xda\x18\xb46S\x80\x8588\x8c\xb3\xb8\xd9\xab)7\xb6\x92p\xb7\xf6V\x927\xed\xf8:\xb9\x1e\xef\x127\xce\xc3\xcd\xb5*IF\xb8\x8cd\x9f\xb5D\xce7\xb8\x90\x921\xb7M\xfb.\xb5D\xd8#6J\x1b]7\xd7 \xc9\xb7\x97IK74?\xb56\xb3\xd5\xf76\x03k\x95\xb83\xbd\x1b\xb9\x04\x00\x00\x80gx\x038 \xe2\xc5\xb6\x7f+\xca\xb5\xe3\xc6\x1f6W\x0e\xa86\r\x19\x8e7$ew\xb813\xca7)3\\\xb5\x9d\x05\x8095\xa2\xce\xb7\x04\x00\x00\x80\xe35\xd16\xef\xba\x9a6\rk36\xc9\xb8\xca6F\xe6\x94\xb8\xadd\xeb7\x1b\x11\x946X\x0e\xa4\xb7\x04\x00\x00\x80\xb9\rV\xb8 x\x9a8\xa9k"\xb8\xe4J\xfa\xb6\x9a\xa7@7\xeeZ:\xb8\x83\xe0\x88\xb7v\x93X\xb8\x13\xda6\xb6\x0e\xa6\xf7\xb8a\xd7f6\xfby\xa5\xb6A\xd8"\xb8\xbf\xda\xde\xb7z\x19\xda8\x0c\xc5\x0f7\xe5\xf117+\xee\t7\x1fd\x938\xd0\x9ae7\xef\x02H6\xb0;\x7f\xb7\xb5\x13\xc0\xb8\xe4+ \xb7\x7fS\xaf7\xbe\x9c\xe56\xb5\xad\x1b\xb8\x1e\xeb`\xb4\x1dl\\\xb5\xa4lu\xb8\xe8\x89_1y\xe4Z\xb7\xf5\x96\x1c\xb6-T\x06\xb5\xb9\xa0Q5$qj6C\xd6\xf5\xb6\x0c\xed\xcb\xb5\xba1\xef\xb4\xcfO\xda78PZ\xb8\xeaC\x1a\xb8\x04\x00\x00\x80\x13\xa0\x1c8\xae\xac4\xb6j"\xf7\xb4!PC5\xd8\xfa\xcb5W\xf5\xd97\xdd3\x1c\xb6\xc5S\xb5\xb6\xb4\xfbu\xb5\xedB\x9f7\x82"Z\xb6\x04\x00\x00\x80\xab\xbd\xff5\x90\xf0\xbc5\x92R[5T^\x975"p\x867a\x03\xea\xb8F\xe1\xd25\xdfYK\xb6\x04\x00\x00\x80\xa6\xba\xaf\xb6F\xf6\x079\x0e\x7f\xbe\xb8\xde\xd0\x00\xb6\x16~n69\xec\x99\xb5\xa3B\xce8h\xd8\t\xb6\x19\xe4S\xb5\xc9\xcc\xb3\xb7~\x9645\xbbv\x00\xb6\xf4\x8a\xa1\xb6\x04\x86\x92\xb6[\xcc\x058\xedz\xba\xb6\x16\x01\xe7\xb3-\xa2b6\\v\xe56}\xdf\xed\xb6\x9f)Z4\xeeBY\xb6\x9du\x047\x1d\x1d8\xb6\xff\xc0\x86\xb5\xcc\xde\xa2\xb6\xff\xdeU8"\x91d\xb68\xb9\x86\xb4\x92\xdf(5nh\xcc\xb3\xe7\x15c\xb5U\xa7\t\xb5\x1b(y\xb3\xadF84\x14\xef\xfd4\xc5\x1b\xd8\xb5\r\x11\xb3\xb4\xb4i\xd2\xb3?\xf0\xa45\x02\x82\x07\xb7\x93r\x175\x04\x00\x00\x80\x99\xdb\xfd4\xe2\xfb.\xb5\xc5?\xd9\xb3\xc2\xb1+4"P\xb34\xfb\xf8a6\xf7\x8b\n\xb5P"\x8e\xb5\xb2<X\xb4\xa3\xcd\xcd\xb7\x84\x0f&\xb5\x04\x00\x00\x80\x93\xd0\xe04w\x17\xa64\xe5\xcc@4a\x10\x854\'\x86\x8a5P\x96\xe0\xb6\xcc\x92"4\xb7\xd1\x82\xb6\x04\x00\x00\x80HP\xd2\xb5]\xf0A7<w\xc6\xb67\x12\x03\xb5\xce\xc8Q5\x0c\xba\xd4\xb4L\x86i9\xd2Z\xf4\xb4\x82\x05F\xb4\xd20\xa9\xb5p\xbe\x1e4}M\xbb\xb44\xc3\xd0\xb7\xd2d05\x1a.\x886}\xdc\xdc\xb6\xca\x11\xcb\xb2O\x9cA5\xe3*\x1c6V\xb854\xdc\xc7?3\x88\xa4:\xb5/3C\xb4\x12\xb1!\xb5\xb4\xeal\xb4\xfb1\x005ml\x896\x88\xf2\x15\xb4\xee\xdcl\xb3\xae\x9f\xc74\xde\x9e\xc8\xb2P\xa2D\xb4\r\xf3;\xb3\xc3\x18\xaa\xb1a\x9a{23\x80\xaf3\xf5\x88\x13\xb4j~\xf4\xb26e\x0e\xb2w\xe8E\xb2\xe4\xefT3\xd2\x08S3\x04\x00\x00\x80\x9dH-3`\xebn\xb3KP\x14\xb2\x93mj2\x8a\xd4\xf42\xc2\x98\xc13\x0e\xe2>\xb3\xc9 \xc2\xb3p\x9f\x93\xb2\x0b\x91\x81\xb3\xf1\x9a\x06\xb3\x04\x00\x00\x80\x8az\x1933\xc7\xe22q\x9f\x832\xc8\xae\xb524\xfb\xf1\xaf\x11\xb4\xcc\xb2x\xf9]2\xbf\x01\xf5\xb3\x04\x00\x00\x80)R\x903*~\xb4\xb3\xc9\x9fz2\xfa\xf52\xb3\xb5/\x8f3|\xf1\xe51\xb4\xf5\x048\xb4\xeb&\xb3%\x96\x8f\xb2\xcda\xe6\xb3\xe0\xbeX2p\x9d\x04\xb3\xa8@\x02\xb4\x8b\xdap3hni\xb3\xc6\x1a<2\x1c\xa2\n\xb1\xcc\x99)3%\x1ay\xb2i*\xbc3>\xed\x821\xc2\x93z\xb3\xceB\x85\xb2>\xc5\\\xb3\x99\xbd\xa1\xb2\x8c\xb9-3\xa4\xe3\xe82\xf5\xf0\xe909\xb4\xa1\xb1\xe5\xabv2(\xf6\x08\xb1o=\x86\xb2\x89\xd7\x8a\xb0\xa4N\xfb\xae-\xdd\xb9/Y\xa5\x011X\xf9Y\xb1\xc5\x9c4\xb0ZRT\xaf#Q\x92\xaf\xa6W\x9d0\xd6\xe3\x9b0\x04\x00\x00\x80\x89\t\x800\x95~\xb0\xb0\xdb\x1f[\xaf)-\xad/g\xdc40\x83\x03\x0f1O\x02\x8d\xb0\xfcg\x0f\xb1\x8d\x1a\xda\xaf *\xc4\xb0\x00\xdfF\xb0\x04\x00\x00\x80e\xc1b0\x7f\x86\'0\xf7v\xc2/o6\x060\x1a\xc12\xad\xe97\x17\xb0\x13\xfa\xa3/K\xa94\xb1\x04\x00\x00\x80V8\xd50q\xfd\xf7\xb0\x17$\xb9/\xb03\x84\xb0\x96\x8c\xd30\x11\xdd)/\x83v\x14\xaf\xbb\x92v\xb0\xf3#\xd4\xaf\x120*\xb1?\x1d\xa0/?\xeeC\xb0\x99\xcbB\xb1b\xec\xb10\xb6p\xac\xb0\xdf\xf4\x8a/\x88\xd2L\xae-\x93z0\x88,\xb8\xafn\x00\x0b1\xb1o\xc1.6\x1b\xb9\xb0\x8a\xe2\xc4\xafi\x16\xa3\xb0E\xf6\xee\xaf}U\x8006\n,0\x01\xd1,.z\xe8\xee\xae\x99\xc9\xb7/1ZJ\xae\xd7T\xc6\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb6\xda?\xaf|\xa1\xad\xadCj\x80.\xa5%\xb3/\xa7\x99\x16\xb0\xcf\x92\xf9\xae\xee\xb1\x12\xae\xf5.J\xae(kY/_iW/\x04\x00\x00\x80\x9c\xec0/\x1b\xe2s\xaf&e\x17\xae`Lo.\xbc\xea\xf9.\xe3\x9c\xc5/Q\xd9B\xafN)\xc6\xaf\x9b\xb0\x96\xae*\x88\x87\xaf\xdff\t\xaf\x04\x00\x00\x80\xdb\xaa\x1c/]}\xe7.\x83[\x86.\x1au\xb9.m\x02\xf7\xab\xce\xf4\xd0\xae\x0f\x96b.\x1c\xa4\xf9\xaf\x04\x00\x00\x80\xd1P\x93/\xaaV\xab\xaf\xc8\xd4\x7f.\xd2\xad6\xafF)\x92/\x83\xb8\xea-+&\xcd\xad\x10\\*\xaf\xe0\x91\x92\xae&+\xeb\xaf\xab?].\xc6^\x07\xaf\xf9\x95\x06\xb0\x98\xdbu/\xf8Gn\xafA\x03@.\x8a\x83\r\xad\xde\x1f-/\xac~~\xae6\x13\xc0/\x9e\xa5\x85-\x85\xc8\x7f\xaf\x94\x07\x88\xaeu[a\xaf\xdb\x19\xa5\xae\x8bU1/S\xba\xed.\x08\xcd\xee,B\x10\xa5\xad\xf7\xf5}.\x9f\xce\x0b\xadl\x07\x89\xae\xaa.\x80\xb3V\x03\xe8\xb1\xa2\x03\xd12ob\xef30\x0b\xa5\xb6\xeb\xbe&\xb3E\x05D\xb2<\x15\x87\xb2)C\x913\xe2\xeb\x8f3\x04\x00\x00\x80\x11jl3_\xf5Z\xb5\x11MJ\xb2{\xe1\x9f2}\xee\xbb5\'`\'\xb5\xd9.\x82\xb3he\x04\xb4\xd5[\xc9\xb2\x9b\x1a\xb5\xb3G\x9a7\xb3\x04\x00\x00\x80\x9eXQ3\xe6\xa9\x1a3\xda\x88\xb32\x16\xd1\xf72\x03\x08%\xb0\xa6\x96\x0b\xb3.c\x972l\x8e\xa93\x04\x00\x00\x80\x7f\xd9\xc43O\xf3\xe4\xb3;\xed\xaa2\xa2\x1at\xb3\xafN\xc33\xd9S)2\x8a\x10\t\xb2q\xa4c\xb3\x03\xda\x07\xb6\x1b\x1f\x1d\xb4E\xd2\x932L\xe34\xb3\xfb\xd63\xb4aC\xa43z3\x9f\xb3\xc4I\x8026\x16\xed5:Vg3\x96\xb2\xa3\xb2jT\x004\xc6\x95\xb21\xcb\xc8\xac\xb3\xde\xc4\xb5\xb2\xfd\x90\x96\xb3\x8e\x9d\xdc\xb2I\xf6l3 \x96\x1e3s\x8c\x1f1\xe5\x90\xdc\xb1U\xad\xa92\x12\xd1:\xb1\xbc\x1a\xb7\xb2\xa6/\n\xb5\xd6\x1ez\xb3\x0f\xfa=4\x94\x08\x815\xac8\xc0\xb7_\xc2\xb3\xb4\x9cQ\xd3\xb3\x92\xcb\x84\xb5e\x99\x1c5S\'\x1b5\x04\x00\x00\x80o\xdd\xfe4\x9eo3\xb7\xe3\x16\xda\xb3\xce[,4\xe0\xb5\xab6N\'\xac\xb7\x84\xf7)\xb5u\xd5\x7f\xb5\xd2\x12Y\xb4\xec<C\xb5\x86\xee\xc5\xb4\x04\x00\x00\x803\xaf\xe14\xf2\xbb\xa64\xd8\x8bA4$\x94\x854!\xe9\xb1\xb1Un\x86\xb4\xc63#4\x8a\x8f\xb7\xb5\x04\x00\x00\x80\x18}T5\x91\xd1v\xb5\xee\x05\x803\xd3\x93\x03\xb5\xc5\x8cR5\xe7j[\xb4\xf3\xc2\x93\xb3\x92h\xf5\xb4\xb7\xe1I\xb6Fb\xa9\xb5\xa1[\x1f4Q\x01\xc3\xb4\x0c\xe0\xc1\xb5<\x15153\xa0+\xb5\xd9L\n4\x7f\\\x8d7,d\xf94\xe1\xb4\x1c\xb5XX\x8a5\xc7\x85@3\x95~k\xb6y\xf4C\xb41Q"\xb5L\xd5m\xb4\x9bt\xff4!m\xaa4#\x00\xac2s\xc7m\xb3^\xeb64\x82e\xc9\xb2\xd5eE\xb47\x82\xe3\xb5\xf0\xe5M\xb4\xf1G\x185\x9bpT6\xb1\x86\'\xb7*\xfa\x93\xb5\xf7\xf4\xad\xb4\x1f\xc4\x85\xb5r\xe9\x006\xa0q\xff5\x04\x00\x00\x80\xa6\xd8\xd15E\x11~\xb7\xcc\x87\xb3\xb4\x85\xe2\r5\tf\x9b5\x0e\ny\xb55+\x1e\xb6D\xb9I\xb6\xb6\xb12\xb5\x1f\xb8 \xb6\xcd\xef\xa2\xb5\x04\x00\x00\x80X\xc8\xb95\xa4\x97U5\x9aS\x1f5H\xec[5\xb4t\x92\xb2\xba\x8d\xa36\xfcX\x065\xaf\xeb\x08\xb7\x04\x00\x00\x80\x17\x00/6#.K\xb6Fu\x03\xb7\x92\x0f\xea\xb5\xecR-6\x05\xd7)\xb7\xffEs\xb4\xeej\xca\xb5IZ\xa4\xb5\xaco\x8b\xb6\xd4.\x035\xde~\xa0\xb5\xed\x98\x9f\xb6)\xc6\x116 H\r\xb6F\xb2\xe34\xdc\xdb\xdd3NL\xcd5W\x07\x1a\xb6:\xc5c6\xe3{\x1e4\x7f\x1b\xac5\xd4\x1cC\xb5p\x9e\x05\xb6\x90\xc8C\xb5AJ\xd25\xfe\xc3\x965\x0f\x97\x8d38\xbdC\xb4l\x95\x8f6\xe3\xc9\xa5\xb3?\xe0m\xb7\xcahV\xb6\x07\x0b\xc2\xb4u\x83\x8f5I5\xc86i\x11-8\x03u\x0b\xb6\x8cR(\xb5\xee/\xa8\xb5\x9c\xfar6\x96\x11\x90\xb8\x04\x00\x00\x80\xfa\x92G6\xf2\\ 8\x8f1)\xb5/\xb7\x855+c\xc75tB\x816\xfay\xb7\xb6[\xa5\x8f\xb6\xccg\xa8\xb5 l\x99\xb6b\xed&\xb6\x04\x00\x00\x80\xf2\x15/6e\xcb\x07\xb7*\'\x965\xadB\xcf5\x86\x05\n\xb3\xa2t*7z9}5\xce\xfe\xfd\xb6\x04\x00\x00\x80\xd8\x06\xa56\xc4z\xbf\xb69\xed?\xb8\x03\xa3T\xb6,X\xa36\xb2\xa6#6\xb3p\xe5\xb4\xff\x05o\xb6"t7\xb6ih\x03\xb7^Bw5@t\x1b2(\xb2\xda\xb7za\x896\xa9%\x85\xb6\x1e\x96V5\x89&\x1e\xb4>zA6F4\xe9\xb6\xf1\xa7\xd66\xde[\x954\xc2\x89\x1a\xb5\x03gR6\xda\xd9{\xb6\'&B\xb5\xa0.F6\x99\xfb\xd8\xb6\x16p\x054\x0cx\xb8\xb4\x08\x9c\xaf6J>\x1c\xb4\x93\xc9\xd5\xb5\xe4\x88\x7f\xb66C\xe7\xb4y\x18\xab5\x14\x9c\xee6\xa3A$8\xbd4&\xb6\xdbbC\xb5\xe9\x92\x07\xb7\xcb\xca\x906\xe4\x92;\xb6\x04\x00\x00\x80D\xf3k6p=\x8d6n\xa5I\xb5\xfa\\\x9f5\xcd#\x196\xf9P\x06\xb8W\'\xf7\xb78c\xe26\xf9\xb4\xc8\xb50\xa9>\xb6\xb9uh\xb6\x04\x00\x00\x80&\xabP6\xc9W\xbc\xb4\x18\xf4\xb25\xbd\x03\xf75\xc7\xad\x1d\xb3k\x97\xea6\xc0\xe5\x965\x03\x1dX6\x04\x00\x00\x80\xb8\x9c\x80\xb6c5\xe4\xb6k/|\xb6\x07\xf7r\xb6\xd8\xac\xc26\xd5\xcc%8L\x1e\x1f4\x16W\x017\xf2\x8f\xcb\xb7\xe8\x9c\x1c\xb7\xc7W\x935\x84\xd8=7\xa5\xe0\x1c\xb7]\xbb\xa365\xb4\x0f\xb6\xe3\xbe\x7f5-|<\xb4\x8c\x96f6\xec\xab=\xb8(\xd4\xff6\xd1\x01\xb24\x95\xbe\xb8\xb6v\xd5q68\x14\x96\xb6\xb7\\\x086\xec1l6o5\xa7\xb79\x08\x1f4\x18\xda\xdb\xb4\x8a!\xa95\xaa\xc55\xb4x\xf8 77\xf4P\xb6\x1d\x1b\xbd\xb4\xdb\x11\x8e57\x1d\xc36vZ\xfa\xb5\xa4\xe8\x07\xb6\x0c\xa7\x1f\xb5\xc8\xfa|7\xf5\xcbl6\xe9A\xf4\xb6\x04\x00\x00\x80B6}6\x00\xd1\x84\xb6\x83\xe3$\xb55P\x825\x0cH\x086\xe4W\x05\xb8\x81\xfe\x18\xb8\x0b\xc6\xaf4\xde\x1e\xa4\xb5j\x1e\xd07\x93\xd7\x16\xb6\x04\x00\x00\x80\x81\xa1*6?\x1f\xfc5!U\x925\xa8\xfc\xc95\x0b\x87\xd1\xb3j\x89\xd3\xb8\r\xc8v5\xd17\xb0\xb4\x04\x00\x00\x80\x87\x9777\x11\x9c\xba\xb6\xa3\xe9\x8b\xb7\x1b\x81D\xb670\x9f6\xdd\xe3\xac5$\xa9r6\x0c\x05x7\xe3$\xae\xb6y\x10\x00\xb7\xe3\xf7p5\xf9r\x8f6l\xbd\t6[\xee\x856\x98\xb0Y7] Q5$ \x1a\xb4\x03\x8e<68\xb4\x99\xb8\xc11\xd16\x9f\xbf\x914\x93\xd1\xb9\xb5](k4equ\xb6R\xc7\xb3\xb5\xbf#A6\xcaF/\xb8\xf2\n\x024\x85\xc6\xb3\xb4GL\x8a5yw\x15\xb4=\x93T\xb5:\x8e\x00\xb6]\xb0h\xb46\xd6.5\xe6\x14p6d\xdf\xec\xb6;;\xa7\xb5\xa2\x0e\xc4\xb4\xc5Y(\xb6t\xaf\x116z<\x1f\xb5\x04\x00\x00\x80\xf1\x14\x1c6"k#\xb6\xe4\xe3\xca\xb4\xa8X 5\xdc\xb3\xa75\xb5(\xa0\xb7\xd8\x9e\xf0\xb6I%\x87\xb6\xf5\xf1I\xb5@\x90\t8(\xc4\xb6\xb5\x04\x00\x00\x80\xb1\xf4\xd152\x1d\x9b5\xb5\x0e45\xda\x89x5\x9c\xc8\x99\xb2vD\x818\r\xd4\x1754\x93q\xb6\x04\x00\x00\x80A\x81\x93\xb8\x01\x9ee\xb6+\xe0\xc5\xb7.\x80\xf4\xb5J\xe0C6\xbf\x08\xfc\xb7\\ \x04\xb8\xd8e^\xb5klD\xb5?\x94\x9d\xb6v@\x145+j\xb5\xb5\xe7\'\xbc1\xc7\xe7$6\x7f\xff\xb6\xb4a\xa9\x005\xb9\xa5\xbd\xb3\xb4\x02\xe85\xbf\xdc\xe4\xb6\x17\xb4\x806\xe9\x1a348\xc2>\xb60\x10|4[\x00\x17\xb6-s\xad6\xf3\xa6\xed5\xf9\x8c\x99\xb7X\x03\xa03)5]\xb4\xd9+*5\xdf}\x95\xb3\xdb_Y\xb6K\xcd]\xb5\xd8\xbb\xc8\xb3\x02v\x944q\x1c\xcf5\xb5\x1b.\xb6\xf0C\x10\xb5\xea\x97)\xb4L\xefj\xb4M[{5u\x9b\x942\x04\x00\x00\x80\x93\x8aL5\xe1\xf9\x8c\xb5\xf0\x06/\xb4oS\x8a4\xf4"\x145\x8f\xfb46Q\xcfa\xb55\x17\xe5\xb5>6\xae\xb4aw\x8e7\x84\xd9\x1e\xb5\x04\x00\x00\x80[\x1f55\xe8\xcf\x055\x7fT\x9b4\x12h\xd64\xa9\xef\x0f\xb2\xa0\xa8\xf27G\xfa\x824\x96\x8b\x10\xb6\x04\x00\x00\x80\x1a"\x0b\xb8o\x15\xc6\xb5f\x86\xdb\xb6\xc21S\xb5\xf2\xf9\xa85Jc\xb4\xb7\xb9:\xb8\xb7g\x899\xb5\xd4r\xa9\xb4L\xf0\x07\xb6\xa9\xc8\x7f4\x1aZ\x08\xb5"#\xc2\xb5\xe5\x1e\x8e5\xd7\x0f\x8a\xb5%\xfc]4\x00\x9a#\xb3\xfe%H5\xef\x8b05\xa0\x0e\xde52\x82\x9a3\x9e\xea\x05\xb6\x810\x9f\xb4\xc6A\x82\xb5\xb1I*8\xe6\x03M5L"\x81\xb7\xe1\t\n3>\xd4\xbe\xb3/\xcd\x924[\x13\x90\xb2\xf4.\x89\xb5|\x8fy\xb4\xf5\xda\xe1\xb2:\n\xa73\xf4\x07\xe94\xdd\xe5C\xb5\xfbQ"\xb4q\xd1>\xb3C\xed\xb8\xb4.h\x8d4\x9c\xf7c\xb5\x04\x00\x00\x80\xc4#f4\x8a\x9e\x9e\xb4\x8b\xeeD\xb3/\xa3\x9b3+\x8b"4\x8d\x87\x005\xabt}\xb4\xdb\xe1\x00\xb5\xb8\x03\xc4\xb3\xf5X\x9a5\xcf\xba2\xb4\x04\x00\x00\x80=\xcaK4\x0c\x8f\x164\x06\xc5\xae3R=\xf13\x95\x12!\xb1b.>\xb5\x9b^\x933<]"\xb5\x04\x00\x00\x80\xbd\x05\x12\xb5\xba\xdf\xde\xb4\xb9\xa3:5\x18\xa0m\xb4\xae\x1f\xbe4\x88\xc2r\xb5%l\xf4\xb78\x98]\xb4\xb5\xa7\xbe\xb3\x8f\xf3\x18\xb5\xea\xe5\x8f3s\xb6\xa4\xb3oU-\xb5P\xe7\x9f4\xce\xf9\x9a\xb4D\xc4y3\x1c\x148\xb2m2a4\x1d\xa7\xd8\xb3\xfd\xd8\xf94m\xd8\xad2\xe6~\xbf\xb4\xd9\xf1\xb0\xb3\xfc\x91\x92\xb4\xa0\xc2\xd6\xb3E\xacf4\xd6\xb7\xab7hP\x1b2\x0c\xb6\xd6\xb2t,\xa53\xa5:\xad\xb1\xa7>\xb2\xb3\xd2r\x00\xb3\xd0~h\xb1^\xf3+2\xb9\xe1o3,\xa8\xc9\xb3\x94\x17\xa7\xb2~m\xc4\xb1,]\x07\xb2f\x90\x113\xf8\xae\x0f3\x04\x00\x00\x80\xc5\xe7\xec2PH#\xb3\xa1\xb8\xca\xb1\x846 2sR\xa72\xd9N\x843\x11t\x02\xb3\xcf\xab\x84\xb3\xe7\xc6I\xb2\xf3\xc5O2\xe9\xfb\xb7\xb2\x04\x00\x00\x80\xf0\xc7\xd12\x19\xfc\x9a2T\xe832\xddTx2\xd8_\xa5\xaf\x9a\x01\x0c\xb3\xab\xb3\x172*#\xa7\xb3\x04\x00\x00\x80EBE3\x0eme\xb3\xb0f\x955p\x9c\xf4\xb2\x8a\xb6C3\xf9nl\xb3tU\x1f\xb6}\x1d\xe4\xb2\x90BD\xb2\xa8r\x9d\xb3\xe3 \x142}C\xb5\xb2+\x19\xaf\xb3\xba\x9a$3"\x88\x1f\xb3\xfc\x8d\x002q}\xbd\xb0>\xd1\xe72\xaf5+\xb2\xa7\x98\x803\xbc\xf421Z\xc9+\xb3\x8b%6\xb2\x0e\xe1\x16\xb3\xe1\x12]\xb2It\xed2f\xd6j5E\xe1\x9f0#\x06]\xb1\x88\x07*2_4\xbb\xb0\x19|7\xb2\'2\xe3\xafv\x9dM\xae\x04\x12\x18/\xd8%T0\xa6W\xb2\xb0\x16\xc6\x93\xaf\xc2\xb7\xad\xaexm\xef\xae\x15\xbc\x000\xb9\x17\xff/\x04\x00\x00\x80\xfa\x83\xd1/\x91g\x10\xb0\xa0H\xb3\xae\x9a\xb0\r/&\xfa\x93/\xc0\x05j0\xff\xbd\xe6\xaf-\xaaj\xb0\xd3r2\xaf\x91\x7f \xb0v\xb6\xa2\xaf\x04\x00\x00\x80\xf7\x86\xb9/\xfc\x10\x89/\x84\x1b\x1f/\xe4\x9e[/\xd7@\x92\xac\xc6rw\xaf\xb3)\x06/U\xd0\x93\xb0\x04\x00\x00\x80\xebs.0\xa3\xe6J\xb0\x9cz\x17/\x97T\xd8\xaf\xee\x15-0\xb5\xfa\x8a.\x87\xf0r\xae\xdf\xbd\xc9\xaf\xc4\x91-\xaf\x9a>\x8b\xb0\xa7\x00\x03/\x92N\xa0\xaf\xc2`\x9f\xb0\xdd\x92\x110g\x16\r\xb0"b\xe3.\x0c\x95\xa7\xad\x0c\x04\xcd/\n\xb0\x16\xaf\x13uc0\x1dD\x1e.\\s\x17\xb0x\x16!\xaflo\x05\xb0\xad\x83C\xafA\x00\xd2/\x8a\xc2\x8c/Se\x8d-`xC\xae\x1d_\x16/\x9c\x8f\xa5\xadkE"\xaf\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
p8151
tp8152
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp8153
Rp8154
(dp8155
g182
(I00
I00
tp8156
sg183
S'float32'
p8157
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g8154
sbasg14
g0
(g15
g2
Ntp8158
Rp8159
sg204
(lp8160
g8051
asg206
g1220
sbsg177
g0
(g178
g2
Ntp8161
Rp8162
(dp8163
g182
(I00
I00
tp8164
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8165
Rp8166
(dp8167
g11
S'auto_1381'
p8168
sg13
I0
sg14
g0
(g15
g2
Ntp8169
Rp8170
(dp8171
g19
(lp8172
(lp8173
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8174
tp8175
a(g22
I72
g26
S'exec code in run_globals'
p8176
tp8177
a(g29
I249
g30
S'Model(hyperparams).train()'
p8178
tp8179
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8180
tp8181
a(g37
I74
g38
S'learning_rate=LR)'
p8182
tp8183
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p8184
tp8185
aasbsg52
Nsg53
g0
(g54
g2
Ntp8186
Rp8187
(dp8188
g58
(lp8189
g0
(g7
g2
Ntp8190
Rp8191
(dp8192
g11
S'auto_1358'
p8193
sg13
I0
sg14
g0
(g15
g2
Ntp8194
Rp8195
(dp8196
g19
(lp8197
(lp8198
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8199
tp8200
a(g22
I72
g26
S'exec code in run_globals'
p8201
tp8202
a(g29
I249
g30
S'Model(hyperparams).train()'
p8203
tp8204
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8205
tp8206
a(g37
I74
g38
S'learning_rate=LR)'
p8207
tp8208
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p8209
tp8210
aasbsg52
Nsg53
g0
(g54
g2
Ntp8211
Rp8212
(dp8213
g58
(lp8214
g0
(g7
g2
Ntp8215
Rp8216
(dp8217
g11
S'auto_1357'
p8218
sg13
I0
sg14
g0
(g15
g2
Ntp8219
Rp8220
(dp8221
g19
(lp8222
(lp8223
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8224
tp8225
a(g22
I72
g26
S'exec code in run_globals'
p8226
tp8227
a(g29
I249
g30
S'Model(hyperparams).train()'
p8228
tp8229
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8230
tp8231
a(g37
I74
g38
S'learning_rate=LR)'
p8232
tp8233
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p8234
tp8235
aasbsg52
Nsg53
g0
(g54
g2
Ntp8236
Rp8237
(dp8238
g58
(lp8239
g7692
ag7956
asg14
g0
(g15
g2
Ntp8240
Rp8241
sg204
(lp8242
g8216
asg206
g5417
sbsg177
g0
(g178
g2
Ntp8243
Rp8244
(dp8245
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp8246
Rp8247
sg204
(lp8248
g8191
asg206
g0
(g207
g2
Ntp8249
Rp8250
(dp8251
g211
(lp8252
sg213
(lp8253
sg215
(lp8254
I0
aI1
asg217
g218
sg219
(tsg220
(lp8255
g222
asg223
I01
sg224
(g225
g225
tp8256
sg227
(dp8257
S'support_code_apply'
p8258
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8259
ssg231
(dp8260
I0
(lp8261
I0
assg234
(lp8262
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8263
asbsbsg177
g0
(g178
g2
Ntp8264
Rp8265
(dp8266
g182
(I01
I01
tp8267
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8268
Rp8269
(dp8270
g11
S'auto_1380'
p8271
sg13
I0
sg14
g0
(g15
g2
Ntp8272
Rp8273
(dp8274
g19
(lp8275
(lp8276
(g29
I249
g30
S'Model(hyperparams).train()'
p8277
tp8278
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8279
tp8280
a(g37
I72
g38
S'W_grads = binary_connect.compute_grads(loss, mlp)'
p8281
tp8282
a(S'binary_connect/binary_connect.py'
p8283
I202
S'compute_grads'
p8284
S'grads.append(theano.grad(loss, wrt=layer.Wb))'
p8285
tp8286
a(S'/work/04864/mvasic/opt/miniconda2/lib/python2.7/site-packages/theano/gradient.py'
p8287
I605
S'grad'
p8288
S'grad_dict, wrt, cost_name)'
p8289
tp8290
a(g8287
I1371
S'_populate_grad_dict'
p8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p8292
tp8293
a(g8287
I1326
S'access_grad_cache'
p8294
S'term = access_term_cache(node)[idx]'
p8295
tp8296
a(g8287
I1162
S'access_term_cache'
p8297
S'new_output_grads)'
p8298
tp8299
aasbsg52
Nsg53
g0
(g54
g2
Ntp8300
Rp8301
(dp8302
g58
(lp8303
g0
(g7
g2
Ntp8304
Rp8305
(dp8306
g11
S'auto_1359'
p8307
sg13
I0
sg14
g0
(g15
g2
Ntp8308
Rp8309
(dp8310
g19
(lp8311
(lp8312
(g29
I249
g30
S'Model(hyperparams).train()'
p8313
tp8314
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8315
tp8316
a(g37
I72
g38
S'W_grads = binary_connect.compute_grads(loss, mlp)'
p8317
tp8318
a(g8283
I202
g8284
S'grads.append(theano.grad(loss, wrt=layer.Wb))'
p8319
tp8320
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p8321
tp8322
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p8323
tp8324
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8325
tp8326
a(g8287
I1162
g8297
S'new_output_grads)'
p8327
tp8328
aasbsg52
S'inputs.T'
p8329
sg53
g0
(g54
g2
Ntp8330
Rp8331
(dp8332
g58
(lp8333
g329
asg14
g0
(g15
g2
Ntp8334
Rp8335
sg204
(lp8336
g8305
asg206
g0
(g207
g2
Ntp8337
Rp8338
(dp8339
g211
(lp8340
sg213
(lp8341
I1
aI0
asg215
(lp8342
sg217
g218
sg219
g350
sg220
(lp8343
g222
asg223
I01
sg224
(I1
I0
tp8344
sg227
(dp8345
S'support_code_apply'
p8346
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8347
ssg231
(dp8348
I0
(lp8349
I0
assg234
(lp8350
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8351
asbsbsg177
g0
(g178
g2
Ntp8352
Rp8353
(dp8354
g182
(I00
I00
tp8355
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8356
Rp8357
(dp8358
g11
S'auto_1379'
p8359
sg13
I0
sg14
g0
(g15
g2
Ntp8360
Rp8361
(dp8362
g19
(lp8363
(lp8364
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p8365
tp8366
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p8367
tp8368
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8369
tp8370
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8371
tp8372
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8373
tp8374
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8375
tp8376
a(g8287
I1358
g8294
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p8377
tp8378
a(g8287
I1358
S'<lambda>'
p8379
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p8380
tp8381
aasbsg52
Nsg53
g0
(g54
g2
Ntp8382
Rp8383
(dp8384
g58
(lp8385
g0
(g7
g2
Ntp8386
Rp8387
(dp8388
g11
S'auto_1376'
p8389
sg13
I0
sg14
g0
(g15
g2
Ntp8390
Rp8391
(dp8392
g19
(lp8393
(lp8394
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8395
tp8396
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8397
tp8398
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8399
tp8400
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8401
tp8402
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8403
tp8404
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8405
tp8406
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8407
tp8408
a(g8287
I1162
g8297
S'new_output_grads)'
p8409
tp8410
aasbsg52
Nsg53
g0
(g54
g2
Ntp8411
Rp8412
(dp8413
g58
(lp8414
g0
(g7
g2
Ntp8415
Rp8416
(dp8417
g11
S'auto_1375'
p8418
sg13
I0
sg14
g0
(g15
g2
Ntp8419
Rp8420
(dp8421
g19
(lp8422
(lp8423
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8424
tp8425
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8426
tp8427
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8428
tp8429
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8430
tp8431
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8432
tp8433
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8434
tp8435
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8436
tp8437
a(g8287
I1162
g8297
S'new_output_grads)'
p8438
tp8439
aasbsg52
Nsg53
g0
(g54
g2
Ntp8440
Rp8441
(dp8442
g58
(lp8443
g0
(g7
g2
Ntp8444
Rp8445
(dp8446
g11
S'auto_1373'
p8447
sg13
I0
sg14
g0
(g15
g2
Ntp8448
Rp8449
(dp8450
g19
(lp8451
(lp8452
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8453
tp8454
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8455
tp8456
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8457
tp8458
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8459
tp8460
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8461
tp8462
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8463
tp8464
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8465
tp8466
a(g8287
I1162
g8297
S'new_output_grads)'
p8467
tp8468
aasbsg52
Nsg53
g0
(g54
g2
Ntp8469
Rp8470
(dp8471
g58
(lp8472
g0
(g7
g2
Ntp8473
Rp8474
(dp8475
g11
S'auto_1372'
p8476
sg13
I0
sg14
g0
(g15
g2
Ntp8477
Rp8478
(dp8479
g19
(lp8480
(lp8481
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8482
tp8483
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8484
tp8485
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8486
tp8487
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8488
tp8489
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8490
tp8491
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8492
tp8493
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8494
tp8495
a(g8287
I1162
g8297
S'new_output_grads)'
p8496
tp8497
aasbsg52
Nsg53
g0
(g54
g2
Ntp8498
Rp8499
(dp8500
g58
(lp8501
g0
(g7
g2
Ntp8502
Rp8503
(dp8504
g11
S'auto_1371'
p8505
sg13
I0
sg14
g0
(g15
g2
Ntp8506
Rp8507
(dp8508
g19
(lp8509
(lp8510
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8511
tp8512
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8513
tp8514
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8515
tp8516
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8517
tp8518
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8519
tp8520
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8521
tp8522
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8523
tp8524
a(g8287
I1162
g8297
S'new_output_grads)'
p8525
tp8526
aasbsg52
Nsg53
g0
(g54
g2
Ntp8527
Rp8528
(dp8529
g58
(lp8530
g0
(g7
g2
Ntp8531
Rp8532
(dp8533
g11
S'auto_1362'
p8534
sg13
I0
sg14
g0
(g15
g2
Ntp8535
Rp8536
(dp8537
g19
(lp8538
(lp8539
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8540
tp8541
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8542
tp8543
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8544
tp8545
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8546
tp8547
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8548
tp8549
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8550
tp8551
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8552
tp8553
a(g8287
I1162
g8297
S'new_output_grads)'
p8554
tp8555
aasbsg52
Nsg53
g0
(g54
g2
Ntp8556
Rp8557
(dp8558
g58
(lp8559
g0
(g7
g2
Ntp8560
Rp8561
(dp8562
g11
S'auto_1360'
p8563
sg13
I0
sg14
g0
(g15
g2
Ntp8564
Rp8565
(dp8566
g19
(lp8567
(lp8568
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8569
tp8570
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8571
tp8572
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8573
tp8574
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8575
tp8576
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8577
tp8578
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8579
tp8580
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8581
tp8582
a(g8287
I1162
g8297
S'new_output_grads)'
p8583
tp8584
aasbsg52
Nsg53
g0
(g54
g2
Ntp8585
Rp8586
(dp8587
g58
(lp8588
g962
asg14
g0
(g15
g2
Ntp8589
Rp8590
sg204
(lp8591
g8561
asg206
g0
(g207
g2
Ntp8592
Rp8593
(dp8594
g211
(lp8595
sg213
(lp8596
sg215
(lp8597
I0
aI1
asg217
g218
sg219
(tsg220
(lp8598
g222
asg223
I01
sg224
(g225
g225
tp8599
sg227
(dp8600
S'support_code_apply'
p8601
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8602
ssg231
(dp8603
I0
(lp8604
I0
assg234
(lp8605
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8606
asbsbsg177
g0
(g178
g2
Ntp8607
Rp8608
(dp8609
g182
(I01
I01
tp8610
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8611
Rp8612
(dp8613
g11
S'auto_1361'
p8614
sg13
I0
sg14
g0
(g15
g2
Ntp8615
Rp8616
(dp8617
g19
(lp8618
(lp8619
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8620
tp8621
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8622
tp8623
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8624
tp8625
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8626
tp8627
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8628
tp8629
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p8630
tp8631
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p8632
tp8633
a(g8287
I1162
g8297
S'new_output_grads)'
p8634
tp8635
aasbsg52
Nsg53
g0
(g54
g2
Ntp8636
Rp8637
(dp8638
g58
(lp8639
g0
(g7
g2
Ntp8640
Rp8641
(dp8642
g11
S'auto_1346'
p8643
sg13
I0
sg14
g0
(g15
g2
Ntp8644
Rp8645
(dp8646
g19
(lp8647
(lp8648
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8649
tp8650
a(g22
I72
g26
S'exec code in run_globals'
p8651
tp8652
a(g29
I249
g30
S'Model(hyperparams).train()'
p8653
tp8654
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8655
tp8656
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p8657
tp8658
aasbsg52
Nsg53
g0
(g54
g2
Ntp8659
Rp8660
(dp8661
g58
(lp8662
g0
(g7
g2
Ntp8663
Rp8664
(dp8665
g11
S'auto_1312'
p8666
sg13
I0
sg14
g0
(g15
g2
Ntp8667
Rp8668
(dp8669
g19
(lp8670
(lp8671
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8672
tp8673
a(g22
I72
g26
S'exec code in run_globals'
p8674
tp8675
a(g29
I249
g30
S'Model(hyperparams).train()'
p8676
tp8677
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8678
tp8679
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p8680
tp8681
aasbsg52
Nsg53
g0
(g54
g2
Ntp8682
Rp8683
(dp8684
g58
(lp8685
g676
asg14
g0
(g15
g2
Ntp8686
Rp8687
sg204
(lp8688
g8664
asg206
g0
(g207
g2
Ntp8689
Rp8690
(dp8691
g211
(lp8692
sg213
(lp8693
sg215
(lp8694
I0
aI1
asg217
g218
sg219
(tsg220
(lp8695
g222
asg223
I01
sg224
(g225
g225
tp8696
sg227
(dp8697
S'support_code_apply'
p8698
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8699
ssg231
(dp8700
I0
(lp8701
I0
assg234
(lp8702
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8703
asbsbsg177
g0
(g178
g2
Ntp8704
Rp8705
(dp8706
g182
(I01
I01
tp8707
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8708
Rp8709
(dp8710
g11
S'auto_1345'
p8711
sg13
I0
sg14
g0
(g15
g2
Ntp8712
Rp8713
(dp8714
g19
(lp8715
(lp8716
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8717
tp8718
a(g22
I72
g26
S'exec code in run_globals'
p8719
tp8720
a(g29
I249
g30
S'Model(hyperparams).train()'
p8721
tp8722
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8723
tp8724
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p8725
tp8726
aasbsg52
Nsg53
g0
(g54
g2
Ntp8727
Rp8728
(dp8729
g58
(lp8730
g0
(g7
g2
Ntp8731
Rp8732
(dp8733
g11
S'auto_1313'
p8734
sg13
I0
sg14
g0
(g15
g2
Ntp8735
Rp8736
(dp8737
g19
(lp8738
(lp8739
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8740
tp8741
a(g22
I72
g26
S'exec code in run_globals'
p8742
tp8743
a(g29
I249
g30
S'Model(hyperparams).train()'
p8744
tp8745
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8746
tp8747
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p8748
tp8749
aasbsg52
Nsg53
g0
(g54
g2
Ntp8750
Rp8751
(dp8752
g58
(lp8753
g962
asg14
g0
(g15
g2
Ntp8754
Rp8755
sg204
(lp8756
g8732
asg206
g0
(g207
g2
Ntp8757
Rp8758
(dp8759
g211
(lp8760
sg213
(lp8761
sg215
(lp8762
I0
aI1
asg217
g218
sg219
(tsg220
(lp8763
g222
asg223
I01
sg224
(g225
g225
tp8764
sg227
(dp8765
S'support_code_apply'
p8766
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8767
ssg231
(dp8768
I0
(lp8769
I0
assg234
(lp8770
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8771
asbsbsg177
g0
(g178
g2
Ntp8772
Rp8773
(dp8774
g182
(I01
I01
tp8775
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8776
Rp8777
(dp8778
g11
S'auto_1344'
p8779
sg13
I0
sg14
g0
(g15
g2
Ntp8780
Rp8781
(dp8782
g19
(lp8783
(lp8784
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8785
tp8786
a(g22
I72
g26
S'exec code in run_globals'
p8787
tp8788
a(g29
I249
g30
S'Model(hyperparams).train()'
p8789
tp8790
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8791
tp8792
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p8793
tp8794
aasbsg52
Nsg53
g0
(g54
g2
Ntp8795
Rp8796
(dp8797
g58
(lp8798
g1845
ag0
(g7
g2
Ntp8799
Rp8800
(dp8801
g11
S'auto_1343'
p8802
sg13
I0
sg14
g0
(g15
g2
Ntp8803
Rp8804
(dp8805
g19
(lp8806
(lp8807
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8808
tp8809
a(g22
I72
g26
S'exec code in run_globals'
p8810
tp8811
a(g29
I249
g30
S'Model(hyperparams).train()'
p8812
tp8813
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8814
tp8815
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p8816
tp8817
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p8818
tp8819
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p8820
tp8821
a(g49
I123
g46
S'activation = activation + self.b'
p8822
tp8823
aasbsg52
Nsg53
g0
(g54
g2
Ntp8824
Rp8825
(dp8826
g58
(lp8827
g0
(g7
g2
Ntp8828
Rp8829
(dp8830
g11
S'auto_1341'
p8831
sg13
I0
sg14
g0
(g15
g2
Ntp8832
Rp8833
(dp8834
g19
(lp8835
(lp8836
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8837
tp8838
a(g22
I72
g26
S'exec code in run_globals'
p8839
tp8840
a(g29
I249
g30
S'Model(hyperparams).train()'
p8841
tp8842
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8843
tp8844
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p8845
tp8846
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p8847
tp8848
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p8849
tp8850
a(g49
I121
g46
S'activation = T.dot(input, self.W)'
p8851
tp8852
aasbsg52
Nsg53
g0
(g54
g2
Ntp8853
Rp8854
(dp8855
g58
(lp8856
g0
(g7
g2
Ntp8857
Rp8858
(dp8859
g11
S'auto_1330'
p8860
sg13
I0
sg14
g0
(g15
g2
Ntp8861
Rp8862
(dp8863
g19
(lp8864
(lp8865
(g22
I72
g26
S'exec code in run_globals'
p8866
tp8867
a(g29
I249
g30
S'Model(hyperparams).train()'
p8868
tp8869
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8870
tp8871
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p8872
tp8873
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p8874
tp8875
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p8876
tp8877
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p8878
tp8879
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p8880
tp8881
aasbsg52
Nsg53
g0
(g54
g2
Ntp8882
Rp8883
(dp8884
g58
(lp8885
g0
(g7
g2
Ntp8886
Rp8887
(dp8888
g11
S'auto_1314'
p8889
sg13
I0
sg14
g0
(g15
g2
Ntp8890
Rp8891
(dp8892
g19
(lp8893
(lp8894
(g22
I72
g26
S'exec code in run_globals'
p8895
tp8896
a(g29
I249
g30
S'Model(hyperparams).train()'
p8897
tp8898
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8899
tp8900
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p8901
tp8902
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p8903
tp8904
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p8905
tp8906
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p8907
tp8908
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p8909
tp8910
aasbsg52
Nsg53
g0
(g54
g2
Ntp8911
Rp8912
(dp8913
g58
(lp8914
g151
asg14
g0
(g15
g2
Ntp8915
Rp8916
sg204
(lp8917
g8887
asg206
g0
(g207
g2
Ntp8918
Rp8919
(dp8920
g211
(lp8921
sg213
(lp8922
sg215
(lp8923
I0
aI1
asg217
g218
sg219
(tsg220
(lp8924
g222
asg223
I01
sg224
(g225
g225
tp8925
sg227
(dp8926
S'support_code_apply'
p8927
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8928
ssg231
(dp8929
I0
(lp8930
I0
assg234
(lp8931
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p8932
asbsbsg177
g0
(g178
g2
Ntp8933
Rp8934
(dp8935
g182
(I01
I01
tp8936
sg183
g184
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp8937
Rp8938
(dp8939
g11
S'auto_1329'
p8940
sg13
I0
sg14
g0
(g15
g2
Ntp8941
Rp8942
(dp8943
g19
(lp8944
(lp8945
(g22
I72
g26
S'exec code in run_globals'
p8946
tp8947
a(g29
I249
g30
S'Model(hyperparams).train()'
p8948
tp8949
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8950
tp8951
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p8952
tp8953
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p8954
tp8955
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p8956
tp8957
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p8958
tp8959
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p8960
tp8961
aasbsg52
Nsg53
g0
(g54
g2
Ntp8962
Rp8963
(dp8964
g58
(lp8965
g0
(g7
g2
Ntp8966
Rp8967
(dp8968
g11
S'auto_1327'
p8969
sg13
I0
sg14
g0
(g15
g2
Ntp8970
Rp8971
(dp8972
g19
(lp8973
(lp8974
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p8975
tp8976
a(g22
I72
g26
S'exec code in run_globals'
p8977
tp8978
a(g29
I249
g30
S'Model(hyperparams).train()'
p8979
tp8980
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p8981
tp8982
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p8983
tp8984
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p8985
tp8986
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p8987
tp8988
a(g49
I123
g46
S'activation = activation + self.b'
p8989
tp8990
aasbsg52
Nsg53
g0
(g54
g2
Ntp8991
Rp8992
(dp8993
g58
(lp8994
g0
(g7
g2
Ntp8995
Rp8996
(dp8997
g11
S'auto_1325'
p8998
sg13
I0
sg14
g0
(g15
g2
Ntp8999
Rp9000
(dp9001
g19
(lp9002
(lp9003
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9004
tp9005
a(g22
I72
g26
S'exec code in run_globals'
p9006
tp9007
a(g29
I249
g30
S'Model(hyperparams).train()'
p9008
tp9009
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9010
tp9011
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9012
tp9013
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9014
tp9015
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p9016
tp9017
a(g49
I121
g46
S'activation = T.dot(input, self.W)'
p9018
tp9019
aasbsg52
Nsg53
g0
(g54
g2
Ntp9020
Rp9021
(dp9022
g58
(lp9023
g329
ag0
(g7
g2
Ntp9024
Rp9025
(dp9026
g11
S'auto_1324'
p9027
sg13
I0
sg14
g0
(g15
g2
Ntp9028
Rp9029
(dp9030
g19
(lp9031
(lp9032
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9033
tp9034
a(g22
I72
g26
S'exec code in run_globals'
p9035
tp9036
a(g29
I249
g30
S'Model(hyperparams).train()'
p9037
tp9038
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9039
tp9040
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9041
tp9042
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9043
tp9044
a(g45
I136
g46
S'self.zero_threshold)'
p9045
tp9046
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9047
tp9048
aasbsg52
Nsg53
g0
(g54
g2
Ntp9049
Rp9050
(dp9051
g58
(lp9052
g0
(g7
g2
Ntp9053
Rp9054
(dp9055
g11
S'auto_1317'
p9056
sg13
I0
sg14
g0
(g15
g2
Ntp9057
Rp9058
(dp9059
g19
(lp9060
(lp9061
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9062
tp9063
a(g22
I72
g26
S'exec code in run_globals'
p9064
tp9065
a(g29
I249
g30
S'Model(hyperparams).train()'
p9066
tp9067
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9068
tp9069
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9070
tp9071
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9072
tp9073
a(g45
I136
g46
S'self.zero_threshold)'
p9074
tp9075
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p9076
tp9077
aasbsg52
Nsg53
g0
(g54
g2
Ntp9078
Rp9079
(dp9080
g58
(lp9081
g0
(g7
g2
Ntp9082
Rp9083
(dp9084
g11
S'auto_1315'
p9085
sg13
I0
sg14
g0
(g15
g2
Ntp9086
Rp9087
(dp9088
g19
(lp9089
(lp9090
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9091
tp9092
a(g22
I72
g26
S'exec code in run_globals'
p9093
tp9094
a(g29
I249
g30
S'Model(hyperparams).train()'
p9095
tp9096
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9097
tp9098
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9099
tp9100
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9101
tp9102
a(g45
I136
g46
S'self.zero_threshold)'
p9103
tp9104
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p9105
tp9106
aasbsg52
Nsg53
g0
(g54
g2
Ntp9107
Rp9108
(dp9109
g58
(lp9110
g443
asg14
g0
(g15
g2
Ntp9111
Rp9112
sg204
(lp9113
g9083
asg206
g499
sbsg177
g0
(g178
g2
Ntp9114
Rp9115
(dp9116
g182
(I00
I00
tp9117
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9118
Rp9119
(dp9120
g11
S'auto_1316'
p9121
sg13
I0
sg14
g0
(g15
g2
Ntp9122
Rp9123
(dp9124
g19
(lp9125
(lp9126
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9127
tp9128
a(g22
I72
g26
S'exec code in run_globals'
p9129
tp9130
a(g29
I249
g30
S'Model(hyperparams).train()'
p9131
tp9132
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9133
tp9134
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9135
tp9136
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9137
tp9138
a(g45
I136
g46
S'self.zero_threshold)'
p9139
tp9140
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p9141
tp9142
aasbsg52
Nsg53
g0
(g54
g2
Ntp9143
Rp9144
(dp9145
g58
(lp9146
g562
asg14
g0
(g15
g2
Ntp9147
Rp9148
sg204
(lp9149
g9119
asg206
g0
(g207
g2
Ntp9150
Rp9151
(dp9152
g211
(lp9153
sg213
(lp9154
sg215
(lp9155
I0
aI1
asg217
g218
sg219
(tsg220
(lp9156
g222
asg223
I01
sg224
(g225
g225
tp9157
sg227
(dp9158
S'support_code_apply'
p9159
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9160
ssg231
(dp9161
I0
(lp9162
I0
assg234
(lp9163
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9164
asbsbsg177
g0
(g178
g2
Ntp9165
Rp9166
(dp9167
g182
(I01
I01
tp9168
sg183
g589
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9169
Rp9170
sg204
(lp9171
g9054
asg206
g621
sbsg177
g0
(g178
g2
Ntp9172
Rp9173
(dp9174
g182
(I00
I00
tp9175
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9176
Rp9177
(dp9178
g11
S'auto_1318'
p9179
sg13
I0
sg14
g0
(g15
g2
Ntp9180
Rp9181
(dp9182
g19
(lp9183
(lp9184
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9185
tp9186
a(g22
I72
g26
S'exec code in run_globals'
p9187
tp9188
a(g29
I249
g30
S'Model(hyperparams).train()'
p9189
tp9190
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9191
tp9192
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9193
tp9194
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9195
tp9196
a(g45
I136
g46
S'self.zero_threshold)'
p9197
tp9198
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9199
tp9200
aasbsg52
Nsg53
g0
(g54
g2
Ntp9201
Rp9202
(dp9203
g58
(lp9204
g676
asg14
g0
(g15
g2
Ntp9205
Rp9206
sg204
(lp9207
g9177
asg206
g0
(g207
g2
Ntp9208
Rp9209
(dp9210
g211
(lp9211
sg213
(lp9212
sg215
(lp9213
I0
aI1
asg217
g218
sg219
(tsg220
(lp9214
g222
asg223
I01
sg224
(g225
g225
tp9215
sg227
(dp9216
S'support_code_apply'
p9217
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9218
ssg231
(dp9219
I0
(lp9220
I0
assg234
(lp9221
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9222
asbsbsg177
g0
(g178
g2
Ntp9223
Rp9224
(dp9225
g182
(I01
I01
tp9226
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9227
Rp9228
(dp9229
g11
S'auto_1323'
p9230
sg13
I0
sg14
g0
(g15
g2
Ntp9231
Rp9232
(dp9233
g19
(lp9234
(lp9235
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9236
tp9237
a(g22
I72
g26
S'exec code in run_globals'
p9238
tp9239
a(g29
I249
g30
S'Model(hyperparams).train()'
p9240
tp9241
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9242
tp9243
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9244
tp9245
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9246
tp9247
a(g45
I136
g46
S'self.zero_threshold)'
p9248
tp9249
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9250
tp9251
aasbsg52
Nsg53
g0
(g54
g2
Ntp9252
Rp9253
(dp9254
g58
(lp9255
g0
(g7
g2
Ntp9256
Rp9257
(dp9258
g11
S'auto_1320'
p9259
sg13
I0
sg14
g0
(g15
g2
Ntp9260
Rp9261
(dp9262
g19
(lp9263
(lp9264
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9265
tp9266
a(g22
I72
g26
S'exec code in run_globals'
p9267
tp9268
a(g29
I249
g30
S'Model(hyperparams).train()'
p9269
tp9270
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9271
tp9272
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9273
tp9274
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9275
tp9276
a(g45
I136
g46
S'self.zero_threshold)'
p9277
tp9278
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9279
tp9280
aasbsg52
Nsg53
g0
(g54
g2
Ntp9281
Rp9282
(dp9283
g58
(lp9284
g443
ag0
(g7
g2
Ntp9285
Rp9286
(dp9287
g11
S'auto_1319'
p9288
sg13
I0
sg14
g0
(g15
g2
Ntp9289
Rp9290
(dp9291
g19
(lp9292
(lp9293
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9294
tp9295
a(g22
I72
g26
S'exec code in run_globals'
p9296
tp9297
a(g29
I249
g30
S'Model(hyperparams).train()'
p9298
tp9299
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9300
tp9301
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9302
tp9303
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9304
tp9305
a(g45
I136
g46
S'self.zero_threshold)'
p9306
tp9307
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9308
tp9309
aasbsg52
Nsg53
g0
(g54
g2
Ntp9310
Rp9311
(dp9312
g58
(lp9313
g676
asg14
g0
(g15
g2
Ntp9314
Rp9315
sg204
(lp9316
g9286
asg206
g0
(g207
g2
Ntp9317
Rp9318
(dp9319
g211
(lp9320
sg213
(lp9321
sg215
(lp9322
I0
aI1
asg217
g218
sg219
(tsg220
(lp9323
g222
asg223
I01
sg224
(g225
g225
tp9324
sg227
(dp9325
S'support_code_apply'
p9326
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9327
ssg231
(dp9328
I0
(lp9329
I0
assg234
(lp9330
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9331
asbsbsg177
g0
(g178
g2
Ntp9332
Rp9333
(dp9334
g182
(I01
I01
tp9335
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9336
Rp9337
sg204
(lp9338
g9257
asg206
g621
sbsg177
g0
(g178
g2
Ntp9339
Rp9340
(dp9341
g182
(I00
I00
tp9342
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9343
Rp9344
(dp9345
g11
S'auto_1321'
p9346
sg13
I0
sg14
g0
(g15
g2
Ntp9347
Rp9348
(dp9349
g19
(lp9350
(lp9351
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9352
tp9353
a(g22
I72
g26
S'exec code in run_globals'
p9354
tp9355
a(g29
I249
g30
S'Model(hyperparams).train()'
p9356
tp9357
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9358
tp9359
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9360
tp9361
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9362
tp9363
a(g45
I136
g46
S'self.zero_threshold)'
p9364
tp9365
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9366
tp9367
aasbsg52
Nsg53
g0
(g54
g2
Ntp9368
Rp9369
(dp9370
g58
(lp9371
g877
asg14
g0
(g15
g2
Ntp9372
Rp9373
sg204
(lp9374
g9344
asg206
g0
(g207
g2
Ntp9375
Rp9376
(dp9377
g211
(lp9378
sg213
(lp9379
sg215
(lp9380
I0
aI1
asg217
g218
sg219
(tsg220
(lp9381
g222
asg223
I01
sg224
(g225
g225
tp9382
sg227
(dp9383
S'support_code_apply'
p9384
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9385
ssg231
(dp9386
I0
(lp9387
I0
assg234
(lp9388
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9389
asbsbsg177
g0
(g178
g2
Ntp9390
Rp9391
(dp9392
g182
(I01
I01
tp9393
sg183
g904
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9394
Rp9395
(dp9396
g11
S'auto_1322'
p9397
sg13
I0
sg14
g0
(g15
g2
Ntp9398
Rp9399
(dp9400
g19
(lp9401
(lp9402
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9403
tp9404
a(g22
I72
g26
S'exec code in run_globals'
p9405
tp9406
a(g29
I249
g30
S'Model(hyperparams).train()'
p9407
tp9408
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9409
tp9410
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9411
tp9412
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9413
tp9414
a(g45
I136
g46
S'self.zero_threshold)'
p9415
tp9416
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9417
tp9418
aasbsg52
Nsg53
g0
(g54
g2
Ntp9419
Rp9420
(dp9421
g58
(lp9422
g962
asg14
g0
(g15
g2
Ntp9423
Rp9424
sg204
(lp9425
g9395
asg206
g0
(g207
g2
Ntp9426
Rp9427
(dp9428
g211
(lp9429
sg213
(lp9430
sg215
(lp9431
I0
aI1
asg217
g218
sg219
(tsg220
(lp9432
g222
asg223
I01
sg224
(g225
g225
tp9433
sg227
(dp9434
S'support_code_apply'
p9435
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9436
ssg231
(dp9437
I0
(lp9438
I0
assg234
(lp9439
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9440
asbsbsg177
g0
(g178
g2
Ntp9441
Rp9442
(dp9443
g182
(I01
I01
tp9444
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9445
Rp9446
sg204
(lp9447
g9228
asg206
g1021
sbsg177
g0
(g178
g2
Ntp9448
Rp9449
(dp9450
g182
(I00
I00
tp9451
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9452
Rp9453
sg204
(lp9454
g9025
asg206
g1021
sbsg177
g0
(g178
g2
Ntp9455
Rp9456
(dp9457
g182
(I00
I00
tp9458
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9459
Rp9460
sg204
(lp9461
g8996
asg206
g1052
sbsg177
g0
(g178
g2
Ntp9462
Rp9463
(dp9464
g182
(I00
I00
tp9465
sg183
S'float32'
p9466
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9467
Rp9468
(dp9469
g11
S'auto_1326'
p9470
sg13
I0
sg14
g0
(g15
g2
Ntp9471
Rp9472
(dp9473
g19
(lp9474
(lp9475
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9476
tp9477
a(g22
I72
g26
S'exec code in run_globals'
p9478
tp9479
a(g29
I249
g30
S'Model(hyperparams).train()'
p9480
tp9481
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9482
tp9483
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9484
tp9485
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9486
tp9487
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p9488
tp9489
a(g49
I123
g46
S'activation = activation + self.b'
p9490
tp9491
aasbsg52
Nsg53
g0
(g54
g2
Ntp9492
Rp9493
(dp9494
g58
(lp9495
g1088
asg14
g0
(g15
g2
Ntp9496
Rp9497
sg204
(lp9498
g9468
asg206
g0
(g207
g2
Ntp9499
Rp9500
(dp9501
g211
(lp9502
sg213
(lp9503
I0
asg215
(lp9504
I0
asg217
g218
sg219
g1125
sg220
(lp9505
g222
asg223
I01
sg224
(g225
I0
tp9506
sg227
(dp9507
S'support_code_apply'
p9508
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9509
ssg231
(dp9510
I0
(lp9511
I0
assg234
(lp9512
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9513
asbsbsg177
g0
(g178
g2
Ntp9514
Rp9515
(dp9516
g182
(I01
I00
tp9517
sg183
g1126
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9518
Rp9519
sg204
(lp9520
g8967
asg206
g1153
sbsg177
g0
(g178
g2
Ntp9521
Rp9522
(dp9523
g182
(I00
I00
tp9524
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9525
Rp9526
(dp9527
g11
S'auto_1328'
p9528
sg13
I0
sg14
g0
(g15
g2
Ntp9529
Rp9530
(dp9531
g19
(lp9532
(lp9533
(g22
I72
g26
S'exec code in run_globals'
p9534
tp9535
a(g29
I249
g30
S'Model(hyperparams).train()'
p9536
tp9537
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9538
tp9539
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9540
tp9541
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9542
tp9543
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p9544
tp9545
a(g49
I124
g46
S'return self.nonlinearity(activation)'
p9546
tp9547
a(g112
I157
g113
S'return theano.tensor.nnet.relu(x)'
p9548
tp9549
aasbsg52
Nsg53
g0
(g54
g2
Ntp9550
Rp9551
(dp9552
g58
(lp9553
g8967
asg14
g0
(g15
g2
Ntp9554
Rp9555
sg204
(lp9556
g9526
asg206
g499
sbsg177
g0
(g178
g2
Ntp9557
Rp9558
(dp9559
g182
(I00
I00
tp9560
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9561
Rp9562
sg204
(lp9563
g8938
asg206
g1153
sbsg177
g0
(g178
g2
Ntp9564
Rp9565
(dp9566
g182
(I00
I00
tp9567
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9568
Rp9569
sg204
(lp9570
g8858
asg206
g1220
sbsg177
g0
(g178
g2
Ntp9571
Rp9572
(dp9573
g182
(I00
I00
tp9574
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9575
Rp9576
(dp9577
g11
S'auto_1340'
p9578
sg13
I0
sg14
g0
(g15
g2
Ntp9579
Rp9580
(dp9581
g19
(lp9582
(lp9583
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9584
tp9585
a(g22
I72
g26
S'exec code in run_globals'
p9586
tp9587
a(g29
I249
g30
S'Model(hyperparams).train()'
p9588
tp9589
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9590
tp9591
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9592
tp9593
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9594
tp9595
a(g45
I136
g46
S'self.zero_threshold)'
p9596
tp9597
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9598
tp9599
aasbsg52
Nsg53
g0
(g54
g2
Ntp9600
Rp9601
(dp9602
g58
(lp9603
g0
(g7
g2
Ntp9604
Rp9605
(dp9606
g11
S'auto_1333'
p9607
sg13
I0
sg14
g0
(g15
g2
Ntp9608
Rp9609
(dp9610
g19
(lp9611
(lp9612
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9613
tp9614
a(g22
I72
g26
S'exec code in run_globals'
p9615
tp9616
a(g29
I249
g30
S'Model(hyperparams).train()'
p9617
tp9618
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9619
tp9620
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9621
tp9622
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9623
tp9624
a(g45
I136
g46
S'self.zero_threshold)'
p9625
tp9626
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p9627
tp9628
aasbsg52
Nsg53
g0
(g54
g2
Ntp9629
Rp9630
(dp9631
g58
(lp9632
g0
(g7
g2
Ntp9633
Rp9634
(dp9635
g11
S'auto_1331'
p9636
sg13
I0
sg14
g0
(g15
g2
Ntp9637
Rp9638
(dp9639
g19
(lp9640
(lp9641
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9642
tp9643
a(g22
I72
g26
S'exec code in run_globals'
p9644
tp9645
a(g29
I249
g30
S'Model(hyperparams).train()'
p9646
tp9647
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9648
tp9649
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9650
tp9651
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9652
tp9653
a(g45
I136
g46
S'self.zero_threshold)'
p9654
tp9655
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p9656
tp9657
aasbsg52
Nsg53
g0
(g54
g2
Ntp9658
Rp9659
(dp9660
g58
(lp9661
g1328
asg14
g0
(g15
g2
Ntp9662
Rp9663
sg204
(lp9664
g9634
asg206
g499
sbsg177
g0
(g178
g2
Ntp9665
Rp9666
(dp9667
g182
(I00
I00
tp9668
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9669
Rp9670
(dp9671
g11
S'auto_1332'
p9672
sg13
I0
sg14
g0
(g15
g2
Ntp9673
Rp9674
(dp9675
g19
(lp9676
(lp9677
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9678
tp9679
a(g22
I72
g26
S'exec code in run_globals'
p9680
tp9681
a(g29
I249
g30
S'Model(hyperparams).train()'
p9682
tp9683
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9684
tp9685
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9686
tp9687
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9688
tp9689
a(g45
I136
g46
S'self.zero_threshold)'
p9690
tp9691
a(g375
I80
g376
S'Wb = T.switch(T.lt(T.abs_(W), zero_threshold),'
p9692
tp9693
aasbsg52
Nsg53
g0
(g54
g2
Ntp9694
Rp9695
(dp9696
g58
(lp9697
g562
asg14
g0
(g15
g2
Ntp9698
Rp9699
sg204
(lp9700
g9670
asg206
g0
(g207
g2
Ntp9701
Rp9702
(dp9703
g211
(lp9704
sg213
(lp9705
sg215
(lp9706
I0
aI1
asg217
g218
sg219
(tsg220
(lp9707
g222
asg223
I01
sg224
(g225
g225
tp9708
sg227
(dp9709
S'support_code_apply'
p9710
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9711
ssg231
(dp9712
I0
(lp9713
I0
assg234
(lp9714
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9715
asbsbsg177
g0
(g178
g2
Ntp9716
Rp9717
(dp9718
g182
(I01
I01
tp9719
sg183
g589
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9720
Rp9721
sg204
(lp9722
g9605
asg206
g621
sbsg177
g0
(g178
g2
Ntp9723
Rp9724
(dp9725
g182
(I00
I00
tp9726
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9727
Rp9728
(dp9729
g11
S'auto_1334'
p9730
sg13
I0
sg14
g0
(g15
g2
Ntp9731
Rp9732
(dp9733
g19
(lp9734
(lp9735
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9736
tp9737
a(g22
I72
g26
S'exec code in run_globals'
p9738
tp9739
a(g29
I249
g30
S'Model(hyperparams).train()'
p9740
tp9741
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9742
tp9743
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9744
tp9745
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9746
tp9747
a(g45
I136
g46
S'self.zero_threshold)'
p9748
tp9749
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9750
tp9751
aasbsg52
Nsg53
g0
(g54
g2
Ntp9752
Rp9753
(dp9754
g58
(lp9755
g676
asg14
g0
(g15
g2
Ntp9756
Rp9757
sg204
(lp9758
g9728
asg206
g0
(g207
g2
Ntp9759
Rp9760
(dp9761
g211
(lp9762
sg213
(lp9763
sg215
(lp9764
I0
aI1
asg217
g218
sg219
(tsg220
(lp9765
g222
asg223
I01
sg224
(g225
g225
tp9766
sg227
(dp9767
S'support_code_apply'
p9768
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9769
ssg231
(dp9770
I0
(lp9771
I0
assg234
(lp9772
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9773
asbsbsg177
g0
(g178
g2
Ntp9774
Rp9775
(dp9776
g182
(I01
I01
tp9777
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9778
Rp9779
(dp9780
g11
S'auto_1339'
p9781
sg13
I0
sg14
g0
(g15
g2
Ntp9782
Rp9783
(dp9784
g19
(lp9785
(lp9786
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9787
tp9788
a(g22
I72
g26
S'exec code in run_globals'
p9789
tp9790
a(g29
I249
g30
S'Model(hyperparams).train()'
p9791
tp9792
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9793
tp9794
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9795
tp9796
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9797
tp9798
a(g45
I136
g46
S'self.zero_threshold)'
p9799
tp9800
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9801
tp9802
aasbsg52
Nsg53
g0
(g54
g2
Ntp9803
Rp9804
(dp9805
g58
(lp9806
g0
(g7
g2
Ntp9807
Rp9808
(dp9809
g11
S'auto_1336'
p9810
sg13
I0
sg14
g0
(g15
g2
Ntp9811
Rp9812
(dp9813
g19
(lp9814
(lp9815
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9816
tp9817
a(g22
I72
g26
S'exec code in run_globals'
p9818
tp9819
a(g29
I249
g30
S'Model(hyperparams).train()'
p9820
tp9821
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9822
tp9823
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9824
tp9825
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9826
tp9827
a(g45
I136
g46
S'self.zero_threshold)'
p9828
tp9829
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9830
tp9831
aasbsg52
Nsg53
g0
(g54
g2
Ntp9832
Rp9833
(dp9834
g58
(lp9835
g1328
ag0
(g7
g2
Ntp9836
Rp9837
(dp9838
g11
S'auto_1335'
p9839
sg13
I0
sg14
g0
(g15
g2
Ntp9840
Rp9841
(dp9842
g19
(lp9843
(lp9844
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9845
tp9846
a(g22
I72
g26
S'exec code in run_globals'
p9847
tp9848
a(g29
I249
g30
S'Model(hyperparams).train()'
p9849
tp9850
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9851
tp9852
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9853
tp9854
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9855
tp9856
a(g45
I136
g46
S'self.zero_threshold)'
p9857
tp9858
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9859
tp9860
aasbsg52
Nsg53
g0
(g54
g2
Ntp9861
Rp9862
(dp9863
g58
(lp9864
g676
asg14
g0
(g15
g2
Ntp9865
Rp9866
sg204
(lp9867
g9837
asg206
g0
(g207
g2
Ntp9868
Rp9869
(dp9870
g211
(lp9871
sg213
(lp9872
sg215
(lp9873
I0
aI1
asg217
g218
sg219
(tsg220
(lp9874
g222
asg223
I01
sg224
(g225
g225
tp9875
sg227
(dp9876
S'support_code_apply'
p9877
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9878
ssg231
(dp9879
I0
(lp9880
I0
assg234
(lp9881
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9882
asbsbsg177
g0
(g178
g2
Ntp9883
Rp9884
(dp9885
g182
(I01
I01
tp9886
sg183
g703
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9887
Rp9888
sg204
(lp9889
g9808
asg206
g621
sbsg177
g0
(g178
g2
Ntp9890
Rp9891
(dp9892
g182
(I00
I00
tp9893
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9894
Rp9895
(dp9896
g11
S'auto_1337'
p9897
sg13
I0
sg14
g0
(g15
g2
Ntp9898
Rp9899
(dp9900
g19
(lp9901
(lp9902
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9903
tp9904
a(g22
I72
g26
S'exec code in run_globals'
p9905
tp9906
a(g29
I249
g30
S'Model(hyperparams).train()'
p9907
tp9908
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9909
tp9910
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9911
tp9912
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9913
tp9914
a(g45
I136
g46
S'self.zero_threshold)'
p9915
tp9916
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9917
tp9918
aasbsg52
Nsg53
g0
(g54
g2
Ntp9919
Rp9920
(dp9921
g58
(lp9922
g877
asg14
g0
(g15
g2
Ntp9923
Rp9924
sg204
(lp9925
g9895
asg206
g0
(g207
g2
Ntp9926
Rp9927
(dp9928
g211
(lp9929
sg213
(lp9930
sg215
(lp9931
I0
aI1
asg217
g218
sg219
(tsg220
(lp9932
g222
asg223
I01
sg224
(g225
g225
tp9933
sg227
(dp9934
S'support_code_apply'
p9935
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9936
ssg231
(dp9937
I0
(lp9938
I0
assg234
(lp9939
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9940
asbsbsg177
g0
(g178
g2
Ntp9941
Rp9942
(dp9943
g182
(I01
I01
tp9944
sg183
g904
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp9945
Rp9946
(dp9947
g11
S'auto_1338'
p9948
sg13
I0
sg14
g0
(g15
g2
Ntp9949
Rp9950
(dp9951
g19
(lp9952
(lp9953
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p9954
tp9955
a(g22
I72
g26
S'exec code in run_globals'
p9956
tp9957
a(g29
I249
g30
S'Model(hyperparams).train()'
p9958
tp9959
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p9960
tp9961
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p9962
tp9963
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p9964
tp9965
a(g45
I136
g46
S'self.zero_threshold)'
p9966
tp9967
a(g375
I82
g376
S'T.switch(T.lt(W, 0.), -1., 1.))'
p9968
tp9969
aasbsg52
Nsg53
g0
(g54
g2
Ntp9970
Rp9971
(dp9972
g58
(lp9973
g962
asg14
g0
(g15
g2
Ntp9974
Rp9975
sg204
(lp9976
g9946
asg206
g0
(g207
g2
Ntp9977
Rp9978
(dp9979
g211
(lp9980
sg213
(lp9981
sg215
(lp9982
I0
aI1
asg217
g218
sg219
(tsg220
(lp9983
g222
asg223
I01
sg224
(g225
g225
tp9984
sg227
(dp9985
S'support_code_apply'
p9986
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9987
ssg231
(dp9988
I0
(lp9989
I0
assg234
(lp9990
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p9991
asbsbsg177
g0
(g178
g2
Ntp9992
Rp9993
(dp9994
g182
(I01
I01
tp9995
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp9996
Rp9997
sg204
(lp9998
g9779
asg206
g1021
sbsg177
g0
(g178
g2
Ntp9999
Rp10000
(dp10001
g182
(I00
I00
tp10002
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10003
Rp10004
sg204
(lp10005
g9576
asg206
g1021
sbsg177
g0
(g178
g2
Ntp10006
Rp10007
(dp10008
g182
(I00
I00
tp10009
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10010
Rp10011
sg204
(lp10012
g8829
asg206
g1052
sbsg177
g0
(g178
g2
Ntp10013
Rp10014
(dp10015
g182
(I00
I00
tp10016
sg183
S'float32'
p10017
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10018
Rp10019
(dp10020
g11
S'auto_1342'
p10021
sg13
I0
sg14
g0
(g15
g2
Ntp10022
Rp10023
(dp10024
g19
(lp10025
(lp10026
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10027
tp10028
a(g22
I72
g26
S'exec code in run_globals'
p10029
tp10030
a(g29
I249
g30
S'Model(hyperparams).train()'
p10031
tp10032
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10033
tp10034
a(g37
I64
g38
S'train_output = lasagne.layers.get_output(mlp, deterministic=False)'
p10035
tp10036
a(g41
I197
g42
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
p10037
tp10038
a(g45
I140
g46
S'rvalue = super(DenseLayer, self).get_output_for(input, **kwargs)'
p10039
tp10040
a(g49
I123
g46
S'activation = activation + self.b'
p10041
tp10042
aasbsg52
Nsg53
g0
(g54
g2
Ntp10043
Rp10044
(dp10045
g58
(lp10046
g1753
asg14
g0
(g15
g2
Ntp10047
Rp10048
sg204
(lp10049
g10019
asg206
g0
(g207
g2
Ntp10050
Rp10051
(dp10052
g211
(lp10053
sg213
(lp10054
I0
asg215
(lp10055
I0
asg217
g218
sg219
g1790
sg220
(lp10056
g222
asg223
I01
sg224
(g225
I0
tp10057
sg227
(dp10058
S'support_code_apply'
p10059
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10060
ssg231
(dp10061
I0
(lp10062
I0
assg234
(lp10063
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10064
asbsbsg177
g0
(g178
g2
Ntp10065
Rp10066
(dp10067
g182
(I01
I00
tp10068
sg183
g1791
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10069
Rp10070
sg204
(lp10071
g8800
asg206
g1153
sbsg177
g0
(g178
g2
Ntp10072
Rp10073
(dp10074
g182
(I00
I00
tp10075
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10076
Rp10077
sg204
(lp10078
g8777
asg206
g1220
sbsg177
g0
(g178
g2
Ntp10079
Rp10080
(dp10081
g182
(I00
I00
tp10082
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10083
Rp10084
sg204
(lp10085
g8709
asg206
g5417
sbsg177
g0
(g178
g2
Ntp10086
Rp10087
(dp10088
g182
(I00
I00
tp10089
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10090
Rp10091
sg204
(lp10092
g8641
asg206
g5904
sbsg177
g0
(g178
g2
Ntp10093
Rp10094
(dp10095
g182
(I00
I00
tp10096
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag8664
asg14
g0
(g15
g2
Ntp10097
Rp10098
sg204
(lp10099
g8612
asg206
g0
(g497
g2
Ntp10100
Rp10101
(dp10102
g52
Nsg503
g0
(ctheano.scalar.basic
EQ
p10103
g2
Ntp10104
Rp10105
(dp10106
g627
I01
sg52
Nsbsg511
(dp10107
sg513
(S'equal'
p10108
I2
I1
tp10109
sg516
g0
(g517
g2
Ntp10110
Rp10111
(dp10112
g521
I0
sg522
(dp10113
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10114
Rp10115
(dp10116
g182
(I00
I00
tp10117
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10118
Rp10119
sg204
(lp10120
g8532
asg206
g0
(g497
g2
Ntp10121
Rp10122
(dp10123
g52
Nsg503
g3526
sg511
(dp10124
sg513
g5422
sg516
g0
(g517
g2
Ntp10125
Rp10126
(dp10127
g521
Nsg522
(dp10128
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10129
Rp10130
(dp10131
g182
(I00
I00
tp10132
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10133
Rp10134
(dp10135
g11
S'auto_1370'
p10136
sg13
I0
sg14
g0
(g15
g2
Ntp10137
Rp10138
(dp10139
g19
(lp10140
(lp10141
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10142
tp10143
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10144
tp10145
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10146
tp10147
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10148
tp10149
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10150
tp10151
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10152
tp10153
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10154
tp10155
a(g8287
I1162
g8297
S'new_output_grads)'
p10156
tp10157
aasbsg52
Nsg53
g0
(g54
g2
Ntp10158
Rp10159
(dp10160
g58
(lp10161
g0
(g7
g2
Ntp10162
Rp10163
(dp10164
g11
S'auto_1368'
p10165
sg13
I0
sg14
g0
(g15
g2
Ntp10166
Rp10167
(dp10168
g19
(lp10169
(lp10170
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10171
tp10172
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10173
tp10174
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10175
tp10176
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10177
tp10178
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10179
tp10180
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10181
tp10182
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10183
tp10184
a(g8287
I1162
g8297
S'new_output_grads)'
p10185
tp10186
aasbsg52
Nsg53
g0
(g54
g2
Ntp10187
Rp10188
(dp10189
g58
(lp10190
g0
(g7
g2
Ntp10191
Rp10192
(dp10193
g11
S'auto_1367'
p10194
sg13
I0
sg14
g0
(g15
g2
Ntp10195
Rp10196
(dp10197
g19
(lp10198
(lp10199
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10200
tp10201
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10202
tp10203
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10204
tp10205
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10206
tp10207
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10208
tp10209
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10210
tp10211
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10212
tp10213
a(g8287
I1162
g8297
S'new_output_grads)'
p10214
tp10215
aasbsg52
Nsg53
g0
(g54
g2
Ntp10216
Rp10217
(dp10218
g58
(lp10219
g0
(g7
g2
Ntp10220
Rp10221
(dp10222
g11
S'auto_1347'
p10223
sg13
I0
sg14
g0
(g15
g2
Ntp10224
Rp10225
(dp10226
g19
(lp10227
(lp10228
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10229
tp10230
a(g22
I72
g26
S'exec code in run_globals'
p10231
tp10232
a(g29
I249
g30
S'Model(hyperparams).train()'
p10233
tp10234
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10235
tp10236
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10237
tp10238
aasbsg52
Nsg53
g0
(g54
g2
Ntp10239
Rp10240
(dp10241
g58
(lp10242
g8641
asg14
g0
(g15
g2
Ntp10243
Rp10244
sg204
(lp10245
g10221
asg206
g6009
sbsg177
g0
(g178
g2
Ntp10246
Rp10247
(dp10248
g182
(I00
I00
tp10249
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10250
Rp10251
(dp10252
g11
S'auto_1366'
p10253
sg13
I0
sg14
g0
(g15
g2
Ntp10254
Rp10255
(dp10256
g19
(lp10257
(lp10258
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10259
tp10260
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10261
tp10262
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10263
tp10264
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10265
tp10266
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10267
tp10268
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10269
tp10270
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10271
tp10272
a(g8287
I1162
g8297
S'new_output_grads)'
p10273
tp10274
aasbsg52
Nsg53
g0
(g54
g2
Ntp10275
Rp10276
(dp10277
g58
(lp10278
g0
(g7
g2
Ntp10279
Rp10280
(dp10281
g11
S'auto_1365'
p10282
sg13
I0
sg14
g0
(g15
g2
Ntp10283
Rp10284
(dp10285
g19
(lp10286
(lp10287
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10288
tp10289
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10290
tp10291
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10292
tp10293
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10294
tp10295
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10296
tp10297
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10298
tp10299
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10300
tp10301
a(g8287
I1162
g8297
S'new_output_grads)'
p10302
tp10303
aasbsg52
Nsg53
g0
(g54
g2
Ntp10304
Rp10305
(dp10306
g58
(lp10307
g0
(g7
g2
Ntp10308
Rp10309
(dp10310
g11
S'auto_1364'
p10311
sg13
I0
sg14
g0
(g15
g2
Ntp10312
Rp10313
(dp10314
g19
(lp10315
(lp10316
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10317
tp10318
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10319
tp10320
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10321
tp10322
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10323
tp10324
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10325
tp10326
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10327
tp10328
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10329
tp10330
a(g8287
I1162
g8297
S'new_output_grads)'
p10331
tp10332
aasbsg52
Nsg53
g0
(g54
g2
Ntp10333
Rp10334
(dp10335
g58
(lp10336
g0
(g7
g2
Ntp10337
Rp10338
(dp10339
g11
S'auto_1363'
p10340
sg13
I0
sg14
g0
(g15
g2
Ntp10341
Rp10342
(dp10343
g19
(lp10344
(lp10345
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10346
tp10347
a(g22
I72
g26
S'exec code in run_globals'
p10348
tp10349
a(g29
I249
g30
S'Model(hyperparams).train()'
p10350
tp10351
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10352
tp10353
a(g37
I72
g38
S'W_grads = binary_connect.compute_grads(loss, mlp)'
p10354
tp10355
a(g8283
I202
g8284
S'grads.append(theano.grad(loss, wrt=layer.Wb))'
p10356
tp10357
a(g8287
I527
g8288
S'g_cost = _float_ones_like(cost)'
p10358
tp10359
a(g8287
I1396
S'_float_ones_like'
p10360
S'return x.ones_like(dtype=dtype)'
p10361
tp10362
aasbsg52
Nsg53
g0
(g54
g2
Ntp10363
Rp10364
(dp10365
g58
(lp10366
g0
(g7
g2
Ntp10367
Rp10368
(dp10369
g11
S'auto_1354'
p10370
sg13
I0
sg14
g0
(g15
g2
Ntp10371
Rp10372
(dp10373
g19
(lp10374
(lp10375
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10376
tp10377
a(g22
I72
g26
S'exec code in run_globals'
p10378
tp10379
a(g29
I249
g30
S'Model(hyperparams).train()'
p10380
tp10381
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10382
tp10383
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10384
tp10385
aasbsg52
g3080
sg53
g0
(g54
g2
Ntp10386
Rp10387
(dp10388
g58
(lp10389
g0
(g7
g2
Ntp10390
Rp10391
(dp10392
g11
S'auto_1352'
p10393
sg13
I0
sg14
g0
(g15
g2
Ntp10394
Rp10395
(dp10396
g19
(lp10397
(lp10398
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10399
tp10400
a(g22
I72
g26
S'exec code in run_globals'
p10401
tp10402
a(g29
I249
g30
S'Model(hyperparams).train()'
p10403
tp10404
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10405
tp10406
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10407
tp10408
aasbsg52
Nsg53
g0
(g54
g2
Ntp10409
Rp10410
(dp10411
g58
(lp10412
g0
(g7
g2
Ntp10413
Rp10414
(dp10415
g11
S'auto_1348'
p10416
sg13
I0
sg14
g0
(g15
g2
Ntp10417
Rp10418
(dp10419
g19
(lp10420
(lp10421
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10422
tp10423
a(g22
I72
g26
S'exec code in run_globals'
p10424
tp10425
a(g29
I249
g30
S'Model(hyperparams).train()'
p10426
tp10427
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10428
tp10429
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10430
tp10431
aasbsg52
Nsg53
g0
(g54
g2
Ntp10432
Rp10433
(dp10434
g58
(lp10435
g10221
asg14
g0
(g15
g2
Ntp10436
Rp10437
sg204
(lp10438
g10414
asg206
g0
(g3002
g2
Ntp10439
Rp10440
(dp10441
g183
g531
sg503
g1157
sg3006
Nsg3007
g3008
sbsbsg177
g0
(g178
g2
Ntp10442
Rp10443
(dp10444
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10445
Rp10446
(dp10447
g11
S'auto_1351'
p10448
sg13
I0
sg14
g0
(g15
g2
Ntp10449
Rp10450
(dp10451
g19
(lp10452
(lp10453
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10454
tp10455
a(g22
I72
g26
S'exec code in run_globals'
p10456
tp10457
a(g29
I249
g30
S'Model(hyperparams).train()'
p10458
tp10459
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10460
tp10461
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10462
tp10463
aasbsg52
Nsg53
g0
(g54
g2
Ntp10464
Rp10465
(dp10466
g58
(lp10467
g0
(g7
g2
Ntp10468
Rp10469
(dp10470
g11
S'auto_1350'
p10471
sg13
I0
sg14
g0
(g15
g2
Ntp10472
Rp10473
(dp10474
g19
(lp10475
(lp10476
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10477
tp10478
a(g22
I72
g26
S'exec code in run_globals'
p10479
tp10480
a(g29
I249
g30
S'Model(hyperparams).train()'
p10481
tp10482
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10483
tp10484
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10485
tp10486
aasbsg52
Nsg53
g0
(g54
g2
Ntp10487
Rp10488
(dp10489
g58
(lp10490
g0
(g7
g2
Ntp10491
Rp10492
(dp10493
g11
S'auto_1349'
p10494
sg13
I0
sg14
g0
(g15
g2
Ntp10495
Rp10496
(dp10497
g19
(lp10498
(lp10499
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10500
tp10501
a(g22
I72
g26
S'exec code in run_globals'
p10502
tp10503
a(g29
I249
g30
S'Model(hyperparams).train()'
p10504
tp10505
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10506
tp10507
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10508
tp10509
aasbsg52
Nsg53
g0
(g54
g2
Ntp10510
Rp10511
(dp10512
g58
(lp10513
g10221
asg14
g0
(g15
g2
Ntp10514
Rp10515
sg204
(lp10516
g10492
asg206
g5677
sbsg177
g5679
sbasg14
g0
(g15
g2
Ntp10517
Rp10518
sg204
(lp10519
g10469
asg206
g3295
sbsg177
g0
(g178
g2
Ntp10520
Rp10521
(dp10522
g182
(I00
tp10523
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g2920
g2
Ntp10524
Rp10525
(dp10526
g11
S'auto_113'
p10527
sg13
Nsg14
g0
(g15
g2
Ntp10528
Rp10529
(dp10530
g19
(lp10531
(lp10532
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10533
tp10534
a(g22
I72
g26
S'exec code in run_globals'
p10535
tp10536
a(g29
I249
g30
S'Model(hyperparams).train()'
p10537
tp10538
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10539
tp10540
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10541
tp10542
aasbsg52
Nsg177
g2925
sg193
g2038
(g2899
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p10543
tp10544
Rp10545
sbasg14
g0
(g15
g2
Ntp10546
Rp10547
sg204
(lp10548
g10446
asg206
g0
(g3067
g2
Ntp10549
Rp10550
(dp10551
g3071
(g2925
tp10552
sbsbsg177
g0
(g178
g2
Ntp10553
Rp10554
(dp10555
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10556
Rp10557
sg204
(lp10558
g10391
asg206
g5326
sbsg177
g0
(g178
g2
Ntp10559
Rp10560
(dp10561
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10562
Rp10563
(dp10564
g11
S'auto_1353'
p10565
sg13
I0
sg14
g0
(g15
g2
Ntp10566
Rp10567
(dp10568
g19
(lp10569
(lp10570
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10571
tp10572
a(g22
I72
g26
S'exec code in run_globals'
p10573
tp10574
a(g29
I249
g30
S'Model(hyperparams).train()'
p10575
tp10576
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10577
tp10578
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10579
tp10580
aasbsg52
Nsg53
g0
(g54
g2
Ntp10581
Rp10582
(dp10583
g58
(lp10584
g10469
ag0
(g2920
g2
Ntp10585
Rp10586
(dp10587
g11
S'auto_119'
p10588
sg13
Nsg14
g0
(g15
g2
Ntp10589
Rp10590
(dp10591
g19
(lp10592
(lp10593
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p10594
tp10595
a(g22
I72
g26
S'exec code in run_globals'
p10596
tp10597
a(g29
I249
g30
S'Model(hyperparams).train()'
p10598
tp10599
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p10600
tp10601
a(g37
I67
g38
S'loss = T.mean(T.sqr(T.maximum(0., 1. - target * train_output)))'
p10602
tp10603
aasbsg52
Nsg177
g2925
sg193
g2038
(g2899
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p10604
tp10605
Rp10606
sbasg14
g0
(g15
g2
Ntp10607
Rp10608
sg204
(lp10609
g10563
asg206
g0
(g3067
g2
Ntp10610
Rp10611
(dp10612
g3071
(g2925
tp10613
sbsbsg177
g0
(g178
g2
Ntp10614
Rp10615
(dp10616
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10617
Rp10618
sg204
(lp10619
g10368
asg206
g5326
sbsg177
g0
(g178
g2
Ntp10620
Rp10621
(dp10622
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag962
asg14
g0
(g15
g2
Ntp10623
Rp10624
sg204
(lp10625
g10338
asg206
g0
(g497
g2
Ntp10626
Rp10627
(dp10628
g501
g502
sg503
g0
(ctheano.scalar.basic
Second
p10629
g2
Ntp10630
Rp10631
(dp10632
g508
g0
(g2316
g2
Ntp10633
Rp10634
(dp10635
g2320
(I1
tp10636
sbsg52
S'second'
p10637
sbsg52
S'Elemwise{second,no_inplace}'
p10638
sg511
(dp10639
sg513
Nsg516
g0
(g517
g2
Ntp10640
Rp10641
(dp10642
g521
I0
sg522
(dp10643
sbsg524
I00
sg525
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p10644
sbsbsg177
g0
(g178
g2
Ntp10645
Rp10646
(dp10647
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag10563
asg14
g0
(g15
g2
Ntp10648
Rp10649
sg204
(lp10650
g10309
asg206
g0
(g497
g2
Ntp10651
Rp10652
(dp10653
g52
Nsg503
g3179
sg511
(dp10654
sg513
g5331
sg516
g0
(g517
g2
Ntp10655
Rp10656
(dp10657
g521
I0
sg522
(dp10658
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10659
Rp10660
(dp10661
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag10446
asg14
g0
(g15
g2
Ntp10662
Rp10663
sg204
(lp10664
g10280
asg206
g0
(g497
g2
Ntp10665
Rp10666
(dp10667
g52
Nsg503
g3179
sg511
(dp10668
sg513
g5331
sg516
g0
(g517
g2
Ntp10669
Rp10670
(dp10671
g521
I0
sg522
(dp10672
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10673
Rp10674
(dp10675
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10676
Rp10677
sg204
(lp10678
g10251
asg206
g0
(g207
g2
Ntp10679
Rp10680
(dp10681
g211
(lp10682
sg213
(lp10683
sg215
(lp10684
I0
aI1
asg217
g218
sg219
(tsg220
(lp10685
g222
asg223
I01
sg224
(g225
g225
tp10686
sg227
(dp10687
S'support_code_apply'
p10688
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10689
ssg231
(dp10690
I0
(lp10691
I0
assg234
(lp10692
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10693
asbsbsg177
g0
(g178
g2
Ntp10694
Rp10695
(dp10696
g182
(I01
I01
tp10697
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10698
Rp10699
sg204
(lp10700
g10192
asg206
g0
(g497
g2
Ntp10701
Rp10702
(dp10703
g52
Nsg503
g10631
sg511
(dp10704
sg513
Nsg516
g0
(g517
g2
Ntp10705
Rp10706
(dp10707
g521
I0
sg522
(dp10708
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10709
Rp10710
(dp10711
g182
(I00
I00
tp10712
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag8641
asg14
g0
(g15
g2
Ntp10713
Rp10714
sg204
(lp10715
g10163
asg206
g0
(g497
g2
Ntp10716
Rp10717
(dp10718
g52
Nsg503
g1224
sg511
(dp10719
sg513
g1230
sg516
g0
(g517
g2
Ntp10720
Rp10721
(dp10722
g521
I0
sg522
(dp10723
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10724
Rp10725
(dp10726
g182
(I00
I00
tp10727
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10728
Rp10729
(dp10730
g11
S'auto_1369'
p10731
sg13
I0
sg14
g0
(g15
g2
Ntp10732
Rp10733
(dp10734
g19
(lp10735
(lp10736
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10737
tp10738
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10739
tp10740
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10741
tp10742
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10743
tp10744
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10745
tp10746
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10747
tp10748
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10749
tp10750
a(g8287
I1162
g8297
S'new_output_grads)'
p10751
tp10752
aasbsg52
Nsg53
g0
(g54
g2
Ntp10753
Rp10754
(dp10755
g58
(lp10756
g0
(g149
g2
Ntp10757
Rp10758
(dp10759
g11
S'auto_214'
p10760
sg13
Nsg14
g0
(g15
g2
Ntp10761
Rp10762
(dp10763
g19
(lp10764
(lp10765
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10766
tp10767
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10768
tp10769
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10770
tp10771
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10772
tp10773
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10774
tp10775
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10776
tp10777
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10778
tp10779
a(g8287
I1162
g8297
S'new_output_grads)'
p10780
tp10781
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp10782
Rp10783
(dp10784
g182
(tsg183
S'int8'
p10785
sg185
g7718
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp10786
g197
tp10787
Rp10788
(I1
(tg7718
I00
S'\x02'
p10789
tp10790
bsbasg14
g0
(g15
g2
Ntp10791
Rp10792
sg204
(lp10793
g10729
asg206
g0
(g207
g2
Ntp10794
Rp10795
(dp10796
g211
(lp10797
sg213
(lp10798
sg215
(lp10799
I0
aI1
asg217
g218
sg219
(tsg220
(lp10800
g222
asg223
I01
sg224
(g225
g225
tp10801
sg227
(dp10802
S'support_code_apply'
p10803
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10804
ssg231
(dp10805
I0
(lp10806
I0
assg234
(lp10807
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10808
asbsbsg177
g0
(g178
g2
Ntp10809
Rp10810
(dp10811
g182
(I01
I01
tp10812
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10813
Rp10814
sg204
(lp10815
g10134
asg206
g0
(g497
g2
Ntp10816
Rp10817
(dp10818
g52
Nsg503
g1224
sg511
(dp10819
sg513
g1230
sg516
g0
(g517
g2
Ntp10820
Rp10821
(dp10822
g521
Nsg522
(dp10823
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10824
Rp10825
(dp10826
g182
(I00
I00
tp10827
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10828
Rp10829
sg204
(lp10830
g8503
asg206
g0
(g497
g2
Ntp10831
Rp10832
(dp10833
g52
Nsg503
g1224
sg511
(dp10834
sg513
g1230
sg516
g0
(g517
g2
Ntp10835
Rp10836
(dp10837
g521
Nsg522
(dp10838
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10839
Rp10840
(dp10841
g182
(I00
I00
tp10842
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10843
Rp10844
sg204
(lp10845
g8474
asg206
g0
(g497
g2
Ntp10846
Rp10847
(dp10848
g52
Nsg503
g0
(ctheano.scalar.basic
Neg
p10849
g2
Ntp10850
Rp10851
(dp10852
g508
ctheano.scalar.basic
same_out_nobool
p10853
sg52
S'neg'
p10854
sbsg511
(dp10855
sg513
(S'negative'
p10856
I1
I1
tp10857
sg516
g0
(g517
g2
Ntp10858
Rp10859
(dp10860
g521
Nsg522
(dp10861
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10862
Rp10863
(dp10864
g182
(I00
I00
tp10865
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag1845
asg14
g0
(g15
g2
Ntp10866
Rp10867
sg204
(lp10868
g8445
asg206
g0
(g497
g2
Ntp10869
Rp10870
(dp10871
g52
Nsg503
g1224
sg511
(dp10872
sg513
g1230
sg516
g0
(g517
g2
Ntp10873
Rp10874
(dp10875
g521
Nsg522
(dp10876
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10877
Rp10878
(dp10879
g182
(I00
I00
tp10880
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10881
Rp10882
(dp10883
g11
S'auto_1374'
p10884
sg13
I0
sg14
g0
(g15
g2
Ntp10885
Rp10886
(dp10887
g19
(lp10888
(lp10889
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10890
tp10891
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10892
tp10893
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10894
tp10895
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10896
tp10897
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10898
tp10899
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10900
tp10901
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10902
tp10903
a(g8287
I1162
g8297
S'new_output_grads)'
p10904
tp10905
aasbsg52
Nsg53
g0
(g54
g2
Ntp10906
Rp10907
(dp10908
g58
(lp10909
g9576
asg14
g0
(g15
g2
Ntp10910
Rp10911
sg204
(lp10912
g10882
asg206
g0
(g207
g2
Ntp10913
Rp10914
(dp10915
g211
(lp10916
sg213
(lp10917
I1
aI0
asg215
(lp10918
sg217
g218
sg219
g10009
sg220
(lp10919
g222
asg223
I01
sg224
(I1
I0
tp10920
sg227
(dp10921
S'support_code_apply'
p10922
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10923
ssg231
(dp10924
I0
(lp10925
I0
assg234
(lp10926
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p10927
asbsbsg177
g0
(g178
g2
Ntp10928
Rp10929
(dp10930
g182
(I00
I00
tp10931
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp10932
Rp10933
sg204
(lp10934
g8416
asg206
g1052
sbsg177
g0
(g178
g2
Ntp10935
Rp10936
(dp10937
g182
(I00
I00
tp10938
sg183
S'float32'
p10939
sg185
g189
sg192
I00
sg52
Nsbsbag8887
asg14
g0
(g15
g2
Ntp10940
Rp10941
sg204
(lp10942
g8387
asg206
g0
(g497
g2
Ntp10943
Rp10944
(dp10945
g52
Nsg503
g1224
sg511
(dp10946
sg513
g1230
sg516
g0
(g517
g2
Ntp10947
Rp10948
(dp10949
g521
Nsg522
(dp10950
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp10951
Rp10952
(dp10953
g182
(I00
I00
tp10954
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp10955
Rp10956
(dp10957
g11
S'auto_1378'
p10958
sg13
I0
sg14
g0
(g15
g2
Ntp10959
Rp10960
(dp10961
g19
(lp10962
(lp10963
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p10964
tp10965
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p10966
tp10967
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10968
tp10969
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10970
tp10971
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10972
tp10973
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10974
tp10975
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10976
tp10977
a(g8287
I1162
g8297
S'new_output_grads)'
p10978
tp10979
aasbsg52
Nsg53
g0
(g54
g2
Ntp10980
Rp10981
(dp10982
g58
(lp10983
g8387
ag0
(g7
g2
Ntp10984
Rp10985
(dp10986
g11
S'auto_1377'
p10987
sg13
I0
sg14
g0
(g15
g2
Ntp10988
Rp10989
(dp10990
g19
(lp10991
(lp10992
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p10993
tp10994
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p10995
tp10996
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p10997
tp10998
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p10999
tp11000
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p11001
tp11002
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p11003
tp11004
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p11005
tp11006
a(g8287
I1162
g8297
S'new_output_grads)'
p11007
tp11008
aasbsg52
Nsg53
g0
(g54
g2
Ntp11009
Rp11010
(dp11011
g58
(lp11012
g8967
asg14
g0
(g15
g2
Ntp11013
Rp11014
sg204
(lp11015
g10985
asg206
g0
(g497
g2
Ntp11016
Rp11017
(dp11018
g52
Nsg503
g0
(ctheano.scalar.basic
Sgn
p11019
g2
Ntp11020
Rp11021
(dp11022
g52
S'sgn'
p11023
sbsg511
(dp11024
sg513
(S'sign'
p11025
I1
I1
tp11026
sg516
g0
(g517
g2
Ntp11027
Rp11028
(dp11029
g521
I0
sg522
(dp11030
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp11031
Rp11032
(dp11033
g182
(I00
I00
tp11034
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11035
Rp11036
sg204
(lp11037
g10956
asg206
g0
(g497
g2
Ntp11038
Rp11039
(dp11040
g52
Nsg503
g1224
sg511
(dp11041
sg513
g1230
sg516
g0
(g517
g2
Ntp11042
Rp11043
(dp11044
g521
Nsg522
(dp11045
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp11046
Rp11047
(dp11048
g182
(I00
I00
tp11049
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11050
Rp11051
sg204
(lp11052
g8357
asg206
g1153
sbsg177
g0
(g178
g2
Ntp11053
Rp11054
(dp11055
g182
(I00
I00
tp11056
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11057
Rp11058
sg204
(lp11059
g8269
asg206
g1052
sbsg177
g0
(g178
g2
Ntp11060
Rp11061
(dp11062
g182
(I00
I00
tp11063
sg183
S'float32'
p11064
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11065
Rp11066
sg204
(lp11067
g8166
asg206
g1220
sbsg177
g0
(g178
g2
Ntp11068
Rp11069
(dp11070
g182
(I00
I00
tp11071
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11072
Rp11073
sg204
(lp11074
g8026
asg206
g1153
sbsg177
g0
(g178
g2
Ntp11075
Rp11076
(dp11077
g182
(I00
I00
tp11078
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11079
Rp11080
sg204
(lp11081
g7542
asg206
g1220
sbsg177
g0
(g178
g2
Ntp11082
Rp11083
(dp11084
g182
(I00
I00
tp11085
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp11086
Rp11087
(dp11088
g11
S'auto_1404'
p11089
sg13
I0
sg14
g0
(g15
g2
Ntp11090
Rp11091
(dp11092
g19
(lp11093
(lp11094
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11095
tp11096
a(g22
I72
g26
S'exec code in run_globals'
p11097
tp11098
a(g29
I249
g30
S'Model(hyperparams).train()'
p11099
tp11100
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11101
tp11102
a(g37
I74
g38
S'learning_rate=LR)'
p11103
tp11104
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11105
tp11106
aasbsg52
Nsg53
g0
(g54
g2
Ntp11107
Rp11108
(dp11109
g58
(lp11110
g0
(g7
g2
Ntp11111
Rp11112
(dp11113
g11
S'auto_1402'
p11114
sg13
I0
sg14
g0
(g15
g2
Ntp11115
Rp11116
(dp11117
g19
(lp11118
(lp11119
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11120
tp11121
a(g22
I72
g26
S'exec code in run_globals'
p11122
tp11123
a(g29
I249
g30
S'Model(hyperparams).train()'
p11124
tp11125
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11126
tp11127
a(g37
I74
g38
S'learning_rate=LR)'
p11128
tp11129
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11130
tp11131
aasbsg52
Nsg53
g0
(g54
g2
Ntp11132
Rp11133
(dp11134
g58
(lp11135
g0
(g7
g2
Ntp11136
Rp11137
(dp11138
g11
S'auto_1390'
p11139
sg13
I0
sg14
g0
(g15
g2
Ntp11140
Rp11141
(dp11142
g19
(lp11143
(lp11144
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11145
tp11146
a(g22
I72
g26
S'exec code in run_globals'
p11147
tp11148
a(g29
I249
g30
S'Model(hyperparams).train()'
p11149
tp11150
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11151
tp11152
a(g37
I74
g38
S'learning_rate=LR)'
p11153
tp11154
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11155
tp11156
aasbsg52
Nsg53
g0
(g54
g2
Ntp11157
Rp11158
(dp11159
g58
(lp11160
g0
(g7
g2
Ntp11161
Rp11162
(dp11163
g11
S'auto_1384'
p11164
sg13
I0
sg14
g0
(g15
g2
Ntp11165
Rp11166
(dp11167
g19
(lp11168
(lp11169
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11170
tp11171
a(g22
I72
g26
S'exec code in run_globals'
p11172
tp11173
a(g29
I249
g30
S'Model(hyperparams).train()'
p11174
tp11175
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11176
tp11177
a(g37
I74
g38
S'learning_rate=LR)'
p11178
tp11179
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11180
tp11181
aasbsg52
Nsg53
g0
(g54
g2
Ntp11182
Rp11183
(dp11184
g58
(lp11185
g0
(g7
g2
Ntp11186
Rp11187
(dp11188
g11
S'auto_1383'
p11189
sg13
I0
sg14
g0
(g15
g2
Ntp11190
Rp11191
(dp11192
g19
(lp11193
(lp11194
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11195
tp11196
a(g22
I72
g26
S'exec code in run_globals'
p11197
tp11198
a(g29
I249
g30
S'Model(hyperparams).train()'
p11199
tp11200
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11201
tp11202
a(g37
I74
g38
S'learning_rate=LR)'
p11203
tp11204
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11205
tp11206
aasbsg52
Nsg53
g0
(g54
g2
Ntp11207
Rp11208
(dp11209
g58
(lp11210
g7752
asg14
g0
(g15
g2
Ntp11211
Rp11212
sg204
(lp11213
g11187
asg206
g0
(g207
g2
Ntp11214
Rp11215
(dp11216
g211
(lp11217
sg213
(lp11218
sg215
(lp11219
I0
aI1
asg217
g218
sg219
(tsg220
(lp11220
g222
asg223
I01
sg224
(g225
g225
tp11221
sg227
(dp11222
S'support_code_apply'
p11223
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11224
ssg231
(dp11225
I0
(lp11226
I0
assg234
(lp11227
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11228
asbsbsg177
g0
(g178
g2
Ntp11229
Rp11230
(dp11231
g182
(I01
I01
tp11232
sg183
g7775
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp11233
Rp11234
(dp11235
g11
S'auto_597'
p11236
sg13
Nsg14
g0
(g15
g2
Ntp11237
Rp11238
(dp11239
g19
(lp11240
(lp11241
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11242
tp11243
a(g22
I72
g26
S'exec code in run_globals'
p11244
tp11245
a(g29
I249
g30
S'Model(hyperparams).train()'
p11246
tp11247
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11248
tp11249
a(g37
I74
g38
S'learning_rate=LR)'
p11250
tp11251
a(g7508
I620
g7509
S'broadcastable=param.broadcastable)'
p11252
tp11253
aasbsg472
g0
(g473
g2
Ntp11254
Rp11255
(dp11256
g52
Nsg477
(lp11257
g194
(g195
(I0
tp11258
g197
tp11259
Rp11260
(I1
(I196
I64
tp11261
g189
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x000\n\x8a"\x91\xc9""6J\xd6""R\x16(\xa2\x06\x8f"nj{"\x83\xd34"\r\xf3\x91";1\xc6"z\xf9"#\xf4\x01\x00\x00\xbfs\xad"^\x8f\x95"*\xec\x8f"\xb6\xb68#?\xc6\x12"\xece\x01#(\xa9\x97"\x18u\x81"3\xbeI"\xcd\x95\xe7%\x1fO\xab"\xf4\x01\x00\x00\xb8/\x80#\xc2\xab\x92"\xaa\xb4\xe6%\\\x81j"\xd8\xa7\xe4%\xf5\x90\xb6"\xbb_\x07#\xf5\x16\xeb"\xf4\x01\x00\x00\xe6\xbe\xd0"\x08rJ"\xe2\x8b\xcf"\'\\\x8a"F\x80j"p\x95\x99"\xcd\x9f\xc9"\x84\xb7c"\xf3\xe9~"M\x026"\x9d\x9e\xd6"\xe3\xf0~"\xdc*\xf6#\xcbc\x89"\x87a\x1c#\xb8\x1c\xfa"\xc9\xdc\x0e#Z\xb1\x1f"\rJ\x19#|\xec\x07"\xd4\x83\xec%b\x94\xec"cT\x16(\xe0\xb0|"\x10\xc2\xe2"kE\x06"\x032b"\xb1\x155">?\xef%\xeb\xa0W"\xca\xbb-"ad\x92"3\xf0X\'vR\x04\'\x94b\xa8\'\x90\x8e\x93-T\xc6`\'\xef\x8eE\'D\xf0a\'l^e\'w\xbc\x9b\'\x1a\x9aM-\xf4\x01\x00\x00\xb0K\x88\'\x1f\x0bk\'Xib\'E\xe2 0p\xaa\xe6&P\xce\xcb\'8Xn\'esK\'\xb4\x86\x1e\'3\x9b\x8c.\x9c\x9c\x86\'\xf4\x01\x00\x00\xb8\xb8p/\xc1\x80f\'\xd4\xb6\xd8+"E8\'-\x1a\x1b0\x0eu\x8f\'\xaf\xbf\xd4\'\xb3\xba\xb8\'\xf4\x01\x00\x00G\x07\xa4\'\xfe\x13\x1f\'y:O+\xf7pY\'jD8\'\xd6]q\'\x15\x13\xa1\'\xb3\xef2\'\x8aNH\'\x03\x05\x0f\'\xfe\xa4\xa8\'\x0fTH\'<\x89.0\xc8\xeaW\'T\xc3\xf5\'\xa8\x88\xc4\']w0-\xb5\xf7\xfa&y\xe7\xf0\'c\xae\xd5&-\xec%0lD\xba\'\x19!\xa0-^\x8fF\'#\\\xb6\'\xd4!\xd3&\x80\xbd1\'\xa4\x9cK)=8h-\xf2o)\'U\x84\x08\'\xa0\x10f\'\x88\xe2\x0b)Vm?+\x83\xfeY)\xd7kl*.\xf0\x10)\xfd\xc6\xfe(\x15\x1c\x8a)\x99\xe6\x13)\xa9\xd7H)8\'\xa5)\xf4\x01\x00\x00{\xc5/);\x8f\x17)\xa6s~)>\xd70.\xa1\xbc\x94(++\xc2)\x01\xca\x19)%0\x03)\x9cp\xcc(2\xcc6.k\x99-)\xf4\x01\x00\x00g\xb6\xa1.\xbf\xa1\x14)H\xb9\xe8-\xec\xa3\xed(e\xdel)\xca\x019)\x00/\x89)\x97;n)\xf4\x01\x00\x00R\x89S)\xed&\xcd(2~T)\x9b5\x0c)\xef\xa2\xed(\x03\xa3\x1b)\xe6QL)\xe5\xc2\xe6(\x00P$)4q\xb8(9}Y)\xb0,\x01)\xa3\xde\xaa.\x0c:\x0b)\xc3x\x9e)\xa9t})y\xb1"+\xe5\xd3\xa1(\xbbV\x9b)\x844\xa8(\xf3$E)\xa6Up)\xdf\xbd\x16+\xdd\x08\x00)\x0ba\x82+\xf4(\x88(\xc2Ej*\xd7>S+\xde\xb0\x85.\xde\x82\xda(n\x0e\xb0(_Y\x14)\xd5Rm*h\xfb(*\xc5\xbd\x80.$\x14\x13*|A\x84+@\x1fX*!]\x9e-]\xf8\xc6-\xbb^\xaa*\xa6\x18\x0c+\xf4\x01\x00\x006D[.\x88\x90\x80*t\xa6x*S\xa2,-\x7f\x95\x16*s!\xdf*\x96*%,u\x91^*\x08l-*\xd2\xcf\x19+\xc4B\x93*\xf4\x01\x00\x00\\G\x0f.\x91)|*\x82R\x9a.\xc1\x95I*\x18gi.\x95W\x8d-{\xbd\xe8*y\x16\xca*\xf4\x01\x00\x00\x16q\xb3*\xbc\x06.*2i\xb2*\x8e\xdfm*\xf5\x94I*[q\x07-`\xee\xee*\x0b\xc0C*\x99\xb0\x96+eu\x1c*\xc7}\xb8*\x02\'[*\x12(\x92-\xc54l*\xaam\x06+S\x00\xd7*XEa,gF\t*B\xc5\x03+R\xf6j-\x12\x00\xa5-Z^\xcb*\xff7/-\xda7Y*>\x06\xd9*\xc0mC-un\x98*\xa4\xe3?*\xa7\x89\xae+\xd9[9*DX\x15*\xe6\xae{*\xea\xb2\xcb*\xb18\xe9,\x9dZ\xf8/iRy*\t\xb6\xd2,\x16\x10\xb3*\xfa"\x0c/\x86^@/\xfb\'\r+\xc4<O/\xf4\x01\x00\x005\x9c\xd4/\xf1\t\xd5*\x18\x02\xcd*Q\xf8\xcf/`9\xc8*=\xeb8+~5\x86.ig\xb8*\xefY\x08,\xf0\xdf~+\xc6\x04\xf4*\xf4\x01\x00\x00\x81\x16N/3\xad].z\xac\xf2/\xd1\x04\xa7*Q\xf6\xee/\xad\xbe\x07/\xc5\xd4@+\xe4\x0f!,\xf4\x01\x00\x00\x14\xac\x14+_/\x90*\x1c\xfe(+\x91\x15\xc5*\x18\x04\xa7*\xa9\x07\x81.\xbc\xb2\xc7+\x14/\xa2*\xb5i\x05+V\xa1\x81*\xb7h#+\xcb\x92\xb5*\xd2!^+\xfa\xb3\xc3*:\xc1^+g"2+Ai\x03.\xd3xc*\xbbYZ+\x84\xd5\xb5.H \x16/\xfa~(+^\xb0\xbe/\x03\xfb\xf5*8\x80!+r\xae\x9e.\xfc\xe5\x93+\xc9-\x88.\x92\xc7\xcc+\x15\x93\x99*\xdcxw*\xb6\x86\xd0*\xa4\xd9\xca**\xf6\x95*<q\x1d+\xeb\xd3\x170\xc46\xd2*O\xb8\xb8*\xe5#U/\xe8O\xf3*\x94\x9d\x11+h\xc0\xd6+\xf4\x01\x00\x00\xf9\xce\x01+:\xdf\xdb*\x89\xe9\xda*0\xcb\xea.OO\x8c*\x1bXu-&\xbe\xed+\xcd:\xbe*\xe9\x02j-\x83~\x8c.M\xc5\xfb*\xf4\x01\x00\x00<\xba\xd5-\x06\x86\xd7*:\x14\xc7.\xb6\xab\xb8+\xe8\x02\n/y"\x06+I\xecF+\xd5\xea\x05.\xf4\x01\x00\x00\x83^\x19+{\xbd\x94*\xd3_.+\x8cO\xcb*IM\xac*^\xae\xe1*(\xd8R+\xc3N\xa7*\x91\x1d/,\x1e~\x8a*U\xaf\x1d+IO\xbb*\xb6\xaf\xdd,\xb3\xe2\xc9*\xc9\xcae+=\x9541?=Y*~\xa8j*\xab?a+24\xef.\xdf\xf3\x8b.\xc3\xd2\xcb+\x04V\xa3.w\xe3l0\xb7\x0c\x181\x9c\x90\x88.\x930\xa6*\x95\x19\x8e.d\x06\xae*P\x865,\xb1N\x7f*%\x1d\xd7*\x06\x81\xae*\x81zN*\xd6n\x07+\xac\xa6\xbf,\x92\xc9\xb4*\x9e\xe5\x9e*r\x8fM/\xd1\xdb\x14+\xd0\x84\xfa*\xfc\xba>-\xf4\x01\x00\x00&~\xee*Cw\xbe*\xaal~+C\xeb\xb8.\x16\xb19*\x93\xefn/\x84%\x11+\xea\xa2\xa3*\x1d\x06\x87,\x86\rY.p\xb6\xd8*\xf4\x01\x00\x00YH\xd3-\xfed\xb9*\x10\x90\x12/\x18\xe3\x97*rt\x001\\\xc4\xe6*\x03\x9ad,\xec\x94\x050\xf4\x01\x00\x00\xca\xed\x03+\xe3\xe4\x7f*\x07/\x03+\x83\xe3\xae*\xf64\x94*\xd1!\xc2*\xc8\x15\x90,K\xeb\x8f*\xc7\xb77.\xf8\x86f*:\xa4\x07+\xf5\x1f\xa1*J\xde\xba,\xb7\xa9\xad*\x13\xabE+se\xa2-}\xdd:*\xda\xdaI*\x8c\xc2A+\x0c\xf0\xbb.\x04s\xaa.\xb3Cy-}C\x910\xf2\xfb\xcf,\'\xd6\xb5-!\x8ak-\x06\xf5\x8e*\xbe7\x89.\xfd \x04+#\xcf\x0c.Y\x9a[*\xc9\n\xb9*\x8e\x9c\xfe*E\x06\xcc,\x10\x1f\t*j\xc0])\x98\n\xb7)\xd4\xe0\xa0)\xb0\xb1\x08,\xa4*/.d\xa4\xfd)D\x92P*\xf4\x01\x00\x00\xe3\xfa\xdd)Vg\xbf)U(\xbb)\xb3\xf1\x04/\xae\xd6;)\xc3\x99%*\xec\t\xc3)=\xad\xa5)\x14#Z/\xf0ff*\xc4<\xdb)\xf4\x01\x00\x001\xabc/\xb4\xb4\xbb)5=l+\x9d\x0e\x96)v\xf5w/\xe1\xa4\xe9)\x85\x89\xa7*in\x16*\xf4\x01\x00\x00\xf0\x92\x05*\xe3\x8a\x81)r\xce\x04*\xca\x11\xb1)\x02\x0e\x96)~\x8d\xc4)`\x04\x01*\x9b\xb6\x91)\xc7\x1d\xa3)[\xeeh)3U\t*E"\xa3)\xc6\xaa\x1b*\x0b\xd4\xaf)\xf6!H*0\x0b *\xc7\xaf=)\x06_L)\x0e-D*\\\x8c\x92)G~\xb6+fb\x17*\xb2\x0cC*\xa4\xb1\xa1)\x8c\x19\x11*\xa4\xe7\x91+c\xbd\x90)\xd7j\xe6)\xc5;\x1a+c\xfa\x89)\xdd\xd6S,kY\xbb)\x9a\x10\x05-`\x9a),H0\xd3(\x93\xe7&(\xcb\xf4\x8c(\'\xc7w(\x8a\x9e\x99.+c\x8d.\nS\xc3(\xbe\x9d )\xf4\x01\x00\x00!\xf1\xaa(Ue\x93(\xee\xd6\x8d(\xdc\'X/\x91\xa6\x10(\xfc\x0c\xff(Fw\x95(\x0c+\x7f(\x1f%\xb6.\x13\x104)p\xd4\xa8(\xf4\x01\x00\x00/<\x88/U\x8c\x90(\xb1L"0\x8f\x1cg(K\xa0\x9d/\x9b\xec\xb3($j\x05)\xb8\x13\xea(\xf4\x01\x00\x00\x8b\xb9\xcd(\x07\x84G(\xf4\x8a\xcc({[\x88(\x8e\x1bg(a\\\x97(z\xaa\xe9+\xf2k`(d9{(\x05`3(\x86\x83\xd3(o@{(\xd4!A/\xc0f\x87(?\x1e\x1a)\x1e~\xf6(\xea$X.\xcfa\x1d(*\x12\x17)\x1d\t\xc3+\x96X (\xd3\x1b:-\x81%\xd7/\xae\x08y(\xf5y\xdf(\xcc\xc1\x90,\x03\xec^(j{\x7f(<\x00\xd9/\n\x82T(\xf0a\xaf+\x0cF\x90(;\xcc\x0e&\xfde\xa8%\x14\xad]&"\xa2\x8d-\xc4\xf4\x13&\x84\n\x02&^\x1b[,\xe8x\xa6.&\x06M&\x9f\x97\xa8&\xf4\x01\x00\x00Nn3&\x0c\xb7\x1a&\x16\xe2\x14&6\xb5\x89/t\xd5\x97%\xb6\xdb\x85&f\xe3\x1c&\x80\xeb\x05&f\xb2\xd0%%o\xfe&\xd161&\xf4\x01\x00\x00\xf2^\x93/\xf4\xb9\x17&\xd3\x8b\xb0/\xb0\x96\xf2%\xb0\xc5\xa6/\xeb\xdb<&?\n\x8c&\xf9J\xb6&\xf4\x01\x00\x00\xd8\xf0W&bl\xd1%H\xb3V&\xfb \x0f&\xa7\x95\xf2%\xa7\xe0\x1e&\xddU7,\xe9\x90\xeb%\xe3q\xd3-tH\xbc%v\x04^&5\xdd\x03&x\x93\xa6/! \x0e&~\xc5\xa1&\xd8]\x81&\x9a~\xab.{2\xa5%\xb0\x92\x9e&\x00=\x8e%\x1fO\xa8%\x07\\\x93-X\xc4:/X\xb3\x02&\x04\x93j&\x0c\xe3\xa4&\x01\xfe\xe9%\xb0S\xbb%\x0c\xefg-\xa8\x0f\xdf%\xce\xb8\xb3%(p\x17&\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00iT\xb5%\x8d\xd6U%\x89\xf7\x87-rw^%\x86\xef<-~!\xa5%\xb3\x88m%\x19\x1b\x04,\\,\x02&\x9e\x15V&\xf4\x01\x00\x00p\xa9C,\x8ev\xc4%\xbd\x0e\xbd%.\xa6\xcc%\xd2\xcd@%W\xfa)&\xf48\xc7%w\x0e\xaa%_\x81\x84%7\x0bk&b\x08\xe1%\xf4\x01\x00\x00\xe6\xc0\x8c%\xfa\xaa\xc0%\xd0\x92\x99%\r\x06\x9a%\xf0\xcak-\x00EL(\x01\xd41&\xc8\xde\xe3+\xf4\x01\x00\x00\xe5\x1a\t&}\xf7\x84%#Q\x08&\x0b\xc0\xb5%{\x05\x9a%\x9c\xbf\xc9%mm\x04&\xbc\x90\x95%\x94m\xa7%\xa2\x16o%\x88\xf6\x0c&1r\xa7%U\r\x91,\xe1y\xb4%SlM&PF$&\xe1\xdf\xfb%\x03\xc6Q%\x9d\\I&\xd1\x8c2%\x90\xb9U%\xe6b\x1b&!\x8a))\xde\xf7\xa5%x\xef\x14&\x1ca0%\xc6\x90\x94%.\nn%\xa98\x98% \xa0\x8d%\xb07d%\'M\xc0%6\xa4\xd5(\xcc\xe41,\x90\xb8\x0e,{\x1d\xd0,\x8c\x84\xac+\xc0\xa5\xc2(\xa3\x1e!*jl\x85*\x8f^\x19)\x8d>\x84)\xf4\x01\x00\x00\xbc/\xf1+\xbbx\xe7(\x9e\xf0>*\\8\x03)\xf6\xe6H*\xdfDH)N\x96[)L\xce\xc8(x\x07\x9d(V\xf9n*h\xf0\xd1-\xf4\x01\x00\x00\\\xfa\x93+\x1a\xf8\xa3,6\x8fF*<x\xb5(~\x82\xee+\n\xdc\x12)\xfb\x83Q)XRy*\xf4\x01\x00\x00\x15\x89!)\xcf=\xfd(\x89\x9b )\xfb"\xd6(\x12\xf0\xd6)\xce\xb2\xed(j\x06\x1c)s7\xb0({\xda\x19+\xed7c+.,[*g_Y,T\xf1\x10+7\x870+`Xr)\x07\x8cA)\x82\xad\x08,\xa7\xfa`-&>m)\x89;S(5\xe5\x17.\xf8\x137)o\x16e,\x15\xadR/\xb9\x88\x8c*\xf0J\xab+\x03\n\xaf(O\x8c{,\x04\x1aI*\x12|#)#q\x86(\xa1Ce,\xb0\x87\',\xcfc\x88.\xb0\xdd\xbe/\xa2\x9c0/F{\xe6,5\x94A,\xaf\xaa\xdb,2\n1,eip,R\xd2\x82.\xf4\x01\x00\x00t\x10F.\xf447,@\x1b\x86-\xf0_I1\x1bb\x04,\x842\x9f,}\x1fG,\xcb\xfa\xf7.\xbfY\x15,Ni\xb6/\xac\x88y/\xf4\x01\x00\x00n\x9c<1\xe8\x94\x8d.\x8b\xa4&.\xee:\x0e,\r\xf5\x8e1\x1aH\xdd-\xc9i\xa4,\x9b\x95\x8e,\xf4\x01\x00\x00t6},\xd1:`-O\xd5\xed-F\xd5\',\x0b\xf4d,\xcaL:,A\x99t,C|J/\xff\xa7\xe1,\xef\x88j-$\x1e\x92,X\xd7J-\x15\x9f\xc11\x98\xfa\xa6,\xf9!\xd2,\xd9\xb2\xcd-\x01\xe8\xb7.\xfd\xaet.n\xf1\xb9,\xcd4\x8d,\xe6@\xcf1!\xb8\x8f,;\x13\x15/\r\xc3\\0\x85\xdd\x01.\xcc\x02\xcc-Q\x83\x1e,R\xe3\xb0/k\xc1\x95/4\xa7f-\x97qW,FxB.\x8a\'P/%\x8372r\x10\xfd0D\x04\x040\xb9\xe3q.\xed\xd2E0\xcc\xbd\x991\xf8>X.\x00\xb1:13y\xd5/\xf4\x01\x00\x00\xbd\x81\xe81Js].\xd01g.\x1dv\x811\x13\x961.\xb5\xe5\x07/\x93\x0f\xd8.E\xdeD0\xce\xbdK.7\xb1\xc81\x8bPX0\xf4\x01\x00\x00Z\x00\xf31\xb6\x1c\xa11&\x00\x082\x1a\x1c\x86.~J\xc1/\x82\xd8\xf1."\xb1\xc5.k\xae\xab.\xf4\x01\x00\x00R\x9b\x98.\xe1i\xde0\xdc\xf7,/\xbd\x9eQ.\x0f\xa7\xc4/)f`.\x8d\xb4\x97..\xef\xbf0\x80\xc79."\x81!0\xc1\xec\xb70\xa9f\x101y\xa8\xfa1\xad\x9b\\.78\xfd.&\xe8Z1>\xa7\xc60\x94\xe1\x860\x1d\x1f\xf1.T\x01\xa40>\x8d\x832\xf8\xbc\xac.\xdd\xe8\x0c0\x08`\xef1?\xaa\xc7.\x0c\x01\xf6/d\xc3{0\xa70\xf31\xc0\xe8\xac2\x04>`00V\xfd.S\x13\xc4.\xf0jE1\xfc@\xe72O\x8ba1\xe6\'\x901@\xe1\xc0/\xe0\xaf\x102.\xe6\x9d2Y\xf8\xcc/#\xf8Z1\x13)c0\xf4\x01\x00\x00Ds.27\x95\xc9/\x9eK\x0f0\xfe-\x952\xd1an0\xa9\xe1=0\xf1\x92\xe0/\t;\x8b0\xfc\x16\x960\xc2\xd7!1\xd9\xec\x012\xf4\x01\x00\x00a\tu2\xd2f\x9e2[\xf0\x0e3Be\xa1/8y\xf70\x89i&0\x81!\x9a0\xbf\x15s0\xf4\x01\x00\x00\x98\x04\r0\x06\xbb\xe816\x0e\x9d0\x9aq\x060\x81bn1\x80F\xd9/\xee\t\x150\x9d@:0\xdaF\xb1/\xfa\xe0\x921\xde\xa8a1\xe7\xd9\x172e\xa0\x862\x1c\xd7T0xy\x9a0\x018\x132\x91?a1\xae\x9a\xec1;HZ0\x94\xf2L2Vf*3\xdcRG0\x8b4\x052}v\xa02\x960\x8c0\x02\xe0\xd91T\x9c\x000`\xae\x003iJ\x902\x01V\xee1\xbecK0\xc7V\x000k-\xbe1\x9e]\x0239\xcd\x1d2\xc3\x12\xe52\xf4\xd7\xb00\xb8\x8b\x962#\x18L3(\x82\xdf0\xf7\'^2\ny\x8d1\xf4\x01\x00\x00\x02E\x982\x12\x1d\xe80}c\xc30"\x9f\xcf3V\x88\x0b1 T\x891S\xe5\x9b1Z\x08$1\xfft\xb42\xf8jc1\xb7V\xe22\xf4\x01\x00\x00L\x97j3\xe3P\x8d2\xffx\xc53\x8d\x07\x1516\xa3\xaf2\xbc\xf6\xf40\xaf\x07g1\x10\xf1\xf41\xf4\x01\x00\x00\xa8E\x001\x93)k2\xefE\x001\x90\xfel1\xadfQ2y\xfd\xd70)\xc4<1j\xc2\xbb0\xf4$\xa90lRu2X\xc0\xd81\xa9\xff\xc01\xd7H12\xf0\xf0\xa61\x87e\xa91`.\xdb2V\x19\xc01V\xdc\x123\xaa\xd9?1\xd7Z\x073\x87\xcd:3\xca\xa3f1\xcbWK2y0\xad2\xfa\xf4v1\x831\x1a3\xe2\xbd\x950\xdb.\xa83XK\xd82\n\x06O2x\xd2\x891\xd7\x88%1\xce\x01\x053\x14\x87z37\xb9\x152\xae\r,3\x92"Q15S\xa62\xe6*\x9f3\xc3%V1{+\x9b2X"\xe51\xf4\x01\x00\x00\x01\xdf\xee2\xc1\x10\x811>xS1\x89T\x0c4\x8e\xc6\t2\xec5\xb91\x9b W1\xce\x9ad1\xeb\x8b\xba3\xdbv\x132":\xd62\xf4\x01\x00\x00\xces\xb53\xfa\xa4\x8d2a\x8a\xd130\x0e 2tf\xa12[\x87\x821\xa6O\xeb1\xd5B;2\xf4\x01\x00\x00\x1d^\xc51z\xdfw2gg\x9c1\x8e\xf1\xbe1\xb3V?3\xb4\x05f1\x07\x03\xc81\x0f\x96\x8d1gPm1\xe9G\x9f2\xe0\xbbv2\x00B\xb01`\xa5e2\xc65\x811\xa6\x17\x172\xb33\xd73 E\xb12\xf2\x1a\xb63\x90<\xd01\xb0\xf8\xff2O\xf5\x973#\x16\xab1\xae\xdf\xe31\xe9]\xed2$\x86\xd32\xae4r3/\xb5H1\xaf\x95\xb63\xfe\r\x163\xc6\x10\xcd2\xe2\xcb<2`Sb1\x18\xe3i3\x07\xca\xac26\xa3\x842{\xcc\xec2;\x9bP11\x0b\x153\xae\xd0\\3\xe1`h1\x92Y\x812\xa5*\n2\xf4\x01\x00\x00\xb8E\x173\xe9\x94q1\x8a\xbes2\xc6%\xf43\xbc.\x041<\x0b\xc61\xd2\x9aP1EE\x801\xbb\xa1\xcc3\x97\xf8\x9c2f\t\xfb2\xf4\x01\x00\x00\xa2\xd1\n4\xee\x93\x122|O\xae3\xe7\x0b\x162\x17z\xa42\xc2\xf9\x801\xbc8\r2\x0b\xb9\xa61\xf4\x01\x00\x00\xa3C\x8f14>J2N\n\xbb1wi\xfe1g.\x8c3\xd3\tf1\xdb\xbd\x9b1M8\xfb1\xceJ\xaa1h\x1c\x1a3\x12F\x822\x1a\xda\x871\x01\xbd\x042J\x00\xa21\x08\x19\x152\xd2\xf3\x083/\x15\xb01\x97|G3\x1b\xb3\xd31\xabo\xa92\xd8\x85\xb12\x96j\xa81G\xd4\xca1\x8f4\x8a2GS52\xb0iu3!\xb9:1?\xe3O3ay\xfb2\x92o\xc72V\x90f2\xaf\xc4L1\x8d\x86\x1e3K\xe1\xf82\xe1\xf9%3\x94\xc3L3]\xff\xab0>\xe1t2\x1c\x1b\x902\xc5\x83\xe60\xf4\xd362\xed\x10V1\xf4\x01\x00\x00\x8b\x8a\xa32k\x13\xdc0o[$2\xbfK\x9c3\xae(10\x1bRy1\xdf\x94\xbc0\x00G\x101?\xc1\x153\xa5\xf1(2\xadca2\xf4\x01\x00\x00\xd34\xc53\'t^1+d:3\x93\x98\x052&\xb1\xad1\x87\x01\xdc0\':\x9b1\x82\xe0B1\xf4\x01\x00\x00XD\x0f1\xbe\x82\xa50C\xed\xf90Xvc2\xd1M*3\x93\x17\xb90\x05\xd3q1y6\x8a0\xb0\xcb\x0f1r\x04N2\xc7\x8a\xa62y\n\xb80~\xb0\xc41a\x84:1\x18\xe0\xe01B\x1b\x8e1J\x91\xe11\x1a\xa9\xf72\xc2 g1\xf2,\xae1\xaf\x05W1\xa6\xe9\x1e1\x80V12y\x91\xc51Rb\x9b17E\x1c3\xba+\xdc03\xb892\xa6\x80\x873G\xc0\xe71::\xad1\x7f\x17\xb10\xb4\xf1\x872d8\xfc1/i\xd11-\xec\xba1\x91\xf1Q/\xf9\x91\x9d1\x0e\xf970\x18r\x810&\xd2T1\xc4P\xf0/\xf4\x01\x00\x00\xfbKX0<\xbb^/3\xe1\x981b*\xab27\xc7\xfa.27\xf6/\x9d\xd5^/\x93y40\x8cy\x9b1?`\xae0\n\x84\xaa0\xf4\x01\x00\x003\xef\t3o\xc6\xdd03}\xb91u\x0f\x892\xc5\'F0t\x91\x89/XD\x100\xb8\xe3\xde/\xf4\x01\x00\x00W,\x99/\xfe\xa7\'0\xe8\xf8\x9b/q\xb3c1\x05j\xe41|da/\x01Ol0\x10G\x96/\x91@;/p\xcaO1e\xd9\xe81\xb5\x87\xa1/O\xe8\xb31i\xd7Z/W\xa0\xa60\xeb\xe7\xd1/l\x81\x1a0S\xec\x0b1\x1a&\xe1/L\xad\xc40vXJ/\x89v\xd5/\xe7\x98l1\xc6\xe9^/\xfe\xe5\xc40\x95\x10\xb12\xe2\x95\x87/\xe18\xc9/\xe92V3\xdc\xbb_0\xebj\x161\xee\x98V/L*\x042\x07\xf3~/P\xcd\x8d0p\xac-/\x81I)-H2=.\xe9\xaag.{*\xd5/\xcf\t\x850I\xef\xc0-\xf4\x01\x00\x00cc\xae/\x15\x9a\x84-\x02\xe9\x180\x9b\x8d\xe50\xedu\xb7,I\xbb\x9e-\x03\x10\xf7-\x136\x19-\x9b\x10E0~_\xe8-A[\xfe-\xf4\x01\x00\x00P\xa0\xf81\xf7?_.\x10\x9e\x051ER\xad19\xbf\xa70K\xb8[-\xe2\xdb\xae/\x16\x1a\x88/\xf4\x01\x00\x00I\x0cw-\x8d\x97\xef,\xc1I~-e\xc7\x8f0Es\x9d.\xb1\xc35-\xd3\x01\x91/7\xfd\x8a.\xbd\xea\xfb-\xf1\xd8\xef-\x07\xf8z1\x99\x95\xd7.\xd9\xd1\t1\xbdb--,\xcaW/vh\x94-\xac#\xd6/\x80\x80\xa0.\x00\xa9\xb7-\xfe+\xf3-\x92\xf5M-D\x83\xb4.\x17\xdf\xa30\xde\x0fq-\x123\x88-6\x0060i\xea\x05-%\xdeB.\xb0\xd8#2\xbfeR.yP\x92/\xe3@--;f\x1b/\x86LK/\xebe\x97.\xa0\x13\'-$>**\xe0\xda\x85*\xa2\xb5\x90+\x14\xba\xbd+\x90D\xc7+\xb5\xfc\xc1*\xf4\x01\x00\x00\x99r\x98*6\x052*\xd8\xdbJ.\xd4G\xe4,%C\r*s\x05\x9a*\x14 \x99+\xa0\x17\x1a*.\xce\x860\xc0En+{\xe8K*\xf4\x01\x00\x00\xfb\x9b\x1c/\xe2\xb6/*I\xef\xe3-\xb8 \xe10\xbb\xf1\xc7+<qZ*\xcf\xb8\x0e.\xbe\xe9\x8b*\xf4\x01\x00\x00\xe0wx*\x14\xf8\xf0)g\nw*I\xd5\x0c/?,O+,\xcf6*\\@\xb5-\x05~\x94,\xee\xb5\x17*X\xae\xd8)\xfc\xdc2.\xccqY+\x8dR\xf8*\xc3\x88#*\xee1\xba*b\xda\x94*\xdbI~+az\xf0*\xa0O\xb7*\xa3\x17z+F\xa9\xc1)\x9c\xcc\x8c*I\x1f\xad,Jc\x16*4\xf3\x86*\x9f\xfd\xac*q\x9e\x06*\xdd\xe2\x9f,nr\xab1`U\x00*\xb7c\x020\xcf?.*\x9b7\xc1#[\xdbc#M\xd1\xee&\t\rm#X2\xc8#\xcc\xf4\xaf#c|\x8d+\xdbI\xcc#\r\xb5\n$}\x1ed$\xf4\x01\x00\x00\x8c~\t&\xaeW\xd1#\x11\r\xd1.\xae\x10\xda#\x88qM#\t\x1f5$pH\xd4#\\4\xb5#\x95\xfb9.\xd1sz$\xf6\xc8\xef#\xf4\x01\x00\x00\x0f\xfb\x95#pL\xcd#\r\xf1\xa2#[\'\x8d,\xf0]\x0c$\xc7\x8a\xff#\xbc=\xc7-\xc1\x87$$\xf4\x01\x00\x00\xcc\x17\x12$\x0c\xaf\x8d#\xf4@\x11$D\xaa\xc1#P\x1e\xa4#u\xf9\xd6#\xeb\x1b\r$\x98|\x9f#rg\xb2#4\xc3~#64\x16$]l\xb2#\xd3`\x1d$\xc0N\xc0#\xcd\xe3Z$A\x0b/$r\xedN#p9b\'\xfa\x8fV$_A>#d\xbcc#\xad\x92%${\x7f\x94+G\xd9\xb0#\x04\xb3\x1e$:\xf1;#\x1eN\x9e#\xf2w}#\xa7\x86\x98/\xf4\xe8\x96#\xdf+\xb9-x\xe8\xcc#\xa0*\x9e!\xa1\x85:!\xaf\x88\xf5!_\x0cB!4\xe1\xa3!p\t\x90!\xf50O!\xbf:\xa7!\x08\x17\xe3!\xb0\xbc:"\xf4\x01\x00\x00\x00\xbe\xc6!\xda]\xab!A\xe8\xa4!\xc1\x81\xb2!\xbe,(!\xbbC\x14"\x00\xc6\xad!@U\x94!e(g!\xd8\x04M"oI\xc4!\xf4\x01\x00\x00\xf0\x8bu![\x0e\xa8!\x1eb\x85!3Y\x86!\x8d\xce\xe5!g/\xd1!\x98\x1c\x1b"\xfb\xae\x06"\xf4\x01\x00\x00y.\xef!\x85\xf6g!\xbe\xce\xed!~\x88\x9e!\xaeX\x86!\r\xfa\xaf!\x9d\x05\xe7!\xa9u\x82!]\n\x92!\x08\x8cP!\x88\xe9\xf5!]\x0e\x92!5\xd4\x00"\x10l\x9d!\x98.3"(J\x0f"\xb0c)!\x06\xfa6!\xb8\xa3/"\xf4\xbd\x1b!bl:!o\x89\x07"\xee\x85#"^\xc4\x90!\xfd\xe8\x01")\xd9\x19!o\x96\x81!\xe9|O!\xbc\xc6\x84!\x8a\x11w!\x92\x10G!\x9e\xbc\xa7!\x06Q\xff)"4i,z\x0c7+B\xb9\xab(!\xc3\xd8(\x16\xaf\x9a+\xb1\x06\x89(E\xe2n)w& -\xb8\xfev)\xf4\x01\x00\x00$\xc2\x08)\x8bH3+:\x80\xa5+?X\xb3,|q^(\xfb\xfd\xdc)\xbfk\xf2(\x93\xd8\xc4-\xf6\xdf\x98(C\x96\r*5\xd0\x01)\xf4\x01\x00\x00\\:S*\xb8\xbf\\)Kp\xb0(\xc2\x0b\xbc-\x1er\x18)\xf5W\n)>*M)\x88\x81@)\xf4\x01\x00\x00\xd2\x8f\xc7)?A\x8a+\xd1E\x1d)j\xfe\xe1(b\xb8l/B\xc3\xe8(\xf2\xc8\x18)\xb4\x8e\xac(^NH+\xcc\xeb\x89(\x9d\xc2\x16+Ac{+\x7ft\x8e*\x0e#\xd3-\x95\xf9F+(\x87=)\x10nE/\xef\xc2H*X0\xed)u\xffM(.\x07p)\x04F3)\x17k\xc7)u\x8a!.\x90\xd0\x03,7pd(\x85g\xab(\x92\xa7".\x01\x93\\*\xd3L\x8d)\x86\xa6\x83(Y\x97\xc1+\xe1VQ1\xf9&\x851\xb7\xf1\xe4.s+v0\xe0\xea_1\x1b\x91V1\x8e\xb6a0\x0e\xa9\xec-\xfctM2/_;.\xf4\x01\x00\x00,\x99M/\x8b\x82\x9b/\xb6\x07\x14.\xdf\xd8-.\xa6\x00\x0c.X%8.D6S/\xb0T\xd20\xe7\x81\x9d-c\x17\xfd0\xe8\xee20\xf4\x01\x00\x00L\x15\xcd0\x15Ry0\x10\x1a\\-\'\x85</\x90jy.\x1aG\xc8-,\xe5%/\xe1,P.\xf4\x01\x00\x00\xd2\xe6\xcf-!<\xab1\xbd\xa2\x17/\xe2/\x90.:\x8c|1\n\x04\x8c.B\xcf\xbc.\x95\xb3_/\xad\x05\x1712\xaeB1\x89\t\xd31O\xeb\x0b2?\xf8\r1\n\x9d\x941tf\xbf/\x03\x01\xa1.\x95K\x9c0f\x85F1\xaby\x10.\x1b\x9c\x7f/\xee%f1S\xeb\xde-\xb8_\xb3/\xa9\xa7\x8d2\x83\x7fN/\x10\xe4\xa4/?\xd4\x03.w\xea\x0b2>\xba7/[T\xa70S\x08%-.Q\xf8/r\xa9O2>\x8b\x1f3\x8b\r\x981@\xbfB2_\x83\xb71\x8c\x91\x153}\x96\x1220\x12M0\x9b\xc0\xdb3\x9bj\xb80\xf4\x01\x00\x00b\xd3\x842\xf8\xb7\x861@\xdbM0\xebk\x8a1\xf0\x1a\xfd/=\xb2\xd40\xcf\x97\x8a1u\xee\xa72\x84\x11\xb00Cu/2\xa3\xe5\xb32\xf4\x01\x00\x00#\xc9\x9e2\x99\x93\x9b2\x86Jt0\x9c2\x1b1[9>2\x98u\xb00Q\x17\x0b1\xa1\xa2\x920\xf4\x01\x00\x00\x0fJ\xa90\x93h\x0e3\x93&\xd31WOP0\xd7)A3(\xa4\xb00\xc64\x840\xc3\xcc\\2K\x02.2\x1aY\x931\xd9\xfd\xdd28O\xd53\x19\'-3~\xac\xb12\xa6/\xbe14\xb1\xc71\xb2,(2*\x0bT2\x03\xd7\xe20\xcd\xddn1\x97\x9383\xc3Y\x800\x01^Q1s<\x0e4,9\xc90z\xfb71|~\x1e1\xea&63\xebR\x822P\x8d\x852!\xe840H\'\x9d1\r\xd1\x813uV$4\xd1\xf5 3\x18 \xb22\xbe\xdd82l0\xe03s\x9e\x9b3\x16Y\xee1\x03E\xa14\xa0\x8f\x8a2\xf4\x01\x00\x00\xee;\x8c3x@\xaa2XX\xf31\x1d5\xa72Qm\x961[k]2\xb4\xba\xdd2\xe3\xe2\xa03\x1b<\x142/u\x9f3\xd5\xf2\xbb3\xf4\x01\x00\x00$oQ3\xab\xf0\xbf3\x8c\x13\x813\x02\x9b32\xb8\x17^2J\x05+2\xe4\xcf\x842\xf3RY2\xf4\x01\x00\x00c\x9f\x1c27\x16\xc33ck\x982B\xfa\x0c2\xf9\xd8\xd73&\xe7\xed1|D\'2\x8d\xbfF3E#\xbc2f\xa5%3\x96\xc2\x963?cD4\xed7\xfc3\x18\xbbj3\xf0\r-3\xf1DK3\xebH\xd229\xc1Q3\x85\xd9z2\xd4{@3\x13\x17\x1c4\xdfA12\xc7a\x1b3+\xc2\xc84\x1b\xf2Q29\xa0\x173\x1aS(2/x,4\x8d\x9e\x933\x11Q\x853\xa4V\x152\xc4\xe9\xbd2\xa4\xf4X4D\xf8\x904\n\xac\xdc3\xd95\x803\x00\xf1\x113\xa9\x8fn4L}\x054\xad\xea\x163\xd4\xe6\x0e5_\xe4\x9c3\xf4\x01\x00\x00\'\x9bx4B\x94d3o\xb9\x0f3\x9e \xf93\xfb\xa1\x9f2\xc3t\x813r?{3\xd2\x82\xeb3n0f3M\x99\xf83\xf5\xe8\xaa4\xf4\x01\x00\x00k\xca\xe43y\xefm4%_\x804;7\x1a3\x987k3\xc9\xcc73\x0e\x9c\xc23\xcfq\x853\xf4\x01\x00\x00\x8f\\N3t\x96C4\x13\x07e3/W?3\xdeFe4\x11Y\x1d3h\x8c\x813\x12\xc8\xb63\xe5\x05/3\xc5\x0b\xf33\x9eW,4,wU4)\x8d*4\xba\x15(4\x90Mu4\xc8\x1d<4EZ%3u\xec\x024A6\x9b3\x96]\xcf3Pi\x874\xac\xe9h3\xce\xdb\n4\xc9#\x075\x8b\xe5\x9d3[\x87\x8e3\xd7\xf2\xe42\x12;\xa24x\xea\x8a3\x0f!-4\xe9\x99\x963\x9c{\x853\x8d\xcf\xc24\xd4r\x924\x9d\xabL4.\x03\x014]X\xd73\x0f\x8d\xa24P\xecd4\xe31\xd83\xe5\xb6\x055)zc4\xf4\x01\x00\x00{\xce\x9c4\xb83\x0b4o\x12\xdf3 4\x9a4\xea\x02\x823BgD4\xbb\xbd\xf6384+4\xa0\xa4]4<\x13\x874\xb8S\x954\xf4\x01\x00\x00\xea\x8et4=>\xbe4%\x18\xb441`\x074D\xe2F4 \xcc\t4\x16.\x8b4\xfc\xe0D4\xf4\x01\x00\x00\xe2\xb614\xca\xa6\x9d4\x97l\x1f4\\\xee\xff3\x95&\xaa4\x13\x1c\xf53\x00\xd6\x1b4\x10\x9c\xd93g\\\xae3Xe\x844\xc1\xd1\x814\x18\xe2n4\\OH4\xa2\x9er4T\x88\xec4\xb6\x8c\xc24\xdf6\x973\xbc l4\xd21h4tT,4\xeb\x9eg4G\xe574N\xba{4a\x8f\xfd4\x84\x19Y4\x18\x8e,4\xbep\xaf3\x16\x84\xd94\'\xa4\xbb3\x0f\xe1y40\xa0\x024\xac\xe1\r4C\r\x0e5\xeb4t4\xc7\xd0\xa24\x1d=/4*\xc0D46\xd9\xa44\x91\xe6\x8b4\xa3"24\x13\'\xec4hZ\xc44\xf4\x01\x00\x00\x08\x16\xfc4;\xbdR4\x9d\xfd:4\x86\x1d\x045\xe3y\xf53mx\xa54\xd4\xb2J4\xc4\xecy4\x17j\xf44\xbe;\xe34\xb3F\xad4\xf4\x01\x00\x00\xf6h\xd54\xe4\x02\xcb4\x18^\x015-BX4@\x03\xb14R[\x804\xf3\xf8\xdb4,\x85\x9c4\xf4\x01\x00\x00\xc1\xf4\x8c4|\xd4\x944wW\x914\x9f{;4f\x9a\xd64\xf0\xb2]4\xc4\xc1\x834%V-4-!\x164\xa5\xef\xbb4\x15K\xbd4\xba\xccw4\x9b\xc1\x964P\xeef4\x9b8\x1b5\xe0\xe1\x0e5\xd5\x06\xe73\xcfJ\x9e4O%\xc24\x1c\\@4c\x10/4\x89?\x9e4\x90d\xc04\x1c\\\xa84\xc8k\xc74\x06\x80c4\t\xae\x1e4%\x85\xce4\xa2e,4h\xfbx4s5\x1b4iDH4\xff\x1a\x0b5\xb8\x0e44\x1c\xfd\xd94F\xeeS4u\x7f34\x9d\xec\xc04PrZ4\xfb1#4\xca\xf6\xd34\xd7\x15\xc64\xf4\x01\x00\x00\xd5L\xf04jY94\xfb&-4\xf1\xc2\x0f5N%\xc13}\xda\x994xP74\xa1\x92\x844\xa8r\xfb4i\xd9\xe54fm\xb04\xf4\x01\x00\x00E\x15\xec4\xbf%\x8c4\x97\x18\x934\x1f\'w4\xd6\xc5\x984U\xe2o4\x1fu#5\xa4\xf3\x924\xf4\x01\x00\x00v\xd9k4ND.4\xe4\x01\x864\x1c\xb1[4\xd0\xc4\xdf4\xdb\xaaI4\xc5\xe2\x804W\xa0\n4\xff\x88\x114.\xb3\xa44\x1f\xf2\xbc4\x8bv?4\xa6\x8c\x8e4\x85"b4\x815\x0b5h\xb6\xbf4\x14Z\xc23\xa3\x18\x9f4Ek\xb440\xb114K\xa2\xe73p\x00\x8f4\xfa\x16\xb04a\x94%4\xd6\xc5\x075\x04\xeeh4\xb7m\x144\xd7\xdf\x9b4D\xa2}4\xb4f\x844\x93s\x054r\xcf)4\xd4\xe7\xb24\x1d\x8d\'4\\P(5(\x04|49\x9a\xa83\xe4Z\xb34\xc6J\xe73\x10\x97\xcc36L\xaa4AGE4\xf4\x01\x00\x00\x1e\xbc\xaf4\xf8\xc2\xac3\x15,\xa04.\x8eu4\nl03\x00\x95\x184\x9e^\xb03\xed\xf4.4q\xfa\xb74\\"\x944\x19Sm4\xf4\x01\x00\x00\xab\x1d\xa74\x80\x8e\xf73\x1f\x8b24\x92\xbe\xb24\xf3\x1a\x144\x90!\xda3\x1e\xd7,5f\x8a\x0c4\xf4\x01\x00\x00\x8e\x9a\xf13\xc5\xd1\x993>R\xf83\x00\x1004\xa2\x1f\xdb4!\xf6\xb83\xa4\xbe\xf13?i\x8a3\xe10\x953J\xab\x804C\x12\xbb4?\xc9\xb53\xeb\xf0-4\xa8\x8b&4\t\xd9\xa94\x1ej\x194\xdb\xe2h3Z\xa5\x914\x05\x1354\xa6d\r4Fsr3.\xb0\x074\x90\x9f\x844]\xa8\xa13-\xdbb4\xb1t\x804-\xf6\x8e3[c 4<\x81\xee4\xf3\xad\x154e1\xa03_\x87\xd83a[I4\xcf\xa3\xba3\xa1L\xdd4q\x88\xcc3\xd6j\x9c2n\xf2/4.\x9a\xc92\xe3Z;3\xdb\x08N4\x9b\xaf;3\xf4\x01\x00\x00\x8a\x1b\x1f4\x9d\xdd\xac2s\x89I4\x1a/\x803\x7f\x12\x822.\xd3\x103U\x9a\xa42\xfe\x87\x883|I]4|\xb8\x8c3L~\xbd3\xf4\x01\x00\x00Y\x8c44\xebk\'3\xad\x07\x123V$\xc04\\\xa9W3O\xcc\xc32\x0c\x01\xe34\xdfn\x1a3\xf4\x01\x00\x00\x9a0\xe42Q\x8f\x892\xb4\xad\xdd2\x06\xab\xe73\xefAt4\xc1\xa8\xa52J\x07\xf52\xf1\xf3\x9f3\xd2\xf5\x8b2\xa2\xaf\xcd3\n\x8c\x8c4\x80\x19\xf42wI\xb53h\xf9/3\x0e\xd714\xa9a\x1f3y\x9b\x852{0;4\xdb\x80\'3\x8e\xb9\xfa2\xef\x0c)2\xca\xb0\x1b3B@\xd53].\x952vk\x973\xa6\x04\xe93\xf4\xdb\x812h\x99\x1d3/+\x0e57\xec\xbb3\x83\xbef3\xa7\xf0\xed2%\x8f33\xc3\xf4J2\x91\xde\r4\xcc\xe9\xac2\xaa`\x1e1D\xa7\xe32u?\xb40\x0cy\x032\xde:-3(\xa6\xa91\xf4\x01\x00\x00\x97\xdd\x0c3\xdf\x1av1\xe3\xc8\xa33\xf8cc2\xf7b\t1\x9d\x08n1K\xc0:1\x9a\x0e\t2\xea\x19\xb93Go\xb41M\x0c,2\xf4\x01\x00\x00\x0c\x00^3\x15#\xc21\t\x04\xad13Gb4\xa7\x8c\x8f2\xc5\xc6+1)\xb4\x194u\x06\x8c2\xf4\x01\x00\x00?[g1\xc1)\xb60\xaa\xeaI1\xa3\'\xce3\x07\x05\xe22\xe0\x17F1\xea\x91e1\xc1\xa5\xac3J\xc6\x0b1y\xc5\x822\xafy\x194\x16\xd9\xc81\xf7\xf4\x083\xdc2\x991\'u\n3\xbd\xb5\x871\xda\x00\x071x]\x0c38\xb4\x8d1\x87\x8c&1\xdb\xd0\xd11!s\xa31"m\xdd2s%\n1\xb45J2ix\xba2d\xdc\xe40\x03\x9f\xb31W$\xb44\xad\x06\xee2\xc5\xe1\x8d3\x9f\xc0\xd81\xfaT\x8b2^\xf0\xb50\xa8\xd3\x931\x12"\xd91]\xa2\xb9.\x80\x1eg0\xe5\xf8\xdc.\xf3$3/\xcbq]1|\xffG/\xf4\x01\x00\x00\'\x08k0}\xae\xb3/\xea\xc2^2_]</\xcb\x96&0\xdb\xd4\x0b/\xadh1/:\xd0\xc0.\x9e\x84\x822\xbf\xcb;/\xd0\xcc\xd8.\xf4\x01\x00\x00\x1bn\xf11\xdb}\x99.G\x83\x070=\xd9\xee2\xf3~\xb91XF\xd9.j(E2\xaaY\x951\xf4\x01\x00\x00H\x92`/\'\x0b\x8b.6mb/\xd8)@3\x0e\xd3\x85/\x87\x92,/\x07\xd8%/7q\xd12\x85D\x0f/\x0e\xa8@0\'\xb4\x812\x15\xbf\x11/j\xe2\'2%\xfc\x90.%_\x032\x8e\xa9</\xd7\x88f/\x82f\xb1/\xa1\x9a /\xc3\x88Q.:\x8de0V\xe9\x92/C\x90\xe3/\x8e\xce\x9b.h\xc5\xcb0\xd9\xad\x110\x89\xb3u.K\xb9c.G\xfb\xcb3\x1a\x1c[/\x0c\xd9\x023W\x1d\xd2.e\xb1\xbe)\x15\xdf`)\x9e\x94\x86+=\xfc\x89)\xb4\x110,\xec\xa3\xad)\x0c\xb8\xca)}\x99\xc9)\xed\xde\xc0,\xd4\x1da*\xf4\x01\x00\x00\xf9\xea\xda,L\x96\xce)\xeeFC/\xd31\xd7)i\xd9\xc8-\xbb\xeb2*\x1d}\xd1)\xdb\xd1\xb2)\xce\xdc\x96,\x03$z*\xfa\xa0\xec)\xf4\x01\x00\x00\\\x9f\x94)\x9e\x98\xca)\xee\xcb\xa0)\x0b\xfa?+\x9b<\x94+\xb7-\xfc)\x80\x96\xdf/`\xe7\xb0/\xf4\x01\x00\x00\xbf\x07\x16*\x94\xd1\x8b)\xe12\x10*OV\xd60M\xf5\xa1)\x12%\xd4)p@\x0b*E\x84\x1a0iE\xb6)\x14s\x060\xfd\xce\xed*2\x13\xb0)\'\xe3\x03-\xbe\xc6\xbd)\xc4\x81\x8d08\xd3,*84L)\x00\xcb^)\xf4\xd5\\*C\xc0;)\xf6\xbc`)\x9b\xca\xa9,\xd4>s*\xfe\x97\xae)\xe4\xcdb/\xe8w9)\x9a\xfc\x9e)\xc6!z)\xe9k\xab0\x88\xf9}*\x89\xc6\x8f.\x19{\xca)\x9f\x00\xa5&m\x95B&\xb3\x12\x00\'hoJ&\xefs\xcb(\x13\xdaZ.g%X&\x03u\xae&\x90\xe7\xec&\xe0\xd6[)\xf4\x01\x00\x00&V\x97*\x83q\xbe(\xcb\x08\xac&\xbb8\xba&\x8dh\xa4*\xa6\xd3\xdb.Q\x90\xc3&\xb4\xb1\xda.\xfa%q&E\xe1U\'\xec\xd2\xcd&\xf4\x01\x00\x00a\x14\x80&x\xa5\x82+\xdf%\x8b&K\xd54*T\xbd\xef&\x80\xfe\xc9(\xe3\xd0!\'\x0c9\x8b,\xf4\x01\x00\x00\xfbq\x00.\x06\xfdq&\x8c\xffb)kU2\'\x17i{-l,\xfb(\xb9\x01\xf1&\x18\x19\x88&\xba\xf7.+\x83\x8fY&\xd8%\xd6*\xe5\xfe{*\x9ce\x06\'\x96\x1c\x12,\x9e\x9b\xed+\x96{\x15\'\xe6\xb50&\x81\xe2>&<8\x94.\x10y"&\xf6zB&o\xb6\x0e,0\x08-\'\\\xc1\xc5(T\x86\x07\'n\x7f &W\x9a`-\xa3tX&\xd3\x83\x8a&\x90\xdf\x80&0\xabO&\x9dkC,\x9aU\x84,\x0c\xc5\xa30+C\x86,+\x96\xea-\x85Ux.\xac\xb6\xef.5_$-\xbf\x88],\xf4\x10\x030[v\x98-\xf4\x01\x00\x00\xb4[\x9b,\xde\xe9M.\xd7\xc0\x11/\xba\xa8\xc2/\x97\x11\xb9+\x1e\x0fU.T\xb7\xe3/#w\xca0\x8c.\xf9+OI\x0c/G0\xa9,\xf4\x01\x00\x00\x03\x87\x11,\xfcb\x80,\xa9r(,\xf26\xb1,5\xbaw,\x84\xba\x9a.\'\x1d\xaa,\x8a+\x92,\xf4\x01\x00\x00\x97\xa1B-0\xb1\x0b1\xa6\x92\xee.\xdb\xd4\xc7-t-\xeb.\xc8\x9fE0\r.:.\xf4Y\xd9,8\xc7\xd4-\xda\xb0\x9b-\xc2\x85\xc2-\x82\x97\xde0\x97\xd5e0IcM0\xaf\xe4J.c\xff:/\xcc\xf8\'.\x06\x05\x8f,\x13\xbd(-\xa2\xe2\xa7+?#\xd8,\x8c9_-G\x8d\x9d.\xaf5\x191,>h-\x18\x1f\xe3-\x98\xb820\xd0U\x12/W\xecu,\xb0\xf3%/?qp-\xf15\x7f0\xcad\n0\xc4;+3XX\x820\xb9#\x192k\x98\xc02EGQ2\x9fY\xb70.F\x1d0\xc8\x96D3\x97\x8c\xc10\xf4\x01\x00\x00\xf6\xda|1\xa3\x0b\x811\xe9\xf0`0\x96Z01\x8cp\x90/j\xc3\x820\xf6\x89\x7f36a$3? \xb6/Z\xc8\x9a2\xb1r<2\xf4\x01\x00\x00U\xa7\x801\x96\xf6\xaf0C\x12\xe7/@\xea\x130\x0b\x0b\xc40\xbf\xc4\xec2\xae\xa4z0\x17+\x0b1\xf4\x01\x00\x00\xa6\xce\xcc0\x84\xbd\xbc3#\xe1\xd22\xfc\xd4\xfb/L\x18,34z\x892\x9d4\x022"\x8d\x9a1+[H2\xc7}\x822\nv\x081\xec\xd8\x983\xc6\x08n2W$\xe72\xe7\xf5:2+\x18\x9c0\x97\xe7\\2s\x99\xfe1\x19I81\xf4!\x032Por2J\xcdP0=\xfa\xbe1\xfa\x1aD3\xcd\rT0\x9b\xa4\xa0/\xf4\x98g2\xa5\xde\xaa2\x82F%0\x08d\xc52\xb6F\xad/\xcf\x1c\xb22\x92O83\x17\xf4?49\xd5\n3m\xd5\xb136J\xa83\x11\x1c\xd33\x0eqR3\x03\xcd32\xe4.\xf24\x1b\x7f\xb72\xf4\x01\x00\x00\xc3\x9d73\x0bl\x9f3Kj>2\t\xdfy29[\xa01\x08I\x9b2\xbe\xf2\x814\xdc(@4\x8f\xa5\x112\x03\x8924\xa6\xf8\x064\xf4\x01\x00\x004\xebQ3\x8b\x82<3\x11\xa5J2c^d2\x04\xbb\x133T$\xc63\x0ek\xab2\x06\xaa\xdf2\xf4\x01\x00\x00t\xdc\xc72\xfe\xfe\xd64\r\x9f\x0e4\xcdd\x852G\xe2^4"\x8f\xa83c\xc0\x943\xc9\xc9\xfb3\xb6J\xc53\x1e\x12\xdc3\ty\xcf3\xf4~\xcf4ON\\4D\xe224]\xd4\xf43\xffy\xd82\xd3(\x8a3\x05\xd9\xaa3\xbd\xcc\xbc2RCq3%k\x0e4\x89\x02\x822dP53\xdfg\xaf4\x9e\x1a}2\xca\xbb\xee1\x1a!\x833G\xa8\x004\x8e\xbf\x073\xba\xf6\x0b4\'\x89\xf71@P\x044|\x16#4\xaa\nf4\xc9HS4\xdb`\x014\xfbc#4:Po4Z*\xeb3:?\x8c3vV\x835\xa3\xa3\x174\xf4\x01\x00\x00\xe1ej4r$[4^\x89\x9b3\n\x00\xdd3N\xfc\x103T\xab\xfe3aK\xef4\x90\x8a\xd54l\xe2{3\xd6\xfb\xf148\x91\xcc4\xf4\x01\x00\x00\xe6F\x174gWM40#,4\xef"\xa83\xc7[\x124\x19\xdcR4\xf5\x84K4\x03\x91\x1b4\xf4\x01\x00\x00\xaf\x9c\x1d4\x9av\x0c5H~\x9f4\t\xb2\xe93\xc7\xa1\xce4E\x8e\r4<;\xb74\xba#\x954\xaa\xb6\x854\xca\x18\x954\xfc\xce\x864R;%5\xb6\x83\xe54\xc4\x02\xad4\xb0\x87\x125\r+=4\\u\x054\r\x90/4\xaee$4 \xfb\x1e4\x8as\x8843<\xe03\x90\x05\x804~\xfa\x1c5\xd3m\xcf3\x05\xe7F3Qf\x923\x1e(p4\x06\xf9\x044\xc76\xbf4\xbcg\x9b3\xc9\xe6\xbd49\x17\xbc4\x9c\xa5y4L\x1c\xb840\xb7R4&\x03\xb34\xc8\xe9\xee4\x8e\xa7-4U8F4\x0b\xf7r5\xd4\xc6\xde4\xf4\x01\x00\x00?\xbf\xfe4y>\xb74\x01\xbcr4\x86(\xa64Z\xd5\x024\x12\xa9\xc64\xde\xc3\xec4\xbdk\xe04\xb3t[4\xc6w#5r\x19/5\xf4\x01\x00\x00\xa9}\x844\xe1x\xf84\x96\xd2\xb74U\xe5a4\xb5\xda\xc44\xa0\x1d\x8d4\xaa\xb9\x0f5\xeb\xbb\xbc4\xf4\x01\x00\x00s~\xe84;\xf4\x055\x85\xb5\xc34\x15\x9f\x954g\x8b\xdd4TC<4&\xda\'5\x9e\xe8\xa04f\xcf\xce4-\xf9\xc14\xcfr\x115`\xda"5\xe8\xbb\x055\xdca\xf64\xac\x82}5\xdao\x005rK\x174\x9fhb4\x03\x8d\xd44\x82x74\xf2\xe2^4\xcb:\xb04\x8f\x87\x175j&\x005\xc3\x0f\xc74\x0c\xdb\x074\xbey:4\x8c\xdf\x974\xe4s;44\'\xe94\xe5\xfb-4/\x07\xf74\xaa\xc8\xd44\xe1Zm4g\x1a\r5\x08\x18{4\x070\xca4MA\xd741\xe7x4;\x13\x904"j\x135\x94\xbc\x165\xf4\x01\x00\x00\xf0\xfa\r5\xfd\xcf\xb64gL\xff4\xab\xac\xc54\x03\xbe\x804\xb1\xfb\x055\x8a|\xae4\xbf\xb0\xdb4\x04\xa7\x9042\\q5p\xd9\xfe4\xf4\x01\x00\x00\xbdy\x994\xca\x88\xd44\x06\xb7\xad4\xd3\xa0\xab4\x7fh\x0f5g\x88\xad4\xa1\x9aH5:6$5\xf4\x01\x00\x00[\x0e\xff4\xc0_\xb84\xd5\n\xba4"\x86\xda4\x8a\x90\xb64\x89\xf0\xa74\xfcC\xd34\xb8\xf7\xb24wv\xb14K\xd4\x9e4<\xfb\x1b5\x1b\xfb\xda4\xaf>\x0f5b\xb1\xd44km\x895ok\x195\xbe\x0eh4\xc5\xb9R4c\x8405\x8c\x0334eK^4GG\xfb4\xe2dB5\xb1x\xd14\xd19\x145{\xd2>4y\xb4\xb44D7\x804\xa5\r\xbf4\xfbS\xc24\xcf\x99\x914"\xb8\xd44\xe5\xb5\x8f4\xdb\xbfS4\xf6\xc4\x045\x98)p4\xdat\xb84\x9eA\xc34\x11\xef\x934\xb8\x1a\x9b4\x1dp\xec4\x05\x12\x1e5\xf4\x01\x00\x00[2\xfd4V\x89\xac4\'a\xff4\xbft\xe14\xf3i\xa24\xf6\x90\xd34)s\xbd4N.\xcd4\x0e\xf9\x804iY\x84555\xc54\xf4\x01\x00\x00\xc9\xb8\x934\x9c\xd4\xb74N\x1e\xb94\x92\x89\x944\xf5\x8f\x0157\x19\xc14\xe7\xafQ5G\x10R5\xf4\x01\x00\x00\xafT\xfa41\x1cs4\xa1\x19\xbb4\xcd\xcb\xda4\x1e \xa64u\x18\xcb4\x11F\x0c5\xeb\x8a\x874#\x01\x9c4\xbb\xfeu4\x996\xec4\xf6\x11\x964\xbf\x1bn5\xd2.\x944n\xe1q5\xce\xf5\x1a5!%\x894\x0eIX4z\x1a&5`#M4\xc5F\xb14L\x93\xec4\x81\xa3\x825~v\xa74.\x1d\xf84\x7f\xedS4\xbc\xb9\xf14<!e4\x19\x04\xab4\x1c\x0f\x984\x0b\x0c\x874` \xb34\x9bv\xc64\xc1Uk4_\xf2\x0b5\xa2]\x8f4%\xcb\xb24\x1b\xcc\xbf4F\x05\x8f4\xda\xa5\xbb4\xc3D\xfd4\xdd\xd4/5\xf4\x01\x00\x00v\xca\x055\xac\x1e\xbd4\xaa+\xbd4\xfen\xe84\xf7\x01\x974\x97\r\xe64\x04\x8b\xd34\x10y\xdf4\x9e\x05\xab4\xb0\xeeF5\x98\xb8\xda4\xf4\x01\x00\x00<O\xae4\xbf\x8d\xd94\xddi\xe34\xd4`\xb44H\x0b\x185\xf9\xc1\xdb4\x8e)c5d\nf5\xf4\x01\x00\x00O\xdb\x005\x95\x06\x894\xb8\xf4\xf24\xfa\xe3\xd64\xff\xe2\xb74\xe9\x87\xc644"\r5\x95/\xa64!(\x9a4\xe8\x7f\x944x\xf3\x0b5G\x07\xb74\xb3\x00U5f\xb3\xb949\xa7n5\xab\x83"5|\xd2\x934l\xa8@4\x1ea45\xab\xf1N4\xab+\xad4P;\xf04\xb9\x9eS5\x9b\x8c\xb04\xd5t\x145\xeb\x18o4\x0ff\xdb4\xa1\xbe\x874#\xb0\x964\xb5\xbc\x914Qb}4$\xfa\xce4<\xd2\x954@w\x8b4\x97TM5:|\x8b4DC\x994\xe0\xa3\xe94G\xa4]4\xb2[\xc14\x8c\xcc\xe74\xc8j+5\xf4\x01\x00\x00\x84\t\x075Be\xc04\xc3_\xf64q\xb1\xc04U7/4c\x89\t5}\xab\xd34\xc1\n\xe34O\xa4\x8b4\x95\x99H5>u\xf44\xf4\x01\x00\x00\x16\x91\x8a4\xaa{\xcd4\x14\xcd\xa34\\\xd9\x055\xa0Y\x075\xe3Q\xb94-\xc5\x915\xf2\xc5\x0f5\xf4\x01\x00\x00\x982\xf14\xe1|f4D*\xe84r.\xef4\xb2\xc1\xd94\xe2\x8f\x9d4h\'\xd94<\x13\xc74\xe2]\xb04\xdb\x17\xb94\x86\xd9\t5\xa5K\xb14UM\x055\xc9\xd9\xd34\xf4\xe8U5=V-5_SJ4\xd5\xb9^4\xd7W/5\xb1\xcbH4\xda\xc7f4\xece\x165Z(,5^S\xa44P2\x045\x90R\x8c4\xa8&\x874\xe3\xd5\x964\x84\x94\xbd4\x92\xe4\xaf41\xdfc4%\xd2\xec4\xbf\x16\x034\xfa\xa9P4\xa0\x10_5\xee\x95M40\xb1:4C\x04\xe44\xcf\xd4\xa93E?b4w\xf7\x814\x90\x0c\x904\xf4\x01\x00\x00~}v4\xf6\x89}4\xc0n\xe14V\xc6\x044\x96\xce\x943\x87R\x884e\xac\x074\x91\xa3\xb24Y\xf0k4\xc1=\x974*\xf1\xc44\xf4\x01\x00\x00\xf3"\xe63\x14]\x1b4V\xe6\xda3\xe9t\xfa4\x02kr4\x01\xa3\x1d4\xfa\x08\x9c5\x9fd\xa94\xf4\x01\x00\x00\xcf\x18R4\xcc}\xab3\xebCC4\xa9\xe3\xf04\xd4\x8a\xa14\x9a\x1e\x1f4\x04\xcb14w\x9e\xb34\x89e34f=t4\x14\xee\xd34\xab#\x054\xfa\xce\xb14\xba\xb3\\4=\t\n5\x87\xca\\4\xee\xe6\x983\xd1\'m4\xa1\x1f\x844\xa0\x86\xcf3\xcdm\x933\xfaf\xde4\x896\xb84a\xf9\xdb3\xe4;K4<\xa2M4QI\xd63%J\t4\r\xf3\xa04S\xdej4R9\x954K\xa8\x8f4\xc9y\xcb2\xd0G\xc82\x92V\xd34\x81x\x843\n\xee\x863VmS44\xa9G2j\xb2G3\xf2.\x8631\xc0\'3\xf4\x01\x00\x00\x89\x10\x143j \xa23\xe5\x1a~4\x86t\x183#W\x8e3\x177[3V\x1c\x9b2\xc8_\xdd3\x18"\xe73\xe6cH3\x0b\xf7\xbd3\xf4\x01\x00\x00\x96]\x123\x14\n\xa52Wd`2\xc7L\x874\x826\x104\xad\xd6\x043\xbe\x11.5\x87\xe4^4\xf4\x01\x00\x00\xb7J\x143r\xd3J2T\xd9\x123nJ\xb84\n\x17U3a\xd5\x143\x98a\xf82\xc7*s4\x18%\xf92\x8a\xf6\x843\xa9\x06\x184\t\x15\x9d2\x08\x08=4\x18\xb783\x81\x97F4\xc5\x00\x063Oe]2z\xc6M3\x81\x00#3\xa2@\x952\x01L\xe426D\x1c4\x14\x06\xa73\x9a\xdbo2\'\x10\xef2v#\xa03\xcc\xe4\xca2<\xd8\xa22g\x96]4y\x95\xec3,\xf2\x9e4u\xe4z3\xb1\xb4\x990\x010\x8c0_~\x972\x80s\xaa1|d\xc21\x9d\x82\xdf1\xa0\x0f\x9e0\xa2\x80\xac1\xc7^q1\x06\x14Y1\xf4\x01\x00\x00\x86\xe6\xf20)\x82a1\ne\x163e|\xae0\x95\xe1m3W\'\x7f1\x91m\x8a0H\x17$1\x0c\xb5z2\xb1\\\xdd1\xcd\xdf\x141\xf4\x01\x00\x00\xb02\x011\xe3\x06d0`x51\xd0\xad\xcf2\xb3X\x063\xacs\xdd0\xc2v!43\xaf\xbc3\xf4\x01\x00\x00y\x8a\x131#x\x190\xf3\x1a\x041\xa1\x01\xf03\x92\xb9\xf00\xd5j\x7f1D\x10\xd60\x19\xea/3\xaf\x93\x011!\xf9\x9f0\x86\xccQ2\x07\xcdS0\xd2U\x133\xf3\xb3\xa30\xd1/"3\xc1a\xcd0\xcc\xfc\x151\xaftR1\xc6\xae)1\xc8\xd6\xd10\xc8>\xb40x\x94l2?\xe2T1I\xb9t0\x97\xb4c1Tcf0\xf1\x0c\xd20\xcf\xecM0\xe9\xe1>3\xda\xd4\xaf1k\xf2\xf23\xbfT\xc50v\xf9(,\xd3~\xa0-\xf0bo/\x89s[-;\xe2\x04.>\x19.,\x82Q0,Z\x03\xbe,Cq\xa5.\x07\xb8|/\xf4\x01\x00\x00\x9f%\x8b-"\x00~,\x19&\xbb/\x93\x9d\xaa,\xa4\x04P1\r!}0\xdc\xa59,B}\xb3/\x1b\xbfF/\xac\x00\x00.\x17/\xdc,\xf4\x01\x00\x00\xa3\xb4\x03/2\x8a3,\xef\x02\xd4,\xcc\xa3\x83-F\x99\xcf/H\xd0\xa8-W\xe1\xe91\x1e`\xee0\xf4\x01\x00\x00\xb7\xe4\xba,T\xd0\xf7+r\x00\x82,\x88k\x830\xa0\xa4\x13,e\x01<,\xe6\xcev,\x03\x0300l\xb0\x1c,\x16\x07\x05,\x86K?-\xdd\t\x1c,RF\xdc.\x9b/\x0e-\xd5\xa7\x170\x89~\x99,K#@.\xd3\xf8&,B\xf9\xc2,!\xcd\xac+@VR/q\xd6\xa1.i\x85\xf1,\xfa\xe3\x1b,\x1d4\x86-\xe1*\xef+F\x86\n,\xb6\x06\xde+2}\xb31\xb7\xaf\x1c-\x1bwg0!\x8a\xae,\x99:i)E\x85\t)\x9f\x07\xb5)?\xf2\x16+\x82\x99\x99)\xf5\xeb\x01,^\xf5\xdb+\xc0\x97v)In\xa7)\xf8\xce\r,\xf4\x01\x00\x00\xd6\x87\x92)\xec$\xfb+\xeb\xadz-h\x9c\x83)\xdc\xd3m+d\x04\x1d,\x18\xfb\xae+!0\x11.%n*)G\xdd\xd9-T\xe8\x90)\xf4\x01\x00\x00\xee\t5)\xce5\xfd,\x05\xafD)u\x1bF)!o\xa9)\xf8\xe5\xda+\x83\xb9\xe4)\x06\xaa\x8b-\xf4\x01\x00\x00q\xbb\xeb-\xb4\x8b\xc7)\xe9|\x13,e\xd0i)\xdb\xc5\xe5-\xb4\x06\x8f+O\xf7\xd7-o_@)\xebS\x87+)#\xc3,\x95\xa3\x9a,\xd9\xa7\x10+\xce\xf7\xbd)\xdbr\xd0-\x98q\xfa-\xbfJ\xd3)L\xbbF-\x18\xe8\x06)\xb8\xf3z+L\xa7\xe5(\xb0r\t)a\'\xe9)(e0*U\xf1\n+\xb4p\xeb+\x91\xdc\xe2()\x95\x83.w\xfa\x18)\xf8\xc9C)\xbc\xd3\xe2+\xa2\xc4\x12)\xed\x19\x10. \x02X.\xe4w\xc60\xbd~\x8e.t&`.\xcfI\x8c0z\xe1$1\x95\xb6\x120k\xa4I.[tp/,\xfa\x910\xf4\x01\x00\x00\x128\xc8.?\x10\x040\xafi8.\xd2\xdcj.\xeb\x89\xbd-\x8d\x0e\x1f/Z\xbev1\xca"D2\x16Z\x01.I\xf4\x162\x80\xf4Q/\xf4\x01\x00\x00\x15\x8d\x0b.\x00\xbcL/\x8e\xd46.X$F/\\:\x000:\xb8\x111\x8a\x1f\xd6.$\xc3\x9e.\xf4\x01\x00\x00&A\xc7.\xea\xf9\xa91d\x1f\x0e1g\xb7P.\x0f.z0\x89K\x1f2k\xfb\xb10I\xac\x00/\xd8(\xdc.R\xc7\xd1/o\x05-/\x90\x9f*2\xd4\x99\x8d/7g\x1f1\xad\xc8\xe80\t>\x94/\x94U"0\r2\x9b.\x8d\xf1\xed.f\x91\xaf-\xf7\xdf\xf2-D\xa2\xca0\xed#32\xc4Y\xa80`\xb1\xc2.q\x9b\xf0-Mn\xaa2z\xfb\x041\tn\x14.-\xe5\xda.\x11\xf0\x0f/\x8c\xeeY1\n\x0c\x1b1\x0f5\x8e2gu\x142\x8e\xa5)3\xd4\x11\xf126\xd9\x193\xea\xc4\xdb1\xbb\xf3\x9c1\xf9\xa7\x8c3\x85\xe9\xee1\xf4\x01\x00\x00|\x05\x892\x19:43\xe1\xbd\x111\x91\x8e$1\x03\x8d\x9b0\xa5\xf9\x941j\xe7\xed3\x90\xe9\x024x\xca\t1\xe4\xb9\xce3q\x10\xd22\xf4\x01\x00\x00:+\xc61\xd78\xf22t|R1v\xad\xe70\xed\x83:2{ya3\xe9\xd1\x831\x1b]\xe91\xf4\x01\x00\x00\xee\xd8h2\xcc\xda\xf63\xbb\xc9\x1f3 \xc0^1\xc9A!3(\xee\x014\xcel{3\xdf 12*\xb9\xc01o1d2XD\xa31\xc5`#4\xed\xd2437E{2\t=\xa53U\xae\x951\xba\x9a\x023\x1e\xfe\x952V\xdd\x042%AN2\x12Q\xa32\x1ci\xb51\xa2\xf9-3\xb4\x02\xe12k7\x821\xdb\xc2\x911\x97\x1a\xda3:"\x842\xb3*-1\t\x16\xcd2\x88\xc4\xc80\xcdV\x1b3\xd5\xbf\x0e3x\x99\x803@\xfa.4m\xbar4\x16"\xff3\xda\xd7\x154\xfe\xd2\xbb3\x94\x18\x8a3\xc8\x0c\x045\x17\x15\x943\xf4\x01\x00\x00\xb0\xe8K4%\xabx4l?\xfe2F\xd2\x0b36j\x842\x12\xdfn3{&\xf246\x90\xac4\xa0f\xf02\x1b\x1a\xf04\xa4\xdf\xae4\xf4\x01\x00\x00\x10\xb5\xf23\x04\xd7\x064\xd2*23\x0e\xee\x0f3D\x92:4\xb3e\x824=L\x893n\x92\xd33\xf4\x01\x00\x00\x93\xf3F4kZ\xbf4\xf8\xe6\x8a4o\xf6\xa73\x0c\xe7\xf53\x1e\xf2\n5\x9ah\x025\x00\x1b\x1a4\xd7qt33,\x0e4&\x8e\x813.\x11\xe44%\xe3\xe84!\xa3\x024\x13\n\xcf4\xae\xe5\xa430\xe4T4i\xb2\xe63\x07\x19\xde3\x93\xa9\x973\xe1\xa1w4\xf7\x89q3\x0b\x1a\x0b4\xc1\xdd*4\xe5Pv3X\xe7\xbb2\x9d\x0cn4\x1d\x8d\xd03\xb4\xedi3\xf4\xbd\x064\xe9\xdf\t3\x8b\xc9z4$ M4E\x9b\x024*n\xd94\x94W\x884\xa2q\x7f4\xa0\xaa~4V\x88%48\xa0\xa64\xac4m5\xd3\xe9\x045\xf4\x01\x00\x00\xc6\xdd\xe44\x80\xb9\xba4\xfa\x0854\x15q`4\xcas\xca3"u\x994\xb8\x8f\x105\x93\xc6\x025\x145\x0f4\xcb!`5\x8f\xf2\x125\xf4\x01\x00\x00\x07#\x8049\x1f\x934G\x19s4\x1c\xcd)4\x11\x8b\xac4G_\t5\x1dH\xc94\x82_\xc04\xf4\x01\x00\x00!\xb7?5\x08H\x9c4\r=\x185[o\x9b4&\x06B4\xaeu"5)\xd0\x9854\x07\xc44\x07\xaa04\xe4\xc7\xa84\xcc\xf0\xbd4G\xc4\xe44\xae$B5oM\x844\xc9:\x8d5\n\xaa\xa04\x8a]S4\xb9%<4\xa7[\x0f5{\xd2\x024\x7f\xee\x9e4\xd3\xc7\x8c4*\xf6\x0e5aY\x9e4%\xb7\x8f4$d\xb13\x01\x88~4\xd9\x9e%4\x8fxB4x\xc4\x9a4\xf4B"4\x19.\xfd4\x0by\xb24"YZ4J\x1e 5\xf0\t\x844\x80\xd0\xd24\xb6\xba\xc54f#\x964=Y\xe54\x13Z\x065\xefHc5\xf4\x01\x00\x00\xa0E\x185)\x1e\xd44\xe9\xeb\xe94Q\xe8\xdf4\x9fK^4U)\xec4\x91\xf1\xe04\xae\xfb\xdd4`6\x884\xcc\xc265\x91\xb9*5\xf4\x01\x00\x00\xe8\xc0\x904\xad\xad\xbd4\xa95\xbc4\x056\x9c4\x17\xd3\x075C\xdc\x135\xc2\xb0M5\xaaX\x1b5\xf4\x01\x00\x00\x9b\x8a75\x0c\x10\x8e4f\xe1\x175\xa6l\xdb4\xe5\x81\xaa4\x90\xc9\x075\xcc\xaf\x025\x8f\xb6\xb64\xcb\'\x8a4\x87k\x9d4\xc2\xf2\r5@E\x9b4\x15|\'5r\xa4\xab4\xfb\xde\x835\xc0\x15\x1e5\x81aN40F\\4\xa4AP54\xc8+4Z\x91g4\x9dl\xfe4\xe5\x9cC5kK\xa14\xc1\x0215A\x97E4\x9c3\x9e4\xf6\xbf\x894\x060\xb44w\xbc\x924t\x02\x844\x91\x9e\xf74\x80\x0e\xab4lS}4Y\xa7\'5\x9b\xa5\x814\xcdD\xc74\xe2D\xc44\x00\x87\x924\x12t\xca4\xf5\x8c\xff4\x12\xbd95\xf4\x01\x00\x00\xae2\x075\x04 \xc84K\xc1\x005}*\xcb4e\x93\\4L\xa6\n5\xfb\xc8\xbf4\xf6\x8e\xc94\xc6\x8f\x904\xdd$p5\xb1\x96\xed4\xf4\x01\x00\x00\x93m\x934nZ\xb84\x01.\xb24\xa0\xee\xb04\x02}\x105d\xf7\xea4y\xfc^5\xe1:\'5\xf4\x01\x00\x00\xf1\xed\xfc4\xb4l\x8e4\xb0\xa2\xda4\r\xe0\xf14\x0b\xdf\xbd4~\xda\xf14\xc3\xd5\x0e5.\x8a\xa94\xdd\xb1\x914\xe8O\x844\xf0_\x005j\x14\xab4v\x92(5\x975\xb74W\xe3m5\xb5S\x025\xb7\xfcN4\xf77\x844\x0bn:5\x81\xd1S4N\x9f}4\xac>(5\xc4\xc8A5\xaa\x82\xab4\x90p\x125\xf0Qm4\xa9\xf6\xa64\xa5\xd8\x8b4\xa1\x9c\x874A\x11\x9e4{\xc5\x7f4Z`\xc44gu\xb64S\xc6G4\x97\xe2:5\xbe\x11\x904.\xb6\xd44\x9f\xe5\xa04\xc2\x9bv4z\x1a\xb44\x98V\x015\xb9\xa2G5\xf4\x01\x00\x00\xf5\x9b\x0e5\x0b\xb1\xc24\x91\xc3\x9f4\x84\x08\xca4\xb8\x8f84\xa8\x03$5gR\xca4\xba\x02\xba4x\x01\x944\x98\xd8E5\xc77\x015\xf4\x01\x00\x00\xcc \xa84\x05\x80\xc14\xd7Z\xc14\x083\xb14Y7\x165-\x8b\x055\x81*R5\x94\x9c85\xf4\x01\x00\x00\x04\x12\x075V\xe6j4\x94J\xe84\xb5\x83\xee4%\x9f\x9e4\x91%\xfa4\xb0\xec%5\xfa\x9d\xc24+\xbc\x8c4"\xcc\x8f4\xcc\x9b\x075\xcei\xce4\x1d\x9415\x120\xab4\x89\x8dW5\xc1\x98?5\xfa\xd6]41\x0fG4\x82\xbcB5\xcc\x93Q4\xd9)\x8f4@\xc615S\x17J5F\xbe\xc14\x05\x00\x1c5\x0f\x80[4\xab\x10\xa34\xd2j\x834\x8er\xc44\xb0\x8b\x984\x13\xdan4\x97B\xc94\x96^\xff4Avz4\x92\xc2*5z\x93\x8d4\x7f\xc5\xdb4\xcc5\xa44\x89\xac\x874\xe6\x19\xab4\xf7\xc8\x115\x11\xb555\xf4\x01\x00\x00\x98\xca\xf44&\x18\xf74Yu\xbf4:\xb6\x035\xed\xecW4`\x1b\x0b5\xd4\xca\xf848[\xb640h\xb44\x9d\x80n59\xb6\xf14\xf4\x01\x00\x00\xd5\xa2\xb94\x8d\xa6\xe74&\xc6\xc842\xc6\x8c4\x11X\x105\x0bP\x005\xa9\xfeI5\x9d}55\xf4\x01\x00\x001m\x075\x80\x82\x8b4N\x1c\x075ym\xe24,\xb2\xb54\\\xc5\xe64\x15\xeb\xfb4\xde\xc3\x9e4G\xa4\xb14s\x17\x7f4#\xbf\x0e5\x8a\xc2\xa64\xf5\xd0)5\xbbA\xb44\x93kL5\x04\xeb\r5\xb5\x0e[4\xe2\xe4e4\x0f~/5\x9d\x8b<4\xc1\xa9\x8b4\x06`\x165T\xbe+5S\r\xac4\xb8b\x1b5\xe8\xd264\x9fS\xa44\x86\x84\x8b4\x90\xde\xa04\x03G\x8f4:\xd5r4\'E\xc74\xfc\x1f\xe04|\xccr4D0*5\xf0\xed\x824\xad\xfc\xfb4\xa0\x9e\xbd4\x11\xbez4\x9cG\xc54\x01\xe7\x125\x82\xbb?5\xf4\x01\x00\x00\xcbV\xf74\xac\xee\x045\xed\xb2\xf54\x14\x18\x055x\xb9P4\xf8\xd2\x115\xdbm\xe14\x8e\xda\xee4%\xc5\x9f4\x907R5\x9b\xc2\xda4\xf4\x01\x00\x00\x0cm\xad4\x1b\xa7\xb24Km\xbc4\x0fT\x824s\xa0\x135\x8f-\x045\xfa\xbfV5N\x9c\'5\xf4\x01\x00\x00i\x19\x085X\x10\xa64\x03\xe8\x145\xd7l\xe94#\xec\xc54\xd6\x16\xfb4\xe6\xf3\xf64I\xaa\xad4W\xdf\xb34\t\xc0\x934|>\x055\xd7\x1f\xb94\xb4\x1b\n5\xd7B\xc74\x902[5omb5\xc3oW4\xf1R\x874_\xc645I\xcaZ4r\rN4:.*5\xe2\xdbB5\xcc`\xd44\xe5)\x185<\xc3Z4\xa9\x0b\xab4\xb3\x18\x884\xb8\x08\x984\xd9\x07\xaf4\xa0/\x814{\xcd\xed4\x8c\x03;4\xae\x10\x8e4\x18m\x885\xf0d\x904\x95f\xe24\x0f\x1c\x025\x13\x08\x164i\xfa\xe24\xb5%\x884u\x12\xee4\xf4\x01\x00\x009\x81\xc44\x1b\xcf\xdc4K\xcd\x974\x1c\x12g4{!\x914%\xbe\xd64)&n4\xa22\xcd4\xdb\xaf\x184\xe5\xb7\xeb4\xe3\x99\x125\xf4\x01\x00\x00\x80j!4\x95"H4SX\x1b4\x9b A4dc\xca4\xa9\x88\xac4l\x83\x885\x87455\xf4\x01\x00\x00+\xf7\xcc4\xce\xa8\x024\x1d\xbd\xaa4\x9cK\x155"\x15\x884\nH\x9b4(\xf8\x854b\xeb\x8a4\\Is4\x89\xd1\x974k\xaf\x8f4\x06k54\x82G\x105C\xdf{4\x96\x19:5g\xc4\xaf4\xb1d\x024m\xba\'4Ht\xe44<Y#4CHD4\tk;5\x11\x86\xd04\xb2\'.4\xab\x08\x974j\xcdm4q\x8a_4\xa3\x06U4\xde\xbe/4C\ns4j\xf5\xb44\x16%\xc54\xf1\xe8\xd42\xb5J:3\xc34&5\x14\x1c\xe431\xb4>4\xe8`k4\xf5\xfe\xf52\xf8+\xb13+\xf7\x9c3\xb2\x04\xb53\xf4\x01\x00\x00\xc8\xf3x3>>/4\x08> 4rL\x133ty\xcf4\xee\x9d\xe23\xc7\x96\x0b3w\xf1\xb13\x03\xd0.3yj\xf23\xca\x11v4\xf4\x01\x00\x00\xfb\x7fD3\xf2[\xe92\xe7\x0f\xd82T\xd2\x9e3?H\x804\x81\xb1\t4\x07\xb9a5\x8c\x04\x115\xf4\x01\x00\x00\xa6T\xbe3\xee\xbb\xa02@\xbe\x963\x15\'\xe64\xd5h`3\x19\xe5\x9e3Z\x81\\3g\x16\x1a4l\xc7I3\x8b\xe4\x8b3\x1c\x12\x9d3u\xe7\xc92!\xf4\xd44\xef\xe5%3\x15\xb8\x804\x93\xfaF3\x0b\x0743\x18\xe1\x0b3\xec\x94\x923_\xda\xc92\xe4\xc8\x9f3Jp\x964\x16:\x903\x9d\x88\xd22\x00\x95>3z\xf6\x0c4\x1ac\x134\x0e\x89\x8e3\x19/+3v\x1a\xee3\xb4\xc2\xa04A5\xbd3\xe8\xc5i0\x05VB0\x02\x16\x173H\x9c\x071s\x93_2-H\xcb1\x97G\x131G\x0f\xc31\x18-\x1d1B\x1f\xbf1\xf4\x01\x00\x00\xfbJ)1\xac\xef\xc61K\x95\x8a2\x99\xf3\xa80qD)4\x1a\xbar2\xedx~0\xb8T\xd50 \xe7\x162\x18[+2\\\xba\t2\xf4\x01\x00\x003\n\xa41\xfd3}0vT\x901\x08\x07Z1\x16\x8d\x8f3\xfb\xfa\xe31RKI4R\xfb84\xf4\x01\x00\x00p\xa0\xb51,\xc2a0G"\xcc1\x0e\x96\xdb3\xdf\xd9\x0c1h}\x192\xffK\n1\x94\x11\xc92[\xb5\xc60,\xa7\xc70\xee\xab\x002\x1e\xebc0\xbc\x87\x193\xc6HE1\xfc.\x123\xdd\xe3\xff0C\x96t18}\x970,p81\xf3\x04\x070\xb0\xab\x1f2\xd8\r\xe82)\x0e\x911B\x1cz0\xa0\x80^1U\x10&0\x1d\x0f\xa12\xb5\xa4\xf50p\\`1\'\xf2,1\x0c\xdcn3\xbb\xef\xaf0e\x82,,\xe9\xc6\xbe+Gc\x7f-\xe8\xb47.!s&0@b\x07,\xc5\x86\x87.C\x8b\x0e.uLU,\xdc\xa3\xe1.\xf4\x01\x00\x00\x13t^-Y\xc9\xc8-\xec\x05\x14.\xbc\x8a\x0c.\xa1\x0e\xc81\xec\x15V-\x8e2#,+k:,\x9a\xa4\xdd/\x0eRD/C\x83\x18.\xf4\x01\x00\x00\xb0\xb8J0\xbc\x02\x9f,\xa2\xe0\x8e0\x89G\x1e,\x8c\xfa71\x0e\x14\x87-\x10q02\xc9{\x061\xf4\x01\x00\x00\x9d\xa8\x98.i\xd8\xd9+\xf0v\x1f0Y\x1e\xa90R\x0f\x1d,"\xe0y,9\xc4Z,\xa8\xab%0\xe5\xd6\x0c,\xd1W\x93/\xca\\\x0e.\xc9*\t,hJ\xd6.\xe0\x02\xba.J\xd8\x081\xbc*J-\x87\xc0\t/N\xa7\xc9+I\xf5\x1b-*\xc0\xa0+jHj0\xe4\x8f\x15/2\x00\x9a,\xffJ\x08,s\x90\xea,\xc0wj-\xfe\xc3\x03/9$k,\xa3V9/\xa6\x19P,\x81\x9a\xfb/D\x03\x92,>\xae\xd3)[\xa1y)\xd9M$*\xa8\xdd\xc7+\x0f\x9c\xdc)i\xb6_,\x8cK\x93,&|%+.\xf6\x17*bj\x9c+\xf4\x01\x00\x00\xc9\x18\t*\x119\xa6,?[\x90,\x14\xe7\xee)\xd9e\x82)o\xe0[*H\x05X,\xecQ*-\x0f\xaf\x9a)\x1d\xe3\xb3-u^\x03*\xf4\x01\x00\x00\xf9O\xa4)\xb3&\xe3+\x17\x83\xb2)\xd6\xcd\xb3)\xad\xc7\x19*\x16^\x82,\xbc\x97O*e_\xbb*\xf4\x01\x00\x00\x9b\xe0\xca,Fig*p\xc6\xf1+\xe3+\xd4)(\xb3\xd2-\xb8\x9d+,\r=\xaf-o\x99\xae)\\7:,b8F-\xff`\x95+\xfba\xfd)s\xd8;*d\xb8\xb3,d\xa2\x1a+I\xc5?*^2[*\x8c\xe2t)\xcd\x10k*}oP){\x7fy)\xc9\t\xb5*\xf4\xfb\xb8*s\xbf\xc1)Z$\x9b,\xf5\xe6M)l\x9e\x86+?\xd8\x8a)1\xb3\xb1)\xd0\xc1\x97,<5\x85)\x85\xac+-*X}/\xc0w\xeb/K\xa5\x8c.\x8d\x96\x810\xdb\x02\xa0/\xbc\x80\x131\xc0\xed\xf5.\xd3\x98\x050\r\x88\xec/]\xc2\x8c0\xf4\x01\x00\x00[\xe6r0\x87{\x130\xe6lH.(\xd1,/&\x08-.\x93\xae\x82/\x04\r\x9c0\x9eT[1\xebo;.\xef3\x8e2\x9cM\xd2.\xf4\x01\x00\x00\xa3)\x0e.\xf6\xb7\xdb/\x98\x1bR0\x9c\x96d.\xe7\xe6Z/\x8bq\xc80\xe3\x9a\xd7./\xb5 0\xf4\x01\x00\x00\xa1\x9e\xe6/\xad\x82\x9b/]?\xa70\x94\xc47.\xcf\xa9\xe5/\xcc\xa1\xf61\xa3>F2WA"./\xd12.\xa8\xd9\xef/?\xa0\xf3.I^\x1b1\xcaP\x1a0K\x9a\xb3.-{u0<\x1c\xfb.\xe8\x87\n1\xe8!\xda.\xfb\x9b^0\x9e\x8f0.^\xe7\xfd-?\xb4\xd80\x1aqC2\x1b\xb9\xa6/\x8c\xc3\x08/lW\xe8-\xeee\x912*X\xea-\xd2\xb1N/M\x11$.?\xfa\x13/y3 16\xd7\x981\x91\xdc\x9c1O\xc3\n3e\xa5\x1331hx2\xe2\xf7$3\xa3$!1\x80\xd5B3{F\xc53\xa3\xa8#2\xf4\x01\x00\x00op\x803\xafA(2\x83\x17!1\xca\x16V1\x96\x10\xbe0\xac\xae_2\x188W2S\x8a\xd53\xb1p\x1223m\x8b448\xa83\xf4\x01\x00\x00\xe9\x1a-3\xe5]\\1*.\xaa1mQ\x041\xc1r\xd82?(:3"\xb2\xb71S\xcf\x153\xf4\x01\x00\x00g\xa1j3\xd6^~3$\xf6\x913\x9d[\xbd1\xf7h/38<\xe33\x08v\x9e44\x1b\xc92\xd6\xc3!1\xb6n\xd42\x8a\x96\xe21\xd4m\x953\xc8\xe3-4\xb1k\x9e1:J\x9e3\x8f\x91\xda1\x02!)3\\\xbe\x1b1hI\x1b2\xc6\xd9U2\xbf\xe7U3\xcb\xd8\x062\xbb\x03\x853\x91\x9e`2\x05\x8ft1r\xc5\xca1\x8c3D4\xaa\xe3\x8c2!\x1a\xea1\x9b\x82_2\xacx:2e\x97<3P\\^3$\x05.3\x13\xf9\xf74?\x9d\x0c4\xd8\x8b\xf83\x0f\'\xf739G%3\xa2\\\xce4\x14+\x055\xbe\\X4\xf4\x01\x00\x00\x92e\xa14\xf0h\xc93\xa3A23\xd0\x1bP3\x14\xb1\xd82\xddD\xaa3%\x15\xd63\'\xa1#4|O~3\x1a(A5\x86\x0c\x1f5\xf4\x01\x00\x00\xdf\x92Q4\xfc(e3W\x97\x9f3\xfb,\x173\xe6Jt4l\xdc\xa14\x91F\xbc3\xf3\xe2}4\xf4\x01\x00\x00\x93\x98#5\xcc1:4S\xe3\xe54\x84^\x084=F\xf33\xe2+\x165F7\xa55\x91\xbd\x884\xa8]!3&b\x0b4\xdbt\xb03\xce^N4H\xa1T5\xd8(\xad3e\xae\n5\xf2\x0b\xa43\x06\x12>4Sy\x133\xe4\xb2\x8e4\xb4l\x893#\xd4\xb14&"04$p\xb04\x87L\xc83C\xe3\x8b3u6E3J\x15\xc54\xb8\'v3\xd8\xd3\x9d3<]\xfe35\t\x9e3,\xe3o4\xbco\x834\x8f\x83\x154\xd6\xb4\x1e5\xbe\xf0\x164\xf2\x8c\xa74`i\x8c4\x90\x96$49?\r5\x1cj]5\xa1\xaer5\xf4\x01\x00\x00\xc3\x94\t5\xb1\xaa\x844\x05:\x804&\xed\x914\x0cx\r4{\xf8\xae4fK\x814\xba\xe0\x9f4>\x9f|4<\x99V5\xa2\x9a85\xf4\x01\x00\x00\xac\xc2\xa64\xe9\xc0\x834I#\x974\xb5\xfaJ4vw\xc14R\x1e\x105\xb9z#5Z\x91\x0b5\xf4\x01\x00\x00]{Z5{@U4\xee\xa4+5\x0e\xd0\xc44\xae\xf0`4\x05\x86 5@\'?5\xc0\xdd\xe24\xe5\xbeP4]\x0fj4\xbe\x84\xe84j\xe2\x994\xde\xd8W5\xf7\xfbz4\xae\xa6\x9a5\x82\\\xe64t(M44\xb6!4\xd6\x9fD5\xf3\xde\xf33|V\x9e4\x0b\x8c\x0f5\xe6\xcb-5\t\xd5\x914i\xd5\xc44ps\xe63uI\xd04\x1c\x0144x\xc7[4\xf0@b4\x8asF4\x17.\xc74\xddY\xb84M\x11c4\xc7A&5\xc0i]4\x0c\xcf\xf34\xcf\xe0\x9e4o\xb1\x854\xa8c\xd64\xa5\xd1\xfd4\xe0\x8bj5\xf4\x01\x00\x00\x1d\x19\x175\x91\n\xce4\x880\xd54\xd6\x88\xcb48lD4n\x91\x1b5?\x03\xb44\xb5\xec\xb04{\r\xaf4\\\xaaY5x\xb7\xef4\xf4\x01\x00\x00\x83\r\x9a4dV\xb64I5\xda4\xa7\x94\x8b4\xb4\xfb\'5xb\r5\xcfb\\5w\x7fQ5\xf4\x01\x00\x00Nr\x0c5\xeb\xce\x974\xff\xe2\xe34\x82\xcb\xe04\xbb\xcd\x934\xadX\xbf4\xbc\xdb\r5\xc2\x02\xa14\xc1A\xae4\xad\xf3\x8c4\x10\x1a\x1a5\xa8\xe3\x9f4\x83q\x0e5n\xc0\xb84\xd04\x835\xf5\'\x105\xdb\xf4M4L\x82R4\x83\x03s5;Q64\xba\xbd)4B\x1dT5mMa5\xea\xea\xa642@"5\x8d\x08?4\xb3\x1c\x9d4/\x13}4y\xbds4\xc9\x17\x9e4\xd7\xa2d4\xd6\xa0\xb54\xec\xf5\xf94\x82\xb3%4\xe3\xc0O5\xda2L4\x0c7\xed4c#\x954E\xefH4j\x89\x894\xfd\xcc\xf74\x9e+\x155\xf4\x01\x00\x00j\xd7\x1e5T\x0c\xad4\xc0\x88\x8c4\xe5\x96\x185}"e4\xa7?&5CD\x9140i\xae4\x0bH\xa04\x94\xe685P\x9d\xab4\xf4\x01\x00\x00{\xb7\x9f4\x1b\xed\xd24\xf8\xe9\xd34\xdcr\x195\xedG=55|\xdf4\x19;y5\x86\xd1*5\xf4\x01\x00\x00\x1au\xc94+\x1dd4\xb1\xaa\xd04K975:\xcf\xe64\xa6\'\xdb4\xdb\xff\xda4\xfeP\xa64B\x02\x884\xb3\x9ab4\xa7+\n5P\xa5\xee4\xfe\x98\x005<Y\x974M\x8eZ5xT?5\xc4\xfe\x1e4\xb5\xafV4\x9c\xfb*5\\\x0cV4\x14-\x154X2\x135\x94\x8c\n5%\xee\xf24\x86i\xea4-D64]\xe4\xc84\xd5\xcaN4k\x0c\xfd45q_4tk\x8f4z;\xa44\x7f\x8a\xc64\xad1y4\x12<?5\xddtc4\t\x1a\xc84\x8f\x93\x8a4;\xabG4=\x9d\x8d4\xc6\x1d\xfb4\xbf^\x1b5\xf4\x01\x00\x00\x93\x12\xf54%\xaa\xb14>o\xea4\xb0y\xb04\xdf\xbe\x814o\t\xdf4\xd9\xcc\xdd4g\xbe\xb64kwf4\x14\xbcD5\xea\x8b\xb24\xf4\x01\x00\x00\'\xa4x4u\x7f\r5\xbe6\xb34\xf0\x9a\xcb48\xb0\n5\xa9\xde\xcf4\x02\xe5:5\x87V\xee4\xf4\x01\x00\x00C|\xbe4\x1b\x8fL4,`\xd64\x05g\xc04\x19b\x185\xa4\x8d\xdf4ox\xef4\xec\xc4\x804\x93\xb4\x9a4}\xf1b4\xa0\x98\xd34\x9f\xd7\x005\x9f\xdc\xed4\n\xe6\xd14x\xfb45s=\x8f5\xbem>4(\x0eA4 YJ5\x15f545i54K\x85\xde4\x96_\x0e5\x177\xaa4\xfba\x9854\x8b44\xd9\xbf\xc14\x85\x1bY4\xb8\xde\xe74.[W4\xaa\x7f\x8d4\x8eT\x964"X\xb84\xda!G4\x18h\x1a5\xf3\xbd\x814\x0c\xad\xd04c\x95\xb44,u\x884\xc8\xdf\xaf4\xd0\xdb\xf74\x05Ux5\xf4\x01\x00\x00\xfe\x1d\xf64J\\\x065\xb3\x92\r5\xe3@\xdc4\xban.4U\xdb\x1d5\x87!\xe44\x95\xb3\xf24\x0eH\x954l\xf2\x9c5\x16-\xe94\xf4\x01\x00\x00X\xb3\xa24\xc9\xcd\xe24\xac\x9b\xc14\xd4\xaa\x9b4\xee$\x005ty\x105#325\x15L\x065\xf4\x01\x00\x007\xa0\x145-4\x9a4n\x88\x1a5F\x0e\xc24\x08\xcd\xf64\x12\xb2\x005\\y\t5\x8f\xab\x8e4\xd9E\xa74l6c4\xb59\x155g\x8e\xa94\xd9\x7f\xfb4\xc5\xb9\x005#\xaeg5\xbc\xd3\xf64\xa8\xbc64o\xf5\x874\x06\xd4\x895\xef\xa3;4\x04\x7fb4W\t\x165\xff\x08c5\x1e_\x9e4>\xca\x155\x88\xdd+4\xc6/\xaf4\xba\xf7\x844\xba\xd8\x8d4\xf7c\x9e4\x04\x03O4\xa2\xe9\xc24\xfb\xee\xbe4\x9a>V4\xde\xa9\x105\x0b\x9dt4\xa8z\n5\x86\xf0\xeb4\xcbsm4<\xac\xd94\xfa<\xff4\xe2\xfe85\xf4\x01\x00\x00`\xcd\x125\xf86\xe74\x06\xd4\xcf4\xdcW\xd94/\x8c34\xae\xdf\x165\xd0\xa2\xb74\xe9]\xdd4TU\x924u":5\xd6-\xb64\xf4\x01\x00\x00Dx\x924\x94\x1b\xc54`\xe4\xa64\xa4\xba\x9b4`\xbb\x185\xd9\xdf\x065(\xddS5\x12\x9cP5\xf4\x01\x00\x00{K\x115\xb3\xf2\x944e\xbe\x065/\xf5\xb14\x98\xf7\xac4\xe2`\xe94\x15\x00 5u\xb1\xa44I\xd4\xac4\xa7Y\x9d4\xccK\x175O\x1f\xb34\xa7%35-\xf5\x9d4\x8a\xd5_5\x83\x08F5)\xe264\xa3\xc8c4\xec\xe9F5\xa1\x14e4g\x85n4\x8f\x1045|\x0805\xe1G\xb04eu\x155`(<4y\x00\xa64\xd3n\x804\xbd0\x9b4}\xe6\xb0477N4\xaeR\xea4d|\x0b4\xcb\xfb\x954\nv\x835\xda\xfa\x814\xda\xdb\xc84?\xf2\xba4\xb2`\xfc3\xd7\xaf\x045\x16\\t4\xaab\xc54\xf4\x01\x00\x00Q7\x155\x80\xbb\x954\'\xed>4A\x17+4\x13ez4\xc5\xdd\xbb4\xef\x9eC4\xde\x98^4\t\xc9\xfd3\xc5\xfd\xe74\x8c\xbd45\xf4\x01\x00\x00\xafx14\x8e\xaa\x1546\x97X46\x87\t4\x86\x12\xfc4\x9a\xf7\xc14g\xf2^5Th85\xf4\x01\x00\x00\xbb1\xf34\x02\xed\x1a4\x8f\xa2\x9f4?VU4\xfb\xdf\x134\xd9"\x844\xddG\xa84\xb7D#4h9O4\xb2\xc2\x964B\x04v4\x98\x04\x054\xe3 @5/;"4\xdb\xd5\x035\x03\xe5\x874u\xbd\xeb3\x16\xf2\xcd3\xae\x07\xbf4\xe2\x9b\x174\x8b2\x844\xe1\xdd\'50T\xa24\xb6\x90\x034.9r47\x9dy4jg\xa64[\xf6F4\xff2\x1a4\x14\x15W4\xfe\xa1\r4P\x82\xa44Um\x9f2\xaavT3=~K5\xc40\xc13\xaf\x89\xe63\x95\xb2\xd13\xbd\x01\xde2+\x83\xc33\xf0\xd2S3\x01eL3\xf4\x01\x00\x00\x92R\x044\x93;\x913\x81\xb7\xea2\xbft\xb92\xe1\x94g4\x86}Q3\xe5Q\xc52(\x9b;3\xd5\'\x063\xce\x1b\xfb3@\xa9\xd14\xf4\x01\x00\x00\xa07\x9b3\x8cH\xb22\x88\xd2^3{P\xe22\xf8\xf8J47e54)\x0f\xf94\x11\xc9\x9d4\xf4\x01\x00\x00B\xdb\x0b4\x15\xc5\xa02\x0e\x0e|3\'?\xab3n\xea\x9c2\xf2X\x853\xb6\xf2F3S\xf5\x043\xb8\xe8\t3\xfe\x1f\x823\x89\x11/3X\t\x882\xbb\xc9\x804U\xc9\xc52o\xfa\xe23\xec\x00\x153\xabc\xba2\x0e\x8cp2\xd0\x89.3\xb7\xb5\xe22\xbf<E4\x01\xe2-4\x97]x3\xe5}\x932\xf9\x90\x013\xe9\xed\xba3\xfc\x1e64\x17?\x9e3\x98\x02\x0e3\x11\x04\x143y\xdc\'3\xc4\xb1\x143\x18\xf5\xb6/8\xed\'1X?\xa43\xd9\x92\x021\xef\xd6\xd10\x16\x04\x161M\x95\xa72\xc1\x94\x12112q1^\x98\xad1\xf4\x01\x00\x00h\xb4\xdc1\x0c\xa9T1u=\xba0S\x9b\x180\xf6`\xa13\xf6\xac11\x16\x97\x980\xb9@/1\x05\xcd\x7f1\xd5Y@2\xe6\x8eF3\xf4\x01\x00\x003z\xd11\xfa[\xaa/\x82\xf0\x1a2\xc2\x89\xc0/\xa1\x17\x013t"\xd11O\xd6\xe83@\xab<3\xf4\x01\x00\x00\xaf\xaa52\xf9\xee\x91/<%W0\xa7\xd7\x033\x95\x10\x86/\xcfm41\x0f\xff00\xea9\xeb1W\xcb\xf20\xe5*\xca0\xf7I=0\xf5\xfe\xa7/,\x96X2\xd6,\\0u\xf4?2\xdd\xdew0\xbb\x10\x162\'\x96\xb3/\xb7RN0A\x0c\r1\x92\xb5\x033\x95i\x052(\xa5\x151\xcap,0>)$0\x9e\x1f\x9e1\x80\xb1*2\xb9\x8c\x880\xd71012\x8560\xb1|12\xb6\xc1Z0\xb1\x03\x99+\x9d;\x93._) -=a\xe7/\x17\xdd&.\xcbk\xa3-\xebg\x8a0\x81\x03\xd0+\xac\xe1?+\x84f\xee0\xf4\x01\x00\x00B\xb5I/\x9f\x07\xe3*\xc4*\xe0+\xc7eX.\xe2\xf3\xa00\'\xeaX,\xde7\xe6*\x8f\x83\xc4*>\x0c\xad/&\xd1(.i\xed\x13/\xf4\x01\x00\x00*\x0eU/\\\x92\xe7*\xb64\xa30\xdcO%+o\x1a\xac/k\x10\xc6/\xc6J\x182\x08`\xce.\xf4\x01\x00\x00q\x06\xad0\xfdAt.o\x7f++o\xf7\x9c.\x05\xfc\xb1*poY+5HX+\x7fR\xe7.\\\xa8\xcb*\xf7\xae\xa1,1\xdd$+\x80\x7f\xc1*\xf3z/,\xee.\xa1+\xe1\xea\xb8/\x05\xe5\r.\xffl\x850\xdf\xc5\x85*\xf4\x91\x88-\x08$\x16,\x1c\xba\xce0y\x8f\x050\xd5\x8a\x94,<\xca\xbf*{\x98f.\xc6\xd3\xe0-\xb6\x03m/\x8f\x97*/\x01\x04&/\xac\xe5\xa3*k.\x91*\x93\xce\xec*\x82_S(\x8eD\xf9\'\xe8\xc0\xb0(\x9f\xa9\x01(\xdf\xa3\xbf(CwN(\xe3q\n( \xc1\x1c-\xc2\xfb\t.\x92\x8b\xfc(\xf4\x01\x00\x00m\x02\xaa)\x83\x03e(\x98\xd4](V\x8en(\x98\xbf\xe0\'\'4\xc6(\x04;h(\xdc\x19G)\x9au\x1a(#e\x05/\xd0(\x83(\xf4\x01\x00\x00\xe9\x12$(\x0bP\xb5(\xb2@2(\xfd\x8a3(\xd1A\x9c(\xde\x03\xea)\x90J\xcf(\x9e\xfd\xb3(\xf4\x01\x00\x00\xb1to)\xd9H\x1b(F{\x1f-\xe8\xdcS(c\xaa\xa7.8\xdd\xbc,;\xf2.+A\x04j(\xb0\x08D(\xcbY\x0b(w,\xce(\x1b\xf3G(\xdfT\x16.\xab\x07\')ku\xef(o\xec\xbf(,_\xe2\'\x8e\x87\xf4\'h\xb9\xea(\x0c"\xd0\'\x9a"\xf9\'\xc7\x8c~,\x8c\x88\xda(\xb3\x9eA(\xf0\x9c\xad( \x80\xd0\'\xfd\x93\x82,\x9b\xa4\n(\x08\xd36(@\x17%(o\x0c\x05(O?P)P\x82\x19.\xe4\x11\xc7.\x1a\x9f\x8c-\xca\x9d\xbb-\xa7s\xc8/J&"1\x96\xf3h-\xbe\xfa\xb11\xcc\xcfN0\xed\x8b`0\xf4\x01\x00\x00\x93\x1e91Z\xb4\xea-\x82@A.\x02\xf47/\xe5\xd8\xdf/Y\x90H/\xd1j\xdc-\t\x94`1\xc6hP-~\xa0\xf72\xe7\xc2\x90-\xf4\x01\x00\x00\xc91\xa2.\xf6\x1b\xa4.v\xbb11\xf0\xf8\xd9-\x82\xb4\xc4-\x08SE1\x98J\xa2-;\xf0\x0b2\xf4\x01\x00\x00\xd9\xc4\xe30\xb3\x19\xe30\xaf\xa2\xaf1:i!-$\xc5\xcd0\x8c\xcc\xeb1\xa7\xcf\xe02\xf2\x7f\x1d0\xce\xe5b-\xef*\xa50\x07?\x87.\xb7\xfa\x06/\xc9T\xa61TYS-\xff\x07\x0e0\xf1\x96\x92-\xb1\xba\xae.\x95\xb0\xbc,^\xfb\xbc/1\x06k.\xa5Yh0\xff\x80\xe10\x8d\x04\x862y,\xd9/Y\xd3<.\x7fA0/p.\x043\x05;\xd3,\xa1\xab\xa7/\xad\xc2.-<\x849/~+\x940i\x99p1Z\x80W1\xcb\xabF4\xa7\xe1\x862\x168&3\x99=C3\x9cv[1@\xb9}4\x95\x7f\xb23\'\xdad2\xf4\x01\x00\x00\x1b\x08\x054\x8a*\xbc2\'\x88K1Zrs1\xcb\xcb\x041m\xe6k2UW\xaf1\xfe#\xfa2\x04\xcb\x162\xbe\xb0\xc34\x9b\xa6|4\xf4\x01\x00\x00E\xadL3\xa0\xaej1Zb\x952\xa7\xb8-1\x12Q\xe02{&\r4O6\xe41Q%\xb03\xf4\x01\x00\x00D\xdd\xe63\xbc7\xcc2\xf5\x8c\x0e4\x88\xa7\x0f3\xc7\x12\x113\xef\x00\xcb3\xb4\xab\x115\xbb@\x883\xcf\xe9\x0b1\xd5\xf6T2\xa7\x97\xdb1\xcd\xd7\xe02\xe9N\x824\x1d\xbfZ1+\xecF3\tM{1\x8b\xfe\x8f2Iy\t1<\xd3\x072\xca\xa5U2vV\xa13\xaf\x82\xa93\xd8\xd7\xf93\xd4ZB2\xaf\x91\x8f1d~\xd82*]\xab4W\x87\x932\xeeQ\x002\x13L\x9916-\x801\x1c\x02z2\xc4\xcc\x9f3\x95\xad^3\x18\x9c[5\x98\xb9v3\xbf\xa1Z4\xb1W\xaa3\xea\xb1[3\x16+#5Xb\xde4\x07\x9b\xa54\xf4\x01\x00\x00:\x03\xcc4\x7f\x1d\xa23\xe4tp3\x04\xbb\x833k\x81a3\xaa\xef\xf53\x89?\xc93\xe1\xc7\xe93\x13\x01\xf23\xec\x90\\5=\x9bM5\xf4\x01\x00\x00^\xce\x964.\xfe\x803I&\xcc3p\x87V3\xf3#\x9a4\xa1\xf8\xb94\xe1$>4\xc7\xab\xf84\xf4\x01\x00\x00\xc5\xca25\x98\xd4\xb63~G\xc94\xc0\xcd\x034\xd2\xfc\xf43\xfc\xd0\x994\xd1\xb0\xb05Fs\x8e4\xe6\xcbZ3s\xb3\x8e3\xb6T\x084\x18\xb5\xcd3ZN\x965\xe6y\xb73\xf2\xcc\xa04>\xa6\xc73\x9c\xdb\xfa3\xfc\xa413\xdd\x90\x944\t\xf9\x943>e\xb849\xcf\xd24\x03\xdc\x045E_\xb53\x12\x19\xbf3e\x13\xdb31\xfb\xf24\xea\xc9a325\xac3\xa2\x94\x8c3\x08&\xa33\x00\\\xb63\x1dd\x974\xd36$4\xd6|E5\x9b\xfbF4\xa5\x97\xd94\x81\xf5\x874\xd1cO4\xad@\x075\xe7\xcdA5\xaa]\x8d5\xf4\x01\x00\x00\xe9\x97\x125\xeb\x8d\x964\xb4w\x954\xcc\xe2\xab4\xfd\xbf#4\xe3\xa9\xb74\xect\x9e4\xbf\xf5\x854\x19\xac\xac4\x06\xa5\x905\xd2\xfe.5\xf4\x01\x00\x00$\x13\xc34~\xd8\x894\xeb\xed\xb84\x9e a4\x0e\x1345\xde\x95\x185\r\xf2&5\x81MG5\xf4\x01\x00\x00\xac#V5\xba\x07b4\x007\x075\'\x92\xbb4\x08\xe7\xa04\xbb\xd3\xb64 \x8b"5`h\xc24\xc61\x7f4\x10\xc2j4ND\x045\xc9\xda\xa04!\xf8p5T\xe8\x8c4A\xa4c5\x8f\xd6\x005\xf6\xbf\x114\xc9W%4k\x05$5\x9d\xcf-4\x11\xba\xa24\x07\xd6t5\x8d8R5\xbfX\x9b4\xe6\xf5\xeb4\x80\x86>4\xd42\xb64\xc87I4<\xfas4\x1c\x8eY4\x86\xd0_41\xff\x984\x0e\x08\xbe4\xe7WT4\xf2.\x155\xa7\xe6\x874XN\x025\xcci\x9d4\x16\x9dm4\x13/\x9b4\xea\xfbH5\xc2\x03\\5\xf4\x01\x00\x00Y\x97\x195\x90\xf3\xc24\x9a\xa2\xb24Q\xcc\xcb4\x1d\x03v4+G\\5\xca\x1f\xc44\x9c:\xa24\xec2\xc74\xfe\xc6L5\xf6O\xa54\xf4\x01\x00\x00\x19r\xaf4\x13\x04\xc84\xfd\x0e\x055\x15\x8b\xb14M\x18@5Pl\x145\xaahI5\x8b\xb3f5\xf4\x01\x00\x00\xa0\xa8\x185\xc5\x9b\x8d4\x11\x04\xe14\x03\x0f%5\xc1\xa9\xcd4\xb11\xb94\x1b\x03\xf64<\x0e\xd94\xf2\x1e\xa64`Vt4\xdb\xc595\xeaX\xfa4\x1a\xb3\x085U\x98\xa447\x18v5\xb5H\x195\xe8\x1e64<\xa3W4\xfb\x08\x865\xb5\x95H4\xa1\x0f\x194\t\x8f\x195\x1f\xe4a5\xad\x1e\xeb4\xb0\x89\x115\xb4M[4\xef\xae\xb04f\xffG472\xc74J\xa7\x944\xef\x8e\x914\xf2b\xac4\x1b\x84\xbb4\x01\x97>4\xa3\xf9\x1e5\xa4X_4y-\x9146\\\xd24\xb3nC4\x13\xab\xa04\xc1-658W%5\xf4\x01\x00\x005\xfb\x005 \x92\x9a4\xa4\xe4\xac4R\x18\x145\xb5_{4B3\x045\x88\xca\xab4`O\x025J~\x9a4-\x1e75\xab\xf0\xc54\xf4\x01\x00\x00:xL4\xdc \x115\xb0\xf8\xcc4\xfcm\x035s\x16\xe04\x8f<\xc64\xa6x\x815(\xf8\x125\xf4\x01\x00\x00\x89\x1d\xfb4\xea\x8aV4\xe3\x8d\xd84\xe7l"5\xe5\xe6\x1b5\x87\x06\x984\xf4}\xe54\'\xfb\xb74\xf6c|4\x8dTY4\xb4%$5gj\x1c5\x8e\xab\n5\xf8\x17\xd14S\xe8\x875d\x8e\x1f5\x90C\x164\xd5]D4\xae\x83N5n9L4\xde"L4\t,\xe64\x90@&5\xb5\x02\x025\xb4\xaa#5\xcdZO4H\xb9\x994\x15vS4\xc6\xf9\xff4\x90\xd1Y4\x9aD\xc54\xbb-\x8e4c:\xaf4\xc5\\T4\x1b\x1e\x125=\x87B4QJ\xab4Y\x95\xf54\x8f9j4\x90\x93\xe34vo\x005\x03\xaeE5\xf4\x01\x00\x000C\x075\xcdv\xa84t\x9f\xfb4\x1eF\xd64\x8b\x86-4\x0c(\x115B \xcc4\x8e:\n5k\x9a\x954\xafpj5\x9b\xe2\x0f5\xf4\x01\x00\x00\x9cx\x8d45\xb0\xed4\x19f\xba4\x99;\xb34@\xcf\x115\x8a\x8e\xe34\x99;^5\x00\xd0%5\xf4\x01\x00\x00\xff\x06\x125\xf2\xd3}4\xd9s\x0b5\xf9\x15\xdd4\xe2\xda\xdd4\xb8Q\xb54\x9d_\x195hm\x9a4V\xe1\xa04Q]\x8d4mm\x035=o\xb54*\x15555\xa3\xff4\x12\x80v5\x12\x11\\5\xa4\xf9L4\xd2\xe9k4\x1d\x8fV5u\xd6<4)\x13g4\x98\xeb\x085\xe7\xbcB5\x83+\xb14\x814d5$\xf0%4\xc6M\x8d4\xc3\xcd\x844\xe1Y\x8b4\x98mz4t;\x914\xf1\xf2\xb34\x11\xb1\xd04\x8f\\\x834\xd8\xbfG5\xe1\xb2t4\x9fz\xc84\x96 \xe74\x8a?G4\x8cg\xc24\xabO\xf040\x87\\5\xf4\x01\x00\x00\xd0\xe8\x0b5s\xfd\xce4/\xdf\xc343P\xe64\x1f\rP4\xfd\x17)5\xb3\xe3\xa94\x10\xd5\xcb4p\xe3\xa04\x06H~5CN&5\xf4\x01\x00\x00$\xa3\x924\xaf\x8d\xbd4`Q\xaa4\xf5\xfd\xc24\xd0S\x0c5\x1b\x1d\xd24n7a5\x1b\'45\xf4\x01\x00\x00dK\x1e5\xbc.c4!\x8b\xe64(\xe9\xe44|/\xb04\x08\x17\xb64\xcb\xf3\x025\tX\xc54\xc75\x9a4!\xbf\x984}\xf2\x0e5\x06F\xaf4P:\x145%\xb7\xac4\x98\xe0z5Y\xc4)5\xf6\xe1U4\xe0\x1fW4\xf6#V5\xa0k.4\x9ecQ44:\x1d5)Dc5\xe9\xfe\x854\xa3\xbd\x005\x1e\x9984\xb5\xf6\x994\xdf\xfc\x874\xb42\xc84\xe7T\x9c4\xa8\xbec4b\x03\xcc4\xfc\xcc\xa14\x1b\x88k4\x1b\xaa\x0b5qS\x8a49\xe4\xf547s\xd24@7L4\xa69\xf04k\xd1\xe64\xf0\xbf95\xf4\x01\x00\x00h\xe0\x1351S\xc14\xb4)\xb34EG\xc24\xb8,,4S\xaa\x125A\xf6\xb44\xc86\x9d4k:h4\x1d\x10N5\x8ct\xb54\xf4\x01\x00\x00\xf97\x8a4\x99\xc8\xc74\xec\x99\xd14O\xe1\xa74e\xe8 5\xa3\xb6\x065%RK5\x1e\xe9I5\xf4\x01\x00\x00\x0b\xd1\x145Q\xf8\x8c4\xc4\xef\x045\x14e\xba4\x85\r\xc94\xd3\x9f\xda4D\xad85\xe3;\x8c4\x0f>\xa94\xb1=\xa84\x006\x005*\xda\xb04\xc7\x8cZ5\xe8\xbe\xac4\xe8\xd6A5Y~95\xd8\xb3M4\xfc\xc6<4q\xe415\xef=h4\xa3ac4\x97\xd0K5]K%56\xd1\x904r<\x195{\x08~4\xef\x17\xb64\xf1J\x864L}\xa14\xefE\x964g\xc1K4c\x01\xc84\xec\xf924\xc0\xafb4\x80\x1d\x9a5\x8c074\xcfE\x824$(R4wD\xad3?l\xce4\x8c\x85\xab4\xc2\xde\x864\xf4\x01\x00\x00\xb6mV5z\x15)4\x0f\xe1\xd53\x07\xf3\x1b4\r8\xa73\x81OJ4\xc7\xc1\x044\xf8\xda\r4\t\xfb\xfd3FA\xff4\xf4\xd4Y5\xf4\x01\x00\x00\x87\x19\xbe4\n\xe2\xe63\x84\x99\xc74\xc3#\xc43\xeb\xdd\xc74g!\x994l\x9d\xf74\x83\xde\xda4\xf4\x01\x00\x00\xc1P\xe04\xeaP\x084\xf9\x11{4\xf2\xcd\xdc3\x84C)4;\xd6Q4\xfb\x0b\xc94l\xc4\n45\xba\x134\x9b\x88\x814\xa1U:4\x917<4g\xb5>5\x1c\xe1\x004?\n\xa54O\xec<4H*\x883\x88\xa3\x853r\xe8g4\xae&\n4\x1f\x8e\xaa4\xcb8\xd14\xf7\x12\xc84S<\xf23\xe0\xb3,4\x0b{e4W\x88\xa244\x0cP4\xd6*\xe03\x92\xe2\x014h1\x9d3\xa2\x00\r4\xff-\xed21U\xf82\xcd\xfas5Ayr3\x80U\x8b3\x96\x06\xe42\x1b\x08\xa33\xe1w\xaa3\x9e\x9c\xb73\x17s+3\xf4\x01\x00\x00)\xb5\xaf4\xa7\xbe\x0e3\xee\x05\x862\xad\xc2\xaf25F\xd42\x9d763\xab\xa9)3 \xa7\xdd2\x91\x80I3\xa99\x174\x0eN25\xf4\x01\x00\x00j\xe7\x8a4{.\xa12d\xfb\x0c4\xca\n\x962;\xad\x8f3\xdd\xcc\xd93\\]^4\xa9\xcf\xb13\xf4\x01\x00\x00\x00\xe7\x044\x88\rf2>\xaeE3\xb4\x1a\xa72\x84i\xb12\xc7\xec^3\x03\xa6\xae3L\x89\xc62\x13K\x133[\xb4D3Gq\x0b3\x05\x0e\x073\xe4-=4\xf9\x9b\xd72\xecLt3Q\xa8\xf12K\tE3\xd6\xc3\x8a2\x90\x01\x0f3\x81\xdb(3r\xb4\xc14\xc2c\xa23I\xde\xfe3\x81\x00\xc82k(\xd821\xacY3\xec\xf6\x134\xfb/w3t\xcc\x8e3\x87\x8d\x902=\xbe\xb12\xa4\xe8\x033\r>\xa5/]\xa3\x8a1\x83}\xee3\xb4\xec@2\x1cP\xd60\x97N\x000^\x13<3\xa8w91\x8dG\xeb1\xd0b\xc10\xf4\x01\x00\x00\xb7\xdcg2\xe4\xbc\x9b1\x10?\x040#\xdc\x900\xacFY2\xe9%\xb30\x11\x87\xc21F\xd1\xb2/\x0b\xf9K1\xfa\x1d\xf221*\xa33\xf4\x01\x00\x00\xe1\x8b\xbe2(\x19\xc0/\xd1}{2\xefX\xb3/\x7fa\x862\xaa\xb2\x022\xe42F3<\x84j2\xf4\x01\x00\x00\x883\x8711\xc6\xd8/i)N0\xd6\x8f\x902\xf8\x82\x970\x93+&2\xd6\xf9D1\xea\xd3q1\xbe\\\x061\x12\xd280\xb7-\x150\xd9\xee\xaf0MhK2\x93\xbb\xa6/\xf3\xa9\xc107^q0\x01\xde&3\x00\xfbU0Y\x9d>0\xad\x06C2~\xd8.39w\xb80.\x97\xe22\xf8\x9a20\xd6\xbb\xc50R\xc5\xa71\x12z\xf72\x18\xff\xea0\xafm\x151\x868\xc1/7G\xe81\xdf\xe2\xac/\xa2C\xcb);\x87X0Vx!*[\xd0\x171\x15\x8c\x82,\x16\x1b\xb9)1\x04\x901c}\xac,\x87O\xc9*\x87\x86\x19.\xf4\x01\x00\x00X\xb8c/UX=.i\xf1\xd3)f=\x040\xb8\x90\xab/Q@\xbf,\xbet\x11/\x81\xa0\xbe)\xbf\xc19.AI\x111\xbb\xb2\x01+\xf4\x01\x00\x00\xbd\x0c\x81/\xbc\xb8S,\x8a\xa8\x081\x82\x96\x0f+\xa0\xa5\x8c.\xf8-\xd1-\xda\xea\t1\xe5\x1d\xb70\xf4\x01\x00\x00a\xe5\xc4,\x8b/70!\xd8\xbb*\xdf0\x18,\xfd\xa6\xac)V\xfb\x03+\xcc\xd4\x85/B\xaa3.\x90{\'-z\x14\x1c*\xa5\xc3\x9e,\xcfg\xc2-C\x88./v:\x99-\xd7S1-O\xfe\xa4-"r\x0f1(\xd4\xeb-\xd8\n\xe6,\xe9\\7/\xa4\xb6S1\xc9C\x8f+D\x10\xbe00[\xd2*\xa1\xdbg-\x87\x05\x1a.U+T*\x05U\xf80\xfe\xcd\xeb/\xe4\xc1\x9e)\x93\xda.-\xfaP\x8c*$J\xad,\xf4\x94!\'=\xc3\x81&\xca?\xc7-/\xe1K&0T\x96/T\xff\xda%P\xc4\xe6)\xb8\x1d\x18-+\x07\xe1&\xf4\x01\x00\x00\x1d\x11R&\x91!5&F\xe10&\xb2\xad<&\xed\xb5\xb4%\x91\xb6\x9c&\xe5\xac7&\xa5P\x1b\'tT\xf4%\x85\'\x02.\xb7xO&\xf4\x01\x00\x00\xe7\xc4\x01&\xbfJ\r+\xbd\xfb\x0c&\r\x9e\x12-\xc9\xe6r&\xa8\xaa\xb3(T\xf3\xa3&\xa4[\x8e&\xf4\x01\x00\x00\xdcG\x90(D.\xf5%L\xf1\x82*oJu(H\xb1\xb7-&\xed\x15\'\xe3\xf3\x81\'\x01/>).\x85\x1a&-n\xdc%\xdc\xefj,\xf4`\x1a&\xb1\xa0$-w\x84\xc7-~d\xbd&`t\x97&\x9b\n\xb3%3g\xc1%\xe5V\x1f(\x87\xd7\x7f.\xc0\x0b\xc5%.\x82\xad&\xd4\xd7\xac&E\xbf8-\x05P\x89&l\xc4\xa7%\xf4^\n\'\x8fO\xdb%\x9aW\x0c&\xc7\x92\x02&\xb8\x80h,jK1&\xce\xcd\x800\xa4Ia/y:B/\xf0Go/e\xc1\xad0?\xe5D1A\xa3\x1e0b\xae\xc62>\x1e\xe4/\x9f\xf7\x00-\xf4\x01\x00\x00d\xc3\t17Y\x98.\xc7(\x7f/\xa6\x0fu,\x1c\xd2\xda.\x19\xfcY.\xc0\x1e50\xc8\xb4\x05.\xcc\xba\x120\xb2\xc272l\xd5\x02.\xf4\x01\x00\x00\x86\xda\xec/\x1b t/\xf3\x85J,G(j0G\x0f\x81/\x0c\x07\xbe2\xc0\x95\xd4,$\x00\xef-\xf4\x01\x00\x00\t\x8c\x18.\x9a\xec%/\x1b\xbb\xc12\xceK\xbf,\xad}\xec0\xc7 \xea1\x96+\x173e\xa9R/\xfe%\x1f.8\x1e\xf7.a\xc5\xde.\xaf\xaa\x03/;v,2\x1cS\xa3.\xfe\xbc\x1c-\x94f\xc3,\x80\x98Y/\xd0\xbf$,_\xd3j/\xf2[~0.-J.W\xf9\xd60Y;\x94.\xb0\x93\xb60i/#.P\x81\x1e1\xdc\x16\x8b2\xea\xd6s,"M\x90-\xd5~\xd8-\xf7\xfa\x08/\xc95].\xaa\xb2\xa92\x16X\xd71H/\xbd4\xf1\xa4\x9d2\xb5\xe0\x193\xb0\xaa\xb63\xb7 y2\xc8#\x934\x8a\xcdi3\xe0\xb4\x8f2\xf4\x01\x00\x00a\x9e\x0b4)\x86\xaa1n\xce\x801, v1p\x1fL2\xbc\xec\x822\x9f&52J\x1c\xb41W."2`\xd6S4g\xe0\xb44\xf4\x01\x00\x00\xd4\x9c\xfb2T=\xf11=\x88\xc11\x9b5\x112\x90\xf7$3\xd9\xfe\x1d4\xbb\x0c32\x85_\x0b3\xf4\x01\x00\x00\xf0\x0b\x843S\xeb\xba1\x1e\x8c\xb63\xd1:\xc51\x1c\xb5(3=\x07\x863\x1a\x95\xc14%9"3"\xb0\x9a1\xfc\x03-27\x02\x812\xfe\xd4\x0c2\xadn\x9c4\x85\x1fi1\xc8\x98\x0e2\x13P\xc91\x95\x80\xed1\x9d\xd0G1@\x9f\x1a2_j\x0c3\x1d\x8a[38\xb8\xcb3\xfc!#3\xa1\xf3\xdf1m\xbe\xcc1\xe8\xc1\t4K\x02<4\xf4o\xf22\xea$\xcc1\xb9\xfeH1e\x18\x0f29\xf3\x002^\x84\xd03\xfe\x87\x813C-\x8c5M\xfe\xbd3\x90gU4?\xa8\xef3\xc0R\x0341\xe7)5hd\x834V\xfc\x844\xf4\x01\x00\x00\xe0.\x015\x97T\xb03/\xd8\x9e3\xc5\x05\xb93\xa4\x07\xc33\x9f;\n4\x13\x8e 4o.\xb93\xefRF4\xa7\x0fG5\x9b{K5\xf4\x01\x00\x00\x88\xc4\xb54\xe8\x9d\xb63\xd7\xca\xf53\x961\xc43\xf2\xbb\t5\xa8\xd1\xa24\xba\xdb/4r\xe2\xf84\xf4\x01\x00\x00\xedf\x9d4{Z[3\x9e\xdd_4\x01\x1d\xf23\x13\xc9\xc43J\xe9H4\x86{k5\xb4\x14j4\x03\x93\xa03\xd0f\x9a3\xee3\x154f,\xe63q\x93\x8e5+_\xaf3$\x1c34H\xf3\x084M\xdd\xc538\xbeG3\xba\xb6T4\xa5\x01X4\xa1;\xb34\xa2i\xff4\x94\x1c\xe34I\xe3\x963\xbf\xc5\xfc3\nq\x8a4\xed5\x994\xa2\x16\xb63\x8b;\xf03\xc1V\x853\xd4]\xed3\n\x0e\xb13\xf1\x0f\x8a4>\xab?4\xc0\x88<5\xb9\xa8H4\xd6\xbe\xba4*(c4\xb8<\x804\x01\x9f\x115\xed\xff\xf44eJX5\xf4\x01\x00\x00\xde\xfc25\xb7\x13\xa04\xa6j\x8b45\xd2\x974`\xbf94\xf3\x07\xdb4\xe0\xc1\xa14\xb9|\x894"V\xb74q\xb7\x955\xa3l-5\xf4\x01\x00\x00.\x1e\xd44\xab\x8b\x9147\xfd\xd24`De4\x90}V5\xa1K\x065g\xff\x0f5\xda\xf6M5\xf4\x01\x00\x00)\xf1\x065+sR4\xfb\xcd\xd64\xe5\xca\xa94i\xa1j4\xd6\xc9\xa54\xbb\xc7K5\n?\xd14\xafA\x884\xebKP4\xdd\xfa\xf34\x056\x8f4\xff\xa3\x805C\xbb\x8f4\xc8I\x0e5\x91\x00\x045\xff/\x1b4\xafg\x1b4DI\x0b5\xcf\xd9\x824n\x86\xa44\xc1\xe3q5\xc8\x10Y5\xd1Qh4,\xc4\xe64\xa1\x07\x804{\xd1h4\x8d\xb8d4c\x96\x9f4\xb8\x02]4\xd3\xf5B4\x88\xb2\x884\xa73\xa14\x14YP4K: 5G\xc2h4\xee#\xb04e}\xa04-\xad\x844\xd7E\x824\xcd\xd5\xf64nkI5\xf4\x01\x00\x00\x8c\xd7\x1a5D(\xc54\xd5\x19\xa745>\xf74\xbd\xb1\x894 \xae,5\xa9\x13\xc24\x03\t\xe64I\xf2\xc248Y\x8a5\xb3i\xd04\xf4\x01\x00\x00\x91\xca\xa74\x02}\xab4\xf6X\x055\xd5\xe9\xaa4\xde\x1aB5\xe6\xfa\xbf4f:[5\xa3 l5\xf4\x01\x00\x00z\xec=5\x83\'\x8e4;9\xe04\x88\xd3\x0c5\x14\x19\x9d4\r~\xc14\xbc\xc7\x1e5\x1eo\xba4r\xbc\xa24\xae\xd2v4\x8cF.5E\xbc\xa74\xec6\x1b5\x90\x8c\xb44\x0c\x19e58`\x1b5\x0cD04\xc7\x8eV4\xe1\xe4052\x9a~4\xcb\xb9H4\xc6\x02;51-}5\x1f\xa9\x914V\xb9\x0c5o\xa5n4\x1euc4*Y~4\x810\x085\xfb\xd0\x8b4\x124a4\x1b4\x994?N\xd34/\xcda4\\|,5;\x12q4a\xc2\xea48\xdf\xd94\xb5\xb7\x894Z\xf4\xbe4\x8ab\x0c5\xcf\xc6M5\xf4\x01\x00\x00\xfb\xb4\x005\xad&\xcd4{x\xdb4\x80\x92\xdf4\xf9\x85i4\x8b\xa0\x155\x87\x99\xd24\x9e\xb6\xf94\x92#\x9e4]4S5\xab&\x155\xf4\x01\x00\x00{\xb6\xa24H\xba\xbc4yQ\xad4k\xdd\xaf4Jz\r5\xeev\x155-W\x8a5o\xba/5\xf4\x01\x00\x00\x952\x1b5g\x82\x8a4\xe3\x89\x1d5-O\xf64K\xbc\xa44\xdbk\xf34\xcc\xc2\x175\x9e\xf0\xae4p\x8a\xaf4">\x9241\\\x015J?\xab4|[\x1b5\x81\xc6\xc44\xe9\xee\x875\xdff\xfb4\xed%H4$\x87w4\xffII5\x96\xa6^4\xa5\xee\x8846\x1e$5\xf9>:5\x9fC\xc44LG\x145\xfdV_4\xe1@\x9a4\x84\xab\x864kV\xa94=\x9b\x874\xf2\xebl4~k\xca4~\xfb\x025\xfa\x9b\x8a4\xcb\xe9\x865y"k4\xf9\x89\xdf4\xf0\xa3\xb04v`i4\xb9\x8a\xcb4N\xff95\xc3\xc895\xf4\x01\x00\x00\xfb\xfd[5r\xc9\xc24m\xba\xc34\x1bj\x045\xb5VH4\x98\x98\x145\xde-\xe44\xea\x8e\xb04\xc2\xc0\xac4\x99\x98/5zyX5\xf4\x01\x00\x007#\xbc4\xe9\x96\xd94\x8d\xa6\xdb4Y}\xb54\xb7w\x065z\x8f>5\xb9\x9fR5\xd3( 5\xf4\x01\x00\x00\x9e\xf0\x075;\xa1\x8c4\xcb\x9f,5\x15L\xb24\xa5\x93\xf54\x93=\xf04j\xbe\r5\xbeo\xa94.}\xa84b\xb4\xa74Vu\xfe4\x1e.\xca4\xd6\xf4\x1f5B6\xb748\x8dW5O4\x0055\r/49\x81V4\xa5\xcc05\xc1\x19\x1b4e\x8b\x864\xfeP\x0f5.\xbe\'5\x01J\xed4\xda\x06\xf54s\xb9M4\xf3\xbd\xb94\xc2\x98\x994\xc1\xab\xaf4\x1d\xc8\x8e4s@`4Q\x8b\xc44e\xfc\xc24\xb9?\x834\xd9\xb4U5\xcea\x864\xfd\x8b\xc74\xaa\x8a\x944\xfa\xbfW4\xf3\xc1\xab4\x1f\xf5\x115\xb9<T5\xf4\x01\x00\x00\'\xf1\x0f5\x8am\xb64l\xbd\xa44\xb82\xd54M\t\x834[\x92\xfa4\xae\x92\xbc4\xa1y\xaa4\x9e\xed\x9e4\xe3\xceO5\xba\x8bC5\xf4\x01\x00\x00\xe1:\x8c4\xd2\xab\xa644\x85\xb34\x8b\xde\xb64\xd2\x1a\x145\xc7\xfd\xc34TE;5\n\xc3$5\xf4\x01\x00\x00\xb9-\x0e5}\x17\x834\xbf\x81\xc44Q3\xcf4\xe6\x8b\xa94\xa4\x1c\xb64\x99`\xf24S\xb6\xc34nh\xa34\xd9\xaf\x914\x0fF\t5\x028\xb84\x8f\x84\x0b5\x86\x01\xbe4\xf4-M5\xcd\x87L5\x14\xb2J4\xe6\x89\x974\x93\xb815\t\x9eY4\xf7\xcev4\x13d75Z\r55\xeeJ\xa94\x9e\xf975I\xfb54>n\x904\xe5\xbe\x844~\xb0\xcd4\x88P\x884o\x92U4\xc6\xa3\xc34}\x8f\xc44\xd4V|4J\xf015\xc0\xc5\x824\xf3\xe3\xdd4\xdd\x95\xd84Vr\x8d4\xb9\x9b\x015\xce\x14\x195|U\x1a5\xf4\x01\x00\x00\xe3@45D|\xd14\xb3\xa5\xb44W\x9a\xdb4\xfbt34\xca\x12\xf14\x0ca\xe14ks\xc04F\x00\x9b4-\xebi5\x80\xdd\xc24\xf4\x01\x00\x00\xf1\xd3\xbf44d\t5\xc8;\xdd4\xf2\xaa\xb04\x0e%\x1c5\xae\xfe\xee4\xefm/5h\x82\x1a5\xf4\x01\x00\x00|Y\x1d5\xa8C\x8c4\xe9\xf3\xf64\xd5\xa9\xa14q\xd3\xd54\x9e\xcf\xbd4\xf7 H5\x9c\x9b\x984S\xc4\xc24\x0b\xaf\x9a4j{\x035\xf1:\xc04\x1a\xf9\\5Y*\xb64\xdaP;5)\x9f)5\x7f\xa6\x1a4\\\x19T4\xa6\xb3\x135.+\x8c4v\xf5j4|\x87\x1e56\xec05\xb0\xc0\xd34\xc0:\x175\xa40p4\x08/\xb04K\x1f\x904I\xc0\x9e4\xab\xe6\x814\x85!e4\x08\xd7\x974\x80\xfc\x834o\xef\x1343\xc3\x845\xb6\xe704\xe4B(4\x14zw4=\x13L4,P\x8d4\x1e\xb955\xfc(r4\xf4\x01\x00\x00\x11m<5\x123\x1c4\xbc\x0e\xd73\xc8|M4wOW3a!F4\xf2\xb9?4.004\'\x8f^4&\xbd\x165.\xb1D5\xf4\x01\x00\x00=#\x005\x12\xad\x164Ca\xd74@\xb0\x144\xb2d\xb04G\xb6R4l\xbd\x9a4\x90\x8a\x914\xf4\x01\x00\x00\x1dX\xba4C\xe5\xe93\x12/=4f\xd7\xd33\x930\xa64\xc9\xbeC4\xe3;\xd749\x8f\x134\x06\xbb\x084\xd0?X4y\x02p4\xb9`\xd243\'\x135~\xc0\x034\xeb\xc0\x914AqK4\xe3\x1b)4CO\x8c3Y\x96\x804\xeb\xb6Q4<!\xae4\r\x01M4[\xd4\xcf4\xc9\xab\x894`Z94 \x0b$4\xf6\xf2k4\xc0\xe9e4C\x1f)4D\x8b\xbe3\xf4I\xa23Y\xb2\x154\x96?S3\x82\xfa>3\xe5\xe9[5k\xcf\xa03N\x0b\n3R333;\x8294\x1b\r~3\xd3\xa1\x894\xf3\xe9B3\xf4\x01\x00\x00$[\xe74\xb8,\x0b3\x86_\xc12\xff\xbc\xf72\x87\xdb\xa82\xce\x18&3\x19\xd5\x963\x108\x1237\x15\xbe3\xccJ\x824\xfe\xa2m5\xf4\x01\x00\x00\xc5\xb2\xc14\x98E\xc72\xff\xe2;4\x07\x7f\x0e3\x08qC4\x1f<\x973G\xb8\x963\x85\xe4\xca3\xf4\x01\x00\x00:O\xc43\x9e\xcb\xe523\x17\x153L\xab\x083\xe2\xa6X3\x11\x86\x8f3\xda\x98\xa03\xf7x(30\xcd\xe62\xae\xd583\xe5\xc6\x113t\xe4\x0c4\xcb\x97V4\x88\xec#31zQ3\x0c\xc3\x153H\t%4c\xde\x063\xe0C93_\xf8\x044$\x11\xd94l\xb7\x153\\Ai4\x19\x98\\3\xba&\x153.\x06;3\xcd\xa8\xe53\x84U\xaa3"\xf3\x1b4\xe5\xa3 3\xda\x99\xcf2\xed4\x013\xe7E\x080\xfc\x14\xaa1;Z\xcb36\xbcc2\xf4N\xa90\xa7\xdc\xa80\xcb|G3u\xfa\'1\xd0\xff[2\x00B\xc20\xf4\x01\x00\x00\x1eI\x163#\x91.1\xff.K1\xcc?\xce1\xe6\xdb61\x04Jx1\xf2\xde82\xc6\n&0PC\x072\'i_3H9\xa33\xf4\x01\x00\x00\x9a\x19\xb53\x04h;0\xb7\x10\xcc2\xf6\xa9S0>\xe8G3pX\x8c18G\xbb1\xdbE\x9b2\xf4\x01\x00\x00|<\x981Y%\xbb0\xde\x9e\x9f0}a91\xbcH50\xaf9\xa52LI\x132Z\xf2\xd21a\xc9\xc70\xed6\t1Q5\x9e0\x04\xe9\x971>\x96\xf32I\xf8\x930\x1f\xfd 1S\x84\x990V\x90\xd13\x96\x18X1?\x9f\x9e0\xd5G\x063d\x06\x074O]\x970\xaf`M3\xad\xbe\x131&2\xa01\xb4\x14\x8702\xab\xe42\xcb4_2\xfe\xda\xe91X\x85 0}\xf1T0k\x93\x0e0\x9f\xc4g*\xdb\x88\xbe-\xb6\xe9\x12+\x9f\xe2\x9c.\x1e\x90\x8a*\x05\xb8w,\xc5\x00<1|\xc1L*j\xc0\x04.Qk\xa7-\xf4\x01\x00\x00\xfc^\\,]>\x02-\xc7!\x0b/\xc3\xe2\xd3/\xb2k\xfe,X\xc9\x97-\xcd\xdd\xf0.\xd3`\x01/b@},2a\xf8.\x83\xcb\x92+\xf4\x01\x00\x00\x9e\x84\xc9-\x8cK\x8b.\xa8\x12)0H\xc9w.\x07\x07;/\xe8"\x80*?8\xf4.-b*/\xf4\x01\x00\x00ee\xbd*\xfe\xe3\xf4,\x9b\xf1\x94*U\xdf\x9e-\xb5\x9c$*\xdf\xd6\x17-\x92\xa7\xdd-m\xb5).s\xc9\xdc,*\x9f\xb0*Q\xc5\xe9,yx\x070\x8c\xda\x1a-\xa8\xf6\xcc/\x81\xa0\xdc*\xaaq\xaf*M^\x861\xc6\xdc.0K33+\xf7\x10K/U\x0c\x82/\xf1o\xd5*\xf1\xd82/7\xc8&.1d\x10/\x97\xdd\x9f+\xd4\xaa\x1e*P\xd0\xbe0\x1a\xbc9/NA\x17**c\x06+\xe0"\x17+\r\n\x88+[\x05,&\xad\xc7)&\xbbu\x9c,\x89\xf1\x08&vlm.kD\x8f%\xf9D\xe7%\xbd\x06\x1d&\xa1\x1f\x81&\xf4\x01\x00\x00\xcal\t&\x98\xfd\xec%\xaa\x0e\xe4%t\xdd\xf6%\x93\x0f\xd5%\xcd\nM&\xbdQ\xf0%\xb6\xb9\xf5%\xe2\xd6\x9f%\xe6\xc3\x8d&\x11\xba\x07&\xf4\x01\x00\x00\xe5\xc9\xa9%s/m&$v\xb8%`H\xe6+\xc3\xe7\x1e&\xd0\x04)&\xd5\x82V&}B:&\xf4\x01\x00\x005c%&`e\xa0%\x97\x18<&\x1f>\xdb%\xd9Oo*\x8b\xee6)\xaa7E)\x1bk\xb4%X\xf7\xc9%T4\x90%\x00\\\r*\xea\xfc\xc9%\xd1)2&a\xad\x9c,\xad\xccw&y)F&\x07`j%\xe8\x0b}%a\xe6r&\xf2\xc8H-\x11\xe8\x80%\xadp;&\xd2$b&\xf5\xc8\xfa%\x8e\xa83&\x8d\xc3T%I\xbd6)\xd6x\x8f%U\x9f\xb7%8\xd7\xaa%d\x1c<,|\xf8\xe7%c/\xbc0\x00\x0be1\x87$D1\xd6\xf2*1-o\xfd.p\x18\xa32?\xde\x052#v\x961\xed)\x80.<Bx/\xf4\x01\x00\x00\x88\xe3%1\xae0i.n\xc5\x1e/\x92\xb8\r.\xc8\x8df/0\xed]/\xbe\xcb\x182\x9c\xd3\x820\xbc?\xa70\xa1l\xcc0\xa0i\r0\xf4\x01\x00\x00\xc4\xcb\x8b.\xae\x1b\\0la\xf6,\xc5\x0b\x9b1xN\xfe0\xf2\x1f\xf70\xce\xad\x90-2C\xaf0\xf4\x01\x00\x00qc8.&:\xec.\xb7WJ0\xf9Z\xd5.\xbe\x11\x9d1w\x0bl/\x9a\xd6\xef1\x07BQ-j\x9a{0\x83q\xeb-\x9c\x0f\x890\xc7\xf7\xc3/\xfe\xd7\xbb2\x93|\xad0_\xc6\xa5-\xcdv\x84-\xae\x04\x971\x18\xae\xf6/\x99@\xa2-\xbca\xc92n\xf8\xa8.\x8b\xda\x0f2Z\x18\x191|\xb8\xa40\xb4^\xa0-\xad\x0c\x1d3\xad\xe4K1\xd1\x07\xda0\xc1\xe3\x18-\x17\xf8\xda.\xd2)\x121eQ\x8e.\xdc@?3\x0b\xf3z3=\xe5\t5\x08\xa9\xc03\xba\xae\xaf2\xee!\x8a4\xbb\x0b\xaf3\x0b\x95\xcb3\xd9~(3D)\x952\xf4\x01\x00\x00\x02\'\xdc3\xd1\x06\x082\x1a\xf8\xfb1Y!b2V\xee\xce2`\xd8y2\xf4\xe0\x1d3\x9e`\xab2\xbe7\xff2\xe8\xde\xc235\x7f\x9b4\xf4\x01\x00\x00\xd62l3\x02\x82\xee2\x1c\x9b\x802\x1d\x87\xe53b\xf5\xa33{\xa2\xb83\xfa\x1f\x892\xd7(l3\xf4\x01\x00\x00\x13x 2\xe5\xc1\x8c1\x14\x91\xf02z0V2\x03:\xdf3<\xcd\xbb2\xcc\'\r4\xf9j\x043~\xdeC2\xb8Y\x172\x15\xe2{2\xb4\xab%2&\x01i4\x81\xc7\x172\xc8,Z2\x049=2\xca;\xa02\xa1\xd4\xc71\xeb\xfd_2\x1fx>4\x17k\x0e3\x85\x9eC3\x12\xd6\xa63~\xa6\x1f2#\x83%2\xc1f\xa14}z\xae3\xacM\xaa3\xaf\xf8\xa42\xbd\xfd\x0c2\xcd\x92z3\x98P\x122r\x1f\xec3g,^4\x07\\\xb05\x90\xc8\x854;K\r4\xc3k\x924\x82\xe9\x904\xc2o\x0f5io14\xdb\xecQ4\xf4\x01\x00\x00)\xbc\xfc4\xd9\x05\xc53\xd1\x14\xb43\x7f\\\xcc3\x99\x11\x034\xe2\xc1\x1a4\x9a\xed.4\xe3\xcc\xd83\xa8,;4f\x17\x0456\x08D5\xf4\x01\x00\x00:!\xba4C/\xff3\xaf(\xfe3\xedR;4/\x18\x025\x86\xdc{46!}4\x13\x04z4\xf4\x01\x00\x00e\x8d\xf43v\x11\\3\xe2]\'4\n\xf6\t4q\xc4H4e\x9e\xf73\x96\x12\xd54\xffJA4u\x9a\xbc3^\xa1\xbc3FV\x1845\xd2\xc13\x98\xc0H5\x12]\xea30\x8d.4\xfa\x84\x0b4\xc9\xf8\xfa3\x0c\xc3i3\x1e\xb814\x15}\xd54o\x12\xaf45\x85\xb24\x1bn\xce4\xd7\xc7\xa83\xe9\xf8\n4\xfd\x8c\xc14\x9c\xe7F4\xf4\x8bs4\x06\xf3)4\x9a;\x8c3s}\x8e4\x83\x1b\xc53\xba>t4Z\x8au4y\xdah5r\xb3\xa44\tUd4cY\x8a4.\x7f\xb84]~95Z\\\xb74\xd6\xa3\xf44\xf4\x01\x00\x00b\xd5k5\xb7\xb6f4LVw4\x00\x9cr4\x8e\xf094\xe0$\xc14\xd9\xd1\xb04|\xe8f4p\r\xc94\x90\x85L5\xd0\xe935\xf4\x01\x00\x00-!\xd94@\xa3b4[\xe1\xe84\xb5\x9bV4\xa2NT5\rd\xba4\x06\x1795\xee\xf5\x055\xf4\x01\x00\x00\xff\x7f\x8e40\r\x1e4b\xb1\x964\xea\xb0\xa04g\xa7\x8a4(Vx4/3\x145,\x16\xaa4\xfa\xc8X4\x10\xca44Y\x17\xad4=\xdb>4\'\xa6]5\x84cx4\xc9d\xe541\x10\xc04E\xd9p4\\\xf3&4\xff\x9b\xeb4\x14\xb6\xb84\x81\x0c\xbe4\x9f\xac\'5\xdb\x87=5c`A4-\xbc\xac4oA\xa94\x85zT4ES\xb54\xfa\x80\xe54;3;4\xfd\xe6c4\x03\xe4\x914\x1c\xa6\x864\xae`C4\x0f\x16\x105$\xe6\x9d4~\x13\x974\x11\xff\x9d4y!\xce4K\xb0\xd74\xf3\x19\xcf4\xb4\xda=5\xf4\x01\x00\x00\x8c\x9e,5\xac\x99\xa64\xcb\xd1\xf44\x01\xda\x155\x7f\xf7\x1a4\x12\xba\xfb4\x12\n\xd54\x06\xe6\x964\x14\x9c\xc84\x97Uf5\xce\x04\x934\xf4\x01\x00\x00\xc1\x84\x974\x08\x82\xa54\xa3I\x155\xf0\xe4\x844\xb7\x9bP5\x13f\xb04\xc2#\xa85\xc1|\r5\xf4\x01\x00\x00\xeaw\xb94\x9aq04^\xeb\xc04\xe5#\x914\x8b]\x814\x833\x9c4?\xf0 5\xaaM\xa74*\xc9\x884\xdf\xbaj48\x83\xe14\xe9\x08\x854\xe2\x06?5;\xd1\x874\x98\x8cd5XU\xf64rw\x914\xcd\xe8\xa14\x8a%\x165\x1a\x13\x8a4td{4\x94\xb8$5c/<5\'1\x854!Q\xe74\x91\xd4|4\x0e\xba\x804\xcb\xf8\x964\x97\xa4\xdb4Q\xaf\x844J\x1fU45\xfd\xcf4\x10\\\xc74\x95\xe5c4#%\x185\']\xa94\x0bj\xbf4A\x1f\x9d4\xb7\x0e\xad4\x04\xca\xd44\xfb\x90\x1b5v\xd8O5\xf4\x01\x00\x00\x1cE\xe44\xbc3\xdc4\xd9\x85\x185\xa9\xf3\xc44\x9d\x80J4\xf5\x86\x0f5[r\xf54Yb\x9b4\xa7\xc4{4\xbb\x98A5\x10B\xf94\xf4\x01\x00\x00\x1e\x98\x9c4\x1f\xdd\xe94\x8e6\xa44\xff\x1a\x954\x13835\xa8\x08\x085*\xe8\x905\x98a05\xf4\x01\x00\x00o\xd9\x015\x9b{\x8f4\xdb\xd9\x025\xef\xdc\xd44\xd8\x1a\xbe4\x1c\x03\xd643\x02\x0f51\x05\xae4\xdeq\xb64\x10\xe1\x974\n\x1b\x0e5\xcfB\xc14 m\x195\xda#\xc14\xb0\xa2\x8c58,\x0c50o\x834dcd4\x00\x14D5\x04\x90\x874\xba\x1cI4\xdex\x165\x08\n>5\xad\x92\xcf4d\x18O5\xb4\x18x4\xe6\xf5\xa14v%\x8f4\x1f\x14\xa04v\xb1\xbe4\x95Aq4\x7f+\xe44r$\x075E<O4\x96\xc195\x84\xf0\x914\x8a}\xcc4z\xc0\xc64:\xd6\x814LS\xb54\x0f\xf4]5\xa4FB5\xf4\x01\x00\x00\xe9\xfa\x125`\xd8\xf64\xd0B\x9d4\x0cV\xe14\xc3fW4s\x97,5\xee\xfe\x035\x98\xdb\xcd4q\xe5\xaa4\xff\xa2A5\x7f9\'5\xf4\x01\x00\x00\x03\xf8\x8a4\xac\xf3\xf44\xbaX\xc04\xe3\xe6\xcd4\x8f\x11\x145\x03\xca\xf74\xc3p=5_9&5\xf4\x01\x00\x00\xebV\x135JQ\xa24\xd5\xb6\x045\x90)\xe14\x06\xc2\xf04\xd3T\xe340\x1e\t5\x13\x97\xd2463\xb14\x05H\x9b4Qw$5\x1b\r\xfd4\xb6\x90\x1f5\xf9\xfd\xd34a$b5\xb2=\x1e5n\x0eU4$\x0b\x894dm@5\x7f\x07O4\x8f\x02l4\x19\xf455\x18\xc995\x82I\x0b5eH\xf64dXT4Fe\xb04\x15\xed}4S#\xb94l%\xa54\xa4q\x8f4\x16\x9e\xd04\x90\x9a\xb44Nz{4\x93\x95-50^{4\xa2\xe1\xdc4\xf5\xa4\xb04\xc4=k4"q\xf24\xf2\x9c25\x18\xabv5\xf4\x01\x00\x00\xdd\xa5\x075Sa\xc44\xa5\x91\xe84\x99\x87\xca4\xdc{H4e\x8c\xef4R,\xf24\x1du\xae43\x97\x934\x82OX5\xddv\n5\xf4\x01\x00\x00||\x8b4=\x99\xc34f\x14\xa84\xf6$\xa24\x1a\x02<5E\x7f\xe54\xca\x15i5\xa9v85\xf4\x01\x00\x00\x0bp\x115;f\x824\xe1\xc6\t5\x00\xa3\xcf4C\xc4\xac4_\xe2\xc94\x1e\xbe\x0c5W<\x984\xe4\xcb\xb44\x92\xb8\x914\x17\xd0\xe14\xab[\xc04\x9fD15\xd9 \xa04\xdb\xabq58\x8f\x145*v[4gw\x874q\x9a?5p\xc6s4\xfd\x92U4\xa9\xb4)5\x9a\x1265\x9b\x0c\xc24&\xc3$5q\xe0s4\xf1\x9c\x8d4\xd0\xee}47\xac\x884a\xeb\x924\xebt\x7f4\xe2i\xcb4\xd1\x1f\xd84\x10"^4\xb3\xb4B5\xccbh4\x08\x85\xb04\x10\xb6\xef4\x00\x1b\x814\n\'\xdc4\xeb\x9a\x125"\x01\r5\xf4\x01\x00\x00?vB5\x05\xd4\xa24\xe8\xb2\xad4\x82\x91\xde4\x067#4\x07\x1c\r56\x9f\xc64*>\xd14\xab\xae\xb94\x9f\xa2M5ID\xed4\xf4\x01\x00\x00\xabj\xc34\xa8Z\xf24S\x84\xe74\xbbm\xa74\xde\x02\x1c5)\x7f\xdd4\xaa\xda!5\x00\xf2\x055\xf4\x01\x00\x00\xa4\x1e\x0e5\xda|\x884,|\xf248\xef\xae4\xb4\x9c\xd04\xc8\xf9\xdb4\xc5\xaa?5\ty\xbb4\x9c(\x8c4\xe0\xbf\x864=N\x1d5\x9f\xe9\xc84>\x92L5^_\xb54\xf8\xd2:5\xb7v\r5lMz4\xd8s,4A\x12\x1651L\x9f4\x10\xdb}4Qa\x065\xcb\x91&5\x12\xda\xc54c\xa9\x035\xb3\xc6\x7f4\xaeC\xaf4\xeb\xda\x954\xff\xa1\x9c4\xefq\x814\xd7f\x864\xad6\xa94\xa0\x0b\xb04\x98\x98\x014\x8c?M5kvK4\xf2\x86\x114\xe3\xbf\x804-gr4\x00\xf4\x814*=`5`\xd1\x834\xf4\x01\x00\x00\xb0\xd9\x105\'m\x124>\xfc\xf73\x92\xe4`4\x93X\x893\t\xbbb4\x8e\x0cq4F\xf7\x904s\xbd\x8c4\xe5\xb3\xee4\x9e\x8fA5\xf4\x01\x00\x00M\xdc\xdf4\xe6wT4\xf9\x0e\xad4z_<4\xfdn\xcc4\x86\xb0H4\xd9;\x8f4\xe8\xb1s4\xf4\x01\x00\x00\xd9\x04\xa44\xf1e\x014\xac\xf364w\x18\xe93(\xe3\xa44\x07\xb4j4\xca\xd1\xcd4j\xe2~48u\r4 \xdc64p\xfa\xb74\x90\xcc\xf84\x9a\x0b\xfe4+\'-4\xc5T\xd24\x06l[4\xae\x17\xae4\xee\x10\xa33HW\x874\xd0\xf6\xa44\x94\x86\xa54\x89\xd6\\4\xcfN\xae4-#\xda4\x13\xf0?4?\xfc04[\x0ci4\xeb\x00\xa34\xb2\xcc\x1c4\xf3\xdc\xce3\xf5\xca\x064\xf3@\x1c4^K{3\x0b\xe0<3i\x04\xef42\x9f)4\xfd/\xb72=\xba\xab3\xf0R94\xd4E\x833S\x05\x115\x0c\xe1Z3\xf4\x01\x00\x00\x85\x19\xae4Z\'\x173^\x01\x982.213\xf1\xed32\xe3}632&\x194\x14\x84F3\x11C$4\xb3\xc1\n4\xb7\x8fF5\xf4\x01\x00\x00\xcb\xef\x884\xd7\x8a\xc02\xb7\x88\x194A\xcb\x143\xa9\xcf94\xf4GB3\xa6\xbce3\x0c\xb3M3\xf4\x01\x00\x00Y\xe5/3nXl3ZK83)_\xaa2<\xa5\xef3N\x83\xc63m\xc1\xac3\xa4\xd2\x873\xbd\xb8m3\x05\x96$3g\x01J3\x8b=\x9f4\x8cf:4\xd6h\x173\xaaQ\x9b3\x10\xa8*3R\xff\xa44\x02\xb5C3\x19\x86[31\x10H4\xa09\xa74\x94\xa8\x123[!\x044tJ54\xfb\x8e\x013\xfcP\xac3\x937\x9f3\xe5\xb2\x1c4\x10\x7f\xb43\x96\xdd\x183\x98\xb3\x862\xeb\x98\x073\xa6\x15L0\xc9\x8ee2\xc1\xa0v3\x85\x97\xbe2\x9dL\x1d0+\xc9\x1e1\xba1\x8a3\xbb\xf7\xea0g\xdb\x013\x1a\xfb\xf10\xf4\x01\x00\x00^\xab\x1b3~\xe8\xc41\xdd\x1bF0\xee\x0c\x831Yb\xf4/\x1d\'\xbf0\xa6\x1d\xc12\xd6\x1ea0P\x17\xd82\xfb\xad\x8d2D\xaep3\xf4\x01\x00\x00E\xa0\x983\xd3H\x820\xa5+x2\xcfa\xd80@\x0f.3\xc1\xa3\x001\x12E 1\x17\n\t2\xf4\x01\x00\x00""\x820\xfah\x831\xea`G1\xfa\xde\x800\xd0\xdb\xa70a;92\x8d\x9c\x102\x02\x89.2"\xbeh2\xe7\x1b\xa41Q\x10\x880k\xa2~2\x9c\xb7\xd92Gw\x051/B)1(Y\xdb0x\x1a\xe23\xf8472\x1a\x13\xd00\x93\xe963\xea\xd5\xc43p2\xad0\xf2=\x942z\xea\x042\xc5G^1\xe1\xb6\xdf1oK\xa21S"`3\x89\xa5/2a\x14\xdb0\x92F\x080\xfc[\xa70\xe2\x87\x1a+\xd2\xc3\x1e-\x96\xc7\x9c-\x82n\t0\x86?\x0b+\xf7\x95\x8a+\x04\xcb\x8f1d\x97%+\xdb\xd3\x0f-\'\xf7o,\xf4\x01\x00\x00\xf6\x95\x8b.\x7f\xcd0+^y\xac-\xce$\xf8/\x072\xd7-cf\x1f-\xdf\xe5\xa0.\xd6;\xfc*\xd5\xf5\x9a-aw\x050\xff\xb3y-\xf4\x01\x00\x00\xb2\n\xc2-\x14\xf9\xb0-\x86/\xed/D\x1e\x16+U2J/!k2,/0\x12-\xc6y\x030\xf4\x01\x00\x00\xb1ju+>\xa4\x93,\xcf\x11J+\x84\xb4\x06+\xed{\xc5+ \x86\x05,#\xfb\t/\xdfz\x1b/\x13\x1f\xcf/\x94\xef\xf3*\xc5 \x02-M\xb9\xaa.Oa\x9e/\xc6W\xac.~\t\x95/{\x81s+\xec\xe5\xbb1\xbda\xd5/!\x947-\xb3rd0\xce\x86\xb4.\xe3\x89u+\xc3;T0H\xc2\xd5+\t\xe2\xc1/Pt3.9<\xbb.>\x8f\x1d1\x7fK\xa7/\xde\xdc\x0f.\xc1\xc7E,g$\x1d-`\x88\x9b&\x11X/&\xc3\xd1\xe6&Pk6&Mc\x9b&\xa4\xc9\x87&\xc9\xa0,,\x135\x9d&\x02\xf92\'\xc9\x8b/\'\xf4\x01\x00\x00\xa1\x8b\xe9+\x05)\xa1&uIY)\x1e\xcf\xa7&\xa1\x18\x1e&^i\x0b\'^\x9e9\'U\xa5\x89\'\xfaMY&c\xbb@\'\x01\x86\xb8&\xf4\x01\x00\x00\xc2\xd4f& \xfc\x9d&c\xc7z&\x12\x98|&\xe4\x08\xd8&q\xa6\xc4&\xfb\xd0\x11\'h9\xfd&\xf4\x01\x00\x00m\x8d\x04(\xc8\x0fZ&\x7flW\'X\x08\x95&\xb8\x07\x85&H\xd6\xa5&\xfe\xc2\x08-<Hu&"aX)n\x0cD&M\xce\xed&\x97M\x89&Q7\xf2&\xdd\xfc\x93&\xbeq(\'\xc8\xb3\x06\'\xee<\x1f&\xc6\x02,&\x1b\x1d%\'\x91h\x12&D@/&\xc4\xde\xfe&.\xb9\x19\'o\x17\x88&\xce?\xf4&\xe0\xa0\x10&\xad\xa4s&\x9b\rC&\x9e&c-\xf3Bh&\x05O\x84&\xa7\x81\xa4&\xae\xafc1DZ\x842P\xba\xeb1\x88T\x1e2)\xf0\x85/di\x9e2\x91\xce\xc30\xa3u\x8e0O\xe5\x040\xdb\x94\xf5/\xf4\x01\x00\x00\xac|)1\xdfz\x8f.\xa4vy.tX\x03/ \xc3\xab.\x82\n\xec.5\x13\xe9/!\xa8\xb31!\x9dU0\xbei\x1d0\xa8\x03\xf20\xf4\x01\x00\x00\xd6-\x8b/\xc9\xd1\xab0|\x900/\xf2\x82X1U4 1\xf0%Z0\xe8\xee\x1c/G\xd7\x0b0\xf4\x01\x00\x00\xf2\x0bK/(\x0e\x0c.\xbe0\x98/;\nS/\xea552\xb0\n\xe7.\x06\xe8\xaa1\x01\xc5\x140\xed\t\x920\x07Ue0\x1c\x93\x051\xff\x1130u\x88[1~\xd2&1\xdb=\xe3.zJ\xa50\xf1\x97\xee0\xcb\xbb\xb60"\xd6\xda.<\xec\x912\xd5\xc5\xe1-\t\xbbN0\x05\xb0604\xeb\xe10\x17\xa3\xa9.X\xc1_28\xdd\xad0\x9fY\xc61Xv\xab.K\x8b+0\x90X\x121\xe8\xa4\x101\x06Q~3]aA4\xe8\xbe\x045@\xed\x1b4,\xa1\x982qQ\xf84\x95fg3\x96\xd5\r3_1E3\xffN\xee2\xf4\x01\x00\x00<\x81\xb13\x14\x89q2\x81kH2I\xbd\xad2!(;3\x8e\x91\xa22g\xe1Z2y\x02\xb43\xb6\xe6\x9a2\xbc4_3\x93\xf9U4\xf4\x01\x00\x00\xa2}d3\xec\x08\x023\xe4f:2\x96\xbcF4\x05\xb0\x8e3\x99\x9f>3\x8f\t\x853+\x80\xde2\xf4\x01\x00\x00\x95]\x8a2\x8c\xee\x0e2\x9b\xa3\x862g\xf3\\3 sK4\xb7BH2\xa1\x16 3\x90\xa1\x0f3\x1cE\x8b2\x11\x8dC3EX\'3un\xc62a\xb4\xc63\x93\xd8A3W=\xb32\xd6\xe8\x942x\xfc\x0f3M}\x9e2\xcd\xc8\xb42\xeb\xa7\x1b4j9Y2\x17P\xc92]\xf9x3ew\xf82Do\x8c2\xb8\xdc\x894\xee\x01\xb62\xd5\xb9\x983\xe4\xa4\x043\x02{\'3\x19\xfd\xef3\x83\xdb 3\xe0Cl4\xf2\x9e\x8b4\x15z\xa65\x10v\xdb4\x02\xd0\xcb3\xd7\x84\x0b58\x89a4C\x8c,4\xc2\xfb;4,\xe4O4\xf4\x01\x00\x00\x1d\xd6\xb24>g\t4\x17\xad\x0f4\x9b\x08\xce31\xd9}4\xf5\x14!4\xfc\xc9\xc73`\x1b$4S\x06\x124\x06T\x904\x92w(5\xf4\x01\x00\x00#%x4\x80\xe1\x144\x9d\xb3\x014\xa8\xf6\xac4\xe9;\x874\xd7\x97\x074\xd1:\n5\x86\xad 4\xf4\x01\x00\x00T\xf8\x0b4\xf6\x89\xc83\xbe\xd4\x074\x14\xeaL4\x97N\xda4\xf4\xa1\xcf3jk%4V\xde\xdb3 \x91\xb43\x9f{U4R\xf4,4\xca\xad\xe53c\xa7\x9a4\xf4\x93\x104,\x12E4\x98\xe6#4\xb2\xd0\xff3\x8cT\xfd3\x02%84\xc7\xb9\xbf4\xad\xbd\x194\xa3Z\x174\xb8\xa0\x894\xc8\x17\xf93\x0e\xde\t4qh\xc14\xc8\xe5\x983\x98\x9d\xb74\xe7iI4\x80 \x144\xed\xf9\xbf4!\x92\x034\xb3\xd8\x974\xb1\x01J4\x84M\x8e5\xa0/\xd34\xf6\xcdO42\xac\xb14\xba!\xae4\x00U\xf04\x1d\x80\xc14\x8d\x02\xd84\xf4\x01\x00\x00=lm5\xb8\xfe\x844wJ\xeb4`\xbcR4\x0e\xa5-4\xa7g\xae4\xea\x98a4\xbc\xb1V4\xf0\x95\xd84\x9e\x9e\xfb4C`A5\xf4\x01\x00\x00\xd3V\xe34\x0f\xfae4\x80*\xa14\xff\xfe\x8c4\x9f\xeb\xd24?g\x7f4Q\xc6\xa15Ox\xa14\xf4\x01\x00\x00\t\xa7\x954\xf6\xe0H4\xfe\xea\x944\xc8p\x934\x12t\xa04\x87\xe7W4\xdb!\xa14\xf8\x15@4\xad5<4#\xc3\xb34\x9f\xd2\xa743\xdd;4\\\x81\xd44B\x84H4]q\xe84\x088\xac4\x1b\x1cO4ZD\xa24Og\xd14\x90\xb0\x9d4tf\x974|\xc9\x9e4\xd2\xe2\xed4\x01\xa7L4u\x94\x9a4\xe0\xd2\x904\x8e\xda#4\x17\xfd\xbf4\xe9t\xf04\xda\x19\x844~\xa0\x9d4\x04\xc3\x834&\xdfs4"\x15\x804\xaa\xc585z\x12\xeb4,\xe9n4Jp\x9f4\xbd>\x924\xa6\x00\xf84\xff.\xc74\x180\r5\xf4\x01\x00\x00\xde\x12L5Mq\xda4\xbaq 5\x14]\x065b\xd4B4\x9d\x98\xd94\x7fA\xa24qf\x8f4\xe98\xdf4"\xff35\xbb\x98\xe84\xf4\x01\x00\x00\xa3\x8d\x9b4>\xdc\x8e4\xa9\x88\x1d5\x17\xdfr4\xb4\xa8\x025ow\xa74\xd7\xc5\x905\x8e\xc3\x085\xf4\x01\x00\x00z+\xcd4\xca\x12\x994\xc3\xfc\xbb4\x8f\x1e\x994n\xbc\x9b4\xc9~\x8e4\x9e*\xca4\x96s\x804\xbb\x87\x844\x7f\x87\xc94_:\xc74\xafR}4\x95\n\x005\xd2\xfa\x804l\xfd\x865h\xf4\xd54C\xa3`4\xde\x88\xca4\xed\x00\x0b58js4\xa0\x1d\xa24qG\xd54\x92T\x1d5.\xe2|4\x154\t5\xeb\x1dN4\x14\xedV4V\xc8\x914\x1a\xc9\xcc4\xa5*\xc44\x0e\x1a\x9e4p#\x9b4YR\xa94\xff6\x9d4\xf1\x7f=5W\x83\xbd4d\xac\xd34:\x17\x964\xf2\xdc\x804\xa3>\xd94\x04\xbf\x005.\x9185\xf4\x01\x00\x00\xf7.\x085\xfc\xc3\x135\xeb\xe7\x015\xb8y\xea4\x1d\xdf84W\xe6\x1c5\x15\'\xcd4\xa4<\xac4kpz4\x88JP5\xbc\'\xe64\xf4\x01\x00\x00\xca:\xa74\xcb\xf2\xbe4\x04\xb9\xdd4,\x1c\x9d4\xdfX\x185\x17\xa4\xd64\xfca.5P\r35\xf4\x01\x00\x00Z\x05\x085\xd4\x86\xc44\x8d\x13\xf34\xcdl\xae4\xf7\xd4\xa64\x96\xec\xcf4\xa2\x81\x005VT\x9a4uA\xec4s\xf8\xd14R\xef\x0e5\x8cA\xa24\x1f\xe4\x185\xeeF\xb64\xc3Wq5\xe3\n\x115M\x9bS4\xde\x8ac4\xd9^B5l\x7fU4e\x00\x8e4z\'\x185\xefe>5I\xd5\xa84x\xb0e5\xff.U4\x84F\x874\xb2#t4\xa7\xf7\xb04.4\xcc4V \x954f\x96\xb84!F\xdc4;\x99i4\xfb\xc915\x85\x85\x974\xa9Y\xd842\xb1\xbb4\x87e\x824\x9c\xf8\xd34uL>5;\xd185\xf4\x01\x00\x00\xb4N\x115\x96\x15\xc94@\xe0\xae4\x1c\x97\xd94V\xa104d\xd3\x0f5\xe4\xc0\xe84,D\xd94FK\xa64\xea5\\5_\xda\x0e5\xf4\x01\x00\x00\x8b\xe9\xa84d~\xd64z\xf1\xbc4\xf9\xb7\xb74\xd0\xaa\x1b5\xff\x18\xf94x\xd4X5\x9dZ,5\xf4\x01\x00\x00t\x1d\x0c5\x18\xf9\x9a43Y\x085I\xdf\xdf4%\xd7\xc44;\x1d\xc04\xe04\x145D\x82\xda4\xe9\xfb\x9e4\t\xa1\xac4\xc8\xd0%5\x01\xff\xe44\xf9\xf9\x1c5\x93\xa9\xd64;\xe7u5\xf3\xeb45\x1d\xb9L4Tr\x864\x01\xb285V\x18_4\xe9\xb5g4,\x80>5N\xb4<5\xa77\xdf4\x18\xcb\xfc4D\x96W4#\x8a\xa14\xa5\x93\x8848w\xa64sD\xa54\r\xe9\x8640\xc2\xd94V\x0c\xd54Y\x91^4\x94t*5_\x1f\x904\xd7l\x9f4g\xe2\xb24a]\x804G\x0f\xc54\xc9\x91#5CvP5\xf4\x01\x00\x00\xe7{\x1d5\xfd\xae\xee4\xce\xdb\x055\x01\xbf\xe84N\xe4N4\x1f\xfd%5\xed\xbf\xbd4\xa9t\xc94\x87\x08\x964\xf5\xa9X5\\\xcf\xe14\xf4\x01\x00\x00ZM\xa34\x89\xc7\xd14?\xb8\xc04I+\xa245E\x0c5\xc9\xc9\xcb4Y\x8f`5\xefg"5\xf4\x01\x00\x00\xc4x\x155\x8dN\xab4\xfe\xad\xfc4[>\xd44\xb9\t\xcd4\xf5\x9c\xb54%#\x035_0\xa54r\xf2\xc84|f\x8d4\x07\x97\xea4\xb4j\xc54o\x06+5Aw\xb34O\x05s5\xc0\xc0\x195\x96\xfd94%U`4\xa5\x08T5\xf1\xa754Zem4\xbaL\x035\xeb\xb8T5\x05\xcf\xcf4"\xdd.5)\nH4\xa5~\x8d4&0\x984\x1f`\x924\x96w\xa94\xf0\xaeX4e8\xc04\xb9\xf4\xd14#~\x1c4h\x9b25\x84_\x974\xf4\x9e\x9d4J$\xd94\n\x1fT4\t_\xc34n\xca\x0b57\xa8\x105\xf4\x01\x00\x00\xd1\r#5\xbdx\xb94J\x0b\xa74\x83\xa3\xcd4\xffQ,4U\xcc\x115\xea\xf4\xa64\xdaB\xd34-\xb8\xc04\xb5\xb1E5\xc4z\x115\xf4\x01\x00\x00\x83\x92\xb64\xe4\x1d\xe54F\xf1\xcc4Gz\xac4\xc9\xf1\xf54\x00\xbe\xda4\xf7A%5M\xde\x045\xf4\x01\x00\x00p\x1c\x005m\xc9\xa34\x8c\xe8\xee4/r\xd34\x9aX\xbb4\x9a\x0b\xb14\xd7 %5\xc1g\xa448\n\x8a4_\x8az40\x85\x1e5\x08\x93\xbe4\x0e1\x1e5@\xd8\xbb4\xbe\xceh50\xd1\t5\xb2\xaf\r4\xe3\xb0L4\x82\xb3\x1b5\xfb9<4\xec\xd8\x824\xeb\x85\x035\xff\xe0\x1d5\xef\x85\xc64\xf2>\xfb4\x8b\xdfC46\xd9\x954=\xc8\x9e4\xfd\xc1\x9f4H\x82~4\xb0\n\x884\x9a#\xac4\x8a\x17\xa74O\xc7\xda3\xa3\xee\x0e5\x839\xb14\xbcl\xbc3:7l4\xbf;\xef3\x0c\x07 4\xd7\xa4|5\x08"N4\xf4\x01\x00\x00$\x9d\xe24\xdf[+4/\xea\xc13\xb2\x1ck4\t\xaeH3\x9b\xd9-4\xaf>\xf53!a\xb34\x9d\'\xb34\x14\xf7\xb64\xebAD5\xf4\x01\x00\x00\xc30\xb24\xb89\x1b4)>\x944\xd4\x10\x084\x8d\xe3X4\x05\x83\x144\xeczT4\xe6A.4\xf4\x01\x00\x00-|E4,\xf3\xa44\xff\x9d%4\xc3p\xd437\xe2\x924B\x86\x084C=\xd74H\x9a\xaf4\xf1_\xaa3\x018 4\xa5F\xbf4\xb4\xd2\x165\xb3\x88\xb54\xfc\xd074c\xbe\xef4\xe7\x9fF4\xd4\xb3\xe83;\xd3d4\xeb\xa1T4\xb7R\x894u\x1e\xb14\xb79&4\xe1\xeci4\x96\x0e\xf44T\x9f\x1b4\xcf\xfb)4\xb0=\xfc3&u\xa14\x8eKK4\x12\xfd\xbc3O\'\x034\xf19\x004\xf7B\x113L\x82\x8f3z\xc3^4V.\x884t5c2\xd9[\x943\x7f\r\x163m",3\xb8\x7f\'5]+\x1b3\xf4\x01\x00\x00\xa0\xf2d4\x06\xf4\xc83\x9e\x9aS2\x12G*3-?\xdd1\xd4U\xe52j\xfaP3\x82\x17X3^9.4\xed\xca\x8a3\xd6"\xf64\xf4\x01\x00\x00\x9b\x0b\x124O\xd5`2F\xde\xe13#\x04\xf72\x80\xc2R3\xb8x\xb82]\xf0?3\'\xff\xab2\xf4\x01\x00\x00\xd9\xe1\xaf2O\xe0s4\r7\xfe2\x11\x1fY2\xa1\x19\xd63\x11\x0e\xe22u\xb2\xc73\xf07\xd43N\x8c\xa82w\xb7&3W\xb633\xf5k\xb84x=\xd93CA\xbf2\x04 \xb13jY?3Z\xd4\xfb3\xc9\xfd>4\xb6\xa0E3\x1a\xab\x1a4[\x9734\x12\xb0\xbd2\xe1~93\x87\xfeO4hN\xb62\x04C\xfb2\x82p\x193D\xb4%4\xbab(3q\xff\x173vR.2\x99\x95\xa82\xda\xe7 0\x8c`\x9a28g?2\x0e"\x0c3\xaf\xc0\x061\xc3\xff\x070\x02\xa5J2\xc6w(2\xd6\xd4\xd32R\xbc\x1a1\xf4\x01\x00\x00\r_+2q\xabz2\x01\n#0\x07\x02\x0e1\xdff\x0e0\x18\x1b\x1912\x9d\x931\x18?\x8f0Y\xf6\xf128\xbc\x161\x81\xb1\xc42\xf4\x01\x00\x00vI\xaa2\xbc\xde\x170\x9b\xbb\xc31@!\xb90\xad^P2\x0b\x8000H\xd3"0\xbf\x17K0\xf4\x01\x00\x00\xfd!T1?3\x043\xe3\xca\xe50\x08r\xaf/\xee`K0\xa6o\xc61\x85\xa6\x122\xa9Y\x111\'\xc2}1\xe4\xd5\x851\xa5\x9dw0z#)2\xa1\x08\x022\x1e(\xd40{\x0b\xb61\x0e\xb0\xc01\xd7\xc1\x9d2\xd1Y\x123Nca1\xe7\xd2\xf02\xc6\x96\x9c2\xf4K[1\x1d\x16\xfa0\xfd\r\xa51@\xee\xa71\xc4#\x8d0oC\xf0/[S\xbb2\xe7\xaf\x151\xe9\xd9\x182\x85\xc8\x96/b\x0b\x850\xe5\xb1\x99*\x14S\xb9+\xb4\x97\xee*W8\x970\x1f?\x9f*\xf1\xa2\xad*Yz\xf2/\xe2\x9a\xaa*\xbee\x12,v|?+\xf4\x01\x00\x00\xf7\xa0\xa6+\x9d\x1c\xb0*\x7f"!,:\xa7\x86+\x86W3*T\\\xd6.\x91#G+\xb3#\x90*Q\x0e\x81.\xc7\xa7f+\xee\xa8\xf0.\xf4\x01\x00\x00\xd6\xa5\x08/1[\xd5,\xb3\xabe-\xe7\x8c\x82*\x01\xfb\x86.\xdf\xd5\x1d._\xb4N-g\x12&+\xf4\x01\x00\x00\x92\x1e\xef*\xbf\xfb\x9c.\xa4\x15\xe7*n+\n,\xf9\xe4\xad*_\x00\xab*\xae8\xf0*\x0fz\xb0.+\x83\xeb.\xa92K*\xf3.\xef*B\n\xbf.\xde1\x08+\xf2\xac\x16-\xb5\xe4\xfd/\xca\x80\n-\xdb\x0bG/\x93\xed10\x81\xb0*+\xa6\x16\x90/\xb5q\x90.\x9bU\x05+\xdf\x90Y+\xf6/\x0f.\x12V\'0u\xbe** \xd9{*B\xae\xbe/\xab\xfb\xe2-\xc8\xb7X.\xb7\x8f\xc5+\xa9\xfe\xa2*9\xc2H\'um\xb8&\xe6\xc6r\'{\xde\xbf&\xcd\n"\'3>\x1e\'\xb7\xfd\x88-\x00Z%\'#\x8a`\'\xdd\xa3\xb8\'\xf4\x01\x00\x00$K9-wq)\'&\x0e#\'\x94\x800\'@I\xa6&\xbb\x99\x92\'\xc5\x9c/\'\xc2\xd7\xc9(\xdf\x8f\xe4&v\xb7\xca\' \x15B\'\xf4\x01\x00\x00\xeb\xc9\xf2&\x89k(\'\x9c\xe2\x03\'\xfb\xd6\x04\'\xe39c\')\xd6N\'\xb0^\x99\'\xc1+\x85\'\xf4\x01\x00\x00\xd3~l\'\xa7[\xe5&\x7f\xd8n\'\xbb\xc0\x1c\'T\xe3>,\xf4\x01.\'\x94\'Y.\x9b\xfe\x00\'\x81f\x10\'p4\xce&\xf9z\x8f\'\x86j\x10\'\x99\xc3~\'\xb3\xa7\x1b\'\x87+\xb1\'@\xae\x8d\'\xc3|\xa7&\xef\xeb\xb4&\xc4\xaa\xad\'q\x87\x9e&hT\xb8&\xe6\x0c\x86\'\xde\xaf\xa1\'2$\x0f\'\x7fs\x80\'\xf7\x1e\x98&\xef!\x00\'e(\xcd&R@\xb4.(K\xf4&\xf3\x81]\'\n\xffQ\'\x0flg1\xc9[_2\xf1v\t2\x84\xffx2Q\xf7\x9a/\x7f5\xe32_~_0v\xceR1\x1b\x83\xa40+\t\x1d1\xf4\x01\x00\x00\x19\xf1\xbd0\n\xbd\xa8.\xd7lr/\x80\xc3\xa4.\xc3\x0ba.=\xe5N/YG\xa2.\xb2q\xe01F\x13\x07/\xee<\xb1/w\xe2@1\xf4\x01\x00\x00\x81\x8c{/\xdf\xbf\x861\xf2\x13\x00/\x84(|0Y\xee\xa9/!\n\x0f1\x06~\x081\xac$+/\xf4\x01\x00\x00\xfeT\xc3/\xf0+\x070\x1b,\x04/\xcc\x92\x0b0\xb3\x9e\xee2\xf8\xa2\x9f.\xfa\xfb\t19E\x1111if/}\x95\x842\xc9z\xb80\xf5gB0\xcbR\xe7.q\xfb\xdf1I\xc5\x14/ ?\xb80\xbf\x81\xe5/Nm\x8d0@\xb1\x18/[\xb8%2\x86\xacv/J\xef4/\x90\x87\x08/\xe6+\xba.\xb0\x9f\xd6.C^\xb71\x83%\x100oV\xc22\xf4e\x12/\x82Y\x142\xdf\xc1\xc40\x97\xbbq1o\xa4V3\xdflO4}\xff\x8d4\x86$@4\xafm\x8321\x8b\xbd4\xe9\xf4\xae2L\\\x872(SK3\xdc\xf6\xed2\xf4\x01\x00\x00\xd9\xb2\xfc2bA\xe02i\x96-3\xc1\x1fT2\x83q\x033F\xe2\x8b2`\x86\x192\xa1\x83)4\x7f\xb4\x102w\xda\xaa2g\xea\xa33\xf4\x01\x00\x00y\xfa\xaf2S:\x1c3=\x84\x1d24g\x154\x14/j2<U\xa02\xea\xea\x114\xa1<`2\xf4\x01\x00\x00\xbab\xb72\x02\xad\r2\xe0DO2\xd0Q\xac3\xd1\x10[4\xd5i\x1e2\x81\n\xbb2w\x94\x872\xd5\tq2\xef\xd1\x184\xb3\x93\xa43\xaf|\xf42)\xd5\xb82\xcc\xef\xc93q\xb6\x972\xa7\xf9\x982u\xe6I24~\x9e2i\x80\x962U\x16\x823(\xf4\x062\x16\xc9j22\x9c\x852\x12\xf5\xb02\x18\xa1q2E\x97\xfe3\xdb\x84?2\xcd\x13\xf43:D\x8d2+S\x913C\x17:3\xfc\x1d\x8a3\xf2\x14s4`\x0e\x8c4.\xed\x845z\xe1\xb64\x93C\xc83\x0e\x0b956h\xc83d\x96\xd23\xf9\xd1o4\xa2aW4\xf4\x01\x00\x00V\xbcn4\xce\x8b\x074\xf2v\x8d4n\xa6\xeb3\xf8`\x1e4\'i$4\xa1\xa4\xbc3\xf3\xc9\xb24)\r\x9d3\x9d\xcag4\xe8\xa8\xb94\xf4\x01\x00\x00\xbc="4\x83\xcbK4\xc3f\xb53\x8f~\xe64\x83~\n4\\\xa6\x074\xcd\x01V5\xca\x07\x184\xf4\x01\x00\x00\xb3\x04\'4z\x96\x993\x01\xfa\x064\xdad\x954\xa3\x94\x1b5k\xad\xc23\x1c\xa3\x114\x99K\xca3.\xd2\xa73o2\xc44\xdc/\x8b4Gw\r4\xc6\n\x194\xeb7{4W\x8cv4\xf6\x85)4\x8dB\x9f3\xcee\x1b4\xbdI@4\x9d$\'4\x1f\x06\x8a3\x1dF\x144\xdcW>4|\xa9\xfc3\xb1\n\x1c4\xa4e\x864\x1f\x86\x993^\x91\xa54\xcf\xb3\x124\x06<j4wHj4#H(4\x02\xa0\xba4\xd2\xe5R4\xd0\xa0z5\x87;\xa14\x1c\x8a\x7f4\x13\x97\x0b5\xca\x05\x804\x07\x0e\x854\x90\xa5\xd74\xe3\xf9\x1e5\xf4\x01\x00\x00\xc3\x08\x105\x11\xf1\xa34\xa4\xf5\xe64\\\x85\x8e40JA4F\x90\xeb4\xc2\t\x924\x9b\xe1\xb44\x99\xach4<\x84.5\x02\xe4\x125\xf4\x01\x00\x00=\xc3\xa44%(\xa54\x84\x00}4a\xda\xe14M\x1a\xbb4\x15\'\xb14r\xc9\x9f5-g\xda4\xf4\x01\x00\x00F\xea\xc94\x96\x98a4\xdc\xf3\xc74-*\xc54\n\xac\x075\x80\xae\x894\xf1[\xc64p\xfbW4E\x17d4\x00=\xef4\x1ai\xd54\xf7`\x874\xef\x9c\xd74\x16\xf0q4t?\x1551\xec\x005Wr\x164\xc0\xcc\xa64\xdc\xde\x105\xaenq4\xdb?,4\x15\'\xdd4vs\x135c\xfdi4S\xc5\xe44"k`4\xe5\x86Z4\xf5\xc6\x9e4*i\xc54\x05P\xa74\x06p\x9f4\n\xc7\x8e4\x12\xbe\xb74\xe8\xb4\x804!c:5\xc3\x88\x854*~\xf84W\xa1\xf14"o\xa24np\xcd4\xcc\xa4\xf94\xb3\xf6\x815\xf4\x01\x00\x00\t\x1f&5\xb7\xf8\xfd4gk\x045?1\xdd4\x9a&"4;\xfb05\xb52\xf34\x80\x12\xbf4kP\xcb4\xa3T\x8d5\xa5\x82\x065\xf4\x01\x00\x00\xec|\xc04\xc25\xca4\x82A\xb64\xc0\r\xc14\x02\xa2\x165\x8e\xb9\x085\x0f\xb7250\xa6)5\xf4\x01\x00\x00\xa7\xc8\x155\xf7\xb6\xb641\x0f\x1f5\xed+\xe94cR\xcf4\xa0Q\xe54\xaf\x86#5V\xe2\xac4\xf5\xde\xd34o\xdd\xd24t\x85\x035\xa6\x1a\xb24X\xbf"52\xe8\xb14\xe2\x02u5C\x0305q\xa9[4\x89&\x944_\xc8[5\xa5Dw4\x82\xb2[4F\\ 5\x86\xca]5\x04l\xa74\xcfS\x105\x8byE4\xbb\x0b\xaa4\x14\x0c\x974\xe1G\xfc4Q8\xb74\xef\xf6\x9f4\x12\x18\xcb4\'\xdf\xb94\x89\xfcn4N\xd3\x185\x95t\x7f4U\x05\xc14\xa3\xe4\x9e4L~\x9e4:)\x075\x9c\xde\x065IG\x965\xf4\x01\x00\x00L\x1d\x015\xdbt\xce4i\xca\xa44\xf7\xf4\xf84`\xe984\xb4\x9c\x1b5_\xda\xe44\xf4`\xa74\xd0[\x9f4\xbdl\xa15\x8bN\xd44\xf4\x01\x00\x00mp\x9c4\xe8\x7f\xcf4\t3\xc842P\x9c4.\x9465\xea8\x1b5U\xb0:5\x9c\x11X5\xf4\x01\x00\x00\xa9\x8745\x05e\x964m8.5\x06B\xdc4\xfbX\xc84\x90\xaf\x035\xaf\x95^5-\xc1\xd04n\x02\x9a4#{\x8c4\xb6Y\x155&h\xcd4\xa0\x1ac5\xa2\x15\xd14\xad\']5\xc6\xe4\r5\xd1Ut4\xcd9_4\x1b\x80v5\x1e5q4\xbb\x90w4:P75Z\x16z5\x8cK\xbd4\xf4\x99\x0f5\x0bW^4\x0f~\xc04\xa4\xe9\x9b4\x04\x9e\x9c4Z\xdd\x904\xe1w|4\xfaO\xe64\x93t\xbf4i[V4o\x14#5F$\x904E\xba\xc14\xbf\\\x9d4wR\x994\x99b\xcd4#\xa7\r5L\xa5:5\xf4\x01\x00\x00\n\xdb\xfb45\x98\xe44\xee^\x135\x92\xec\xd343\xb7\x7f4\xf2\x07\n5\xfbT\xc54\xc7\xd5\xc243e\x864\x03\xa2~5L\x04\xfa4\xf4\x01\x00\x00=\xe4\x924$\xc3\xb04\x12\xea\xc04h\r\xa24\xcf\xde\x1a5\x8d\xf0\x055\xeaIJ5\xd4\xc2>5\xf4\x01\x00\x00%\xc7\x165wr\x8f41\x7f\r5\xda\xcd\xd946\xdd\xc74\x87T\xd54\xe8\xc4\\5\xbb\xd9\xd44\x98\xd5\xbb4(m\x874\xe9\x94\x0f5\x9c\xe5\xce4`p<5\x14\x93\xc64\x00;l5\xb2F\x195HP\x934Z\x0eH4(\xeaI5\xddnz4Ydc4u\xd8\x145\xd6VE5\x17\x10\xba40\x8b\x105w\x99\\4\x82~\xb74\x11\xee\x844\xec\xcb\x8a4\xc1\xf0\x984t\'\x8d4\x8c\xb1\xdc4\xe6\xfe\xad4{\xf3i4\xf61\x145\x0b\xeco4>\xb9\xc74Y\x1a\xb74\xc2%z4\x11\xf7\xd44\xc7\xbd\xff4R\xc4S5\xf4\x01\x00\x00\xef$\r5\xb3b\xfa4\x86\xa8\xf84\xfb8\xdd48\xcdu4\x8b\x01?5\x0c\xb1\xd04\xed\x81\xc14\x02J\xb04\x99Ca5b\xaa\x0c5\xf4\x01\x00\x00\xeb\x13\xa543\x97\xef4{|\xda4\x11\xfc\x9e4T0\x145Y\x04\xe04[?N5\x8d~.5\xf4\x01\x00\x00&{\x1e5\xa2q\xb34\xfe\xb2\x1a5\xe4\xdd\xe44\x8b\xae\xb34G\xbf\xda4\xac\xb5\t5Z\x85\xaa4{e\xd74+V\x924\x1d\x04\x0c5\xa1M\xe04\xde\x07#5e\x8e\xb64\x1dmv5\x97U\n54\xac\x7f4K>\x844\x1a\xa2]5\r\x17R4b\x9e\x854\xbe\x90(5\xb7\x7f`5\xbe\x1d\xb74S\x05*55\xb5F4v\xe6\xa14\xca\x8cp4\xf5\x14\xa74G\x00\x9e4\x0b\x14\x8c4\xd6\xc9\xca4\xd3\x97\xda4\xe2/\x7f4\xbb*\xd547zW4W[:4[e\xc54,1748\xd5\x954vlZ5\xe2\xbf\xe34\xf4\x01\x00\x00\x82\xbc\x035N\xdeF4^QD4l\r\xbe4\t]\x024B\xc0\xae4\x0bb[4j\xb4\xf84\xec\xf9\xf14\xb2\xf7\x1f5\x12\xc7-5\xf4\x01\x00\x00\x11V\xad4\x17d\x9d4\xfd\x98\xba49\xf3u4\x9f\xa4\xc04\xf3\xd8\xaa4\x1eE\xe54\x8a\x96\xae4\xf4\x01\x00\x00A\xe4\xcc4c\xc6\xa04\x07\x84\xa74O\x19\xad4\x07$\xd140\x95s4\xdbNJ5x\t\xbd4ql+4\x03s\x9b4i\x88\x015\x8b\x17\x1b5v\xed\x115K*\xb54\xa3g\x925\xde\'\xec4\xa6-\xc93E\x8c\x924\xbe\xcf\xea4\xde\x12\r4\x05\xbcj4\x12%\xb344\x0f\xdd4~\x1c\x0c5\x93D\x9c4\x10\xf824:P\x7f4\x1e\x00V49\x87\x834\xa2\x9em4\xbd\x0eo4\x0e\xc6\xce4\x0eh\x074\xf6cM4I\xd8\xbd4fET4\x8a\x1f\x133R\xe7C4\x03\xf8\xaf3\xa5O\xbf3x\x0b\x915B\x03\xb83\xf4\x01\x00\x00\x85\x1f\x934\x9b\xbb]3j\xba\x133\xa0k\xd43\x00H\xa32\x18\x86\x913P:"3/\xf0\x8c4\xfb\xa8h4)\x06\x924d{!5\xf4\x01\x00\x00\x87v14G\xe4\x853\xc4\x88!4,$\x973\x97\xd4\xbf3x\xac\xa73r\xd5\xe93\x1b\xb3\xac3\xf4\x01\x00\x00\xa1\xef\xf53\xd0\xa4j4\xc1\x1d\xa33\xfb\x87\xaa3W\x84q4\n\xfc\x9f3\xf5\xc6\x005\xff|\xba4\x90l\x033\xfd^%4\x16\x1e\x8c4\x96\x86\x115\x0b\xe5\xa24 \xfb\r4\x9a"\xd74\xdd\xee*4\x9a/\xf72\xcd5<4K\x9e\xd13\x8e//4\xad5\xf43_\xc7\xa03\x10r\xca3\xb5\x8c\xd84Y\xe9\x9a3\xa3\xf9&4\x9e\xac\x833\x9a\xf5\x004\x82\x8d\x803\x93\xec\xef3\xdc\xbb\xa53_N\x8d3=\x16\xe11_G\xa93\xc9sT3\xffk\xa13\x88\xab\xa41\xe8\x02\xaa2\xc8\xd6\x832\x1c\x80\x1c3\r\xe1\xb84\xe1\xce\x862\xf4\x01\x00\x00\xef\xe273\x93u\xf12\x18\x91p1\xa6\x92\x1c2\xb0\xe8\xfe04RD2!\x0e\xeb1\xef-\xcd2zt?3\xb3\xed|3\xfa\xc3\x0b4\xf4\x01\x00\x00ol\x1c3\x92S\xc21\x07U\xf12\xd4\x0f!2\x01=C2mb\xaf1kl\xe61B?\x8f2\xf4\x01\x00\x00\x18\xcc\xb51k}\xdb3^\xc1;2bj\xef1\xaa<e3t\xe2:2\x7f\xe1\xfb3\xe6\x12\xab3\xb5\xe1\x8a1\xcbdJ3~\x82\x073\xc4\xaa\xf53@\xb9\xd53x\x05\x822\xa3\x81q3C\x97\x013\xdch\x932\x1cb\xde3I\r\xfd2\xb9\x85\xb03 \x0c,3\xfa\x9b.22\x8e\x8f25\xc6\xcb3*\xf2\x832sd\xd32\xa9\xd6D2\xcf\x0c[3\xfb\x1d\x951\x9ftc3\xe9o\x0e1\xba\x83\xc91\xb4\xe5\xbf..\xe8=26N91qEp2\xe3\x99\x88/\xd7\x18\xba.\x03\xf7\x042\x8a\x0c\xa62\xb1\x17\r2)\xa5%1\xf4\x01\x00\x00\x89\xb4\xb60M\xf4-1\xfaD"0\xb8\xa7\xc4/q8\x86.:\x99\x1e1\xdf\xde\x1d/D1E0\n^\xdf2=}71\xd7\x1582\xf4\x01\x00\x00\xc4\xbc\x1c2\xb2\xb8\x94/\x99\xb0\xc91\t\xfa\x020\x19\xcd\xa9/H4I/\x18\x85;/\xed\xdb\x8e/\xf4\x01\x00\x00yb\x9b1\x97\x81?2o\x0c\xf2/\x8ana/\x87,\x96/\xcf\x1c\x96/s\xff_2\xea\xde\x810d\xf4\xc20\xd5\xf8.10|\x020\xf4\xd8\xf91\x81\x9a\xd31\x1c-\x121\xf9\xd9\x911o\xa1\xaf1\xd9.\x0f26\xbd\xaf2\xf19\xb81\xa3\xac\x7f2\xc1\x9d\x132\x1f\xb9\xab16\x11\x1d0\xd5\xf9\x930)\xbbG1]\xa6N0\xbb\x0f\x12/\xf8\xd7\'2\xf3\x06H/\xfa\xc2\x132Hg\xb1.\xdaT\x1a0\xac7\xb4)\'\\4-W\x1f\x1b*\x82\xa9\xb3.9\x1c\x84*A\xa5P*\xbb*\xf9.1\xfa:0V\xdb:.(\x1bW/\xf4\x01\x00\x00&@\xaf.\xf9\xef\x81,B\xe5\xbe)<Y\xfd,\xa8m`)\xb5\xe5**\x1a\x00\xc6)J\xee\x1c+\xbf\xa0\xdc/\xfb\xf1m*\xd1\xd7\xd7+\xf4\x01\x00\x00\x01\xb2J/j\x1d\x04*\xd3\xac=.F\x14\x99)\xd1b\xe0/\xafeB+\xbb\xc0r,\xe5u\x19*\xf4\x01\x00\x00C\r\x16*\xe9\x96\xc0-`T\x99*\xc8\xa0\xac,5\xe9\xb7+\xcc\x82\xc8)\xdf\x04\x82,\xc9V\xb2,\xe7\x15\x1c*\x9f\xcb\xa5*\\\xd1\x0e*Gy\xe6/i\xf9\x19*@\x07\x90+\xaa\xe3\xce.Z\x19\x9f*\x19\x1e\xcb*.\xc9#0.!H*\x10\r\xfd.L\xf8\xdf/\xc78\xfa.\r}\xc3-u\x06\xac)\x7f;\x03/\xb1\xdb/*\x81\xa7\x93)@\xacl-\xf0\xce)/2\r\\-^\xc4\xea*\x96\x81\xe0*\x9e\n\x8f#\x02\xc9\x82"\xba),#\xf1\x0f\x88"T\xd1\xe5"\xea3\xca"\'G\x91"\xe0\x83\xea"\xef:\x1f#\x8b\xef\x82#\xf4\x01\x00\x00\x8eZ\x0b#\x1bQ\xf0"LC\xe7"eT\xfa";\xd7k"\x81\xebO#2\xb1\xf3"C\xb1\xae#*\x15\xa2"-\xc1\x8f#\xc0\xa1\t#\xf4\x01\x00\x00\xf6+\xac"\x98\xac\xeb"\xee\x0c\xbb"ug\xbc"\xb1"!#\t\xad\x12#\xa8\x85Y#\xc7\xdf<#\xf4\x01\x00\x00v\xb5\'#\xa7\xa5\xa2"\xbf\xbe&#\xdbQ\xde"Cs\x86#\'\xc8\xf6"\xc4\xfc!#P\xf3\xb6"\x04\xcd\xcc"~:\x92"7V\xad#\x90\xd2\xcc"\xee\xa94#\x06\xc3\xdc"\xf5F{#|\xf1H#F\x8bm"\x92L\x80"\x01Ov#\xc1gZ":\xb7\x82"#\x12>#[Qe#\xdc\x03\xcb"#.6#\x02\xc0W"`\xba\xb5"l|\x91"\x163\xba"\x12=\xad"p\x94\x8b"\xfd4\x92#1L\x91.m#\xd70\xa2\x9b\xba/\x7f\xd7W1;O10\xee\x00\xe91\xfb_\x83.M\x12\x8f0)\x15s/\x8a\xcek0\xf4\x01\x00\x00\x98\xa8\x9a.\xf6\xd0v0\x9f\x8a\xbc.\xa1\x9a@-\x8e\x87\xa5,\x8f\x9d\x8a-\x1c\x18x-\xe3s\x910\xf3P\xd4,\xccN\xbc-\x17w/0\xf4\x01\x00\x00K\x08\xe2,\x16\xd5\x8b0\xb4\x05\xf5,% \xfe.\'nT-\xb2\x04\t0:\xd7\xf3/.iw-\xf4\x01\x00\x00\xfc\xd5P.\x06\xd6\x8d.\x90lZ-W\xb9\xb4.\xa3:\xfe1\xeb\x06"-\xa9\xaf%0\xbd\xe8\x160\xd7*\x87/\xb2\xea\xbb1J\'\xcf/\x7f,\xa3/BG\x97-v\xff\xd00\xcd\x93\xa4-\xe0\xa4\x83-\xb7i\x8a-\xe8t\xff-5\xfd\xd9-E\xa3\x180\xa9\x9f(-:_\x86-\xd71\x96-\xa7\xa5;-t\xa4n-E\xd0\xbd/t4\x1e.c\xc4\x002U\xe8\xf3,~\xc9A1n\xef\xf3.\xbaU\x94/F\x9cp2\xe2\x14\x8f3N~\xd43\xde\x83\xd83Gq?3\xfb\xf7R3k#\xe61\xcb\xaa81\xfd\xe3j2{\x0c\xca1\xf4\x01\x00\x00f\x8d\xc21\xd0\xb1\x983_\xf9N3\x99E\x151\x99[\xc51{(\x162Y\x95\x9c2J\xe7\xcc3\x1b\x99\x8e0F\nm1\x84~\x083\xf4\x01\x00\x00Z\xfd\x0b1\xb1\xf9\x073\xf1y\xbf0\x7f%l3Q\xce\x031\xdc\x0e(1]P\xb03\r\xca&1\xf4\x01\x00\x00\x9fz\xa91\x01\x00\x8f1\xb3\xef\xbe1\x7f\x9123\x87pX3+\x92\xc413\xa2\xc51\xc3\xd8\xc71\xf9u;3\x1e\x10"4\x89\x15\xcb2,-\x022\xd7sB1X\x90\x143\xaf<I1w\x10\x1c1\x1d\xa9\\1\xbd\x86\xdf1\xa4\xa7\x8c1\xec\xb0w2\x0f(\x8c1\xf5\x11\xf81\xf0\x1781#<\xe11z\xf7\xbc1"!\xd92\xb6(@2x\xc6F3\xa2(\x9d0\x8d6#3x\x82m2\xb28O3\xa3\xca\xd93A\x9d\xde3\xb2\xaa\xe34?\xa0?4\\\x8aZ4Eu{4\xfe\x8c\x113\xe0\x1d\x143B\x90)4g\x1a\x9f3\xf4\x01\x00\x00Cp\x863\xc2\xd3\xa54\xc8\xcc\x994\xac\x01\x0533\x93\x813_\xc0\xbb3L\xcd\x0f4TH\xe74:f\xa92\xc0I\x983G\xf2\xeb3\xf4\x01\x00\x009\x05\xc72\x1e(\x844(E\xce2\x18\x1734\xe1\xd6P3o\x97\x1b3\x04\x01T5\xeb"\xc03\xf4\x01\x00\x00?\x1a\xbc3\xa4_\xaf3\xf1\x91\x8e3\xd6\x84x4\x1dC\x854<\xbc\x1a3\xa6%<3\x018\x833\x90\xadm4\x08y\xbb4\x13\x96\x104\x86\x0c\xd53i\x93N3SZx4\x1a\xa2\x124T\xc3k3\tSL3/O\xad3\x81:\x8a3\xd2\xd3\x8a3\xb7.\x9e2r\xf0\xc33\x95\x90\x973\x87\xbf\x8c3\x9b\x8e\x9d3\xf2\x16\x983\x90\x01.3\n\xe3\xd83\x14\xcc\xc62\xd8\x94.4\x08\xc6\x8a3\r\\\x9a4\xcf\xe0l4\x94\xe0\'4\xad\xe5/55]\x174\xb5\x0f\xc14\x11\xea\xb14+\x8e\xe03\x98\x8d>4\x82@\xb34\xe1S\xd04\xf4\x01\x00\x00\x96\x03\xa44?\xbd\xde4\x9d\xce\xfa4.\xba84\x92\xce\xdc3\xec\xd8\xce4o\x0fk4\xb8\x9e!5\xc8\xd7\xde3\xc1y\xd94\x8f\xe8\xb04\xf4\x01\x00\x00\xdb1\xe23\x19\x89\xb44\x10h\x1a4\xeaA\xb4477\x904\x0f\xaeQ40\xe6\xaa5>\xd6\xec4\xf4\x01\x00\x00\x0cr\xb04\xd4\xeaz4\x0f\xc8\x924\'\xf1\xd94c\x7f\xfb4_Ze4KH~4\x89\xe8K4\xe9\x87\xb14\x04O\xdb4\x950\xc44\xae\xe1|4\xe2\xcc\x874B\xe8\xcc4\x87H\x035u\xd0\x914\xfat\xb53\x1f\x9cK4\xbf6\xd94\xa5\x16\x074]\xb3\xb73\x99D\xae4Ih\xbb4\x1b.p4\xbd\xde\xa84\xb8\xf9\xdf3\x97\n%4\xc7qa4.M\x054\xc66\x8743$\x054\x91K\xd249\xf2\x8e4a\xefB4\x1e\xa3*5\xcf\x95W4\xd5\x08\xd44nt\xb64\x99\xb5f4\xfe^\xcd4LA\xe74zXd5\xf4\x01\x00\x00\xedq\xf64\xd0u\xe94MG\xce4\x91\x10\xb44\x94j94OO\x195\x11\x9b\xc84\xfc\xb6\xf94\\\x04-4]\x07\x815\x18\x10\xda4\xf4\x01\x00\x00M\xc9T4\x84\x9e\xca4\xf6\xbb\x9a4\xff\xf5\xc542P\x1b5\x97w\xed4\xec\xc7\x9e5\xa8\x11G5\xf4\x01\x00\x00\x91\xfe\'5C\x8d\xb04y+\x195\xab\x91\xea4\xd4\xda\xe34"\xf0\xde4]\xa5\x155\x9d\x7f\x984=<\xb94\xe5f\x964\x197\x025\x03\xe1\xb54O\xfa"5\xb4\xf8\xc84\xa5\x97_5\xde\xe9\x115Q\xcd=4\xae\x90h4&\xfaU5\xf3 $4\xa28N4\xe8J-5\xabAH5D\x86\x894yp\x195\xf0 644\x16\x924*\x0b\x874\xf2M\x804?k\xab4\'\xfbK4\xdb\xd6\xda4\x04\xd3\x954\x9avY4i\xf5#5ym\x904!z\xd74\xc1\x89\xc44\xe2\xf8\x934\xe1p\x075pn\x075\xd4\xd6\x815\xf4\x01\x00\x00\x7f\xed\xfa4\xa50\xdc4\xa7\xfa\xb34\xda\xe7\xba4\xcf\x95}4K\x9e\x115\x13\'\xeb4\x1bG\xe74e6]4\t/\x925\xa3\xac\xec4\xf4\x01\x00\x00\xaf\xa9n49\xc2\xc44s_\x934i\xb4\xac4\x15\xa5(5\x14\x85\x115\xe5\x14s51\x98B5\xf4\x01\x00\x00:\xdc 5V\xe0\x9b4\x0c\\"5E\xd0\xd44a-\xad4 \xa7\xfc4Q\xa5I5\x82\x87\xb44\xf2\xd3\x9e4\x87\xecz4t\xf3\x015\xba\xa7\xbb4\xac2Q5\xc0\xbc\xb84\xecB\x875>\xde\x055\xcd\x83\x854\x90>W4\x13PT5\x06kc4\xc2\xa5l4d\x06,5"J^51L\x8d4pa\xef4U[^4%*\xb54\xd1\xefk4y(\x8e4\xe3Z\x9c4\xec\xfd\x844\xd6 \xd14:T\xb64~\x12H4\xdae\xf64F\x7fq4\x98\xf5\xd54\x04\xc5\xd74\x12\x04i4<7\xd54xy>5\xc2\xb795\xf4\x01\x00\x00\xc1t\xdd4\xe7\x08\xdf4\xce\x86\xc94(\x03\xad4,\xc7`4S\xef\x115\x7fm\xed4\xc9\n\xe44V\xed\x8d4\xd5\xddR5}\x1e\xec4\xf4\x01\x00\x00\xc9\x9bA4\x05\xcf\xdd4\x00\xbfi4}E\x9e4\x8e\xa5\x0f5v\x99\xeb4\x0c\xc6`5\xf2d!5\xf4\x01\x00\x00f\x05)5\xea\xa9\x904\xe6\xd6\x155\xf7Y\xf14\x0cm\xb84\x9c\xd6\xd94`\xcf\r5\x95i\xab4\xdej\xa24\x82\xb0\x8441n\x1254\xb4\xe44\x81E\x1b5Ij\xd54VD\xb05\xa5\x9815i3X46\xec\\4\x12\xbeS5ErA4\xa7N54\xa0\xc5\x0e5}\x0635\x92E\xc54\xf8_\x0e5\xe9\x8104t\xb9\x894:\xfcD4\xed/o4\xa8\xfa\xbc4\xb4\x7f\x814\xa6\xb0\xed4?\xe2\x9f4\xa1k\x1e4 0\x944\xf6@\xf13\xa8JR4\xb5\x07\xd04{\x9c\x124\xe7\x12\xee4\xe0C\x895\xce\x0b\x835\xf4\x01\x00\x00\xe2\xa2\xa34\x0b\x0b?4\xa1\xbdC4\xd6\xb8f4N\x9f\x054z\x14\xb84\xd4#\xc04\x8d\xf4\x055\x91:\x8a4l\xb3^5\x13\x91\x035\xf4\x01\x00\x00\xfb_\xf43Y\x03\x8e4r\x18\x134\xe3@R4\xfc%\xfc4\xfc\xc0\x185\xb3\xb6\x155\xb2\xec\xf64\xf4\x01\x00\x00E\xaa#5#XT4\xf7\x0c,5\xb2\xcd\xcf4T\xb1\xc04\xf4d\xde4,i\x155\x8eh\xf64\x0c|04B\x85\x844l\xe8\x1a5k1\x185\xe5.\x145 \x11\xc34\x10"\xc95E`\xef4}\xc7\xda3\xc0p@4\x9b\x81V5z0\xb73\x92m\xb33\xed\xcf\xfe4+\xc2C5\xf2\xab\x005\x97f\x974\x01\x19\x0c4\x1a\xb8\x924\xee\x16\x004\xfbz\x1e4\xc9\x1c\xbe4\xac\xb7O4\xa0~\xf84J\t\x064\x14\x19\x144\x9e\xb6\x864R\x04\xa73=oX3\xe0lQ4\x1e@\xae3\x93Mj4\xdc\xd4\x8f5\xd0\xb0\xc84\xf4\x01\x00\x00\x86\xc3\'4s\x08N3\xa4\x8573\xb1@\x943Pj\xfc2\x0b\xdd\xc23K\x97\xa43\xf5\x91\xcd4\xdb3\x0b4\xe2`*5::\xe24\xf4\x01\x00\x00N\xc0(3a\xe6\x883\xae\xcaN3\xb8\xe2\xa43]F\x904\x87%\x9849=\x184*\xcd\r4\xf4\x01\x00\x000\x86\xcd4@\xf9\x004\xa1\x0fH4\xe3\xdf\x144%:z4\x0b\xa804\xea\xd4\x8b5\xd4K\xdc4:\xe2\x1a3\xfdXc4F\x1b\xad4\xcf\x06\xdc4\x1b\n\x045}\xe7(4\x0b\xd9t5F\tN4\x01 \xa32\xd37\xf83e\x9a\xa74/\xbcK3\xadg\x193\xa4\xe5F4\x08\x93\x9f4\xcb\xc3\xc04\xa9\xd9\x8d3l\xc7\xa938i44\xa4:E3j\x8a*3{n\x994mb\xf13NF\x864\xbb\xb9\xaa2\x04\x12\xb93\x06VJ4f\xd5\xf72K\xa0\xd01\xe5<\x1a3\xd9q63[\xc4\xb83\'4\x005\xc3DM3\xf4\x01\x00\x00\xcb\xa3\xb33\x8ck\x1e2Y4\xc81\xd5\xd6R2A>@1\xd0`\x9f2\xe8\xd2\x102IQ\xae3ol\x013\xf5\xf2\x9c4Y~\x974\xf4\x01\x00\x003\xc8\x0b3\xa77\xef1\xdc\x19\x8921\x06\x8a2\xd7\xf1\xae3\xc9\xab\x0e32\xc6\xda2\x9a\xee\x983\xf4\x01\x00\x00\xd7\xb4\xaa3+\xe1f3\xb8\x96\x0f3\xbbO@3o\xe8\xa83\xdc\xbbU3|\xca45:se4\xe1(\x991\xc9\xdb\x963\x14X\xe83\x0bH\x0b4\x08\xf4\xb54\xa0\xe3`3\x01\xc234\x0e\xec\x803"B\x042=\x9eO3\x92\x98\x8c3\x95c\x833\xbc\x9d32\xc1NL2)h\x883\xa2\xc2\x0e4n\x1dN27\xf7\x8f3Tn13]U\x023\xb3k\xcf1=\x92#4\xcf\x0e\xb02\xa5.\xec2\x8e1\xdf/\xfe>\xfa2b"\x981\x13\xa7\x152l\xb4\x160X\xef\xb80NzA2\x9d\xc1\xb72kMn3\xfd\'\xb61\xf4\x01\x00\x00\x90\xc9+3\xeeoh0\xc7\xe2\x8d0\x88Y+0\xf9\xec@0\xe2\xee%1\xe9a%1\r2\x9f0\x14\xbdj1>\x18\x7f3\xf6\x8c\xf42\xf4\x01\x00\x00z{\xa02\xb0\\\x060\xb0*X0\x80:\xc8/\x10\xa0\x8f1jY\xc40\xb5\xcb:0\x1d\xbf\x892\xf4\x01\x00\x00\xffp\xf40\xacF\x0b2G\x01\x850\xc7\xdeo1\x9f\t\n2\xe9\x02\x082\x1el\xf737;;3]o\x070O\x1bg2h\x85\xfc1j\x9d\x802ON\xc33u\x7f\x171B\rt2*C\xa70@=A0G\xa6\xa12\x80\x17\xaa2\xae\x13\x9a2\xabmy2~v\xcf0\xc4?\x112\x13\xa2\x172\r`!1\xbb\xd1\xbd1\x99O\xeb1\xa2I72\x03\xfb\xb50\x85=\x183D\xaam03\xb9D0Y)\x87.\xa8\x1dH0/\xf7\xc70\xfd,\x022\xd4\xaf\x10.\xa9\xa3\xcd,`\x80\xce1A\x96\\2}\x88\xb20I\x02\x031\xf4\x01\x00\x00\x92#\xb60XNP.`\x0c\x86/ \x0e\xd2-#\xdb\xea,j\xac\x021j\xf2\xbc/\x80\x9a\xed,gu\x862\xca\xf8\x9f0\xe1$\xe10\xf4\x01\x00\x00\x8cJN1\x1f3\x04.\xfc_\xa5/\x15\xc7\xa6,bh\x1e-\xb6\x12\xd2/\xd0k:-\xc70\x11/\xf4\x01\x00\x00\xc3\xd5\x861\xfa\x93\\1\xd0\xb9\x8f-a\x07?.\xe3@,.\xdb\xb3%/e\xf6=2d\xb6\xae0\x8a\x97\x1f.[\x85=1!\x93\xb4.\xcc\xb4\x8f/0\xdd\xb51\x8a\xa0--\xf0\xbc\x050\xab\xe8<-\xa6c\xc2/\xc1\xce\x170j\x98\xb51S\xed\xc11i\x18\xa21QOp1v\xbeL1<\xf9\x19.\x04\x02\x84/\xe5\xb8\x04.\x86Z\x17-T_\xc8/\xb2n\x0f.!\xe7\xbe0\xa6/(.\x85=\t-x\n\x1e\'\xdd`\xba&\xcc\x19\xba\'\xe2\xa4\xc2+\x96\xd5(\'Q\xed\x0f\'\x00\xdd\x0c*\xf1#\x00-\xd1\xe8b\'\xbf\r\x13,\xf4\x01\x00\x00+\xb0A,\xe2i6)o\x1e\n+\x88]2\'\x8b\n\xa8&^S\x95\'\xab\xa2-\'y\xf6_\'\x89\x15\xa2-\xf9T\xce\'\x80\xaeS*\xf4\x01\x00\x00\xe1\xf2\x11-\xcd\xd4\x8f+\x11\xc1\xfd\'\xf6\xa4n(\xee\xa2\xa2-\xd6\x04Q\'4\xabS.\x92\x92\x97\'\xf4\x01\x00\x00\xff\x9c\xae\'6c5*\x8e|\x8d*(h\x1e\'\xad0\xad);\xd6/\'\x88X\x84(\xeb\xfc\x02\'\xac\xf6\x8f+\xdd\n3*\xca\xb7u\'\x9e\xf0\x11\'8&\x88(K\xadM\'\xd2\xd4t+\x89\xb4\xcb)OA\xa9&_\x8f\x86,O\x82\x90+M\xd6"+\x80|\xa2-\xdd\xf4\xa9+7\xba\x85*\xf4\xa6\x10\'s\xf9\x90.\x16\xa7\xe4\'\x16|\x01\'\x1b\xab\x88)\x10?\xfc,\x96t\x17\'\x0b\xe8\xc6&\xd9\xecE\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc4\x8d4,Q\xca/))h\xe7)N0\xc6.x"\xca0+*\r-e\x82\xe4+\x88\xbf\x9d)\xf4\x8e\xbe-\xd8\xc60*\xf4\x01\x00\x00\xb6N\xbb)p\xbf\xff0I\xd7\xba-\xf4\x93\x1f+\xb3\x7f\x1e)_\'\x12-\xa5\xf9\xb0)0\xad\xf5/\xa4\xdbY)#9A*\x840\x92*\xf4\x01\x00\x00?kg)\xa0\xd4\x1a/\xd8j{)\xabs\xa2*\xbe\x95\xd8)V&\xc5)w\xca\xa3/L\xde\xfd)\xf4\x01\x00\x00\xc0\x9cw+\xf8X\xe4.\xdf\xb7\x9f/\xe6+\xbb+\xfc\\\n/\xef\x9f*,(}l-\x8c\x0f\xc1+0Z\xd9/VI\x87,\xf2\x13/-m4\xde/M\xfa\xf2)@;\xa8-\x8e\x06)*c6\x1c*M\xe9-+\xfcr,)\xc7\xf5,*zS\x12-~\xb2/)\xa8Q\x95*[\x1d\x1a*\xdf\xaf\x89)\x11\xdf\xf4)\x1f\xff\x10)uCt)\x9a%\xb3,\x13Fz)\xce\x1a\x9f+0\xdb\x9f-Nh\xbe/[x\xeb/n\r\x0b0\x92g\x1f1\x04\xcf\x1e1\xb3\x12\xa12\x05\xd6\xf1/\x00\x9d\x8a.\xfa\x1d\r0\x15\x1b\xb20\xfc|\xe4.\xf4\x01\x00\x00\xb9X\x85/\xccf\x083\x7f\xde\x072Fj7/J\x8c\xa1/\xe1\xd3\xcc2\x19#a1U\xfe\'2\xfe\xd7\xe0-\x89z\xb0.U\x88\xf60\xf4\x01\x00\x00Y\xa5\x89-\xd8\xed020\x94\x95-\xa2\xd6\x101=\xd8x/\x81\x18\xde0\x13w,2#B 1\xf4\x01\x00\x00X(\x161#\xe6\xef/\nx\x8e1\xbf\x81b1\x92\x1e\x121\x14\xa5\xa61R(\x9e.\xfc\xcat1Ek\xb32\xb5%\xbd1\x084\xdf1F\x00\x9c1\x9b\xc0\x14/B{\x132\x02\x14\xbd.\xc3\xec\xfd.\x19570d\xc9\xc4/\x19mp0\x1a\xfc\xfb.\xee\xa5\xf3.\xa3\xd262/\x937.\x1a\x9d\xaa/\xa6|\xd00\xd6\xa1E-\xb5\xe1\xd61\xd0r\x830\\\xdc\x94-U-\xa50\xe4[\x82/A\x88\x842~\xa3<1\xf2\xd9\x831a\xda43\'\xab\n2\x99\x84O4A!x1\xe7Yd1\x10\x87x2\x81g\x082\x88\xf0\xe41\xf4\x01\x00\x00\xf5xg1\x13\x88>4\xe7\xc3Q3\xe4\xbe\x9b0\xc0`\xd51\x17s!4\x1b\x86/2{QH3N\x9dJ0\r\xcb\x9a1\xad\xaa\xe31\xf4\x01\x00\x00\x83M70\r\xa6\xb02\xf9\xb8L0\xcb\xe0L2\x87c\xf11\xb4\xc2\x063\x91E\xd83\xb9r\xb73\xf4\x01\x00\x00\xb3[\xc92t\xba91\x00\xe0N3?\xd7\xb62c\x88$2\'\xab\xb43/\x08\xb90ZSi2\x12\x8d\xe03\xf6@\xf92\x11\x9cl2\xd75{2\xccM\xa51]Q\xe02Z\xa5\x8a2\xed\xa0\x011`\x0f\xee1K\x93\xb31R2F3\x16l@1`D\x150\xabp\xf23_\x94\xad1\xccA\x841\x0c\x95\xef1\x9bS\x910\xaej:3\x933\x7f1\xc5=b0$`92\x88v\xee1\x01t\xc13\\\x82\x862\xcd\xce\x042\xac\x1b\x054\x81Xq2{\xcb\xac4,x\xd12\xf6W\x072\xf2\xb5V3\x0e^.3\x1b\x99U3\xf4\x01\x00\x00~F\xb42\xdc\x8a\xa64m=\x1b4\xf9\x80?2\xf7\x03\x053\x00f\x8b4_)\x193\xc2Y\x104dy\xfd1\x04\xff\x153\x95\x07\xf52\xf4\x01\x00\x00O\x1e&2\xeb?\xa03\x906\x192v\xab\x853p\xba\x833\x19l\xe63\x95\xe4\x9c4o\xbfu4\xf4\x01\x00\x00\x0c\xcf\r4\xc3\xb9\xb72\x9eu54\xd9*\x963IZ\t3I#Y4\x99,\x9d25`O3C\xe9N4R+\xeb2\xfao\x8d3\x02\xdbB31\xf0\xe12\x0f\xb7\xee3\xf5\xd1\x993\xabh\x9b2\x05o\x192\xbdl\x912f\x7f/4\xc3\xac=2O\x14\xec1f\x7f\xd64q\xe9\x133\xb8\x99\xc92/\x98\x1e3\xca\x12\xaf1\xdf\x07\x9e3\xd9\x10!2\xe1\x1c\x1c2Z\xe133eh\x8f2z\x11\\4\xba\xadk3B\x8c\xbf2\x91\xe8*4\xc6\x99\xc02\xc4\xfb\x165\xf0\x9fl3\xf0\xaf\xd62\xcc\xe2\xe83\x14\x99\xe03\x94\xc0P4\xf4\x01\x00\x00\xb8\xfd\xad3\x83\xae\x135\xa3 \x084\x05\x90/3[\x94\x9e3q\x18\xfc4\xd0\xf9\x1b4\xdf\xa6V4\xd2M\xe821\xb5\x0447v\xa03\xf4\x01\x00\x00\xd4O\xf22\x1aV}4\xf9X\x053o\xc6\x044\xf8p$40\xef\xc74Ks\xc24\xf9+\xd04\xf4\x01\x00\x00\x93\x8f\x9c4\xb7*\xa03\xc37\xc24 zO4\xc2\xe6U3}4\xa54k\xc4\x8b3\x1f\xff\n4\xa7\xc1\xa14\xd9\x1f)3;\xca\x1d4X*\xf43\x8c\x0c\xc53\xec\xa2\x8b4\xcd8\x8b4\xf7\xd9\x903\x92l\xbb2\xa0\xca\xef2\x921\x1c5\xd8d\x912\xf12\xc32\xb0mG5\xa9\x1e\x804\xc6\x0fl3|\xd4\x1f4\xc7\n\xa02?f:4\x95\xe7\xd02\x85P\x023J\xfa\xad3\xff\xf3;3B\xe1\xbe4\xc5\xf9\x963b\xc3\n3\xd1\x8d\x064>\x02\x0b3\xa9\x83\xf94\x08[o3?\x1f\x1a3\x06\xc8q4\x89\xa6&4\xf6\xd7\x025\xf4\x01\x00\x00\xb4^\xea3\xd1^\xdd4\xb2\x0e\x9d3B\xaet3\xabi\x883y-\x155\x01\xb0\xa24R\xa4c4\xfa\x9823\x89Ou4.z\xf53\xf4\x01\x00\x00\xce<,3\xa0\xcax4\x9a{93\xc8\xa1\xc13??!4\xde\xb0\xd54\x9d\xa9\x934v\x87\x9f4\xf4\x01\x00\x00\tT\xe64\xe0\xdd\xeb3\x05e\xc64$\x96\x8a4\xcb4\x853U\x1e\x974\xd0\xd3\xc63\xcf\xf5l47\x05\x8f4.<D3\x0f\x12r4r\x05S4\xb7\xfbL4\xc9D~4\'\xda\xef4t\xea\xf33\xa9\xda\xfe2+Q\x163]1\x025\xfd\x88\xdd2\xd9\x84\x063\x9a\x93\x195\xf3\xe1\xed40\xa8\xac3k\xc5!4&h\xd22\xa2\xb1h4{\xc0\x103\x9b\x04D3\x14\xe1\x1b4a\xbc\x8a3\x97\x93\xd64*2Z3\xf9\x9213N\xb1\xab3\xdf7\xbc2\xe7\x94\xb84#vz3E*\xbb2X\xc1\xa74\x96\xd8f4\xbd\xe5s5\xf4\x01\x00\x00\xa4#\xcf3X\xbc\xfd3c\xff$3\xda\xe4\x1c37\xe5t3\xdc\x1f\t5\xb2\xdf\x005}\x9dM4\xba\x88\xe42\x9a}\xfb4\xa3\xb0\n4\xf4\x01\x00\x00SW\xde2\x983\xb33\xec\xca\xee2d7\x853V\xffI4\xad\xd5\xf14\xf7t\xe037\xe0\x9c4\xf4\x01\x00\x00\xce\xd3\x045\x88u\xf63\'\xb2\x0f5`\xf3h4\x98\x1a\x883\x93\xf4\xd84M\x8c\x0e4\x8b\xfa\xb24g\xe8\x124\xe4\n\xf42k~\x834;\xf1K4\x85\x08Y4W\xdc&4\xd2d\x155e \x8d4g1\xa32\xee\x8d\xef2X\r,5_\xf0\x912\x9b~\xc12\xaf:\xfa4C\xda\xac4j1\xa83\x88V\xfc3\x93\xce\xa62M\xf9\x114\xe91\xbb2\x1fa;3\x8cG+4d\x1cY3-m\xa24\xa2\'\xbd2Z\x0f^2\xef\xef\xdd3P\xb1\xd42\xd8\xf6Y3\xe5?)3k\xc3\xc1227\xdb4\x9e\x8dH4\xfb\x9f\x825\xf4\x01\x00\x00\xa8\x9f\x123\xc4\xd4C3\x87\xa3Z2\x83\xack2\xf1l\x0033\x14\x024rV\x954\x9b\xef)4\x07\x1f:2\x8d\x03\xfb4u\\\xcf3\xf4\x01\x00\x00\xc0\xa5\x152f\xf6\xab2i)\x1c2\x08$\x9e2\x0c\x8d\x174\xde\xf6+5\\{\x003sE?4\xf4\x01\x00\x00\x1b}\xe64F\xba\xab3\xb2\x9675\xbdv\xf03`k\x083\xdee\x005o\xb9\x0f5l\xbb\x864\xc8\x8a\x863s\x7f|2!\xc4\x064\xb7\x95\xb53\xae\xa3\x864\x16\x9e\x993\xb2\xa5\xb94\x93\xdfk3w\x13i2\xbb\xf0Q2\x7f\xcbC5\x8b\x86\xd51e%92\xcc\xde\x944\x99\xbf\xdd4_\xd7!3i\x1b\xb623\xc6\xbf2\xb1\xc6F4\xd0\xdd\x0e2\xa7@92\xc7\x80\x1c4\xf5\xae\xb33\x80LY4\xaf\xbf\x192\x19\x82`2\xa8"\xc33\x97K\xff2(Sj2!O\xf51\xd9\xff22\x01\x12\x144\x98\xfa\x913\xc3\x99\xc84\xf4\x01\x00\x008\xd2m2\xba.\x152\t\x07"1\xb3491W;|1\x1a\xebp2\xc7\x07P3\x86\xa3\xe22?\x00=1\xeca\xbe4\xa7\xde\x813\xf4\x01\x00\x009\xea\xf701:\'18p\xf30\xc7\xcc\xdd1\xa7\xe0\x014\xba\x8f\x8540(\xc61\x04>03\xf4\x01\x00\x00\xa4\xaa\x984D=\x163\x14\xb1;4\x90\x1e\x1e3\x14\xd7\x8f2\xa7\xc4.4\xafvW5\xadR\xfa3j\xb8Y2\xccW\x852\x8eT]3\x90\x9b\xc32\x9d6+4\xad\x8d\x1d3\xddx\xe93y\x8b\xa52i\xa7Y1\x8a\xd1\xcb1\xf4\xbes4\xa8\x1d\x181\xea1I1hI\xcc3\t\xf5341.\x9e2\xcd\xd0\x891\xea\x9d\xb21cK\x034\xa7\x02\xbe1\xa1L\xfd0P\x96d3 \xc5\xb92\xb2\x7f\xc03\x04(\xb6/S\xd7\xb71\xa9S\x871\xf1w12\x194T1\xe0\x8b\xb70\xfdp\xb81\x86\x9e\x003\x18\xf3\xc22\x86\xfc\x922\xf4\x01\x00\x00\xef\xcb\xb11/Y\x020\xf6Q\xe7/\xc7\x8a\x82/`\xc5\x02/\x9e\xcd\x841Bp\x9b1\xca>U0\xe7\xee\xf5/OO\x0e4\xf3\xe301\xf4\x01\x00\x00\xee#@/\xf1|\xda0\xbd\xf0\x86/\xb3-\xca/!x\xb829\xe7\x952\x19\x8c\t0B\x95s2\xf4\x01\x00\x00\xbd\x8b\x143\xcf\xec\xb82\xcd\xb8$38\x1b\xb31\xeaS\x920\x87ML3 \xda\xaa4\xac\xef\x0e3oK\x001\x8c\x98n2\xbb\xf7\x8c2\x94\xe9\xe01X\x1c\xb03_\xe5\xd32<\xde\x1d2\x80\x03\x881zQ\x981\x03,\xec0\xd09\xf42\xb9\x16\xd51\x9e\x05\x050y\xd9\x821Q\x18\xea2|\x10\xe70\xe6\xa8\xdf0a\xc3l0\xf9\xc2+3\xd1%\xd90~\xa0K/e\x9b$2\xd8\xa4\xbb1k#\xff1\xd6\xb2\xab-\r\xd2\xbb/\xea\xb4\xd1.\xd3\x9f\xce0A\xb5#.\x85\xd0\xa0/.\x7fg1\x92\xabT2\x84A\x082\xd1\x8c\xcc0\xf4\x01\x00\x00\x90v\x88/\xbf9b-\xb9\xae\xd0.E\xc67-\xd3\xb8\x1c-\xc3\xac3/\x1a\xd7\xab0\x8c!\xf9-\xd7<\x8d0\xc8\x1d\x842x\x17,0\xf4\x01\x00\x00V\xe7d-r\x001/\xbc"\xa3-\xba\x8bQ-*7\xc8.\xbf\x86\xd2/\xa6\x073/\xf2M71\xf4\x01\x00\x00\xc0$\x8f/\xc0\xe2\xa4/\xc6Q81\xae\xcc\xe0.}\xe2\x8c0\xa2\x13\x022\xc0\x1a{3\xdc\x88\x8f2|l\x16.\xb8\xa9/0\xf9\xcf\xa30\xea\xdc+0q\xcc\xb12=\xda\xa9/E\xc9\xbb/\xe6u\x85.\xab\xfe\x14/\x85T\xb7.\x82\x95n2\xc1\x8ei0}\xa1\x0c-\xb3\t\x83.6v\xf90\xe0\'\x8b-\xae\x7f\x9a.\x04\xa480\xacj\x931n\x7fG1\xf0OL.\'\xe4\x080\xaf\'\x170\xda\x02W/ \xcb\x97)\x01\x11\xf0.\x11\xc1\x84+0\xa4./q\x8d\x97,)=\x8a)\xa7\xc1\xa5-j,\x02/L\xedN.\xa0\x07\xc7,\xf4\x01\x00\x00U \x89-\'\xb6\xa5*"2\xe9*tP\xab)nyc)\x03\\\xc0+<\x0cK.`\xe8\x8e)\x13\xd8])\xda\xc3&/\x0f\x91\x9f*\xf4\x01\x00\x00\xf6\xd2\x84,\xeeH\xa1);\x02\x80)m\xa6\x16+\xb8\x00K*\x8e\xa0c-j\xc9Z-b[\xb9.\xf4\x01\x00\x00\xb1\x8b\xfb,\xbf\xe8)0H\xb8q-\xe9\xf8 -\xe6\xee\x80)\x88\xa8\xe2,\xf6)\x8a0\xa0t\xfe/\x95\x93O+\x8c\xbd\x8f.=\xf7A,\x8a\x7f\xbe)b\xe6\x02/\xc2\xf2l-=\xab\x8d,I\xb1O.\xb53 *\xd1\x9a/)\x98\xc4\'/>D\x98,\xce9t)a\xac\x15+9\xb8\xfa+\x19\xef\x8a)I\xbe\x01*\x0f\n\x06,}@\xfb)\xa8\x17\xe9)Q\xda~)\xc2\xcb{.\xc8\xe7\xb5*C>\xcb-q\xab%$Ja\xc3#E\x97\x80$\xe0\xe8\x17)s\xa7+$\xa3\xde\x16$\xa4\xac\x16)\x05,\x16)\xc3\xdcm$g\x98\xc3$\xf4\x01\x00\x00\x8b+P$\xeb~3$\xd8\xba,$\x8e\xf9:$._\x04&\t\x15\xb1(h\x046$\xa8^\x1b$\xaa\x1f\xf2#\x9d\xbe\xd6$(\x99M$\xf4\x01\x00\x00\xec\x98\x00$8\x070$\xde\xb5\x0b$D\x91\x82(k\xb5p$\xbf\x1b[$\xdb\xa8\xe4)a\x02\x83(\xf4\x01\x00\x00"\x87z$\x8a\xf7\xf2#\xb6\x16y$\x04\x99d*1\xb8\x0c$"S8$\x98\xeeY,\xf8\xdb&$\xe8\xf7\x18$\x9cp\xda#\xf7\xc9\x80$\x18\xfc\x18$\xc1\xf0\x86$\x156&)\xd3:\x83(w\x8d\xc5+\xc5l\xb1#\x12\xa8\xbf#\xb9\xf8\xb7$<!\xa3#BD\xc3#c\xf7\x8d$\xd6G\xab$p\xa2\x17$\xff\x13\x88$\x8b%\xa1#0\xbc\x07$\xc1T\xd9#-\x13\x0b$\xeed\x01$\xfc\x81\xd0#4\xf3Y,\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xa0*\x9e!\xa1\x85:!\xaf\x88\xf5!_\x0cB!4\xe1\xa3!p\t\x90!\xf50O!\xbf:\xa7!\x08\x17\xe3!\xb0\xbc:"\xf4\x01\x00\x00\x00\xbe\xc6!\xda]\xab!A\xe8\xa4!\xc1\x81\xb2!\xbe,(!&\x93\xf2,\x00\xc6\xad!@U\x94!e(g!\xd8\x04M"oI\xc4!\xf4\x01\x00\x00\xf0\x8bu![\x0e\xa8!\x1eb\x85!3Y\x86!\x8d\xce\xe5!g/\xd1!\x98\x1c\x1b"\xfb\xae\x06"\xf4\x01\x00\x00y.\xef!\x85\xf6g!\xbe\xce\xed!~\x88\x9e!\xaeX\x86!\r\xfa\xaf!\x9d\x05\xe7!\xa9u\x82!n\xcb\xa9+\x08\x8cP!\x88\xe9\xf5!]\x0e\x92!5\xd4\x00"\x10l\x9d!\x98.3"\x94<\xa2)\xf3z\x91+\x06\xfa6!\xb8\xa3/"\xf4\xbd\x1b!bl:!$\x9a\x07"\xee\x85#"^\xc4\x90!\xfd\xe8\x01")\xd9\x19!o\x96\x81!\xe9|O!\xbc\xc6\x84!\x8a\x11w!\x92\x10G!\x9e\xbc\xa7!\r5\r*\xca\xd5\x82*\xb2\x19\x030\xe1=\xad)\x07J\x881\x04h\x01*\x1f\xad\x99/B)\xed.\x99\xbdJ*R]H/\xf4\x01\x00\x00\xf3\x8f\x85-u\xea\xd20:\xe7M,\xe8]\x1f*\x80\x9e\xc3,zC\x1d1\x87\xab\xee-s|\xb8,V_\xce)[\xac\xe1-y=/*\xf4\x01\x00\x00\xd57\xdb)r\t\x16*\x9a)\xee)\xf1\xe2\xef)l=(/\x80\x87B0.\xda\x91-G/\xe50\xf4\x01\x00\x00\xbd\x07\xa4/N\x17\xcf)W\xe5\x8a0\xef\x88\r*\x89j0,SZ\xe70~TB+=\x1fI-\xc3/\x070\xfcV\xba)s\x8b[*Ie\x02*?:\xbd.\x82\xf7C+\xef\x0c\xc2,\xa3\xba\xf3,@O\xe6.y[\xa3)y\xc2\x8a.\xd9\xa3\xae)-o\xa6)\xdc<\t0\x925\x92*`N\x13*%\xf6g*(Z\x89)\xf5\xa1U1{=\xb9)9\x14\xed)\xb8[N*\xa6\x12\x9f.)\xa7\xdd.\xb6\x1b$-\x11\xc5m-Z\xfa10\x85V\xc9,\xfa\x95)24\x7fo-\xe8\xac\x97/\xd5\x0cr0\xd6\x9ek-\xe0\x123/\xf4\x01\x00\x00\x98\xef\x05.q\xec\xc61\x1b\x8e\x92-\x1bN*.\xaex\x84/\x0fV\xbf1\x98\x10\x06/\xf1Q8.h\xd7\xef,\xa9"\xf5/v\xc6n-\xf4\x01\x00\x00J\xc5\xfe,\x1fl.-\xf1\xb0\x10-:e\x0b-\xf9#\xf5/9\xb5M1\xff"\x98.l\x81S1\xf4\x01\x00\x00Q\xdc\x051\'\xe8\xf3,\xa6\x8b\x0e1)N\xfe-\xc1\x07\xb5-\xf6\xcb\xba1\x8c\xdc)/9\xf1\xd2.\xff\x83Y0\xb0\xd5\xd7,q&\x7f-\xfe\x8a\x17-z\xd1\x160\x88\xbb\x9c.0\xa2\x8c.\xb1\xf3\xcf-\xff\x0c\x0f0\x0f\x8e\xc3,\xd3\r\xe80\xf8\xfd\xa1,y\x7f\xcd,!\xb2\xde1Q\x90\xb3-`v\x18-[\xca\x86-\xbc\xa0\x9f,\x88\xe0\x821\x1c\x8c\xd9,\x9f\xc3\t-\xe1\x8b\x00-\xfd\x01z-\xe7B)/\xd3\x80\xe9.^\x03)/\xeb\xf5\xf6/O\x86\xa8.l\xa3\xa72\xba3\xcf.\xa0\xc6\xbc/?\xd3\\0E\xab\x1f/\xc5C\xd9/\xf4\x01\x00\x00\xf2\xda\xf1/M#\x0f2\xbb\xdeO/\xfb\xd0\xb7/? \x891`\xbeV2v-\xc3/W\xd2\x87/\xe8\x9c\xa2.=\xf5\xfd0\xe1L\n/\xf4\x01\x00\x00)\xcf\xc5.\xcf6\x06/\x9d\xfa\xbb.\xfd\xe8\xbc.\x05\'\xb4/\xfe8 2\x80\x1d&0G\xe8\x981\xf4\x01\x00\x00\xd9\x19\xba1\t&\xc2.\x96\xb9\xd01h\xac\xf30\xed\x03\xbe.?f62O\xc320\xcf+\'/\xa77P0z-\x11/=\xe7,/\xdfv\xa2/#\x93\xb40\xc3\x82\xde/H\xaf\x110\x0c~I/HZ\xa4/\xc6\xb7\x83.>@\x172\xc5\x01[.\xb3\xd1\x97/\xc2B\xa92n\x87-0\xa3h\xd9.\x83\xef6//XX.\x1c\xcb\xe21U\xed\x91.q\xb6\xba.\nW\xb2.\x84\x13(/\xde\x08\x800\x15Og0\xe1\xcbx/wvt0hq\xde/\xbd\xcb\x8a3\xea\xbe\xc9/&\xab\xba/\xbe\xfd+1U\x8e80[s\x0f2\xf4\x01\x00\x00\xfaQ\xbb0(563\x13%/0\xcb\xc7\xdf/7/\xf31_\x8a\xf02D) 2\x0f\xf3\xee0*Z\x90/o[\x8e0h\xa4B0\xf4\x01\x00\x00"\xab\x9c/\xe0\xc2?2\xa3\x96\xa6/\x0c\xce\xa9/\xbd\xc9Z1G}a35X\xe30#?\\2\xf4\x01\x00\x00\x94\xe2\x8d2\xa4\xa7C0|\xf3\x103\x98l\xb31c1\xaa/\xee\x90v3\x0fqi0q \xc00\x8c\xe4\x931\xa1\xa9\x82/\xba2.0\xce\xf4g0ir\xd20\xc6=\x810M\tc1V\x0770\x94B\xbd/\x17w\xd7/Zl\x0c3\x84\x84B/\x8eD\x95/\xe4\xe1#3W\xfdO16\xb2\xcb/2\x00\x8c0zS@/A9\xb82\x16\x92\x81/\xa0\xd4\xa5/P4\xd4/\xf7E\xee/\xff\xd3\xf41\xe2 *0f\r;0\xe3\x0e\x930-\x12\xcc/7\x05 3N\xf9\x020\xd4\x99\xdd/BK\x182\x13\x16L0\x07\xbc\x023\xf4\x01\x00\x00\x96\xad?0\x86\xbc\xbc2$~\xb10\x9c@ 0\xcc\xd9\xc51\x0e;#3,\xb6\x862\xa0\x0f\x810\xde\t\xcd/\xb6Bp1\x85\x9e\x880\xf4\x01\x00\x00\xebL\xda/h\xb5\xcb0\x8d\x9f\xec/\x8d\xcc\xee/\xa9\xe7\x071\xb9\x03\xec2\x98Z\x121\x0e\x89"2\xf4\x01\x00\x00\x15\x15\xed2\xe0R\xd2/\xe6\xa0\xeb2E\x8b\x1625\\\xee/\xa1j\x9e2J o1q\xd1,2\xbb}\xb11\xfb\n\xb9/\xfe\xbea0i\xfe\xe00#\xc2\xc61NB30-\xc9H1-\xa3\x1e12\xf8\xbd/\xecB\xaf/\xe4t\x9b2\xf4\x89\x8f/\xb81\x0c0\x7f\x93\x183\xfe\x9b92\x90\x1b\x1c0\xe6\xd8\x8f1Dw\x88/\xaa\xf5\xf72\x07\x0b\xb8/\x9d\xa7\xee/\xeds 0\x00\xa4\xcb0=v\'2;t\xbd/a\xcdk/\xc0\xc2\x031\x13\x90\xa9/\xfez\xe92)\x80\xac/C\xd7\x7f/\x87\xe2%2\x07\xba\x080C\x12k3\xf4\x01\x00\x00W\xdf\xc80\xea\xbbg1\x7f\xdb\xf3/\x87-\xd5/\t\xd6\x991\xcf\xef\n3\x05\x0b\xc92\x9b\x1aj0\xcdX\x89/\xd3%\x822x\xb5\x111\xf4\x01\x00\x007\xa2\x91/.\t\xe0/\xda\xc6\x9f/\x03{\x9f/,\x01[1\x1d\xbcr3 \xc2\x8f0\xcc\xb5"2\xf4\x01\x00\x00\xe5\x8b\xcb2\xbe\x8c\x9c/\xc0s63\xda\xd1\x992\x13\xc1\x9f/\xc5\xdb\x1b3\xbf\xec52\x93\r\x822W\xde30\x94cw/D710\xa4\x11\x8c0\xe3\x98\xc71\xc7\xd6\xbe0\xcf\xcc\xd01@\x0f\xbe0\x1a\x14\x8a/\x8e8e/\xc5I 3\xe31A/\x0f\x85\xba/$j\x193H\xaf\x102\x9ef\x170k(#0/\x8e6/9\xfc\x922N\x1fv/\xa9\xaf\xa9/sz\xe3/\x07\x9c72\xae\xc7\x042\xaa\r\x1e/\'|\xa9.n\xb4=0\'b\xf4/\x02V\x031\x01\xb4\xec/qP\xc9.Q\x87\xb52\x9f\x1fY/\x9e\xa6w3\xf4\x01\x00\x00\xd0\xd1\xab0\xcf\x18\xc3/\x89\xec}/\x8a\xfd /\xa2\xb7k/\xdcI\xb61\x0f\x16E2\x91N\xe20\xbe\xb8\xd7.\x01@f2\xb1\xa7\x860\xf4\x01\x00\x00>\x7f\xdc.H\x14s/\r\x9e\xf3.\xa2\x84\xf4.\xe5[I1d<\xa73\xf8\x8e\x8b/k872\xf4\x01\x00\x00\xd9,/3l\xe3\x18/9z\x9f3\xb1\xcf\x871\x05\xf5\xfa.\xb0\xb5x3\x04\xd5;3\x99\xba\x9d1G\x11\xd5/\x1a\xf6:/\x08\xca\xde/\x1cU\xa6/\xa3\xf4\xa62z&(1\xb7\x86\xfb/q\x19\xb7/\xda\x85\xce/\\\x89\xab.\x81.V3\x87\xd4\x8b.m\x1b\xdb.\x8d9\xa22\xc9\r>2\x11\x1f\xd2/i\xbaz/H\'\x8a.\x17\xbf\xd62%R\xba.4v\xee.\xb7Y}/\xec>\xc21\xd2\xe1\n2\x9a\xb0\x02.\x81\xd2z-\x89\xf0\x95/I\xdc\x1d./"20\xfcr`/\xb4:+.\xf4\xb2\x802\xc3\xedm.\x83h\xa92\xf4\x01\x00\x00\xdaQ\x98.3\xbd\xf1-0\xdc\\/S\x94\xfd-\xca&m/\x93\xe5\x1d0\xc4\xea\xf1/\x11&\x04/\xe8\xa5\x12.\x14\x90\x042~\xa1T/\xf4\x01\x00\x00\xeb\x17\xa4-\x88\xf8\x08.\xd5F\x01.):\xf2-\x80A\xa903\xf8\x0e3\xe2PO.yl\x8a0\xf4\x01\x00\x00Yq\x9f2\xfeo\t.z\x81\xa82\xdf\xf3_0\xc6\x8f\xb3-\xfbU\xad2\xbfKq3k\xd5\x851\xf3\xfc(.\xdc\x9f\xc8-\x1a\n\xee0\xae\xadK/\xaa\xcc\xd70\x01\xa8V0\xdfw\x8e/\xf5$B.\x18i\xb2.\xbd\x90y-\x84\x15\xd52`(P-\x9b1\x86-\xc1\xa5\x811=\x07\x171\x129&/j\xb0\x8a0\x85\xa0M-\xf4\xb1\x882\xd2\xa8\x8a-\x11\xdb\xb1-\xc2V\xea-\xdb#\x940\xe5\xda\x172K\x12\xfc,c\x8e\xde,\x895\xfc/7Q\x00,\xd3\x16)0\xf8\xb6\xf3+Y\x8c\x88/j\x93\xf50H\xee\xb21\x859\xd6/\xf4\x01\x00\x006]\xd8/\x8a\x01\x11,\xbc]$,\x02\x05\x17,\x82\x81\xa3,2K\xe6-%\xb5\x13,[\x82\n.\xdc\xe4\xc3+q\x14\x072>\x10&,\xf4\x01\x00\x00p\xbc\xcf+Q\xd8B/\xf6y_.\x7fR\xe3+9\xaf\x19/\xa6\x14\xae15:\x83,q\x9bD/\xf4\x01\x00\x00p\x17E1x"\xc5+\x00\xbd\x881\x14v\x06,\xaaa\x94-\\\xef\x1d2\xd4\\\xc72\r\x94\x901\xabo\x90,\x83\xb7\xb0+\x8c\xaa\x9c1\xcd\x92B/}N$0N\xcf\x0b/&\x82R-o\xb1\x81,}.\x0b/\x1a\xcd\x9a+\xffI\x841\x8f\xc2\x83+\x87\xb7\x9d+\xe0\xb9\x89/\xa1\xbc\x7f/S\xf3\xf4+\xd2&)0p(\x82+\xf4\xcd\xac1\xb8\x89\xaf+\xdd,\xe4+{\xb4\\,>\xa7\x161B\xc9\x1b0\r8-*?\x9e8-\xb8\xc4\xc4.w\x08y*\xd9_\xbb+\xa3 \x01)\xc3\xd5\n,\xf9\xc7\xc7/mGj0\xfe\xa4[.\xf4\x01\x00\x00\xfa[2)=\x9eO)\xa9\x1eF+\x82\x07 )c\xc4\x96(\xbc\x93\x11+<\xc9\x1b)\xb4\x0e)*\x12\xcd\xd2(\x940\x01/\x07\xf8/)\xf4\x01\x00\x004!\xdc(\xfe\n\x12+\xc4\x7f\x12-R\xe2\xf0($\xd9\xa0*\xd3}Z0X\x0e\x8b)H.\x07,\xf4\x01\x00\x007\xfe\x17.I\t\xd0(\x97{H/\x8d\x1f\x0e)\xed\xb9\x02.\xdc\xd7\x8c0\xb7W\xa9/\xd3>\xa2/{\xec\x02)\xc6\xf5\xba(\x91x40\xf7\x18\xbc+\xfa%\xa1/\x8a\xcb\xf8*Z\xc3\r*%u\x80)\x97\xd6\xf1+f\t\xa4(\x01K\xfd.\xe8\x9e\x8b(1\xaa\xae)k\x99\x96)\xe0\t\x1f.<\xc8\x01)Q\x02\x19-h\xec\x89(-\xc8\x081\xc7\x02\xba(\x88\xa0\xf3(\xbeu\x03)N\xbb\x91-\xa1Z\x9f-3\xce\xdd"\x02\xc9\x82"\xba),#\xf1\x0f\x88"T\xd1\xe5"\x9b\xfd\xc9"\'G\x91"\xe0\x83\xea"\xef:\x1f#\x8b\xef\x82#\xf4\x01\x00\x00\x8eZ\x0b#"Q\xf0"%B\xe7"eT\xfa";\xd7k"\x81\xebO#2\xb1\xf3"\xf2\x03\xd0"*\x15\xa2"-\xc1\x8f#\xc0\xa1\t#\xf4\x01\x00\x00\xf6+\xac"\x98\xac\xeb"\xee\x0c\xbb"ug\xbc"\xb1"!#\t\xad\x12#\xa8\x85Y#\xc7\xdf<#\xf4\x01\x00\x00v\xb5\'#\xa7\xa5\xa2"\xbf\xbe&#\xdbQ\xde"\xb2f\xbc"\'\xc8\xf6"\xc4\xfc!#P\xf3\xb6"\x04\xcd\xcc"~:\x92"\x94m,#\x90\xd2\xcc"\x9e\xd5\xbb#\xfb\xc2\xdc"\xf5F{#|\xf1H#F\x8bm"\x92L\x80"\x01Ov#\xc1gZ"\x08\x1d\xd9##\x12>#\x8c\x0ff#\xdc\x03\xcb"#.6#\x02\xc0W"b\xba\xb5"l|\x91"\x163\xba"\x12=\xad"p\x94\x8b"\xf39\xeb"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
p11262
tp11263
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp11264
Rp11265
(dp11266
g182
(I00
I00
tp11267
sg183
S'float32'
p11268
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g11265
sbasg14
g0
(g15
g2
Ntp11269
Rp11270
sg204
(lp11271
g11162
asg206
g1220
sbsg177
g0
(g178
g2
Ntp11272
Rp11273
(dp11274
g182
(I00
I00
tp11275
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp11276
Rp11277
(dp11278
g11
S'auto_1389'
p11279
sg13
I0
sg14
g0
(g15
g2
Ntp11280
Rp11281
(dp11282
g19
(lp11283
(lp11284
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11285
tp11286
a(g22
I72
g26
S'exec code in run_globals'
p11287
tp11288
a(g29
I249
g30
S'Model(hyperparams).train()'
p11289
tp11290
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11291
tp11292
a(g37
I74
g38
S'learning_rate=LR)'
p11293
tp11294
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11295
tp11296
aasbsg52
Nsg53
g0
(g54
g2
Ntp11297
Rp11298
(dp11299
g58
(lp11300
g0
(g7
g2
Ntp11301
Rp11302
(dp11303
g11
S'auto_1386'
p11304
sg13
I0
sg14
g0
(g15
g2
Ntp11305
Rp11306
(dp11307
g19
(lp11308
(lp11309
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11310
tp11311
a(g22
I72
g26
S'exec code in run_globals'
p11312
tp11313
a(g29
I249
g30
S'Model(hyperparams).train()'
p11314
tp11315
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11316
tp11317
a(g37
I74
g38
S'learning_rate=LR)'
p11318
tp11319
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11320
tp11321
aasbsg52
Nsg53
g0
(g54
g2
Ntp11322
Rp11323
(dp11324
g58
(lp11325
g0
(g7
g2
Ntp11326
Rp11327
(dp11328
g11
S'auto_1385'
p11329
sg13
I0
sg14
g0
(g15
g2
Ntp11330
Rp11331
(dp11332
g19
(lp11333
(lp11334
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11335
tp11336
a(g22
I72
g26
S'exec code in run_globals'
p11337
tp11338
a(g29
I249
g30
S'Model(hyperparams).train()'
p11339
tp11340
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11341
tp11342
a(g37
I74
g38
S'learning_rate=LR)'
p11343
tp11344
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11345
tp11346
aasbsg52
Nsg53
g0
(g54
g2
Ntp11347
Rp11348
(dp11349
g58
(lp11350
g7692
ag7752
asg14
g0
(g15
g2
Ntp11351
Rp11352
sg204
(lp11353
g11327
asg206
g5417
sbsg177
g0
(g178
g2
Ntp11354
Rp11355
(dp11356
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11357
Rp11358
sg204
(lp11359
g11302
asg206
g0
(g207
g2
Ntp11360
Rp11361
(dp11362
g211
(lp11363
sg213
(lp11364
sg215
(lp11365
I0
aI1
asg217
g218
sg219
(tsg220
(lp11366
g222
asg223
I01
sg224
(g225
g225
tp11367
sg227
(dp11368
S'support_code_apply'
p11369
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11370
ssg231
(dp11371
I0
(lp11372
I0
assg234
(lp11373
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11374
asbsbsg177
g0
(g178
g2
Ntp11375
Rp11376
(dp11377
g182
(I01
I01
tp11378
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp11379
Rp11380
(dp11381
g11
S'auto_1388'
p11382
sg13
I0
sg14
g0
(g15
g2
Ntp11383
Rp11384
(dp11385
g19
(lp11386
(lp11387
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11388
tp11389
a(g22
I72
g26
S'exec code in run_globals'
p11390
tp11391
a(g29
I249
g30
S'Model(hyperparams).train()'
p11392
tp11393
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11394
tp11395
a(g37
I74
g38
S'learning_rate=LR)'
p11396
tp11397
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11398
tp11399
aasbsg52
Nsg53
g0
(g54
g2
Ntp11400
Rp11401
(dp11402
g58
(lp11403
g8269
ag0
(g7
g2
Ntp11404
Rp11405
(dp11406
g11
S'auto_1387'
p11407
sg13
I0
sg14
g0
(g15
g2
Ntp11408
Rp11409
(dp11410
g19
(lp11411
(lp11412
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11413
tp11414
a(g22
I72
g26
S'exec code in run_globals'
p11415
tp11416
a(g29
I249
g30
S'Model(hyperparams).train()'
p11417
tp11418
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11419
tp11420
a(g37
I74
g38
S'learning_rate=LR)'
p11421
tp11422
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p11423
tp11424
aasbsg52
Nsg53
g0
(g54
g2
Ntp11425
Rp11426
(dp11427
g58
(lp11428
g10758
asg14
g0
(g15
g2
Ntp11429
Rp11430
sg204
(lp11431
g11405
asg206
g0
(g207
g2
Ntp11432
Rp11433
(dp11434
g211
(lp11435
sg213
(lp11436
sg215
(lp11437
I0
aI1
asg217
g218
sg219
(tsg220
(lp11438
g222
asg223
I01
sg224
(g225
g225
tp11439
sg227
(dp11440
S'support_code_apply'
p11441
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11442
ssg231
(dp11443
I0
(lp11444
I0
assg234
(lp11445
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11446
asbsbsg177
g0
(g178
g2
Ntp11447
Rp11448
(dp11449
g182
(I01
I01
tp11450
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11451
Rp11452
sg204
(lp11453
g11380
asg206
g7850
sbsg177
g0
(g178
g2
Ntp11454
Rp11455
(dp11456
g182
(I00
I00
tp11457
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11458
Rp11459
sg204
(lp11460
g11277
asg206
g1220
sbsg177
g0
(g178
g2
Ntp11461
Rp11462
(dp11463
g182
(I00
I00
tp11464
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11465
Rp11466
sg204
(lp11467
g11137
asg206
g1153
sbsg177
g0
(g178
g2
Ntp11468
Rp11469
(dp11470
g182
(I00
I00
tp11471
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11472
Rp11473
sg204
(lp11474
g11112
asg206
g7880
sbsg177
g0
(g178
g2
Ntp11475
Rp11476
(dp11477
g182
(I00
I00
tp11478
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp11479
Rp11480
(dp11481
g11
S'auto_1403'
p11482
sg13
I0
sg14
g0
(g15
g2
Ntp11483
Rp11484
(dp11485
g19
(lp11486
(lp11487
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11488
tp11489
a(g22
I72
g26
S'exec code in run_globals'
p11490
tp11491
a(g29
I249
g30
S'Model(hyperparams).train()'
p11492
tp11493
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11494
tp11495
a(g37
I74
g38
S'learning_rate=LR)'
p11496
tp11497
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11498
tp11499
aasbsg52
Nsg53
g0
(g54
g2
Ntp11500
Rp11501
(dp11502
g58
(lp11503
g0
(g149
g2
Ntp11504
Rp11505
(dp11506
g11
S'auto_647'
p11507
sg13
Nsg14
g0
(g15
g2
Ntp11508
Rp11509
(dp11510
g19
(lp11511
(lp11512
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11513
tp11514
a(g22
I72
g26
S'exec code in run_globals'
p11515
tp11516
a(g29
I249
g30
S'Model(hyperparams).train()'
p11517
tp11518
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11519
tp11520
a(g37
I74
g38
S'learning_rate=LR)'
p11521
tp11522
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11523
tp11524
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp11525
Rp11526
(dp11527
g182
(tsg183
S'float32'
p11528
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp11529
g197
tp11530
Rp11531
(I1
(tg189
I00
S'w\xcc+2'
p11532
tp11533
bsbasg14
g0
(g15
g2
Ntp11534
Rp11535
sg204
(lp11536
g11480
asg206
g0
(g207
g2
Ntp11537
Rp11538
(dp11539
g211
(lp11540
sg213
(lp11541
sg215
(lp11542
I0
aI1
asg217
g218
sg219
(tsg220
(lp11543
g222
asg223
I01
sg224
(g225
g225
tp11544
sg227
(dp11545
S'support_code_apply'
p11546
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11547
ssg231
(dp11548
I0
(lp11549
I0
assg234
(lp11550
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11551
asbsbsg177
g0
(g178
g2
Ntp11552
Rp11553
(dp11554
g182
(I01
I01
tp11555
sg183
g11528
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11556
Rp11557
sg204
(lp11558
g11087
asg206
g1153
sbsg177
g0
(g178
g2
Ntp11559
Rp11560
(dp11561
g182
(I00
I00
tp11562
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11563
Rp11564
sg204
(lp11565
g7517
asg206
g5326
sbsg177
g0
(g178
g2
Ntp11566
Rp11567
(dp11568
g182
(I00
I00
tp11569
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11570
Rp11571
sg204
(lp11572
g7490
asg206
g5417
sbsg177
g0
(g178
g2
Ntp11573
Rp11574
(dp11575
g182
(I00
I00
tp11576
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag443
asg14
g0
(g15
g2
Ntp11577
Rp11578
sg204
(lp11579
g7465
asg206
g5417
sbsg177
g0
(g178
g2
Ntp11580
Rp11581
(dp11582
g182
(I00
I00
tp11583
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11584
Rp11585
sg204
(lp11586
g7363
asg206
g1220
sbsg177
g0
(g178
g2
Ntp11587
Rp11588
(dp11589
g182
(I00
I00
tp11590
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11591
Rp11592
sg204
(lp11593
g7338
asg206
g1153
sbsg177
g0
(g178
g2
Ntp11594
Rp11595
(dp11596
g182
(I00
I00
tp11597
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp11598
Rp11599
(dp11600
g11
S'auto_1410'
p11601
sg13
I0
sg14
g0
(g15
g2
Ntp11602
Rp11603
(dp11604
g19
(lp11605
(lp11606
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11607
tp11608
a(g22
I72
g26
S'exec code in run_globals'
p11609
tp11610
a(g29
I249
g30
S'Model(hyperparams).train()'
p11611
tp11612
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11613
tp11614
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p11615
tp11616
a(g7329
I219
g7330
S'updates[param] = T.clip(updates[param], -layer.H,layer.H)'
p11617
tp11618
aasbsg52
Nsg53
g0
(g54
g2
Ntp11619
Rp11620
(dp11621
g58
(lp11622
g877
asg14
g0
(g15
g2
Ntp11623
Rp11624
sg204
(lp11625
g11599
asg206
g0
(g207
g2
Ntp11626
Rp11627
(dp11628
g211
(lp11629
sg213
(lp11630
sg215
(lp11631
I0
aI1
asg217
g218
sg219
(tsg220
(lp11632
g222
asg223
I01
sg224
(g225
g225
tp11633
sg227
(dp11634
S'support_code_apply'
p11635
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11636
ssg231
(dp11637
I0
(lp11638
I0
assg234
(lp11639
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11640
asbsbsg177
g0
(g178
g2
Ntp11641
Rp11642
(dp11643
g182
(I01
I01
tp11644
sg183
g904
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp11645
Rp11646
(dp11647
g11
S'auto_1411'
p11648
sg13
I0
sg14
g0
(g15
g2
Ntp11649
Rp11650
(dp11651
g19
(lp11652
(lp11653
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11654
tp11655
a(g22
I72
g26
S'exec code in run_globals'
p11656
tp11657
a(g29
I249
g30
S'Model(hyperparams).train()'
p11658
tp11659
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11660
tp11661
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p11662
tp11663
a(g7329
I219
g7330
S'updates[param] = T.clip(updates[param], -layer.H,layer.H)'
p11664
tp11665
aasbsg52
Nsg53
g0
(g54
g2
Ntp11666
Rp11667
(dp11668
g58
(lp11669
g962
asg14
g0
(g15
g2
Ntp11670
Rp11671
sg204
(lp11672
g11646
asg206
g0
(g207
g2
Ntp11673
Rp11674
(dp11675
g211
(lp11676
sg213
(lp11677
sg215
(lp11678
I0
aI1
asg217
g218
sg219
(tsg220
(lp11679
g222
asg223
I01
sg224
(g225
g225
tp11680
sg227
(dp11681
S'support_code_apply'
p11682
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11683
ssg231
(dp11684
I0
(lp11685
I0
assg234
(lp11686
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p11687
asbsbsg177
g0
(g178
g2
Ntp11688
Rp11689
(dp11690
g182
(I01
I01
tp11691
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp11692
Rp11693
sg204
(lp11694
g7311
asg206
g0
(g497
g2
Ntp11695
Rp11696
(dp11697
g501
g502
sg503
g0
(ctheano.scalar.basic
Clip
p11698
g2
Ntp11699
Rp11700
(dp11701
g508
ctheano.scalar.basic
upcast_out_no_complex
p11702
sg52
S'clip'
p11703
sbsg52
S'Elemwise{clip,no_inplace}'
p11704
sg511
(dp11705
sg513
Nsg516
g0
(g517
g2
Ntp11706
Rp11707
(dp11708
g521
I0
sg522
(dp11709
sbsg524
I00
sg525
S"\n    Clip x to be between min and max.\n\n    Notes\n    -----\n    When `x` is equal to the boundaries, the output is considered\n    to be `x`, so at these points, the gradient of the cost wrt the output\n    will be propagated to `x`, not to `min` nor `max`. In other words,\n    on these points, the gradient wrt `x` will be equal to the gradient wrt\n    the output, and the gradient wrt `min` and `max` will be zero.\n\n    \n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p11710
sbsbsg177
g0
(g178
g2
Ntp11711
Rp11712
(dp11713
g182
(I00
I00
tp11714
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbsg1834
g475
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g443
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp11715
Rp11716
(dp11717
g52
g197
sg1833
g0
(g7
g2
Ntp11718
Rp11719
(dp11720
g11
S'auto_1509'
p11721
sg13
I0
sg14
g0
(g15
g2
Ntp11722
Rp11723
(dp11724
g19
(lp11725
(lp11726
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11727
tp11728
a(g22
I72
g26
S'exec code in run_globals'
p11729
tp11730
a(g29
I249
g30
S'Model(hyperparams).train()'
p11731
tp11732
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11733
tp11734
a(g37
I83
g38
S'learning_rate=LR).items())'
p11735
tp11736
a(g7508
I628
g7509
S'updates[param] = param - step'
p11737
tp11738
aasbsg52
Nsg53
g0
(g54
g2
Ntp11739
Rp11740
(dp11741
g58
(lp11742
g1088
ag0
(g7
g2
Ntp11743
Rp11744
(dp11745
g11
S'auto_1508'
p11746
sg13
I0
sg14
g0
(g15
g2
Ntp11747
Rp11748
(dp11749
g19
(lp11750
(lp11751
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11752
tp11753
a(g22
I72
g26
S'exec code in run_globals'
p11754
tp11755
a(g29
I249
g30
S'Model(hyperparams).train()'
p11756
tp11757
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11758
tp11759
a(g37
I83
g38
S'learning_rate=LR).items())'
p11760
tp11761
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11762
tp11763
aasbsg52
Nsg53
g0
(g54
g2
Ntp11764
Rp11765
(dp11766
g58
(lp11767
g0
(g7
g2
Ntp11768
Rp11769
(dp11770
g11
S'auto_1504'
p11771
sg13
I0
sg14
g0
(g15
g2
Ntp11772
Rp11773
(dp11774
g19
(lp11775
(lp11776
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11777
tp11778
a(g22
I72
g26
S'exec code in run_globals'
p11779
tp11780
a(g29
I249
g30
S'Model(hyperparams).train()'
p11781
tp11782
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11783
tp11784
a(g37
I83
g38
S'learning_rate=LR).items())'
p11785
tp11786
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11787
tp11788
aasbsg52
Nsg53
g0
(g54
g2
Ntp11789
Rp11790
(dp11791
g58
(lp11792
g0
(g7
g2
Ntp11793
Rp11794
(dp11795
g11
S'auto_1503'
p11796
sg13
I0
sg14
g0
(g15
g2
Ntp11797
Rp11798
(dp11799
g19
(lp11800
(lp11801
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11802
tp11803
a(g22
I72
g26
S'exec code in run_globals'
p11804
tp11805
a(g29
I249
g30
S'Model(hyperparams).train()'
p11806
tp11807
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11808
tp11809
a(g37
I83
g38
S'learning_rate=LR).items())'
p11810
tp11811
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p11812
tp11813
aasbsg52
Nsg53
g0
(g54
g2
Ntp11814
Rp11815
(dp11816
g58
(lp11817
g0
(g7
g2
Ntp11818
Rp11819
(dp11820
g11
S'auto_1502'
p11821
sg13
I0
sg14
g0
(g15
g2
Ntp11822
Rp11823
(dp11824
g19
(lp11825
(lp11826
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11827
tp11828
a(g22
I72
g26
S'exec code in run_globals'
p11829
tp11830
a(g29
I249
g30
S'Model(hyperparams).train()'
p11831
tp11832
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11833
tp11834
a(g37
I83
g38
S'learning_rate=LR).items())'
p11835
tp11836
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p11837
tp11838
aasbsg52
Nsg53
g0
(g54
g2
Ntp11839
Rp11840
(dp11841
g58
(lp11842
g0
(g7
g2
Ntp11843
Rp11844
(dp11845
g11
S'auto_1499'
p11846
sg13
I0
sg14
g0
(g15
g2
Ntp11847
Rp11848
(dp11849
g19
(lp11850
(lp11851
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11852
tp11853
a(g22
I72
g26
S'exec code in run_globals'
p11854
tp11855
a(g29
I249
g30
S'Model(hyperparams).train()'
p11856
tp11857
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11858
tp11859
a(g37
I83
g38
S'learning_rate=LR).items())'
p11860
tp11861
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p11862
tp11863
aasbsg52
Nsg53
g0
(g54
g2
Ntp11864
Rp11865
(dp11866
g58
(lp11867
g7286
ag0
(g7
g2
Ntp11868
Rp11869
(dp11870
g11
S'auto_1498'
p11871
sg13
I0
sg14
g0
(g15
g2
Ntp11872
Rp11873
(dp11874
g19
(lp11875
(lp11876
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11877
tp11878
a(g22
I72
g26
S'exec code in run_globals'
p11879
tp11880
a(g29
I249
g30
S'Model(hyperparams).train()'
p11881
tp11882
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11883
tp11884
a(g37
I83
g38
S'learning_rate=LR).items())'
p11885
tp11886
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p11887
tp11888
aasbsg52
Nsg53
g0
(g54
g2
Ntp11889
Rp11890
(dp11891
g58
(lp11892
g0
(g7
g2
Ntp11893
Rp11894
(dp11895
g11
S'auto_1497'
p11896
sg13
I0
sg14
g0
(g15
g2
Ntp11897
Rp11898
(dp11899
g19
(lp11900
(lp11901
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11902
tp11903
a(g22
I72
g26
S'exec code in run_globals'
p11904
tp11905
a(g29
I249
g30
S'Model(hyperparams).train()'
p11906
tp11907
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11908
tp11909
a(g37
I83
g38
S'learning_rate=LR).items())'
p11910
tp11911
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p11912
tp11913
aasbsg52
Nsg53
g0
(g54
g2
Ntp11914
Rp11915
(dp11916
g58
(lp11917
g7692
ag0
(g7
g2
Ntp11918
Rp11919
(dp11920
g11
S'auto_1496'
p11921
sg13
I0
sg14
g0
(g15
g2
Ntp11922
Rp11923
(dp11924
g19
(lp11925
(lp11926
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11927
tp11928
a(g22
I72
g26
S'exec code in run_globals'
p11929
tp11930
a(g29
I249
g30
S'Model(hyperparams).train()'
p11931
tp11932
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11933
tp11934
a(g37
I83
g38
S'learning_rate=LR).items())'
p11935
tp11936
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p11937
tp11938
aasbsg52
Nsg53
g0
(g54
g2
Ntp11939
Rp11940
(dp11941
g58
(lp11942
g7752
ag0
(g7
g2
Ntp11943
Rp11944
(dp11945
g11
S'auto_1495'
p11946
sg13
I0
sg14
g0
(g15
g2
Ntp11947
Rp11948
(dp11949
g19
(lp11950
(lp11951
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11952
tp11953
a(g22
I72
g26
S'exec code in run_globals'
p11954
tp11955
a(g29
I249
g30
S'Model(hyperparams).train()'
p11956
tp11957
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11958
tp11959
a(g37
I83
g38
S'learning_rate=LR).items())'
p11960
tp11961
a(g7508
I612
g7509
S't = t_prev + 1'
p11962
tp11963
aasbsg52
Nsg53
g0
(g54
g2
Ntp11964
Rp11965
(dp11966
g58
(lp11967
g0
(g441
g2
Ntp11968
Rp11969
(dp11970
g11
S'auto_1023'
p11971
sg13
Nsg14
g0
(g15
g2
Ntp11972
Rp11973
(dp11974
g19
(lp11975
(lp11976
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p11977
tp11978
a(g22
I72
g26
S'exec code in run_globals'
p11979
tp11980
a(g29
I249
g30
S'Model(hyperparams).train()'
p11981
tp11982
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p11983
tp11984
a(g37
I83
g38
S'learning_rate=LR).items())'
p11985
tp11986
a(g7508
I606
g7509
S't_prev = theano.shared(utils.floatX(0.))'
p11987
tp11988
aasbsg472
g0
(g473
g2
Ntp11989
Rp11990
(dp11991
g52
Nsg477
(lp11992
g194
(g195
(I0
tp11993
g197
tp11994
Rp11995
(I1
(tg189
I00
S'\x80\xd2\x0eI'
p11996
tp11997
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp11998
Rp11999
(dp12000
g182
(tsg183
S'float32'
p12001
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g11999
sbag7692
asg14
g0
(g15
g2
Ntp12002
Rp12003
sg204
(lp12004
g11944
asg206
g1153
sbsg177
g0
(g178
g2
Ntp12005
Rp12006
(dp12007
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12008
Rp12009
sg204
(lp12010
g11919
asg206
g7850
sbsg177
g0
(g178
g2
Ntp12011
Rp12012
(dp12013
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12014
Rp12015
sg204
(lp12016
g11894
asg206
g5417
sbsg177
g0
(g178
g2
Ntp12017
Rp12018
(dp12019
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12020
Rp12021
sg204
(lp12022
g11869
asg206
g7880
sbsg177
g0
(g178
g2
Ntp12023
Rp12024
(dp12025
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12026
Rp12027
sg204
(lp12028
g11844
asg206
g1220
sbsg177
g0
(g178
g2
Ntp12029
Rp12030
(dp12031
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp12032
Rp12033
(dp12034
g11
S'auto_1501'
p12035
sg13
I0
sg14
g0
(g15
g2
Ntp12036
Rp12037
(dp12038
g19
(lp12039
(lp12040
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12041
tp12042
a(g22
I72
g26
S'exec code in run_globals'
p12043
tp12044
a(g29
I249
g30
S'Model(hyperparams).train()'
p12045
tp12046
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12047
tp12048
a(g37
I83
g38
S'learning_rate=LR).items())'
p12049
tp12050
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p12051
tp12052
aasbsg52
Nsg53
g0
(g54
g2
Ntp12053
Rp12054
(dp12055
g58
(lp12056
g7692
ag0
(g7
g2
Ntp12057
Rp12058
(dp12059
g11
S'auto_1500'
p12060
sg13
I0
sg14
g0
(g15
g2
Ntp12061
Rp12062
(dp12063
g19
(lp12064
(lp12065
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12066
tp12067
a(g22
I72
g26
S'exec code in run_globals'
p12068
tp12069
a(g29
I249
g30
S'Model(hyperparams).train()'
p12070
tp12071
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12072
tp12073
a(g37
I83
g38
S'learning_rate=LR).items())'
p12074
tp12075
a(g7508
I613
g7509
S'a_t = learning_rate*T.sqrt(one-beta2**t)/(one-beta1**t)'
p12076
tp12077
aasbsg52
Nsg53
g0
(g54
g2
Ntp12078
Rp12079
(dp12080
g58
(lp12081
g7956
ag11944
asg14
g0
(g15
g2
Ntp12082
Rp12083
sg204
(lp12084
g12058
asg206
g7850
sbsg177
g0
(g178
g2
Ntp12085
Rp12086
(dp12087
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12088
Rp12089
sg204
(lp12090
g12033
asg206
g5417
sbsg177
g0
(g178
g2
Ntp12091
Rp12092
(dp12093
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12094
Rp12095
sg204
(lp12096
g11819
asg206
g5326
sbsg177
g0
(g178
g2
Ntp12097
Rp12098
(dp12099
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12100
Rp12101
sg204
(lp12102
g11794
asg206
g0
(g207
g2
Ntp12103
Rp12104
(dp12105
g211
(lp12106
sg213
(lp12107
sg215
(lp12108
I0
asg217
g218
sg219
(tsg220
(lp12109
g222
asg223
I01
sg224
(g225
tp12110
sg227
(dp12111
S'support_code_apply'
p12112
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12113
ssg231
(dp12114
I0
(lp12115
I0
assg234
(lp12116
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12117
asbsbsg177
g0
(g178
g2
Ntp12118
Rp12119
(dp12120
g182
(I01
tp12121
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp12122
Rp12123
(dp12124
g11
S'auto_1486'
p12125
sg13
I0
sg14
g0
(g15
g2
Ntp12126
Rp12127
(dp12128
g19
(lp12129
(lp12130
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12131
tp12132
a(g22
I72
g26
S'exec code in run_globals'
p12133
tp12134
a(g29
I249
g30
S'Model(hyperparams).train()'
p12135
tp12136
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12137
tp12138
a(g37
I83
g38
S'learning_rate=LR).items())'
p12139
tp12140
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p12141
tp12142
aasbsg52
Nsg53
g0
(g54
g2
Ntp12143
Rp12144
(dp12145
g58
(lp12146
g0
(g7
g2
Ntp12147
Rp12148
(dp12149
g11
S'auto_1458'
p12150
sg13
I0
sg14
g0
(g15
g2
Ntp12151
Rp12152
(dp12153
g19
(lp12154
(lp12155
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12156
tp12157
a(g22
I72
g26
S'exec code in run_globals'
p12158
tp12159
a(g29
I249
g30
S'Model(hyperparams).train()'
p12160
tp12161
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12162
tp12163
a(g37
I83
g38
S'learning_rate=LR).items())'
p12164
tp12165
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p12166
tp12167
aasbsg52
Nsg53
g0
(g54
g2
Ntp12168
Rp12169
(dp12170
g58
(lp12171
g0
(g7
g2
Ntp12172
Rp12173
(dp12174
g11
S'auto_1457'
p12175
sg13
I0
sg14
g0
(g15
g2
Ntp12176
Rp12177
(dp12178
g19
(lp12179
(lp12180
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12181
tp12182
a(g22
I72
g26
S'exec code in run_globals'
p12183
tp12184
a(g29
I249
g30
S'Model(hyperparams).train()'
p12185
tp12186
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12187
tp12188
a(g37
I83
g38
S'learning_rate=LR).items())'
p12189
tp12190
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p12191
tp12192
aasbsg52
Nsg53
g0
(g54
g2
Ntp12193
Rp12194
(dp12195
g58
(lp12196
g7956
asg14
g0
(g15
g2
Ntp12197
Rp12198
sg204
(lp12199
g12173
asg206
g0
(g207
g2
Ntp12200
Rp12201
(dp12202
g211
(lp12203
sg213
(lp12204
sg215
(lp12205
I0
asg217
g218
sg219
(tsg220
(lp12206
g222
asg223
I01
sg224
(g225
tp12207
sg227
(dp12208
S'support_code_apply'
p12209
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12210
ssg231
(dp12211
I0
(lp12212
I0
assg234
(lp12213
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12214
asbsbsg177
g0
(g178
g2
Ntp12215
Rp12216
(dp12217
g182
(I01
tp12218
sg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp12219
Rp12220
(dp12221
g11
S'auto_1055'
p12222
sg13
Nsg14
g0
(g15
g2
Ntp12223
Rp12224
(dp12225
g19
(lp12226
(lp12227
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12228
tp12229
a(g22
I72
g26
S'exec code in run_globals'
p12230
tp12231
a(g29
I249
g30
S'Model(hyperparams).train()'
p12232
tp12233
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12234
tp12235
a(g37
I83
g38
S'learning_rate=LR).items())'
p12236
tp12237
a(g7508
I618
g7509
S'broadcastable=param.broadcastable)'
p12238
tp12239
aasbsg472
g0
(g473
g2
Ntp12240
Rp12241
(dp12242
g52
Nsg477
(lp12243
g194
(g195
(I0
tp12244
g197
tp12245
Rp12246
(I1
(I64
tp12247
g189
I00
S'\x12V\x939UW\x0581<\xc5\xb8\xda\x93\t\xba=Og:\x82\xa9?9\xbcOa8\xc0D\x9b8\xf1\xf7\xa6\xb9]m\xa5\xb9\x04\x00\x00\x00\xdc\xde\x87\xb9\xd6J\xbb9\xc9\x87h8p\xc5\xb7\xb8\n\xed?\xb9b\xc3\x17\xba\xc8\xa2\x959\x02.\x18:~r\xe78t*\xd09\xb4\tS9\x04\x00\x00\x00\xd3\xa0p\xb9I\xc61\xb9\xa9\\\xce\xb8ul\x0e\xb9?\xb1=6Lx 9G\x02\xae\xb8\xcb\xb6?:\x04\x00\x00\x00\xc8C\xe2\xb9\xb8\x94\x03:\xc0w\xc4\xb89J\x8c9\xd9}\xe0\xb9\x87A4\xb8\xae\x8b\x1d8E\xd4\x829~\x1e\xe18\x89\x994:\xed\xe8\xa9\xb8\xe5\xeaO9v\xb6N:\x02\xcf\xbc\xb9v\xfd\xb693u\x93\xb8|ZY7\xd3\xf3\x84\xb9\x11q\xc38v\x81\x13\xbaFE\xcd\xb7Vn\xc49)\xee\xd08\xab\x10\xad9\xdc\x94\xfd8q/\x88\xb9\xae\x906\xb9\xb5c7\xb7\x1b\x86\xfd7\x11\x08\xc3\xb8u\xbbV7\x18w\xd28'
p12248
tp12249
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp12250
Rp12251
(dp12252
g182
(I00
tp12253
sg183
S'float32'
p12254
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g12251
sbasg14
g0
(g15
g2
Ntp12255
Rp12256
sg204
(lp12257
g12148
asg206
g1220
sbsg177
g0
(g178
g2
Ntp12258
Rp12259
(dp12260
g182
(I00
tp12261
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp12262
Rp12263
(dp12264
g11
S'auto_1485'
p12265
sg13
I0
sg14
g0
(g15
g2
Ntp12266
Rp12267
(dp12268
g19
(lp12269
(lp12270
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12271
tp12272
a(g22
I72
g26
S'exec code in run_globals'
p12273
tp12274
a(g29
I249
g30
S'Model(hyperparams).train()'
p12275
tp12276
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12277
tp12278
a(g37
I83
g38
S'learning_rate=LR).items())'
p12279
tp12280
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p12281
tp12282
aasbsg52
Nsg53
g0
(g54
g2
Ntp12283
Rp12284
(dp12285
g58
(lp12286
g0
(g7
g2
Ntp12287
Rp12288
(dp12289
g11
S'auto_1460'
p12290
sg13
I0
sg14
g0
(g15
g2
Ntp12291
Rp12292
(dp12293
g19
(lp12294
(lp12295
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12296
tp12297
a(g22
I72
g26
S'exec code in run_globals'
p12298
tp12299
a(g29
I249
g30
S'Model(hyperparams).train()'
p12300
tp12301
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12302
tp12303
a(g37
I83
g38
S'learning_rate=LR).items())'
p12304
tp12305
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p12306
tp12307
aasbsg52
Nsg53
g0
(g54
g2
Ntp12308
Rp12309
(dp12310
g58
(lp12311
g0
(g7
g2
Ntp12312
Rp12313
(dp12314
g11
S'auto_1459'
p12315
sg13
I0
sg14
g0
(g15
g2
Ntp12316
Rp12317
(dp12318
g19
(lp12319
(lp12320
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p12321
tp12322
a(g22
I72
g26
S'exec code in run_globals'
p12323
tp12324
a(g29
I249
g30
S'Model(hyperparams).train()'
p12325
tp12326
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12327
tp12328
a(g37
I83
g38
S'learning_rate=LR).items())'
p12329
tp12330
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p12331
tp12332
aasbsg52
Nsg53
g0
(g54
g2
Ntp12333
Rp12334
(dp12335
g58
(lp12336
g7692
ag7956
asg14
g0
(g15
g2
Ntp12337
Rp12338
sg204
(lp12339
g12313
asg206
g5417
sbsg177
g0
(g178
g2
Ntp12340
Rp12341
(dp12342
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12343
Rp12344
sg204
(lp12345
g12288
asg206
g0
(g207
g2
Ntp12346
Rp12347
(dp12348
g211
(lp12349
sg213
(lp12350
sg215
(lp12351
I0
asg217
g218
sg219
(tsg220
(lp12352
g222
asg223
I01
sg224
(g225
tp12353
sg227
(dp12354
S'support_code_apply'
p12355
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12356
ssg231
(dp12357
I0
(lp12358
I0
assg234
(lp12359
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12360
asbsbsg177
g0
(g178
g2
Ntp12361
Rp12362
(dp12363
g182
(I01
tp12364
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp12365
Rp12366
(dp12367
g11
S'auto_1484'
p12368
sg13
I0
sg14
g0
(g15
g2
Ntp12369
Rp12370
(dp12371
g19
(lp12372
(lp12373
(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12374
tp12375
a(g37
I83
g38
S'learning_rate=LR).items())'
p12376
tp12377
a(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p12378
tp12379
a(g7508
I145
S'get_or_compute_grads'
p12380
S'return theano.grad(loss_or_grads, params)'
p12381
tp12382
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p12383
tp12384
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p12385
tp12386
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12387
tp12388
a(g8287
I1162
g8297
S'new_output_grads)'
p12389
tp12390
aasbsg52
S'(dmean/db)'
p12391
sg53
g0
(g54
g2
Ntp12392
Rp12393
(dp12394
g58
(lp12395
g0
(g7
g2
Ntp12396
Rp12397
(dp12398
g11
S'auto_1483'
p12399
sg13
I0
sg14
g0
(g15
g2
Ntp12400
Rp12401
(dp12402
g19
(lp12403
(lp12404
(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12405
tp12406
a(g37
I83
g38
S'learning_rate=LR).items())'
p12407
tp12408
a(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p12409
tp12410
a(g7508
I145
g12380
S'return theano.grad(loss_or_grads, params)'
p12411
tp12412
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p12413
tp12414
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p12415
tp12416
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12417
tp12418
a(g8287
I1162
g8297
S'new_output_grads)'
p12419
tp12420
aasbsg52
Nsg53
g0
(g54
g2
Ntp12421
Rp12422
(dp12423
g58
(lp12424
g0
(g7
g2
Ntp12425
Rp12426
(dp12427
g11
S'auto_1482'
p12428
sg13
I0
sg14
g0
(g15
g2
Ntp12429
Rp12430
(dp12431
g19
(lp12432
(lp12433
(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p12434
tp12435
a(g7508
I145
g12380
S'return theano.grad(loss_or_grads, params)'
p12436
tp12437
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p12438
tp12439
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p12440
tp12441
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12442
tp12443
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12444
tp12445
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12446
tp12447
a(g8287
I1162
g8297
S'new_output_grads)'
p12448
tp12449
aasbsg52
Nsg53
g0
(g54
g2
Ntp12450
Rp12451
(dp12452
g58
(lp12453
g0
(g7
g2
Ntp12454
Rp12455
(dp12456
g11
S'auto_1481'
p12457
sg13
I0
sg14
g0
(g15
g2
Ntp12458
Rp12459
(dp12460
g19
(lp12461
(lp12462
(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p12463
tp12464
a(g7508
I145
g12380
S'return theano.grad(loss_or_grads, params)'
p12465
tp12466
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p12467
tp12468
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p12469
tp12470
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12471
tp12472
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12473
tp12474
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12475
tp12476
a(g8287
I1162
g8297
S'new_output_grads)'
p12477
tp12478
aasbsg52
Nsg53
g0
(g54
g2
Ntp12479
Rp12480
(dp12481
g58
(lp12482
g0
(g7
g2
Ntp12483
Rp12484
(dp12485
g11
S'auto_1480'
p12486
sg13
I0
sg14
g0
(g15
g2
Ntp12487
Rp12488
(dp12489
g19
(lp12490
(lp12491
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p12492
tp12493
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p12494
tp12495
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12496
tp12497
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12498
tp12499
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12500
tp12501
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12502
tp12503
a(g8287
I1358
g8294
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p12504
tp12505
a(g8287
I1358
g8379
S'grad_dict[var] = reduce(lambda x, y: x + y, terms)'
p12506
tp12507
aasbsg52
Nsg53
g0
(g54
g2
Ntp12508
Rp12509
(dp12510
g58
(lp12511
g0
(g7
g2
Ntp12512
Rp12513
(dp12514
g11
S'auto_1477'
p12515
sg13
I0
sg14
g0
(g15
g2
Ntp12516
Rp12517
(dp12518
g19
(lp12519
(lp12520
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12521
tp12522
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12523
tp12524
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12525
tp12526
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12527
tp12528
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12529
tp12530
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12531
tp12532
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12533
tp12534
a(g8287
I1162
g8297
S'new_output_grads)'
p12535
tp12536
aasbsg52
Nsg53
g0
(g54
g2
Ntp12537
Rp12538
(dp12539
g58
(lp12540
g0
(g7
g2
Ntp12541
Rp12542
(dp12543
g11
S'auto_1476'
p12544
sg13
I0
sg14
g0
(g15
g2
Ntp12545
Rp12546
(dp12547
g19
(lp12548
(lp12549
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12550
tp12551
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12552
tp12553
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12554
tp12555
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12556
tp12557
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12558
tp12559
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12560
tp12561
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12562
tp12563
a(g8287
I1162
g8297
S'new_output_grads)'
p12564
tp12565
aasbsg52
Nsg53
g0
(g54
g2
Ntp12566
Rp12567
(dp12568
g58
(lp12569
g0
(g7
g2
Ntp12570
Rp12571
(dp12572
g11
S'auto_1474'
p12573
sg13
I0
sg14
g0
(g15
g2
Ntp12574
Rp12575
(dp12576
g19
(lp12577
(lp12578
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12579
tp12580
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12581
tp12582
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12583
tp12584
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12585
tp12586
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12587
tp12588
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12589
tp12590
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12591
tp12592
a(g8287
I1162
g8297
S'new_output_grads)'
p12593
tp12594
aasbsg52
Nsg53
g0
(g54
g2
Ntp12595
Rp12596
(dp12597
g58
(lp12598
g0
(g7
g2
Ntp12599
Rp12600
(dp12601
g11
S'auto_1473'
p12602
sg13
I0
sg14
g0
(g15
g2
Ntp12603
Rp12604
(dp12605
g19
(lp12606
(lp12607
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12608
tp12609
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12610
tp12611
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12612
tp12613
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12614
tp12615
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12616
tp12617
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12618
tp12619
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12620
tp12621
a(g8287
I1162
g8297
S'new_output_grads)'
p12622
tp12623
aasbsg52
Nsg53
g0
(g54
g2
Ntp12624
Rp12625
(dp12626
g58
(lp12627
g0
(g7
g2
Ntp12628
Rp12629
(dp12630
g11
S'auto_1472'
p12631
sg13
I0
sg14
g0
(g15
g2
Ntp12632
Rp12633
(dp12634
g19
(lp12635
(lp12636
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12637
tp12638
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12639
tp12640
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12641
tp12642
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12643
tp12644
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12645
tp12646
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12647
tp12648
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12649
tp12650
a(g8287
I1162
g8297
S'new_output_grads)'
p12651
tp12652
aasbsg52
Nsg53
g0
(g54
g2
Ntp12653
Rp12654
(dp12655
g58
(lp12656
g0
(g7
g2
Ntp12657
Rp12658
(dp12659
g11
S'auto_1463'
p12660
sg13
I0
sg14
g0
(g15
g2
Ntp12661
Rp12662
(dp12663
g19
(lp12664
(lp12665
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12666
tp12667
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12668
tp12669
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12670
tp12671
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12672
tp12673
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12674
tp12675
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12676
tp12677
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12678
tp12679
a(g8287
I1162
g8297
S'new_output_grads)'
p12680
tp12681
aasbsg52
Nsg53
g0
(g54
g2
Ntp12682
Rp12683
(dp12684
g58
(lp12685
g0
(g7
g2
Ntp12686
Rp12687
(dp12688
g11
S'auto_1461'
p12689
sg13
I0
sg14
g0
(g15
g2
Ntp12690
Rp12691
(dp12692
g19
(lp12693
(lp12694
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12695
tp12696
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12697
tp12698
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12699
tp12700
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12701
tp12702
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12703
tp12704
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12705
tp12706
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12707
tp12708
a(g8287
I1162
g8297
S'new_output_grads)'
p12709
tp12710
aasbsg52
Nsg53
g0
(g54
g2
Ntp12711
Rp12712
(dp12713
g58
(lp12714
g962
asg14
g0
(g15
g2
Ntp12715
Rp12716
sg204
(lp12717
g12687
asg206
g0
(g207
g2
Ntp12718
Rp12719
(dp12720
g211
(lp12721
sg213
(lp12722
sg215
(lp12723
I0
aI1
asg217
g218
sg219
(tsg220
(lp12724
g222
asg223
I01
sg224
(g225
g225
tp12725
sg227
(dp12726
S'support_code_apply'
p12727
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12728
ssg231
(dp12729
I0
(lp12730
I0
assg234
(lp12731
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p12732
asbsbsg177
g0
(g178
g2
Ntp12733
Rp12734
(dp12735
g182
(I01
I01
tp12736
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp12737
Rp12738
(dp12739
g11
S'auto_1462'
p12740
sg13
I0
sg14
g0
(g15
g2
Ntp12741
Rp12742
(dp12743
g19
(lp12744
(lp12745
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12746
tp12747
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12748
tp12749
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12750
tp12751
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12752
tp12753
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12754
tp12755
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12756
tp12757
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12758
tp12759
a(g8287
I1162
g8297
S'new_output_grads)'
p12760
tp12761
aasbsg52
Nsg53
g0
(g54
g2
Ntp12762
Rp12763
(dp12764
g58
(lp12765
g8641
ag8664
asg14
g0
(g15
g2
Ntp12766
Rp12767
sg204
(lp12768
g12738
asg206
g0
(g497
g2
Ntp12769
Rp12770
(dp12771
g52
Nsg503
g10105
sg511
(dp12772
sg513
g10109
sg516
g0
(g517
g2
Ntp12773
Rp12774
(dp12775
g521
Nsg522
(dp12776
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp12777
Rp12778
(dp12779
g182
(I00
I00
tp12780
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp12781
Rp12782
sg204
(lp12783
g12658
asg206
g0
(g497
g2
Ntp12784
Rp12785
(dp12786
g52
Nsg503
g3526
sg511
(dp12787
sg513
g5422
sg516
g0
(g517
g2
Ntp12788
Rp12789
(dp12790
g521
Nsg522
(dp12791
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp12792
Rp12793
(dp12794
g182
(I00
I00
tp12795
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp12796
Rp12797
(dp12798
g11
S'auto_1471'
p12799
sg13
I0
sg14
g0
(g15
g2
Ntp12800
Rp12801
(dp12802
g19
(lp12803
(lp12804
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12805
tp12806
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12807
tp12808
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12809
tp12810
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12811
tp12812
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12813
tp12814
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12815
tp12816
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12817
tp12818
a(g8287
I1162
g8297
S'new_output_grads)'
p12819
tp12820
aasbsg52
Nsg53
g0
(g54
g2
Ntp12821
Rp12822
(dp12823
g58
(lp12824
g0
(g7
g2
Ntp12825
Rp12826
(dp12827
g11
S'auto_1469'
p12828
sg13
I0
sg14
g0
(g15
g2
Ntp12829
Rp12830
(dp12831
g19
(lp12832
(lp12833
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12834
tp12835
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12836
tp12837
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12838
tp12839
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12840
tp12841
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12842
tp12843
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12844
tp12845
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12846
tp12847
a(g8287
I1162
g8297
S'new_output_grads)'
p12848
tp12849
aasbsg52
Nsg53
g0
(g54
g2
Ntp12850
Rp12851
(dp12852
g58
(lp12853
g0
(g7
g2
Ntp12854
Rp12855
(dp12856
g11
S'auto_1468'
p12857
sg13
I0
sg14
g0
(g15
g2
Ntp12858
Rp12859
(dp12860
g19
(lp12861
(lp12862
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12863
tp12864
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12865
tp12866
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12867
tp12868
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12869
tp12870
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12871
tp12872
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12873
tp12874
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12875
tp12876
a(g8287
I1162
g8297
S'new_output_grads)'
p12877
tp12878
aasbsg52
Nsg53
g0
(g54
g2
Ntp12879
Rp12880
(dp12881
g58
(lp12882
g10221
ag0
(g7
g2
Ntp12883
Rp12884
(dp12885
g11
S'auto_1467'
p12886
sg13
I0
sg14
g0
(g15
g2
Ntp12887
Rp12888
(dp12889
g19
(lp12890
(lp12891
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12892
tp12893
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12894
tp12895
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12896
tp12897
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12898
tp12899
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12900
tp12901
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12902
tp12903
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12904
tp12905
a(g8287
I1162
g8297
S'new_output_grads)'
p12906
tp12907
aasbsg52
Nsg53
g0
(g54
g2
Ntp12908
Rp12909
(dp12910
g58
(lp12911
g0
(g7
g2
Ntp12912
Rp12913
(dp12914
g11
S'auto_1466'
p12915
sg13
I0
sg14
g0
(g15
g2
Ntp12916
Rp12917
(dp12918
g19
(lp12919
(lp12920
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12921
tp12922
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12923
tp12924
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12925
tp12926
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12927
tp12928
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12929
tp12930
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12931
tp12932
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12933
tp12934
a(g8287
I1162
g8297
S'new_output_grads)'
p12935
tp12936
aasbsg52
Nsg53
g0
(g54
g2
Ntp12937
Rp12938
(dp12939
g58
(lp12940
g0
(g7
g2
Ntp12941
Rp12942
(dp12943
g11
S'auto_1465'
p12944
sg13
I0
sg14
g0
(g15
g2
Ntp12945
Rp12946
(dp12947
g19
(lp12948
(lp12949
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12950
tp12951
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12952
tp12953
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12954
tp12955
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12956
tp12957
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12958
tp12959
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p12960
tp12961
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p12962
tp12963
a(g8287
I1162
g8297
S'new_output_grads)'
p12964
tp12965
aasbsg52
Nsg53
g0
(g54
g2
Ntp12966
Rp12967
(dp12968
g58
(lp12969
g0
(g7
g2
Ntp12970
Rp12971
(dp12972
g11
S'auto_1464'
p12973
sg13
I0
sg14
g0
(g15
g2
Ntp12974
Rp12975
(dp12976
g19
(lp12977
(lp12978
(g22
I72
g26
S'exec code in run_globals'
p12979
tp12980
a(g29
I249
g30
S'Model(hyperparams).train()'
p12981
tp12982
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p12983
tp12984
a(g37
I83
g38
S'learning_rate=LR).items())'
p12985
tp12986
a(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p12987
tp12988
a(g7508
I145
g12380
S'return theano.grad(loss_or_grads, params)'
p12989
tp12990
a(g8287
I527
g8288
S'g_cost = _float_ones_like(cost)'
p12991
tp12992
a(g8287
I1396
g10360
S'return x.ones_like(dtype=dtype)'
p12993
tp12994
aasbsg52
Nsg53
g0
(g54
g2
Ntp12995
Rp12996
(dp12997
g58
(lp12998
g10368
ag962
asg14
g0
(g15
g2
Ntp12999
Rp13000
sg204
(lp13001
g12971
asg206
g10627
sbsg177
g0
(g178
g2
Ntp13002
Rp13003
(dp13004
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag10563
asg14
g0
(g15
g2
Ntp13005
Rp13006
sg204
(lp13007
g12942
asg206
g0
(g497
g2
Ntp13008
Rp13009
(dp13010
g52
Nsg503
g3179
sg511
(dp13011
sg513
g5331
sg516
g0
(g517
g2
Ntp13012
Rp13013
(dp13014
g521
Nsg522
(dp13015
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13016
Rp13017
(dp13018
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag10446
asg14
g0
(g15
g2
Ntp13019
Rp13020
sg204
(lp13021
g12913
asg206
g0
(g497
g2
Ntp13022
Rp13023
(dp13024
g52
Nsg503
g3179
sg511
(dp13025
sg513
g5331
sg516
g0
(g517
g2
Ntp13026
Rp13027
(dp13028
g521
Nsg522
(dp13029
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13030
Rp13031
(dp13032
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13033
Rp13034
sg204
(lp13035
g12884
asg206
g0
(g207
g2
Ntp13036
Rp13037
(dp13038
g211
(lp13039
sg213
(lp13040
sg215
(lp13041
I0
aI1
asg217
g218
sg219
(tsg220
(lp13042
g222
asg223
I01
sg224
(g225
g225
tp13043
sg227
(dp13044
S'support_code_apply'
p13045
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13046
ssg231
(dp13047
I0
(lp13048
I0
assg234
(lp13049
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13050
asbsbsg177
g0
(g178
g2
Ntp13051
Rp13052
(dp13053
g182
(I01
I01
tp13054
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13055
Rp13056
sg204
(lp13057
g12855
asg206
g0
(g497
g2
Ntp13058
Rp13059
(dp13060
g52
Nsg503
g10631
sg511
(dp13061
sg513
Nsg516
g0
(g517
g2
Ntp13062
Rp13063
(dp13064
g521
Nsg522
(dp13065
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13066
Rp13067
(dp13068
g182
(I00
I00
tp13069
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag8641
asg14
g0
(g15
g2
Ntp13070
Rp13071
sg204
(lp13072
g12826
asg206
g0
(g497
g2
Ntp13073
Rp13074
(dp13075
g52
Nsg503
g1224
sg511
(dp13076
sg513
g1230
sg516
g0
(g517
g2
Ntp13077
Rp13078
(dp13079
g521
Nsg522
(dp13080
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13081
Rp13082
(dp13083
g182
(I00
I00
tp13084
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13085
Rp13086
(dp13087
g11
S'auto_1470'
p13088
sg13
I0
sg14
g0
(g15
g2
Ntp13089
Rp13090
(dp13091
g19
(lp13092
(lp13093
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13094
tp13095
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13096
tp13097
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13098
tp13099
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13100
tp13101
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13102
tp13103
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13104
tp13105
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13106
tp13107
a(g8287
I1162
g8297
S'new_output_grads)'
p13108
tp13109
aasbsg52
Nsg53
g0
(g54
g2
Ntp13110
Rp13111
(dp13112
g58
(lp13113
g10758
asg14
g0
(g15
g2
Ntp13114
Rp13115
sg204
(lp13116
g13086
asg206
g0
(g207
g2
Ntp13117
Rp13118
(dp13119
g211
(lp13120
sg213
(lp13121
sg215
(lp13122
I0
aI1
asg217
g218
sg219
(tsg220
(lp13123
g222
asg223
I01
sg224
(g225
g225
tp13124
sg227
(dp13125
S'support_code_apply'
p13126
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13127
ssg231
(dp13128
I0
(lp13129
I0
assg234
(lp13130
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13131
asbsbsg177
g0
(g178
g2
Ntp13132
Rp13133
(dp13134
g182
(I01
I01
tp13135
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13136
Rp13137
sg204
(lp13138
g12797
asg206
g0
(g497
g2
Ntp13139
Rp13140
(dp13141
g52
Nsg503
g1224
sg511
(dp13142
sg513
g1230
sg516
g0
(g517
g2
Ntp13143
Rp13144
(dp13145
g521
Nsg522
(dp13146
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13147
Rp13148
(dp13149
g182
(I00
I00
tp13150
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13151
Rp13152
sg204
(lp13153
g12629
asg206
g0
(g497
g2
Ntp13154
Rp13155
(dp13156
g52
Nsg503
g1224
sg511
(dp13157
sg513
g1230
sg516
g0
(g517
g2
Ntp13158
Rp13159
(dp13160
g521
Nsg522
(dp13161
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13162
Rp13163
(dp13164
g182
(I00
I00
tp13165
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13166
Rp13167
sg204
(lp13168
g12600
asg206
g0
(g497
g2
Ntp13169
Rp13170
(dp13171
g52
Nsg503
g10851
sg511
(dp13172
sg513
g10857
sg516
g0
(g517
g2
Ntp13173
Rp13174
(dp13175
g521
Nsg522
(dp13176
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13177
Rp13178
(dp13179
g182
(I00
I00
tp13180
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag1845
asg14
g0
(g15
g2
Ntp13181
Rp13182
sg204
(lp13183
g12571
asg206
g0
(g497
g2
Ntp13184
Rp13185
(dp13186
g52
Nsg503
g1224
sg511
(dp13187
sg513
g1230
sg516
g0
(g517
g2
Ntp13188
Rp13189
(dp13190
g521
Nsg522
(dp13191
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13192
Rp13193
(dp13194
g182
(I00
I00
tp13195
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13196
Rp13197
(dp13198
g11
S'auto_1475'
p13199
sg13
I0
sg14
g0
(g15
g2
Ntp13200
Rp13201
(dp13202
g19
(lp13203
(lp13204
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13205
tp13206
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13207
tp13208
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13209
tp13210
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13211
tp13212
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13213
tp13214
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13215
tp13216
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13217
tp13218
a(g8287
I1162
g8297
S'new_output_grads)'
p13219
tp13220
aasbsg52
Nsg53
g0
(g54
g2
Ntp13221
Rp13222
(dp13223
g58
(lp13224
g9576
asg14
g0
(g15
g2
Ntp13225
Rp13226
sg204
(lp13227
g13197
asg206
g0
(g207
g2
Ntp13228
Rp13229
(dp13230
g211
(lp13231
sg213
(lp13232
I1
aI0
asg215
(lp13233
sg217
g218
sg219
g10009
sg220
(lp13234
g222
asg223
I01
sg224
(I1
I0
tp13235
sg227
(dp13236
S'support_code_apply'
p13237
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13238
ssg231
(dp13239
I0
(lp13240
I0
assg234
(lp13241
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13242
asbsbsg177
g0
(g178
g2
Ntp13243
Rp13244
(dp13245
g182
(I00
I00
tp13246
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13247
Rp13248
sg204
(lp13249
g12542
asg206
g1052
sbsg177
g0
(g178
g2
Ntp13250
Rp13251
(dp13252
g182
(I00
I00
tp13253
sg183
S'float32'
p13254
sg185
g189
sg192
I00
sg52
Nsbsbag8887
asg14
g0
(g15
g2
Ntp13255
Rp13256
sg204
(lp13257
g12513
asg206
g0
(g497
g2
Ntp13258
Rp13259
(dp13260
g52
Nsg503
g1224
sg511
(dp13261
sg513
g1230
sg516
g0
(g517
g2
Ntp13262
Rp13263
(dp13264
g521
I0
sg522
(dp13265
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13266
Rp13267
(dp13268
g182
(I00
I00
tp13269
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13270
Rp13271
(dp13272
g11
S'auto_1479'
p13273
sg13
I0
sg14
g0
(g15
g2
Ntp13274
Rp13275
(dp13276
g19
(lp13277
(lp13278
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p13279
tp13280
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p13281
tp13282
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13283
tp13284
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13285
tp13286
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13287
tp13288
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13289
tp13290
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13291
tp13292
a(g8287
I1162
g8297
S'new_output_grads)'
p13293
tp13294
aasbsg52
Nsg53
g0
(g54
g2
Ntp13295
Rp13296
(dp13297
g58
(lp13298
g12513
ag0
(g7
g2
Ntp13299
Rp13300
(dp13301
g11
S'auto_1478'
p13302
sg13
I0
sg14
g0
(g15
g2
Ntp13303
Rp13304
(dp13305
g19
(lp13306
(lp13307
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p13308
tp13309
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p13310
tp13311
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13312
tp13313
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13314
tp13315
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13316
tp13317
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p13318
tp13319
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p13320
tp13321
a(g8287
I1162
g8297
S'new_output_grads)'
p13322
tp13323
aasbsg52
Nsg53
g0
(g54
g2
Ntp13324
Rp13325
(dp13326
g58
(lp13327
g8967
asg14
g0
(g15
g2
Ntp13328
Rp13329
sg204
(lp13330
g13300
asg206
g0
(g497
g2
Ntp13331
Rp13332
(dp13333
g52
Nsg503
g11021
sg511
(dp13334
sg513
g11026
sg516
g0
(g517
g2
Ntp13335
Rp13336
(dp13337
g521
Nsg522
(dp13338
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13339
Rp13340
(dp13341
g182
(I00
I00
tp13342
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13343
Rp13344
sg204
(lp13345
g13271
asg206
g0
(g497
g2
Ntp13346
Rp13347
(dp13348
g52
Nsg503
g1224
sg511
(dp13349
sg513
g1230
sg516
g0
(g517
g2
Ntp13350
Rp13351
(dp13352
g521
I0
sg522
(dp13353
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13354
Rp13355
(dp13356
g182
(I00
I00
tp13357
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13358
Rp13359
sg204
(lp13360
g12484
asg206
g1153
sbsg177
g0
(g178
g2
Ntp13361
Rp13362
(dp13363
g182
(I00
I00
tp13364
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13365
Rp13366
sg204
(lp13367
g12455
asg206
g0
(g3002
g2
Ntp13368
Rp13369
(dp13370
g183
g531
sg503
g1157
sg3006
(I0
tp13371
sg3007
g3008
sbsbsg177
g0
(g178
g2
Ntp13372
Rp13373
(dp13374
g182
(I00
tp13375
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13376
Rp13377
sg204
(lp13378
g12426
asg206
g0
(g207
g2
Ntp13379
Rp13380
(dp13381
g211
(lp13382
sg213
(lp13383
I0
asg215
(lp13384
I0
asg217
g218
sg219
g13375
sg220
(lp13385
g222
asg223
I01
sg224
(g225
I0
tp13386
sg227
(dp13387
S'support_code_apply'
p13388
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13389
ssg231
(dp13390
I0
(lp13391
I0
assg234
(lp13392
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13393
asbsbsg177
g0
(g178
g2
Ntp13394
Rp13395
(dp13396
g182
(I01
I00
tp13397
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13398
Rp13399
sg204
(lp13400
g12397
asg206
g0
(g497
g2
Ntp13401
Rp13402
(dp13403
g52
Nsg503
g0
(ctheano.scalar.basic
Identity
p13404
g2
Ntp13405
Rp13406
(dp13407
g508
g509
sg52
S'identity'
p13408
sbsg511
(dp13409
sg513
Nsg516
g0
(g517
g2
Ntp13410
Rp13411
(dp13412
g521
I0
sg522
(dp13413
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp13414
Rp13415
(dp13416
g182
(I01
I00
tp13417
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13418
Rp13419
sg204
(lp13420
g12366
asg206
g0
(g207
g2
Ntp13421
Rp13422
(dp13423
g211
(lp13424
I0
asg213
(lp13425
I1
asg215
(lp13426
sg217
g218
sg219
g13397
sg220
(lp13427
g222
asg223
I01
sg224
(I1
tp13428
sg227
(dp13429
S'support_code_apply'
p13430
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13431
ssg231
(dp13432
I0
(lp13433
I0
assg234
(lp13434
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13435
asbsbsg177
g0
(g178
g2
Ntp13436
Rp13437
(dp13438
g182
(I00
tp13439
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13440
Rp13441
sg204
(lp13442
g12263
asg206
g1220
sbsg177
g0
(g178
g2
Ntp13443
Rp13444
(dp13445
g182
(I00
tp13446
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13447
Rp13448
sg204
(lp13449
g12123
asg206
g1153
sbsg177
g0
(g178
g2
Ntp13450
Rp13451
(dp13452
g182
(I00
tp13453
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13454
Rp13455
sg204
(lp13456
g11769
asg206
g1220
sbsg177
g0
(g178
g2
Ntp13457
Rp13458
(dp13459
g182
(I00
tp13460
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13461
Rp13462
(dp13463
g11
S'auto_1507'
p13464
sg13
I0
sg14
g0
(g15
g2
Ntp13465
Rp13466
(dp13467
g19
(lp13468
(lp13469
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13470
tp13471
a(g22
I72
g26
S'exec code in run_globals'
p13472
tp13473
a(g29
I249
g30
S'Model(hyperparams).train()'
p13474
tp13475
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13476
tp13477
a(g37
I83
g38
S'learning_rate=LR).items())'
p13478
tp13479
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p13480
tp13481
aasbsg52
Nsg53
g0
(g54
g2
Ntp13482
Rp13483
(dp13484
g58
(lp13485
g0
(g7
g2
Ntp13486
Rp13487
(dp13488
g11
S'auto_1505'
p13489
sg13
I0
sg14
g0
(g15
g2
Ntp13490
Rp13491
(dp13492
g19
(lp13493
(lp13494
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13495
tp13496
a(g22
I72
g26
S'exec code in run_globals'
p13497
tp13498
a(g29
I249
g30
S'Model(hyperparams).train()'
p13499
tp13500
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13501
tp13502
a(g37
I83
g38
S'learning_rate=LR).items())'
p13503
tp13504
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p13505
tp13506
aasbsg52
Nsg53
g0
(g54
g2
Ntp13507
Rp13508
(dp13509
g58
(lp13510
g0
(g7
g2
Ntp13511
Rp13512
(dp13513
g11
S'auto_1494'
p13514
sg13
I0
sg14
g0
(g15
g2
Ntp13515
Rp13516
(dp13517
g19
(lp13518
(lp13519
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13520
tp13521
a(g22
I72
g26
S'exec code in run_globals'
p13522
tp13523
a(g29
I249
g30
S'Model(hyperparams).train()'
p13524
tp13525
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13526
tp13527
a(g37
I83
g38
S'learning_rate=LR).items())'
p13528
tp13529
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13530
tp13531
aasbsg52
Nsg53
g0
(g54
g2
Ntp13532
Rp13533
(dp13534
g58
(lp13535
g0
(g7
g2
Ntp13536
Rp13537
(dp13538
g11
S'auto_1488'
p13539
sg13
I0
sg14
g0
(g15
g2
Ntp13540
Rp13541
(dp13542
g19
(lp13543
(lp13544
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13545
tp13546
a(g22
I72
g26
S'exec code in run_globals'
p13547
tp13548
a(g29
I249
g30
S'Model(hyperparams).train()'
p13549
tp13550
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13551
tp13552
a(g37
I83
g38
S'learning_rate=LR).items())'
p13553
tp13554
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13555
tp13556
aasbsg52
Nsg53
g0
(g54
g2
Ntp13557
Rp13558
(dp13559
g58
(lp13560
g0
(g7
g2
Ntp13561
Rp13562
(dp13563
g11
S'auto_1487'
p13564
sg13
I0
sg14
g0
(g15
g2
Ntp13565
Rp13566
(dp13567
g19
(lp13568
(lp13569
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13570
tp13571
a(g22
I72
g26
S'exec code in run_globals'
p13572
tp13573
a(g29
I249
g30
S'Model(hyperparams).train()'
p13574
tp13575
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13576
tp13577
a(g37
I83
g38
S'learning_rate=LR).items())'
p13578
tp13579
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13580
tp13581
aasbsg52
Nsg53
g0
(g54
g2
Ntp13582
Rp13583
(dp13584
g58
(lp13585
g7752
asg14
g0
(g15
g2
Ntp13586
Rp13587
sg204
(lp13588
g13562
asg206
g0
(g207
g2
Ntp13589
Rp13590
(dp13591
g211
(lp13592
sg213
(lp13593
sg215
(lp13594
I0
asg217
g218
sg219
(tsg220
(lp13595
g222
asg223
I01
sg224
(g225
tp13596
sg227
(dp13597
S'support_code_apply'
p13598
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13599
ssg231
(dp13600
I0
(lp13601
I0
assg234
(lp13602
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13603
asbsbsg177
g0
(g178
g2
Ntp13604
Rp13605
(dp13606
g182
(I01
tp13607
sg183
g7775
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp13608
Rp13609
(dp13610
g11
S'auto_1056'
p13611
sg13
Nsg14
g0
(g15
g2
Ntp13612
Rp13613
(dp13614
g19
(lp13615
(lp13616
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13617
tp13618
a(g22
I72
g26
S'exec code in run_globals'
p13619
tp13620
a(g29
I249
g30
S'Model(hyperparams).train()'
p13621
tp13622
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13623
tp13624
a(g37
I83
g38
S'learning_rate=LR).items())'
p13625
tp13626
a(g7508
I620
g7509
S'broadcastable=param.broadcastable)'
p13627
tp13628
aasbsg472
g0
(g473
g2
Ntp13629
Rp13630
(dp13631
g52
Nsg477
(lp13632
g194
(g195
(I0
tp13633
g197
tp13634
Rp13635
(I1
(I64
tp13636
g189
I00
S'|\x8f:6\xc8\x01\xdc5m\xce\x906O\xe2\xe45\xb4LA6\xfd\xe4)6\xe7b\xf453@E6\xc4\xed\x856\xa9B\xdc6\xf4\x01\x00\x00\xc8kj6g!J6\xef\x82B6|\x8dR6\xbb]\xc65\xaa\xe1\xae6<\xf8L6?\xf6.6\xf6S\x086\xff\xd2\xf168\x86g6\xf4\x01\x00\x00D\xd0\x106\xc89F6\x00T\x1d6\x85w\x1e6\xe8\x87\x876\x1c\xbdv6;\xf5\xb66\xaa\xdc\x9e6\xf4\x01\x00\x00K\x0f\x8d6t\xcd\x086\xe3?\x8c6K\xfe:6\xdev\x1e6\x87\x91O6g?\x886=\xe1\x196\x12B,6N\xfc\xf55\x7f\x07\x916\xd4F,6\xd5\xf4\x976\xb4\xae96rY\xd36|\x03\xa96e\xcc\xc75)\xd3\xd75\xb7+\xcf6q\xb3\xb75\xdd\xe3\xdb5n\xde\x9f6\x13\xe1\xc06\x8d\xc1*6^;\x996\xa8w\xb55\xfd\xd9\x186\x8a\xbc\xf45\xc8\x9c\x1c6\x12\xb6\x116#\xcd\xea5h\xd9E6'
p13637
tp13638
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp13639
Rp13640
(dp13641
g182
(I00
tp13642
sg183
S'float32'
p13643
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g13640
sbasg14
g0
(g15
g2
Ntp13644
Rp13645
sg204
(lp13646
g13537
asg206
g1220
sbsg177
g0
(g178
g2
Ntp13647
Rp13648
(dp13649
g182
(I00
tp13650
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13651
Rp13652
(dp13653
g11
S'auto_1493'
p13654
sg13
I0
sg14
g0
(g15
g2
Ntp13655
Rp13656
(dp13657
g19
(lp13658
(lp13659
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13660
tp13661
a(g22
I72
g26
S'exec code in run_globals'
p13662
tp13663
a(g29
I249
g30
S'Model(hyperparams).train()'
p13664
tp13665
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13666
tp13667
a(g37
I83
g38
S'learning_rate=LR).items())'
p13668
tp13669
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13670
tp13671
aasbsg52
Nsg53
g0
(g54
g2
Ntp13672
Rp13673
(dp13674
g58
(lp13675
g0
(g7
g2
Ntp13676
Rp13677
(dp13678
g11
S'auto_1490'
p13679
sg13
I0
sg14
g0
(g15
g2
Ntp13680
Rp13681
(dp13682
g19
(lp13683
(lp13684
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13685
tp13686
a(g22
I72
g26
S'exec code in run_globals'
p13687
tp13688
a(g29
I249
g30
S'Model(hyperparams).train()'
p13689
tp13690
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13691
tp13692
a(g37
I83
g38
S'learning_rate=LR).items())'
p13693
tp13694
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13695
tp13696
aasbsg52
Nsg53
g0
(g54
g2
Ntp13697
Rp13698
(dp13699
g58
(lp13700
g0
(g7
g2
Ntp13701
Rp13702
(dp13703
g11
S'auto_1489'
p13704
sg13
I0
sg14
g0
(g15
g2
Ntp13705
Rp13706
(dp13707
g19
(lp13708
(lp13709
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13710
tp13711
a(g22
I72
g26
S'exec code in run_globals'
p13712
tp13713
a(g29
I249
g30
S'Model(hyperparams).train()'
p13714
tp13715
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13716
tp13717
a(g37
I83
g38
S'learning_rate=LR).items())'
p13718
tp13719
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13720
tp13721
aasbsg52
Nsg53
g0
(g54
g2
Ntp13722
Rp13723
(dp13724
g58
(lp13725
g7692
ag7752
asg14
g0
(g15
g2
Ntp13726
Rp13727
sg204
(lp13728
g13702
asg206
g5417
sbsg177
g0
(g178
g2
Ntp13729
Rp13730
(dp13731
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13732
Rp13733
sg204
(lp13734
g13677
asg206
g0
(g207
g2
Ntp13735
Rp13736
(dp13737
g211
(lp13738
sg213
(lp13739
sg215
(lp13740
I0
asg217
g218
sg219
(tsg220
(lp13741
g222
asg223
I01
sg224
(g225
tp13742
sg227
(dp13743
S'support_code_apply'
p13744
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13745
ssg231
(dp13746
I0
(lp13747
I0
assg234
(lp13748
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13749
asbsbsg177
g0
(g178
g2
Ntp13750
Rp13751
(dp13752
g182
(I01
tp13753
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13754
Rp13755
(dp13756
g11
S'auto_1492'
p13757
sg13
I0
sg14
g0
(g15
g2
Ntp13758
Rp13759
(dp13760
g19
(lp13761
(lp13762
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13763
tp13764
a(g22
I72
g26
S'exec code in run_globals'
p13765
tp13766
a(g29
I249
g30
S'Model(hyperparams).train()'
p13767
tp13768
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13769
tp13770
a(g37
I83
g38
S'learning_rate=LR).items())'
p13771
tp13772
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13773
tp13774
aasbsg52
Nsg53
g0
(g54
g2
Ntp13775
Rp13776
(dp13777
g58
(lp13778
g12366
ag0
(g7
g2
Ntp13779
Rp13780
(dp13781
g11
S'auto_1491'
p13782
sg13
I0
sg14
g0
(g15
g2
Ntp13783
Rp13784
(dp13785
g19
(lp13786
(lp13787
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13788
tp13789
a(g22
I72
g26
S'exec code in run_globals'
p13790
tp13791
a(g29
I249
g30
S'Model(hyperparams).train()'
p13792
tp13793
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13794
tp13795
a(g37
I83
g38
S'learning_rate=LR).items())'
p13796
tp13797
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p13798
tp13799
aasbsg52
Nsg53
g0
(g54
g2
Ntp13800
Rp13801
(dp13802
g58
(lp13803
g10758
asg14
g0
(g15
g2
Ntp13804
Rp13805
sg204
(lp13806
g13780
asg206
g0
(g207
g2
Ntp13807
Rp13808
(dp13809
g211
(lp13810
sg213
(lp13811
sg215
(lp13812
I0
asg217
g218
sg219
(tsg220
(lp13813
g222
asg223
I01
sg224
(g225
tp13814
sg227
(dp13815
S'support_code_apply'
p13816
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13817
ssg231
(dp13818
I0
(lp13819
I0
assg234
(lp13820
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13821
asbsbsg177
g0
(g178
g2
Ntp13822
Rp13823
(dp13824
g182
(I01
tp13825
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13826
Rp13827
sg204
(lp13828
g13755
asg206
g7850
sbsg177
g0
(g178
g2
Ntp13829
Rp13830
(dp13831
g182
(I00
tp13832
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13833
Rp13834
sg204
(lp13835
g13652
asg206
g1220
sbsg177
g0
(g178
g2
Ntp13836
Rp13837
(dp13838
g182
(I00
tp13839
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13840
Rp13841
sg204
(lp13842
g13512
asg206
g1153
sbsg177
g0
(g178
g2
Ntp13843
Rp13844
(dp13845
g182
(I00
tp13846
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13847
Rp13848
sg204
(lp13849
g13487
asg206
g7880
sbsg177
g0
(g178
g2
Ntp13850
Rp13851
(dp13852
g182
(I00
tp13853
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp13854
Rp13855
(dp13856
g11
S'auto_1506'
p13857
sg13
I0
sg14
g0
(g15
g2
Ntp13858
Rp13859
(dp13860
g19
(lp13861
(lp13862
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13863
tp13864
a(g22
I72
g26
S'exec code in run_globals'
p13865
tp13866
a(g29
I249
g30
S'Model(hyperparams).train()'
p13867
tp13868
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13869
tp13870
a(g37
I83
g38
S'learning_rate=LR).items())'
p13871
tp13872
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p13873
tp13874
aasbsg52
Nsg53
g0
(g54
g2
Ntp13875
Rp13876
(dp13877
g58
(lp13878
g11505
asg14
g0
(g15
g2
Ntp13879
Rp13880
sg204
(lp13881
g13855
asg206
g0
(g207
g2
Ntp13882
Rp13883
(dp13884
g211
(lp13885
sg213
(lp13886
sg215
(lp13887
I0
asg217
g218
sg219
(tsg220
(lp13888
g222
asg223
I01
sg224
(g225
tp13889
sg227
(dp13890
S'support_code_apply'
p13891
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13892
ssg231
(dp13893
I0
(lp13894
I0
assg234
(lp13895
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p13896
asbsbsg177
g0
(g178
g2
Ntp13897
Rp13898
(dp13899
g182
(I01
tp13900
sg183
g11528
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13901
Rp13902
sg204
(lp13903
g13462
asg206
g1153
sbsg177
g0
(g178
g2
Ntp13904
Rp13905
(dp13906
g182
(I00
tp13907
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13908
Rp13909
sg204
(lp13910
g11744
asg206
g5326
sbsg177
g0
(g178
g2
Ntp13911
Rp13912
(dp13913
g182
(I00
tp13914
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp13915
Rp13916
sg204
(lp13917
g11719
asg206
g5417
sbsg177
g0
(g178
g2
Ntp13918
Rp13919
(dp13920
g182
(I00
tp13921
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbsg1834
g1113
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g1088
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp13922
Rp13923
(dp13924
g52
g493
sg1833
g0
(g7
g2
Ntp13925
Rp13926
(dp13927
g11
S'auto_1456'
p13928
sg13
I0
sg14
g0
(g15
g2
Ntp13929
Rp13930
(dp13931
g19
(lp13932
(lp13933
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13934
tp13935
a(g22
I72
g26
S'exec code in run_globals'
p13936
tp13937
a(g29
I249
g30
S'Model(hyperparams).train()'
p13938
tp13939
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13940
tp13941
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p13942
tp13943
a(g7329
I219
g7330
S'updates[param] = T.clip(updates[param], -layer.H,layer.H)'
p13944
tp13945
aasbsg52
Nsg53
g0
(g54
g2
Ntp13946
Rp13947
(dp13948
g58
(lp13949
g0
(g7
g2
Ntp13950
Rp13951
(dp13952
g11
S'auto_1453'
p13953
sg13
I0
sg14
g0
(g15
g2
Ntp13954
Rp13955
(dp13956
g19
(lp13957
(lp13958
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13959
tp13960
a(g22
I72
g26
S'exec code in run_globals'
p13961
tp13962
a(g29
I249
g30
S'Model(hyperparams).train()'
p13963
tp13964
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13965
tp13966
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p13967
tp13968
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p13969
tp13970
aasbsg52
Nsg53
g0
(g54
g2
Ntp13971
Rp13972
(dp13973
g58
(lp13974
g1328
ag0
(g7
g2
Ntp13975
Rp13976
(dp13977
g11
S'auto_1452'
p13978
sg13
I0
sg14
g0
(g15
g2
Ntp13979
Rp13980
(dp13981
g19
(lp13982
(lp13983
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p13984
tp13985
a(g22
I72
g26
S'exec code in run_globals'
p13986
tp13987
a(g29
I249
g30
S'Model(hyperparams).train()'
p13988
tp13989
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p13990
tp13991
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p13992
tp13993
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p13994
tp13995
aasbsg52
Nsg53
g0
(g54
g2
Ntp13996
Rp13997
(dp13998
g58
(lp13999
g0
(g7
g2
Ntp14000
Rp14001
(dp14002
g11
S'auto_1443'
p14003
sg13
I0
sg14
g0
(g15
g2
Ntp14004
Rp14005
(dp14006
g19
(lp14007
(lp14008
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14009
tp14010
a(g22
I72
g26
S'exec code in run_globals'
p14011
tp14012
a(g29
I249
g30
S'Model(hyperparams).train()'
p14013
tp14014
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14015
tp14016
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p14017
tp14018
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p14019
tp14020
aasbsg52
Nsg53
g0
(g54
g2
Ntp14021
Rp14022
(dp14023
g58
(lp14024
g0
(g149
g2
Ntp14025
Rp14026
(dp14027
g11
S'auto_750'
p14028
sg13
Nsg14
g0
(g15
g2
Ntp14029
Rp14030
(dp14031
g19
(lp14032
(lp14033
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14034
tp14035
a(g22
I72
g26
S'exec code in run_globals'
p14036
tp14037
a(g29
I249
g30
S'Model(hyperparams).train()'
p14038
tp14039
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14040
tp14041
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p14042
tp14043
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p14044
tp14045
aasg175
Nsbsg52
Nsg176
I01
sg177
g0
(g178
g2
Ntp14046
Rp14047
(dp14048
g182
(tsg183
S'float32'
p14049
sg185
g189
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp14050
g197
tp14051
Rp14052
(I1
(tg189
I00
S'\xb8\xc2\xe0@'
p14053
tp14054
bsbasg14
g0
(g15
g2
Ntp14055
Rp14056
sg204
(lp14057
g14001
asg206
g0
(g207
g2
Ntp14058
Rp14059
(dp14060
g211
(lp14061
sg213
(lp14062
sg215
(lp14063
I0
aI1
asg217
g218
sg219
(tsg220
(lp14064
g222
asg223
I01
sg224
(g225
g225
tp14065
sg227
(dp14066
S'support_code_apply'
p14067
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14068
ssg231
(dp14069
I0
(lp14070
I0
assg234
(lp14071
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14072
asbsbsg177
g0
(g178
g2
Ntp14073
Rp14074
(dp14075
g182
(I01
I01
tp14076
sg183
g14049
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14077
Rp14078
(dp14079
g11
S'auto_1451'
p14080
sg13
I0
sg14
g0
(g15
g2
Ntp14081
Rp14082
(dp14083
g19
(lp14084
(lp14085
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14086
tp14087
a(g22
I72
g26
S'exec code in run_globals'
p14088
tp14089
a(g29
I249
g30
S'Model(hyperparams).train()'
p14090
tp14091
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14092
tp14093
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p14094
tp14095
a(g7329
I218
g7330
S'updates[param] = param + layer.W_LR_scale*(updates[param] - param)'
p14096
tp14097
aasbsg52
Nsg53
g0
(g54
g2
Ntp14098
Rp14099
(dp14100
g58
(lp14101
g0
(g7
g2
Ntp14102
Rp14103
(dp14104
g11
S'auto_1450'
p14105
sg13
I0
sg14
g0
(g15
g2
Ntp14106
Rp14107
(dp14108
g19
(lp14109
(lp14110
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14111
tp14112
a(g22
I72
g26
S'exec code in run_globals'
p14113
tp14114
a(g29
I249
g30
S'Model(hyperparams).train()'
p14115
tp14116
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14117
tp14118
a(g37
I74
g38
S'learning_rate=LR)'
p14119
tp14120
a(g7508
I628
g7509
S'updates[param] = param - step'
p14121
tp14122
aasbsg52
Nsg53
g0
(g54
g2
Ntp14123
Rp14124
(dp14125
g58
(lp14126
g1328
ag0
(g7
g2
Ntp14127
Rp14128
(dp14129
g11
S'auto_1449'
p14130
sg13
I0
sg14
g0
(g15
g2
Ntp14131
Rp14132
(dp14133
g19
(lp14134
(lp14135
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14136
tp14137
a(g22
I72
g26
S'exec code in run_globals'
p14138
tp14139
a(g29
I249
g30
S'Model(hyperparams).train()'
p14140
tp14141
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14142
tp14143
a(g37
I74
g38
S'learning_rate=LR)'
p14144
tp14145
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p14146
tp14147
aasbsg52
Nsg53
g0
(g54
g2
Ntp14148
Rp14149
(dp14150
g58
(lp14151
g0
(g7
g2
Ntp14152
Rp14153
(dp14154
g11
S'auto_1445'
p14155
sg13
I0
sg14
g0
(g15
g2
Ntp14156
Rp14157
(dp14158
g19
(lp14159
(lp14160
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14161
tp14162
a(g22
I72
g26
S'exec code in run_globals'
p14163
tp14164
a(g29
I249
g30
S'Model(hyperparams).train()'
p14165
tp14166
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14167
tp14168
a(g37
I74
g38
S'learning_rate=LR)'
p14169
tp14170
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p14171
tp14172
aasbsg52
Nsg53
g0
(g54
g2
Ntp14173
Rp14174
(dp14175
g58
(lp14176
g0
(g7
g2
Ntp14177
Rp14178
(dp14179
g11
S'auto_1444'
p14180
sg13
I0
sg14
g0
(g15
g2
Ntp14181
Rp14182
(dp14183
g19
(lp14184
(lp14185
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14186
tp14187
a(g22
I72
g26
S'exec code in run_globals'
p14188
tp14189
a(g29
I249
g30
S'Model(hyperparams).train()'
p14190
tp14191
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14192
tp14193
a(g37
I74
g38
S'learning_rate=LR)'
p14194
tp14195
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p14196
tp14197
aasbsg52
Nsg53
g0
(g54
g2
Ntp14198
Rp14199
(dp14200
g58
(lp14201
g7592
asg14
g0
(g15
g2
Ntp14202
Rp14203
sg204
(lp14204
g14178
asg206
g0
(g207
g2
Ntp14205
Rp14206
(dp14207
g211
(lp14208
sg213
(lp14209
sg215
(lp14210
I0
aI1
asg217
g218
sg219
(tsg220
(lp14211
g222
asg223
I01
sg224
(g225
g225
tp14212
sg227
(dp14213
S'support_code_apply'
p14214
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14215
ssg231
(dp14216
I0
(lp14217
I0
assg234
(lp14218
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14219
asbsbsg177
g0
(g178
g2
Ntp14220
Rp14221
(dp14222
g182
(I01
I01
tp14223
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14224
Rp14225
(dp14226
g11
S'auto_1434'
p14227
sg13
I0
sg14
g0
(g15
g2
Ntp14228
Rp14229
(dp14230
g19
(lp14231
(lp14232
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14233
tp14234
a(g22
I72
g26
S'exec code in run_globals'
p14235
tp14236
a(g29
I249
g30
S'Model(hyperparams).train()'
p14237
tp14238
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14239
tp14240
a(g37
I74
g38
S'learning_rate=LR)'
p14241
tp14242
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p14243
tp14244
aasbsg52
Nsg53
g0
(g54
g2
Ntp14245
Rp14246
(dp14247
g58
(lp14248
g0
(g7
g2
Ntp14249
Rp14250
(dp14251
g11
S'auto_1414'
p14252
sg13
I0
sg14
g0
(g15
g2
Ntp14253
Rp14254
(dp14255
g19
(lp14256
(lp14257
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14258
tp14259
a(g22
I72
g26
S'exec code in run_globals'
p14260
tp14261
a(g29
I249
g30
S'Model(hyperparams).train()'
p14262
tp14263
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14264
tp14265
a(g37
I74
g38
S'learning_rate=LR)'
p14266
tp14267
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p14268
tp14269
aasbsg52
Nsg53
g0
(g54
g2
Ntp14270
Rp14271
(dp14272
g58
(lp14273
g0
(g7
g2
Ntp14274
Rp14275
(dp14276
g11
S'auto_1413'
p14277
sg13
I0
sg14
g0
(g15
g2
Ntp14278
Rp14279
(dp14280
g19
(lp14281
(lp14282
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14283
tp14284
a(g22
I72
g26
S'exec code in run_globals'
p14285
tp14286
a(g29
I249
g30
S'Model(hyperparams).train()'
p14287
tp14288
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14289
tp14290
a(g37
I74
g38
S'learning_rate=LR)'
p14291
tp14292
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p14293
tp14294
aasbsg52
Nsg53
g0
(g54
g2
Ntp14295
Rp14296
(dp14297
g58
(lp14298
g7956
asg14
g0
(g15
g2
Ntp14299
Rp14300
sg204
(lp14301
g14275
asg206
g0
(g207
g2
Ntp14302
Rp14303
(dp14304
g211
(lp14305
sg213
(lp14306
sg215
(lp14307
I0
aI1
asg217
g218
sg219
(tsg220
(lp14308
g222
asg223
I01
sg224
(g225
g225
tp14309
sg227
(dp14310
S'support_code_apply'
p14311
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14312
ssg231
(dp14313
I0
(lp14314
I0
assg234
(lp14315
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14316
asbsbsg177
g0
(g178
g2
Ntp14317
Rp14318
(dp14319
g182
(I01
I01
tp14320
sg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp14321
Rp14322
(dp14323
g11
S'auto_661'
p14324
sg13
Nsg14
g0
(g15
g2
Ntp14325
Rp14326
(dp14327
g19
(lp14328
(lp14329
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14330
tp14331
a(g22
I72
g26
S'exec code in run_globals'
p14332
tp14333
a(g29
I249
g30
S'Model(hyperparams).train()'
p14334
tp14335
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14336
tp14337
a(g37
I74
g38
S'learning_rate=LR)'
p14338
tp14339
a(g7508
I618
g7509
S'broadcastable=param.broadcastable)'
p14340
tp14341
aasbsg472
g0
(g473
g2
Ntp14342
Rp14343
(dp14344
g52
Nsg477
(lp14345
g194
(g195
(I0
tp14346
g197
tp14347
Rp14348
(I1
(I64
I10
tp14349
g189
I00
S'd\xef\xdd\xb8\xc0\x04\xd43\x9dUT5\xd0.\xad\xb8g[\x0e5\\kT\xb7/\xea\xd08\x82\xf4\xe17\x1a~\xa6\xb7I\xfed9\x8a\x04^9,\xdb\xeb\xb82\x1f\xe58?\x12\x8c\xb9\xb5c\xf68\x07s\x029lO\xfa4\xd6\xb8\x04\xb7\x81|\xb06\x80IM6\xf8\xad\xf6\xb8\x9f\xfd\xe03\xcb\xbd\x03\xbaN\xc8\x046\xf0\xcc*7\xb9\xe0)\xb8O\x1589E\\\xe96=i\xaa8d1\xf6\xb9\xcen\xd6\xb6Zr\x924\xd1k\x1f\xb9\xa3\x00\xe4\xb8\n\xc3\x996\x11m\x0e68?\x987A\xcf\r8\xb2\x8c\xdc7\x03K\x0c7_\xb8\xdf4\x0c\x07\r\xb6\xf5\x1f\x1f\xb8M_\xa0\xb9\x84,\x1e\xb8\xf7\x8f&8\xc8\x80\xd4,\xfc\x00\xe298\x10\xbc7\xe9\x1d\xbf\xb9\xaa{\x1d0\xe5\\\x19\xb4\xdc\xbc\x877\xe4\x98\x15\xb9\xc8\xbe\xe53;\xe79\xb7\x19o\x8c4\xa6\x07\xaf\xb8w\x92[\xb7)Y\xa5\xb7\x83\xed\xf04\xe7\xc3>5w\xa4<\xb7*KG\xb7.8\xc87\xdfv\x831Fz49\x9dI\x168\xb7\x98\xa5\xb7\xb8\x1d\xb42\xa2k\x178\x9c\x16\xbe3\xd5\xe4n9\xb6v\xbd1,\x9308\xd0\xe2\x1b\xb7=\x7f\x8b\xb9o%I8\x97\xa1\x95\xb7\x05\x0eJ\xb9\xb5w\xc2\xb8\xe6\x05s3;vK5\xb8\xac,\xb9\xb4\x13|6\xf1\x81+\xba\r\xeb\xbb\xb4&KT7h(F\xb8\xc1b\x9e5\x9eE#4\x9b\x1b\x055\x8eO\x176T\xfe\xed5\xdc\xac^\xb98t^4\x1d\n\xf13)Y79\xd6*u\xb8\xc7F\xb3\xb9\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x80\x04\x00\x00\x00\x04\x00\x00\x80\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x0ce\x0f\xba\xbf\x84\x185g:\xb5\xb8\xb3x\xa17<\x06\xbe8\x87.\x1f\xb7\x81\xa1\x9496\xfb\x0f\xb8\xf6GJ8\xda\xd0/\xb8B4c5\xf4T 9`H\xa98\x1a\xec\xd27:_\x958\x808-6\rvi4+\x03P9>\x91\xc072\x82\x1e8W\x81_20\x86r\xb8\xb8\x0b\x89:0\x97\x175~wF51\xc2\xd5\xb7\x86\xcf\xce5.\x87\xc2\xb7{\xcc\xe89\x84\x9e%6K\xc6\x9b8\x85aM\xb8\x9b\xcd\xd3\xb7\r\x84\x076z30\xb6l\xfe\xfa9\xe6Q~\xb9k\xb6%2\xa8\xed\x97\xb8\xe4\x8c_6\xf6\x9c\x1d7U\x07W\xb3Bu\x993_\x0e24\x86\x10\xc87b\xb8\x81\xb9\xf8\x1ex2\xee\xea\xf95\xe7S\x99\xb5\x18zK5\xc0Q\x114\xe25N9\xber\t5oK\xe87\xe3\x06D\xb8\xc7\xbc@\xb8\x1d\x05\xc54\x18]\t\xb9\x05$\xa28\xcb/\xc1\xb9W\x1ea4\xf6.K9\x99\xe1\xf8\xb7\x87\xa7\x939\x9d*F7c.\xc53\x8a\xe6k5\xdb~\xca\xb8\x88\xc3\r8\x8dT\xc18\x07\xeb+5`\x03\xfa\xb8W\x06\r8*[\x059\xfb\xb4\x845\xaf\xd6\x825\x15\x85\xb74\xd7+u\xb9\xfe\n\xd05\xfe\x8c\xed\xb8j\xe6*\xb8Q\xda\n2E83\xb8]\xbb\x113\xc1m%8^\x84\xc2\xb8\x95\x90\xb5\xb8S\xf7\xf41\x98\x86e8F\x8aO3N\x02\x835\x1b048\xb9\xd8\x965}\xba\x8382m\x0c\xba\xb1\x18\xba5\xf7\xbfS7\xd1\xa2,\xb8"\x18\'8\xdaX\x8d\xba\x8d\x97\x0b\xb90}@3\xa5\x02\xb0\xb6XZ\xe6\xb7jS\xdd\xb7\xf12~6x\x0cg\xb8\xe3\x81Q6\xb5=$\xb9\x189-7\x04\x00\x00\x80\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x80\x04\x00\x00\x00\x04\x00\x00\x80\x04\x00\x00\x80\x04\x00\x00\x00{\x1c\xb0\xb5o\xb4\xda\xb1#\x99\xdb7s\xd8\x808\x15\xeb\x835f\x99\x8c\xb7\r\x10H\xb9\xb53\xe9.I\xeb\xd9\xb4:\x9b\x0e\xae\x9a\x0854 \n89\xe2\x03h8$`\x8d\xb9\x05\x0e\xd46\x10_m9G\x9d\xc78\xab\xc3V9N\xbf\xb16\x1brG\xb9\xd9~\xf08\xb8u%3\'\xdf\x9e9"`\xac4\xd3\x18\x999[\x89\xb567\xb8-\xb9\xe6\xd6\xfa2(`\xd86\xfb_\xa25\xc6\xc5\x0f2\xc3\xa3\x15\xb8z\x81(,\xe3\xf0z\xb8w\xe764\xc5_P\xb9U-\xd47_\x96\x13-\xacz\xa88\x15I\x817\x01\x13\xfe8h|\x12\xb8\xab\xae#\xb8\r\x84\xa45G\xaf;\xb9\x98EX8\xad\x1a:\xb8l\x19\xb5\xb7\xe2\x9bw7\xdf\x81=\xb9\x9f\xc8!\xb5;\xa9\x102%e\xaf6\x82\x8c\xc08\x97\xb9,\xb9\xad\xf1)\xb7/\xa4\x152\xff\xfb\x829\xf1\xfdH8i\x05\xc7\xb9oD\r\xb8p\x98E8\x82\xcfy\xb9\x02C\x007:\x9d\xa59\x8e\xcb\xbb9A\x0f\xd4\xb8\x19ZV\xb8\xe0*\x99\xb7 \x08\x8f6y\x0e\x863Ui\x045l\x05\xa78\xc0\xd3#7tg)\xb8*\xb6k\xb7\xbd\x84\xa8\xb9\x05\x92\xdd7\x02\x88\x14\xb8:/]\xb8\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x00\x04\x00\x00\x80\x04\x00\x00\x80\x04\x00\x00\x80\x04\x00\x00\x00\x04\x00\x00\x80\x04\x00\x00\x80\x04\x00\x00\x00\xa6\x87\xa36\x05\x92\x813\x1e\x82\xc9\xb1[\xd0\x108\x81I)8b\x13\x1a8S\xfai3*\xee\x1c9m\xa7i\xb7-\xd8\xb7\xb9\xceb\x113\xe5s%\xb5.\x04?\xb8\x11R\x1f7\xec\x02\xdd3\xb7\x1c\x87\xb8k\xe8\x12.\xa8\xdd\x8f\xb9\x8b\x88\xfb\xb8\xe6\xd6\xcd4S\xa6\x1d7\xfd\xb4\r\xb6\xcaQ\xe9\xb8\x8c\x9ag9\x1b\xc5&7&\x98\xea7\x94TK4\xa9\xd1-\xb9q.\xd27\xe3D\xad9\x1b\x99"7\xafY\xed1aN\x8a2\r\x1eP6\x97\x92\\\xb5\x9df\x04\xb9Q\x9bb\xb7\r\xf5\x9b6{@\x0b7\x8d\xad\xae\xb8\xbaN\xf2\xb5Y\x8e\xc28~a\x828>\xa3\x95\xb9\xf6\xd6\x0f3Yw\x978\x03\xea\xcd4\'\xbf\xd32\x80V\xb76b\x06\x0c8\xe6\x0c(6U\xf3\x1a4\xfb)\t9\x0f\xf7\xb68\xf9m\xb4\xb6\xcf\x1c\xec3R\xc7\x17/4Xr\xb9\xaft\x0b6:\x8cY\xb8\xc2C\xdb\xb5\x8a4\x943\x9b\t\xcf\xb7\xde^+\xb8|+\x85\xb9m\xac\xa3\xb8\x9a1\xa53\xa7]\xfd9A\xb3\x108\xce\xd94\xb8l\xcc\x879\x0c\xd6\x024$\x9d\xac6\xb1[\x879F5(\xb7\xd8\xf2\xb3\xb7\x12\r\x8f\xb3\x1b\x92>9\x11p"8\xe07_\xb9/\xfdN5\xfb\x91\xa99\x0fIS9\xc3\xe0\r:\x06\xf6;6`w\xaa5\x02\xd2`4\xd7\x08`:y\x00\x1b7\x06\xeb\xa18N\xec\x07\xb6D\x8e\xf8\xb3\xd0\x82\xef94\x95\xfc\xb9\x0f\x07}\xb7\xaen\xff\xb6o~\xe2\xb5!\xfd\xf2\xb9-\xfb\xec8R\xc0\xf95\x8c\x9948\x99\xd0\x8d\xb4\x1bv\xe74\xa0d,\xb9\xca\x8769\x8f\xad\x93\xb8\x909\xcd\xb7\xd3\xc3!5\x85\x99\x947\xac\xb4\xd8\xb7Q\x8426h\x06\x03\xb6I\x7f\x827SI\xd68\t\x1ed5@\xcd\xcd\xb9\x98\xc6<9\xb5\xa5\xad\xb8b\xbc\x957\x89(j7\x9f\x11w\xb6?\xc3&35\x88\xdc\xb8\xf0D\x81\xb6\xce\x06\x0b:k\xf32\xb6@b\x95\xba\x81\xe0\xd98d\xcb\x886\xd1\xc5t\xb8s#\x055i\xb7\x975\xd0\xa6\x858\x14\xd0\xb5\xb9U\xcfE5\xec\xe0^8\x88\xc5\xe4\xb5j}H7a\xa8\x92\xb7\x18lM7\xfe\xfa\xbc\xb4p\xed\xb9\xb7\x9az\x80\xba\xb8\x8cq9\x83\x8f\xd58S\xc0\xb0\xb9\xcc){\xb5X{\'\xb8yD\xe09_\xb6\x88\xb7 n\xa04\xe9n\x19\xba%\x13\xcc8!R\xb2\xb7\xa8xu8\x90\x9c\xdf\xb7\\\x06\xba9\xef\xe7\xbd4\t\xbc\xf9\xb8\xb1\x9f\xdd\xb8\xccR|7\xbfb\xcf49\xb1J\xb9\xb2\xd6\xe44\xc6&;4(V\x11\xb6W*\xba9@\x8b\xc2\xb8\x15\xde\r7\xe5\xed<8\xfao\xf16\xb2h\xc7\xb8\xfe\xc4\xbf\xb97\x97\xd04B\xdb\r6\xd9\x93\xcb6\xda\x98D7\xbe^\x8a6\x19#v8\x18i\xb66\x0c\x01)5\xeeL\x109\x10.\xa54\xd3qK\xb8V3%\xb9\xfd\xdc;\xb6\xb1\x9e\x95\xb7\xb4\x90\xd69\xd7\x1a48\xc3\x84L\xb9\x10\x85\x1596\xbfy4\xed\x9c\xf7\xb9\x15\xe9\xb57\xe0\xc8\xdc7\xfb\xac\x06550\x13\xb4\xb5\xceq5\x86\xed}\xb4\xba\xc5\xa26\xda|\xab\xb6:\x10\x890\xea\x99\x10\xb7\x05\xcd\xe63\x9e\xb3\xad8\xe3\xb6\xe38\xe5m\x01\xb9\xf0i\x931;\xa8/7\xc3\tV7\xabo\xba-\xbb1\xa84lt\xe78\x89\x7f\x7f9\x8a\xb8\xcf\xb9\xf0\xfd\xde\xb4\x0fcz/\x98\xc1\xfa8\xaa\x8b\xa96\xcbt\x1b\xb8Q\xfd\xdd3\x07\xbf\xe081\xe4C8E\x02\x1b\xb7\x9b&\x849\xf8\xac\xee\xb5\xbb\x9c\x05\xba\xb5\xf2\xbb\xb8\xb3\x9c\xe17f\x02\xc88H\xc7I\xb8Ac\x997\xbcx\xa76\xcf\x17\x1a9\xe2B\xd58\xab\xc0\x8e\xb9\xe7Tw89-\x0f2\xc9!\xdf7`\x8aW9\xcc\xbd\xb42^\xfe\x8e6\xf9]\x958\xab\x16\xbd7\xfe\xae\xb28\xf3ZS6\x86v\x187vb\x8f6a\xd0v\xb7ID\x14\xb7\x8a\x0f37\\\xc7\x16/\xa4o\xa8\xb9<\xe3:9\x1b\x11\xc4\xb7n_\xb82\xdc@\xa9\xb6\x8eh 0\xd6\xc4\xa47Z\x02#1\xc2e\xc7\xb2?\xbdl2\xd5\x1a\xab3\xe0\xe5\x0f8\xe2\xd4\x9f7\x8d\x7f\t\xb9\xb0\xfa\x07-d\xeez\xb9g\xd0\x158\x08\xcf1\xb6\xd1j%7\xff\xd4~\xb8\xb9\x18`\xb9\xd5fj\xb7\x90\x1dM4\x7f;\xe52f4\xa08\xec\x9d\xd87\td\xff\xb7hU\x034\'\x06\xb1\xbalO\xc46\x8e\xd0\xa35\x9a_^5\xaf\xd0^\xb5\xb4\x19\x168\x88\x90\x96:\xadw\x943\x9d\xb1 8\x84\x8c/68\xedh\xb6\xd5\xf3\xc99\x8b\xc3a\xba\xaf\xcf\xb47\x95\xbc\xa14\xc2D\x85\xb7\xee\xdf\x05\xb78\x8a\xc87\xf2\xf2\x0b:\xf0\xe3\x1f5\xb5@\x0b\xb7\xfe\x1f\x0b3;18\xb5}\xa3\xa07\xd01\xb74\xb6~T\xb7B\xd3\x028\xd0\x9d*3\xa3\xaa\x9a\xb9@\x00\x8e4\xea\xaf\x81+!"u5\xed\x11\x116\xa9\x1fg98f\x0f5\x01|E6\xdd\x89n2/\xe5R\xb8a\t\x089\x1e\xea\xe8\xb6'
p14350
tp14351
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp14352
Rp14353
(dp14354
g182
(I00
I00
tp14355
sg183
S'float32'
p14356
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g14353
sbasg14
g0
(g15
g2
Ntp14357
Rp14358
sg204
(lp14359
g14250
asg206
g1220
sbsg177
g0
(g178
g2
Ntp14360
Rp14361
(dp14362
g182
(I00
I00
tp14363
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14364
Rp14365
(dp14366
g11
S'auto_1433'
p14367
sg13
I0
sg14
g0
(g15
g2
Ntp14368
Rp14369
(dp14370
g19
(lp14371
(lp14372
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14373
tp14374
a(g22
I72
g26
S'exec code in run_globals'
p14375
tp14376
a(g29
I249
g30
S'Model(hyperparams).train()'
p14377
tp14378
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14379
tp14380
a(g37
I74
g38
S'learning_rate=LR)'
p14381
tp14382
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p14383
tp14384
aasbsg52
Nsg53
g0
(g54
g2
Ntp14385
Rp14386
(dp14387
g58
(lp14388
g0
(g7
g2
Ntp14389
Rp14390
(dp14391
g11
S'auto_1416'
p14392
sg13
I0
sg14
g0
(g15
g2
Ntp14393
Rp14394
(dp14395
g19
(lp14396
(lp14397
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14398
tp14399
a(g22
I72
g26
S'exec code in run_globals'
p14400
tp14401
a(g29
I249
g30
S'Model(hyperparams).train()'
p14402
tp14403
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14404
tp14405
a(g37
I74
g38
S'learning_rate=LR)'
p14406
tp14407
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p14408
tp14409
aasbsg52
Nsg53
g0
(g54
g2
Ntp14410
Rp14411
(dp14412
g58
(lp14413
g0
(g7
g2
Ntp14414
Rp14415
(dp14416
g11
S'auto_1415'
p14417
sg13
I0
sg14
g0
(g15
g2
Ntp14418
Rp14419
(dp14420
g19
(lp14421
(lp14422
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14423
tp14424
a(g22
I72
g26
S'exec code in run_globals'
p14425
tp14426
a(g29
I249
g30
S'Model(hyperparams).train()'
p14427
tp14428
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14429
tp14430
a(g37
I74
g38
S'learning_rate=LR)'
p14431
tp14432
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p14433
tp14434
aasbsg52
Nsg53
g0
(g54
g2
Ntp14435
Rp14436
(dp14437
g58
(lp14438
g7692
ag7956
asg14
g0
(g15
g2
Ntp14439
Rp14440
sg204
(lp14441
g14415
asg206
g5417
sbsg177
g0
(g178
g2
Ntp14442
Rp14443
(dp14444
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp14445
Rp14446
sg204
(lp14447
g14390
asg206
g0
(g207
g2
Ntp14448
Rp14449
(dp14450
g211
(lp14451
sg213
(lp14452
sg215
(lp14453
I0
aI1
asg217
g218
sg219
(tsg220
(lp14454
g222
asg223
I01
sg224
(g225
g225
tp14455
sg227
(dp14456
S'support_code_apply'
p14457
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14458
ssg231
(dp14459
I0
(lp14460
I0
assg234
(lp14461
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14462
asbsbsg177
g0
(g178
g2
Ntp14463
Rp14464
(dp14465
g182
(I01
I01
tp14466
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14467
Rp14468
(dp14469
g11
S'auto_1432'
p14470
sg13
I0
sg14
g0
(g15
g2
Ntp14471
Rp14472
(dp14473
g19
(lp14474
(lp14475
(g29
I249
g30
S'Model(hyperparams).train()'
p14476
tp14477
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14478
tp14479
a(g37
I72
g38
S'W_grads = binary_connect.compute_grads(loss, mlp)'
p14480
tp14481
a(g8283
I202
g8284
S'grads.append(theano.grad(loss, wrt=layer.Wb))'
p14482
tp14483
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p14484
tp14485
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p14486
tp14487
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14488
tp14489
a(g8287
I1162
g8297
S'new_output_grads)'
p14490
tp14491
aasbsg52
Nsg53
g0
(g54
g2
Ntp14492
Rp14493
(dp14494
g58
(lp14495
g0
(g7
g2
Ntp14496
Rp14497
(dp14498
g11
S'auto_1417'
p14499
sg13
I0
sg14
g0
(g15
g2
Ntp14500
Rp14501
(dp14502
g19
(lp14503
(lp14504
(g29
I249
g30
S'Model(hyperparams).train()'
p14505
tp14506
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14507
tp14508
a(g37
I72
g38
S'W_grads = binary_connect.compute_grads(loss, mlp)'
p14509
tp14510
a(g8283
I202
g8284
S'grads.append(theano.grad(loss, wrt=layer.Wb))'
p14511
tp14512
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p14513
tp14514
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p14515
tp14516
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14517
tp14518
a(g8287
I1162
g8297
S'new_output_grads)'
p14519
tp14520
aasbsg52
Nsg53
g0
(g54
g2
Ntp14521
Rp14522
(dp14523
g58
(lp14524
g8858
asg14
g0
(g15
g2
Ntp14525
Rp14526
sg204
(lp14527
g14497
asg206
g0
(g207
g2
Ntp14528
Rp14529
(dp14530
g211
(lp14531
sg213
(lp14532
I1
aI0
asg215
(lp14533
sg217
g218
sg219
g9574
sg220
(lp14534
g222
asg223
I01
sg224
(I1
I0
tp14535
sg227
(dp14536
S'support_code_apply'
p14537
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14538
ssg231
(dp14539
I0
(lp14540
I0
assg234
(lp14541
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14542
asbsbsg177
g0
(g178
g2
Ntp14543
Rp14544
(dp14545
g182
(I00
I00
tp14546
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14547
Rp14548
(dp14549
g11
S'auto_1431'
p14550
sg13
I0
sg14
g0
(g15
g2
Ntp14551
Rp14552
(dp14553
g19
(lp14554
(lp14555
(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p14556
tp14557
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p14558
tp14559
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14560
tp14561
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14562
tp14563
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14564
tp14565
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14566
tp14567
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14568
tp14569
a(g8287
I1162
g8297
S'new_output_grads)'
p14570
tp14571
aasbsg52
Nsg53
g0
(g54
g2
Ntp14572
Rp14573
(dp14574
g58
(lp14575
g0
(g7
g2
Ntp14576
Rp14577
(dp14578
g11
S'auto_1430'
p14579
sg13
I0
sg14
g0
(g15
g2
Ntp14580
Rp14581
(dp14582
g19
(lp14583
(lp14584
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14585
tp14586
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14587
tp14588
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14589
tp14590
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14591
tp14592
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14593
tp14594
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14595
tp14596
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14597
tp14598
a(g8287
I1162
g8297
S'new_output_grads)'
p14599
tp14600
aasbsg52
Nsg53
g0
(g54
g2
Ntp14601
Rp14602
(dp14603
g58
(lp14604
g0
(g7
g2
Ntp14605
Rp14606
(dp14607
g11
S'auto_1429'
p14608
sg13
I0
sg14
g0
(g15
g2
Ntp14609
Rp14610
(dp14611
g19
(lp14612
(lp14613
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14614
tp14615
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14616
tp14617
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14618
tp14619
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14620
tp14621
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14622
tp14623
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14624
tp14625
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14626
tp14627
a(g8287
I1162
g8297
S'new_output_grads)'
p14628
tp14629
aasbsg52
Nsg53
g0
(g54
g2
Ntp14630
Rp14631
(dp14632
g58
(lp14633
g0
(g7
g2
Ntp14634
Rp14635
(dp14636
g11
S'auto_1420'
p14637
sg13
I0
sg14
g0
(g15
g2
Ntp14638
Rp14639
(dp14640
g19
(lp14641
(lp14642
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14643
tp14644
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14645
tp14646
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14647
tp14648
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14649
tp14650
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14651
tp14652
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14653
tp14654
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14655
tp14656
a(g8287
I1162
g8297
S'new_output_grads)'
p14657
tp14658
aasbsg52
Nsg53
g0
(g54
g2
Ntp14659
Rp14660
(dp14661
g58
(lp14662
g0
(g7
g2
Ntp14663
Rp14664
(dp14665
g11
S'auto_1418'
p14666
sg13
I0
sg14
g0
(g15
g2
Ntp14667
Rp14668
(dp14669
g19
(lp14670
(lp14671
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14672
tp14673
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14674
tp14675
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14676
tp14677
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14678
tp14679
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14680
tp14681
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14682
tp14683
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14684
tp14685
a(g8287
I1162
g8297
S'new_output_grads)'
p14686
tp14687
aasbsg52
Nsg53
g0
(g54
g2
Ntp14688
Rp14689
(dp14690
g58
(lp14691
g962
asg14
g0
(g15
g2
Ntp14692
Rp14693
sg204
(lp14694
g14664
asg206
g0
(g207
g2
Ntp14695
Rp14696
(dp14697
g211
(lp14698
sg213
(lp14699
sg215
(lp14700
I0
aI1
asg217
g218
sg219
(tsg220
(lp14701
g222
asg223
I01
sg224
(g225
g225
tp14702
sg227
(dp14703
S'support_code_apply'
p14704
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14705
ssg231
(dp14706
I0
(lp14707
I0
assg234
(lp14708
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p14709
asbsbsg177
g0
(g178
g2
Ntp14710
Rp14711
(dp14712
g182
(I01
I01
tp14713
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14714
Rp14715
(dp14716
g11
S'auto_1419'
p14717
sg13
I0
sg14
g0
(g15
g2
Ntp14718
Rp14719
(dp14720
g19
(lp14721
(lp14722
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14723
tp14724
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14725
tp14726
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14727
tp14728
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14729
tp14730
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14731
tp14732
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14733
tp14734
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14735
tp14736
a(g8287
I1162
g8297
S'new_output_grads)'
p14737
tp14738
aasbsg52
Nsg53
g0
(g54
g2
Ntp14739
Rp14740
(dp14741
g58
(lp14742
g8641
ag8664
asg14
g0
(g15
g2
Ntp14743
Rp14744
sg204
(lp14745
g14715
asg206
g0
(g497
g2
Ntp14746
Rp14747
(dp14748
g52
Nsg503
g10105
sg511
(dp14749
sg513
g10109
sg516
g0
(g517
g2
Ntp14750
Rp14751
(dp14752
g521
Nsg522
(dp14753
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp14754
Rp14755
(dp14756
g182
(I00
I00
tp14757
sg183
g627
sg185
g643
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp14758
Rp14759
sg204
(lp14760
g14635
asg206
g0
(g497
g2
Ntp14761
Rp14762
(dp14763
g52
Nsg503
g3526
sg511
(dp14764
sg513
g5422
sg516
g0
(g517
g2
Ntp14765
Rp14766
(dp14767
g521
I0
sg522
(dp14768
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp14769
Rp14770
(dp14771
g182
(I00
I00
tp14772
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp14773
Rp14774
(dp14775
g11
S'auto_1428'
p14776
sg13
I0
sg14
g0
(g15
g2
Ntp14777
Rp14778
(dp14779
g19
(lp14780
(lp14781
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14782
tp14783
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14784
tp14785
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14786
tp14787
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14788
tp14789
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14790
tp14791
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14792
tp14793
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14794
tp14795
a(g8287
I1162
g8297
S'new_output_grads)'
p14796
tp14797
aasbsg52
Nsg53
g0
(g54
g2
Ntp14798
Rp14799
(dp14800
g58
(lp14801
g0
(g7
g2
Ntp14802
Rp14803
(dp14804
g11
S'auto_1426'
p14805
sg13
I0
sg14
g0
(g15
g2
Ntp14806
Rp14807
(dp14808
g19
(lp14809
(lp14810
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14811
tp14812
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14813
tp14814
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14815
tp14816
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14817
tp14818
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14819
tp14820
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14821
tp14822
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14823
tp14824
a(g8287
I1162
g8297
S'new_output_grads)'
p14825
tp14826
aasbsg52
Nsg53
g0
(g54
g2
Ntp14827
Rp14828
(dp14829
g58
(lp14830
g0
(g7
g2
Ntp14831
Rp14832
(dp14833
g11
S'auto_1425'
p14834
sg13
I0
sg14
g0
(g15
g2
Ntp14835
Rp14836
(dp14837
g19
(lp14838
(lp14839
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14840
tp14841
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14842
tp14843
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14844
tp14845
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14846
tp14847
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14848
tp14849
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14850
tp14851
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14852
tp14853
a(g8287
I1162
g8297
S'new_output_grads)'
p14854
tp14855
aasbsg52
Nsg53
g0
(g54
g2
Ntp14856
Rp14857
(dp14858
g58
(lp14859
g10221
ag0
(g7
g2
Ntp14860
Rp14861
(dp14862
g11
S'auto_1424'
p14863
sg13
I0
sg14
g0
(g15
g2
Ntp14864
Rp14865
(dp14866
g19
(lp14867
(lp14868
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14869
tp14870
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14871
tp14872
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14873
tp14874
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14875
tp14876
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14877
tp14878
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14879
tp14880
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14881
tp14882
a(g8287
I1162
g8297
S'new_output_grads)'
p14883
tp14884
aasbsg52
Nsg53
g0
(g54
g2
Ntp14885
Rp14886
(dp14887
g58
(lp14888
g0
(g7
g2
Ntp14889
Rp14890
(dp14891
g11
S'auto_1423'
p14892
sg13
I0
sg14
g0
(g15
g2
Ntp14893
Rp14894
(dp14895
g19
(lp14896
(lp14897
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14898
tp14899
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14900
tp14901
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14902
tp14903
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14904
tp14905
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14906
tp14907
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14908
tp14909
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14910
tp14911
a(g8287
I1162
g8297
S'new_output_grads)'
p14912
tp14913
aasbsg52
Nsg53
g0
(g54
g2
Ntp14914
Rp14915
(dp14916
g58
(lp14917
g0
(g7
g2
Ntp14918
Rp14919
(dp14920
g11
S'auto_1422'
p14921
sg13
I0
sg14
g0
(g15
g2
Ntp14922
Rp14923
(dp14924
g19
(lp14925
(lp14926
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14927
tp14928
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14929
tp14930
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14931
tp14932
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14933
tp14934
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14935
tp14936
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p14937
tp14938
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p14939
tp14940
a(g8287
I1162
g8297
S'new_output_grads)'
p14941
tp14942
aasbsg52
Nsg53
g0
(g54
g2
Ntp14943
Rp14944
(dp14945
g58
(lp14946
g0
(g7
g2
Ntp14947
Rp14948
(dp14949
g11
S'auto_1421'
p14950
sg13
I0
sg14
g0
(g15
g2
Ntp14951
Rp14952
(dp14953
g19
(lp14954
(lp14955
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p14956
tp14957
a(g22
I72
g26
S'exec code in run_globals'
p14958
tp14959
a(g29
I249
g30
S'Model(hyperparams).train()'
p14960
tp14961
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p14962
tp14963
a(g37
I72
g38
S'W_grads = binary_connect.compute_grads(loss, mlp)'
p14964
tp14965
a(g8283
I202
g8284
S'grads.append(theano.grad(loss, wrt=layer.Wb))'
p14966
tp14967
a(g8287
I527
g8288
S'g_cost = _float_ones_like(cost)'
p14968
tp14969
a(g8287
I1396
g10360
S'return x.ones_like(dtype=dtype)'
p14970
tp14971
aasbsg52
Nsg53
g0
(g54
g2
Ntp14972
Rp14973
(dp14974
g58
(lp14975
g10368
ag962
asg14
g0
(g15
g2
Ntp14976
Rp14977
sg204
(lp14978
g14948
asg206
g10627
sbsg177
g0
(g178
g2
Ntp14979
Rp14980
(dp14981
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag10563
asg14
g0
(g15
g2
Ntp14982
Rp14983
sg204
(lp14984
g14919
asg206
g0
(g497
g2
Ntp14985
Rp14986
(dp14987
g52
Nsg503
g3179
sg511
(dp14988
sg513
g5331
sg516
g0
(g517
g2
Ntp14989
Rp14990
(dp14991
g521
Nsg522
(dp14992
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp14993
Rp14994
(dp14995
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag10446
asg14
g0
(g15
g2
Ntp14996
Rp14997
sg204
(lp14998
g14890
asg206
g0
(g497
g2
Ntp14999
Rp15000
(dp15001
g52
Nsg503
g3179
sg511
(dp15002
sg513
g5331
sg516
g0
(g517
g2
Ntp15003
Rp15004
(dp15005
g521
Nsg522
(dp15006
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15007
Rp15008
(dp15009
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15010
Rp15011
sg204
(lp15012
g14861
asg206
g0
(g207
g2
Ntp15013
Rp15014
(dp15015
g211
(lp15016
sg213
(lp15017
sg215
(lp15018
I0
aI1
asg217
g218
sg219
(tsg220
(lp15019
g222
asg223
I01
sg224
(g225
g225
tp15020
sg227
(dp15021
S'support_code_apply'
p15022
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15023
ssg231
(dp15024
I0
(lp15025
I0
assg234
(lp15026
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15027
asbsbsg177
g0
(g178
g2
Ntp15028
Rp15029
(dp15030
g182
(I01
I01
tp15031
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15032
Rp15033
sg204
(lp15034
g14832
asg206
g0
(g497
g2
Ntp15035
Rp15036
(dp15037
g52
Nsg503
g10631
sg511
(dp15038
sg513
Nsg516
g0
(g517
g2
Ntp15039
Rp15040
(dp15041
g521
Nsg522
(dp15042
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15043
Rp15044
(dp15045
g182
(I00
I00
tp15046
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag8641
asg14
g0
(g15
g2
Ntp15047
Rp15048
sg204
(lp15049
g14803
asg206
g0
(g497
g2
Ntp15050
Rp15051
(dp15052
g52
Nsg503
g1224
sg511
(dp15053
sg513
g1230
sg516
g0
(g517
g2
Ntp15054
Rp15055
(dp15056
g521
Nsg522
(dp15057
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15058
Rp15059
(dp15060
g182
(I00
I00
tp15061
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15062
Rp15063
(dp15064
g11
S'auto_1427'
p15065
sg13
I0
sg14
g0
(g15
g2
Ntp15066
Rp15067
(dp15068
g19
(lp15069
(lp15070
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p15071
tp15072
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p15073
tp15074
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p15075
tp15076
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p15077
tp15078
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p15079
tp15080
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p15081
tp15082
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p15083
tp15084
a(g8287
I1162
g8297
S'new_output_grads)'
p15085
tp15086
aasbsg52
Nsg53
g0
(g54
g2
Ntp15087
Rp15088
(dp15089
g58
(lp15090
g10758
asg14
g0
(g15
g2
Ntp15091
Rp15092
sg204
(lp15093
g15063
asg206
g0
(g207
g2
Ntp15094
Rp15095
(dp15096
g211
(lp15097
sg213
(lp15098
sg215
(lp15099
I0
aI1
asg217
g218
sg219
(tsg220
(lp15100
g222
asg223
I01
sg224
(g225
g225
tp15101
sg227
(dp15102
S'support_code_apply'
p15103
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15104
ssg231
(dp15105
I0
(lp15106
I0
assg234
(lp15107
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15108
asbsbsg177
g0
(g178
g2
Ntp15109
Rp15110
(dp15111
g182
(I01
I01
tp15112
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15113
Rp15114
sg204
(lp15115
g14774
asg206
g0
(g497
g2
Ntp15116
Rp15117
(dp15118
g52
Nsg503
g1224
sg511
(dp15119
sg513
g1230
sg516
g0
(g517
g2
Ntp15120
Rp15121
(dp15122
g521
I0
sg522
(dp15123
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15124
Rp15125
(dp15126
g182
(I00
I00
tp15127
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15128
Rp15129
sg204
(lp15130
g14606
asg206
g0
(g497
g2
Ntp15131
Rp15132
(dp15133
g52
Nsg503
g1224
sg511
(dp15134
sg513
g1230
sg516
g0
(g517
g2
Ntp15135
Rp15136
(dp15137
g521
I0
sg522
(dp15138
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15139
Rp15140
(dp15141
g182
(I00
I00
tp15142
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15143
Rp15144
sg204
(lp15145
g14577
asg206
g0
(g497
g2
Ntp15146
Rp15147
(dp15148
g52
Nsg503
g10851
sg511
(dp15149
sg513
g10857
sg516
g0
(g517
g2
Ntp15150
Rp15151
(dp15152
g521
I0
sg522
(dp15153
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15154
Rp15155
(dp15156
g182
(I00
I00
tp15157
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag1845
asg14
g0
(g15
g2
Ntp15158
Rp15159
sg204
(lp15160
g14548
asg206
g0
(g497
g2
Ntp15161
Rp15162
(dp15163
g52
Nsg503
g1224
sg511
(dp15164
sg513
g1230
sg516
g0
(g517
g2
Ntp15165
Rp15166
(dp15167
g521
I0
sg522
(dp15168
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp15169
Rp15170
(dp15171
g182
(I00
I00
tp15172
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15173
Rp15174
sg204
(lp15175
g14468
asg206
g1052
sbsg177
g0
(g178
g2
Ntp15176
Rp15177
(dp15178
g182
(I00
I00
tp15179
sg183
S'float32'
p15180
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15181
Rp15182
sg204
(lp15183
g14365
asg206
g1220
sbsg177
g0
(g178
g2
Ntp15184
Rp15185
(dp15186
g182
(I00
I00
tp15187
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15188
Rp15189
sg204
(lp15190
g14225
asg206
g1153
sbsg177
g0
(g178
g2
Ntp15191
Rp15192
(dp15193
g182
(I00
I00
tp15194
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15195
Rp15196
sg204
(lp15197
g14153
asg206
g1220
sbsg177
g0
(g178
g2
Ntp15198
Rp15199
(dp15200
g182
(I00
I00
tp15201
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15202
Rp15203
(dp15204
g11
S'auto_1448'
p15205
sg13
I0
sg14
g0
(g15
g2
Ntp15206
Rp15207
(dp15208
g19
(lp15209
(lp15210
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15211
tp15212
a(g22
I72
g26
S'exec code in run_globals'
p15213
tp15214
a(g29
I249
g30
S'Model(hyperparams).train()'
p15215
tp15216
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15217
tp15218
a(g37
I74
g38
S'learning_rate=LR)'
p15219
tp15220
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p15221
tp15222
aasbsg52
Nsg53
g0
(g54
g2
Ntp15223
Rp15224
(dp15225
g58
(lp15226
g0
(g7
g2
Ntp15227
Rp15228
(dp15229
g11
S'auto_1446'
p15230
sg13
I0
sg14
g0
(g15
g2
Ntp15231
Rp15232
(dp15233
g19
(lp15234
(lp15235
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15236
tp15237
a(g22
I72
g26
S'exec code in run_globals'
p15238
tp15239
a(g29
I249
g30
S'Model(hyperparams).train()'
p15240
tp15241
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15242
tp15243
a(g37
I74
g38
S'learning_rate=LR)'
p15244
tp15245
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p15246
tp15247
aasbsg52
Nsg53
g0
(g54
g2
Ntp15248
Rp15249
(dp15250
g58
(lp15251
g0
(g7
g2
Ntp15252
Rp15253
(dp15254
g11
S'auto_1442'
p15255
sg13
I0
sg14
g0
(g15
g2
Ntp15256
Rp15257
(dp15258
g19
(lp15259
(lp15260
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15261
tp15262
a(g22
I72
g26
S'exec code in run_globals'
p15263
tp15264
a(g29
I249
g30
S'Model(hyperparams).train()'
p15265
tp15266
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15267
tp15268
a(g37
I74
g38
S'learning_rate=LR)'
p15269
tp15270
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15271
tp15272
aasbsg52
Nsg53
g0
(g54
g2
Ntp15273
Rp15274
(dp15275
g58
(lp15276
g0
(g7
g2
Ntp15277
Rp15278
(dp15279
g11
S'auto_1436'
p15280
sg13
I0
sg14
g0
(g15
g2
Ntp15281
Rp15282
(dp15283
g19
(lp15284
(lp15285
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15286
tp15287
a(g22
I72
g26
S'exec code in run_globals'
p15288
tp15289
a(g29
I249
g30
S'Model(hyperparams).train()'
p15290
tp15291
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15292
tp15293
a(g37
I74
g38
S'learning_rate=LR)'
p15294
tp15295
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15296
tp15297
aasbsg52
Nsg53
g0
(g54
g2
Ntp15298
Rp15299
(dp15300
g58
(lp15301
g0
(g7
g2
Ntp15302
Rp15303
(dp15304
g11
S'auto_1435'
p15305
sg13
I0
sg14
g0
(g15
g2
Ntp15306
Rp15307
(dp15308
g19
(lp15309
(lp15310
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15311
tp15312
a(g22
I72
g26
S'exec code in run_globals'
p15313
tp15314
a(g29
I249
g30
S'Model(hyperparams).train()'
p15315
tp15316
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15317
tp15318
a(g37
I74
g38
S'learning_rate=LR)'
p15319
tp15320
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15321
tp15322
aasbsg52
Nsg53
g0
(g54
g2
Ntp15323
Rp15324
(dp15325
g58
(lp15326
g7752
asg14
g0
(g15
g2
Ntp15327
Rp15328
sg204
(lp15329
g15303
asg206
g0
(g207
g2
Ntp15330
Rp15331
(dp15332
g211
(lp15333
sg213
(lp15334
sg215
(lp15335
I0
aI1
asg217
g218
sg219
(tsg220
(lp15336
g222
asg223
I01
sg224
(g225
g225
tp15337
sg227
(dp15338
S'support_code_apply'
p15339
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15340
ssg231
(dp15341
I0
(lp15342
I0
assg234
(lp15343
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15344
asbsbsg177
g0
(g178
g2
Ntp15345
Rp15346
(dp15347
g182
(I01
I01
tp15348
sg183
g7775
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp15349
Rp15350
(dp15351
g11
S'auto_662'
p15352
sg13
Nsg14
g0
(g15
g2
Ntp15353
Rp15354
(dp15355
g19
(lp15356
(lp15357
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15358
tp15359
a(g22
I72
g26
S'exec code in run_globals'
p15360
tp15361
a(g29
I249
g30
S'Model(hyperparams).train()'
p15362
tp15363
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15364
tp15365
a(g37
I74
g38
S'learning_rate=LR)'
p15366
tp15367
a(g7508
I620
g7509
S'broadcastable=param.broadcastable)'
p15368
tp15369
aasbsg472
g0
(g473
g2
Ntp15370
Rp15371
(dp15372
g52
Nsg477
(lp15373
g194
(g195
(I0
tp15374
g197
tp15375
Rp15376
(I1
(I64
I10
tp15377
g189
I00
S'o\x1c&4\xb4Ja2\x8c\xe6\x1d3O\x05\xe95\xef\x86R2#J\xb45\x9b\x08X5\x9av\xd32\n\xd8\x944c1\xa23o\xf3\xe93\x1c|\xb34\xd6\xe5\'5\xf59\xc84\xa4\xf8\xe53\xc9\xeb\xe42\xbb\xe3\xa03\x98\x88\x134\xf0}:3\x8e\x13\x861n\x93#6\xffqQ1\xe1\xcfA5\x85\xe6b5C\x14\x924\x8e\x9ce5#\xef\xc65O\xec\x995\xda\xdb\xb75k\x99\xa05-\xc0?3Smv4\xea\xac\x155s\x19k4\xf6\xd4\x8b3\xb8l\x0c4F\x9bA4\xc6*\x9a4j\x93\x1d4\xedEF2\xf7\xdf\xb93\xd6\xd7K3z\xba\x1f4\x92"/4\xdaW/4\x96|\x0e43O\xc80\xf1\xad\x875T\xd3\x083\xc7\x1f\x955\xebF]2\x9dO\xea3\x04\x92v5W\t\xc15\x95)L3\x16\\75\x82\xd1\xcc1\xfc]W3+ld5\x96?\xed3\xb3\xcf\xba2L\xe8b4=\x89\x825\x19\xc3\x9c44\xcf,5\xd4\xf4W2\xc2\xbf\x934\xe3B\xd03\x1f\xf0\x8c3\xca\x83m3?s\x874u\x89\x8d-\x8e\xf3\xa44\xee\x88\xc44\x97D\x8f5N^\xc33\x95\x8e\x113\xea \x1c5\xe8[\x0e5\x1ct\xbe5\xc7\x1e25\xd4\x9d91\x0eJe3\x954\x876\xf1c43\x97\x8f\x1d6x/\xc548\x91\xe33\xefgK5\xdd=85\x8f\xb8\xdf.\xf0\xd6\xd60D\x87\xc23\xd6\x01B5$\x99\x876\xa6\x1f\x104:\xab\x971\x8b\xe2+6\xd6\x19V4\xc7\xc9Z6\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00}\xa6\xfd5\xfdg\r2V\x80d5C\'\xa24\xdd\x0e\xe23\x16\xf0\x1d4v;\xfd5\xd5Qd4\x90\xc1!5Rr\xb44\xcd\xed@/\\\xd4t4~\xf5\x1f5\xba\xad\x015_\x05\xb43\xec\\\x9d2\x82\'\x882\xc1\x15\xaa5\x9d\xdeQ4|\x91*5w\xc6\xc31\xd1\xf3\xee5^\x84k5@\xdb\x113\x93\xac\xb54\x82\xe6k4\xe0\xc3h4G\x91%5\xbc\xb5\xa35\xf7\x92l4\xfb-\x7f4H\x9d\x824-=\x005I\xff\x912\x9b\x91\xaa5\xdd\x93\x8c5 \xf9\xed5"\x00\x881=c\x873\xdf\x11\x033\x8e\x04\x854a\x8f\xc52\x138m3\x08\x82\xca2\x9fo\xc93\xb2n\n5\xcelP2\xc1a>4\x93\x1385\x93\x9e\xa43N\xa1\x0109\x03~4\x937<3\x84\x8294G\x1e36j\xba*4\x83b\xa12h,\x995H&\xe23\x92\xfb\xfb5\r\x00\xed+\xb0\x96\xe93\x06\xb4\xad5\x8fCT5\xaf]\xd34\x8c\xaa\x001\t\xf5\xc8/{Z\xcd5\x89\xde\xd52\xea\x8f\xcd4+\xc2//\xec\xe0\xb43\xb9\xce.4\xe6\xbf\x7f5\xd2\xac\xd72\xca\x18\xf64\xb4\xed\xad,&\xb9\xed4O\x89\x115\xba\x12\xdf4w\xfeK5Y\xc8Q.X\x8b;4\x07\xd1\x111\xa7\x85\xfc3#\x18\x985\xa1?\xaa5\xf5\xb5\xd1/\xbd8^4\xb0\x1a\xae2U\'p3\xe7)\x9e5[#\xcc5\xa9\xf2Z3\x97\xabo6\xf3s\x9c39J\xf33\x8dw\xb157v13y=\x976\x10\x07&6\x80+\x90-\xa0o\xa75\xa3\xc9\x804^\x1d\x844\xf0\x8ax5\x0e\xc4\xaa5h\r\xd84\xcc]\xb94\x8f\x8f\xa85\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xaf\xa1\x1e5\xb8$T3\xd9\xc1=5\xa8\x9b\x871:f\xb54\x8d\xd2\x804\xa1\xe3\xf35\x96I\x0f0\xdf2B4\x144\xa03\x9b\xcb\x152F~\x0e4\x1d@}4\xea\xecz5Q/o25\xef55\x13( 2\x07\xd9}4e+\x8c4\x80\xd8\xec4%\xdcA5\xafa\x972K\x1aM4\xb1^72y\x04@5Y\x96\xf84\xbc\t\x8a5\xe3\xb5\xa72\xdf\x02\x1c4n\xe4/1"\xe7\x9f3\xf9\xb0\'4\xb9\xe2V23\xbd\x865z\xb9\xdf.p\xec\xc25\xbcxW5:\xf7\x88/i\xd204\xc6\x0fL4-\xf2\x144\xde\x1f\t4\x1cJ?5\xe3D\xb92\x85t\xf95oY\xac4\x87\xf2\x945.\xe3\xa44U\x94\x973\x98\xed\xc75\xc9\xdc14\x92u\xa62\xbc\xa9\xac3\xe9\xac\xfc3H\x86\xa546<E4Z\x02\x141E\xb9\xd65\xd2\xfd\xc01\x7f\xa8\xd65\x9ef\xf84v\xc0\x8a535\\6\xb0x\xbc5\t\x17\x945\xc6\x82+6#\x1c\x005\x9b\nD4\xf9\x02\xe76\xa6\x14\x085m\x00\xa908\xb6\xae2\xc2\xea\x8c4!\xde\x192NiH6C\x17\xea4@\x01`4\xbc\xd6\x1f5h\x17l4\xd5\xf5X6\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf4\x01\x00\x00\xf3\xaf\xed33w\x18.\xb6\x17\xff1\x0f\x89\x195\xbbD\xaf5I\'\x1e5\xb0\xd0\x050\xe4\xf5m5,\xb4w4s\x8b\x0e6\xe2,k3\xe7\x0eQ4\xa4j\xa35\xa6\x8f\xfb4\x91\x81\xa3/2~\xd02\xe3\xac\xd11\xb1S\x8e5\xc9\xeeQ4(\xafd/]\x88\x8d2\xa5\xdf!2\x99i\xc24\xab\xbd\x0f5\xfb\xf0u4\x13\x07\x064\xabf,/\xd6\x8e\xf55O\x8bZ3~e\x046\x0f\xd3$4c\x18\xf22\xbai&2\x92@"5\xf6\x03\x9c2K~\xa55\x1a\x9a!4\xf5\x92[3\xa8\xcad5l\x96\xb04,Aw2\x9c\xca63\x16\xbe\x065\xb2\xb5\xab5\x8a\xbe\xd61\x89\xa1\x895\x0e\xe8\x902w\xbc\x172\x8b\x03\xb94qJ\x824Z\xf4\x893m\xa6\x8d3\xf1J\xdb4\xfd&\xca4\xb3H|4\xb4\xa3\xbb3K\xfb\x8c0A\x02\xdc5\x1dp[23\x80\xa65\x80c\x863p4\xd8/\x1f\xbfi4\xed6\x994\xfc\ru6\xcc\xb7\xcc4\xab\xa9\x912k\x9f\xf85\x84\x99\x8e3\xc7\xde06T\xc2b4\xc8#\xab0o.\xb52\x03w\n5Fw[3\xbb\x1b\x855u\x02B4\xc8\x04\xb24\x1f\x1b#5\x94s\x1d5\xfe\xab\xb3,\xf0Y\xfb475L5R\xaa\xbc5\xb9h{3N\xa8\x831x\xe5\xc4/t\x01\xcd5\x9d\xba\x943h\x17|4\xffFv4\xe1\xcc\xcf3\xdb\xc6U5\xa5~B5\xbe\x17\xee1`\xbc)4^\x0f\x044(\xc7Q4\xb2m\xb64\x03\xb9x2\xfe\xcc\x054\x98\xa1L2\xa9\xbb\x142\xf00\xe35\x11\xf2S3Q\xe1 6T\xd1\x8c5\xa2V-2\xa4\xb7t4\xd6\xca\x985\xad\xe042&e&3\xe2\xfd64\x80\x8d\x7f5\xfe\xf0\x8d3\xf4\x97\xcf5Ms\xef2\xc1 \xe33bhl4JzD4CB\x864\x80\xb9\xbe2\xd8\xf4\x145\x99TM3\xa6\nS6\xe4\xda94*\x0b|5\x8bk\xc55\x18V\x8837Ff6\x02\x1b\x041\xb9Cc4-\xe9\xdb4\x88\xe5\x9855@\xe71\x97.\xdf4#\x06\x842\x06\xe3S4\xee\x8f\xce4\xddH\xe44\xb9\x06[4\x95\x9b\xa54\x94\xba\'6=\x9fy6\x83\x17\x9c5\xd5Lt6\x97/\xa74=\xc2\x954\xbbV\xec6D\xbc\x1f5\x02\xfe\xa51\x9b9 6\xfc\xd2\x9b5\x95\xdfN57\xe0~5\xe3NI5\x1eO\x0c5\xe1D\xe45>l46\xd1\xb8\x945\x12\x86\xfa3b\xa7k2+\x9e\x805\x01\xf2f3\x07\xcc\xb23\xd1Z\xfd2\xfc5\xd64\x06\xbd\x8c5\xb1\xd7:2=\x85\x882\xd8\xfe\xaf2r\x9b\xa54{<\x835K\xd9\x9249\xe5b,\xc5\xd9\xc421,\x124.s\xde3\xed\xf1\xa94v\xf0\xeb-\xb6Z\x1900D\x8a3\xe5\x0671x`z5AS-6\x86\x0e\xaa4\x95&4/\x8c\x9f"6\x84\x9br4\x9e\xday6f\x13\xce2\xa68%1\xf2}s5?3\x924\xdc_N5\xe0\\\xb02;4\xd63 \x9bN4<~\x9f24\x14\x163\xa3\xfb\x8c5\xb5\x12\xd32\xd0\xd4\x1f4\x06j<2\x82\x9c^5\xfc:\xe43z\x9a\x885\xfa\x04\x183\xb2M\xa93\xe9\xfb\x942,\xad\xe81\x85\xc9\x1d/\xcc^\x974\xdb{\x175\xd2\x95a6o\x83\xc74\xb3o\x020\xe5\x16\xb75\x1c\xf6\xcd4\xea7\x1a6+\n\xe82\x88U\x1a5\xbe\xdaK5\x16\x11\xcd1\x82\xfb66JNN3m\xd6\xc24\xe8\xdc75\xbb\xbf\x174p\xa4\x1a6\xc5vR3\xeb4\x033\xc1l+4}\xf0\x0c6\xb8\xaa\xc93\xf2\xb6\xf35t\xc9\x1e2\xaa\xd8\x122J\xbd\x884\\N\x024P3\x8a3\x1e\xdb\x006\x90\xe2\x125\x9b\xc4\xea4p\xa8\x1a5\x12\xce\xd63\xd8Q\x7f5\xf6(\xb95\xdd\x82,6\xc7\xbc34\xe1\xfds3\xe4\x15\xac2\xfe\x15\x076\r\xcf35a\x0er5\x7f\x11Z3yZ\xa44\xba\xe6f2Q\x9az3\xd5.\x822\xb2\x18\x0e4\x13\t\x0c3k\xf5G4\xb1K\x953.Xd5\xa5\xcf\xa14\xb2\xba\xbb1Q\xc7\xa55\xccb\x823\xc4\t.5\x84O\xa64\xdar\x9e3\xe9q\x7f5\x0c\x13\x145\x86"z38l\xaa2\xe8\xf4v4\xfe\x10\x883Y\x0b\x944`YH2\xe9\xed\xe65\xfdD94J|\xbf4\x90\xa0\x1c3\xa1\xa3@4j=\x9a5\xb3\x08\x186omS0M\t\x894\x99\x98\xa0/\xfd\xed\xb83(\x85\x8f4\xa7|#6\xe3\x06w5\xa9\xf1</b\xbf\xab3*\xc9\xb60e\xfc\x894\xfc_\xcb4S:i0y\x84:4\xa8\xddR2\x956!2#\xb6\x085\x00=\xc42nTG5Cp\x8d4\xc3\x94U1\xe3\\\xba4\xac\x94&4\xcdxz0I\xcf\x7f3Q\xb7\x185\x87\xf2\xf25X\x0762(>\xcc3\x86\xb3\xfd.\xa2\xc665\xef=\xa15(\xba\xc84'
p15378
tp15379
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp15380
Rp15381
(dp15382
g182
(I00
I00
tp15383
sg183
S'float32'
p15384
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g15381
sbasg14
g0
(g15
g2
Ntp15385
Rp15386
sg204
(lp15387
g15278
asg206
g1220
sbsg177
g0
(g178
g2
Ntp15388
Rp15389
(dp15390
g182
(I00
I00
tp15391
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15392
Rp15393
(dp15394
g11
S'auto_1441'
p15395
sg13
I0
sg14
g0
(g15
g2
Ntp15396
Rp15397
(dp15398
g19
(lp15399
(lp15400
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15401
tp15402
a(g22
I72
g26
S'exec code in run_globals'
p15403
tp15404
a(g29
I249
g30
S'Model(hyperparams).train()'
p15405
tp15406
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15407
tp15408
a(g37
I74
g38
S'learning_rate=LR)'
p15409
tp15410
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15411
tp15412
aasbsg52
Nsg53
g0
(g54
g2
Ntp15413
Rp15414
(dp15415
g58
(lp15416
g0
(g7
g2
Ntp15417
Rp15418
(dp15419
g11
S'auto_1438'
p15420
sg13
I0
sg14
g0
(g15
g2
Ntp15421
Rp15422
(dp15423
g19
(lp15424
(lp15425
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15426
tp15427
a(g22
I72
g26
S'exec code in run_globals'
p15428
tp15429
a(g29
I249
g30
S'Model(hyperparams).train()'
p15430
tp15431
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15432
tp15433
a(g37
I74
g38
S'learning_rate=LR)'
p15434
tp15435
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15436
tp15437
aasbsg52
Nsg53
g0
(g54
g2
Ntp15438
Rp15439
(dp15440
g58
(lp15441
g0
(g7
g2
Ntp15442
Rp15443
(dp15444
g11
S'auto_1437'
p15445
sg13
I0
sg14
g0
(g15
g2
Ntp15446
Rp15447
(dp15448
g19
(lp15449
(lp15450
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15451
tp15452
a(g22
I72
g26
S'exec code in run_globals'
p15453
tp15454
a(g29
I249
g30
S'Model(hyperparams).train()'
p15455
tp15456
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15457
tp15458
a(g37
I74
g38
S'learning_rate=LR)'
p15459
tp15460
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15461
tp15462
aasbsg52
Nsg53
g0
(g54
g2
Ntp15463
Rp15464
(dp15465
g58
(lp15466
g7692
ag7752
asg14
g0
(g15
g2
Ntp15467
Rp15468
sg204
(lp15469
g15443
asg206
g5417
sbsg177
g0
(g178
g2
Ntp15470
Rp15471
(dp15472
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15473
Rp15474
sg204
(lp15475
g15418
asg206
g0
(g207
g2
Ntp15476
Rp15477
(dp15478
g211
(lp15479
sg213
(lp15480
sg215
(lp15481
I0
aI1
asg217
g218
sg219
(tsg220
(lp15482
g222
asg223
I01
sg224
(g225
g225
tp15483
sg227
(dp15484
S'support_code_apply'
p15485
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15486
ssg231
(dp15487
I0
(lp15488
I0
assg234
(lp15489
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15490
asbsbsg177
g0
(g178
g2
Ntp15491
Rp15492
(dp15493
g182
(I01
I01
tp15494
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15495
Rp15496
(dp15497
g11
S'auto_1440'
p15498
sg13
I0
sg14
g0
(g15
g2
Ntp15499
Rp15500
(dp15501
g19
(lp15502
(lp15503
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15504
tp15505
a(g22
I72
g26
S'exec code in run_globals'
p15506
tp15507
a(g29
I249
g30
S'Model(hyperparams).train()'
p15508
tp15509
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15510
tp15511
a(g37
I74
g38
S'learning_rate=LR)'
p15512
tp15513
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15514
tp15515
aasbsg52
Nsg53
g0
(g54
g2
Ntp15516
Rp15517
(dp15518
g58
(lp15519
g14468
ag0
(g7
g2
Ntp15520
Rp15521
(dp15522
g11
S'auto_1439'
p15523
sg13
I0
sg14
g0
(g15
g2
Ntp15524
Rp15525
(dp15526
g19
(lp15527
(lp15528
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15529
tp15530
a(g22
I72
g26
S'exec code in run_globals'
p15531
tp15532
a(g29
I249
g30
S'Model(hyperparams).train()'
p15533
tp15534
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15535
tp15536
a(g37
I74
g38
S'learning_rate=LR)'
p15537
tp15538
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p15539
tp15540
aasbsg52
Nsg53
g0
(g54
g2
Ntp15541
Rp15542
(dp15543
g58
(lp15544
g10758
asg14
g0
(g15
g2
Ntp15545
Rp15546
sg204
(lp15547
g15521
asg206
g0
(g207
g2
Ntp15548
Rp15549
(dp15550
g211
(lp15551
sg213
(lp15552
sg215
(lp15553
I0
aI1
asg217
g218
sg219
(tsg220
(lp15554
g222
asg223
I01
sg224
(g225
g225
tp15555
sg227
(dp15556
S'support_code_apply'
p15557
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15558
ssg231
(dp15559
I0
(lp15560
I0
assg234
(lp15561
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15562
asbsbsg177
g0
(g178
g2
Ntp15563
Rp15564
(dp15565
g182
(I01
I01
tp15566
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15567
Rp15568
sg204
(lp15569
g15496
asg206
g7850
sbsg177
g0
(g178
g2
Ntp15570
Rp15571
(dp15572
g182
(I00
I00
tp15573
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15574
Rp15575
sg204
(lp15576
g15393
asg206
g1220
sbsg177
g0
(g178
g2
Ntp15577
Rp15578
(dp15579
g182
(I00
I00
tp15580
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15581
Rp15582
sg204
(lp15583
g15253
asg206
g1153
sbsg177
g0
(g178
g2
Ntp15584
Rp15585
(dp15586
g182
(I00
I00
tp15587
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15588
Rp15589
sg204
(lp15590
g15228
asg206
g7880
sbsg177
g0
(g178
g2
Ntp15591
Rp15592
(dp15593
g182
(I00
I00
tp15594
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15595
Rp15596
(dp15597
g11
S'auto_1447'
p15598
sg13
I0
sg14
g0
(g15
g2
Ntp15599
Rp15600
(dp15601
g19
(lp15602
(lp15603
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15604
tp15605
a(g22
I72
g26
S'exec code in run_globals'
p15606
tp15607
a(g29
I249
g30
S'Model(hyperparams).train()'
p15608
tp15609
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15610
tp15611
a(g37
I74
g38
S'learning_rate=LR)'
p15612
tp15613
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p15614
tp15615
aasbsg52
Nsg53
g0
(g54
g2
Ntp15616
Rp15617
(dp15618
g58
(lp15619
g11505
asg14
g0
(g15
g2
Ntp15620
Rp15621
sg204
(lp15622
g15596
asg206
g0
(g207
g2
Ntp15623
Rp15624
(dp15625
g211
(lp15626
sg213
(lp15627
sg215
(lp15628
I0
aI1
asg217
g218
sg219
(tsg220
(lp15629
g222
asg223
I01
sg224
(g225
g225
tp15630
sg227
(dp15631
S'support_code_apply'
p15632
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15633
ssg231
(dp15634
I0
(lp15635
I0
assg234
(lp15636
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15637
asbsbsg177
g0
(g178
g2
Ntp15638
Rp15639
(dp15640
g182
(I01
I01
tp15641
sg183
g11528
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15642
Rp15643
sg204
(lp15644
g15203
asg206
g1153
sbsg177
g0
(g178
g2
Ntp15645
Rp15646
(dp15647
g182
(I00
I00
tp15648
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15649
Rp15650
sg204
(lp15651
g14128
asg206
g5326
sbsg177
g0
(g178
g2
Ntp15652
Rp15653
(dp15654
g182
(I00
I00
tp15655
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15656
Rp15657
sg204
(lp15658
g14103
asg206
g5417
sbsg177
g0
(g178
g2
Ntp15659
Rp15660
(dp15661
g182
(I00
I00
tp15662
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag1328
asg14
g0
(g15
g2
Ntp15663
Rp15664
sg204
(lp15665
g14078
asg206
g5417
sbsg177
g0
(g178
g2
Ntp15666
Rp15667
(dp15668
g182
(I00
I00
tp15669
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15670
Rp15671
sg204
(lp15672
g13976
asg206
g1220
sbsg177
g0
(g178
g2
Ntp15673
Rp15674
(dp15675
g182
(I00
I00
tp15676
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15677
Rp15678
sg204
(lp15679
g13951
asg206
g1153
sbsg177
g0
(g178
g2
Ntp15680
Rp15681
(dp15682
g182
(I00
I00
tp15683
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15684
Rp15685
(dp15686
g11
S'auto_1454'
p15687
sg13
I0
sg14
g0
(g15
g2
Ntp15688
Rp15689
(dp15690
g19
(lp15691
(lp15692
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15693
tp15694
a(g22
I72
g26
S'exec code in run_globals'
p15695
tp15696
a(g29
I249
g30
S'Model(hyperparams).train()'
p15697
tp15698
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15699
tp15700
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p15701
tp15702
a(g7329
I219
g7330
S'updates[param] = T.clip(updates[param], -layer.H,layer.H)'
p15703
tp15704
aasbsg52
Nsg53
g0
(g54
g2
Ntp15705
Rp15706
(dp15707
g58
(lp15708
g877
asg14
g0
(g15
g2
Ntp15709
Rp15710
sg204
(lp15711
g15685
asg206
g0
(g207
g2
Ntp15712
Rp15713
(dp15714
g211
(lp15715
sg213
(lp15716
sg215
(lp15717
I0
aI1
asg217
g218
sg219
(tsg220
(lp15718
g222
asg223
I01
sg224
(g225
g225
tp15719
sg227
(dp15720
S'support_code_apply'
p15721
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15722
ssg231
(dp15723
I0
(lp15724
I0
assg234
(lp15725
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15726
asbsbsg177
g0
(g178
g2
Ntp15727
Rp15728
(dp15729
g182
(I01
I01
tp15730
sg183
g904
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15731
Rp15732
(dp15733
g11
S'auto_1455'
p15734
sg13
I0
sg14
g0
(g15
g2
Ntp15735
Rp15736
(dp15737
g19
(lp15738
(lp15739
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15740
tp15741
a(g22
I72
g26
S'exec code in run_globals'
p15742
tp15743
a(g29
I249
g30
S'Model(hyperparams).train()'
p15744
tp15745
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15746
tp15747
a(g37
I75
g38
S'updates = binary_connect.clipping_scaling(updates, mlp)'
p15748
tp15749
a(g7329
I219
g7330
S'updates[param] = T.clip(updates[param], -layer.H,layer.H)'
p15750
tp15751
aasbsg52
Nsg53
g0
(g54
g2
Ntp15752
Rp15753
(dp15754
g58
(lp15755
g962
asg14
g0
(g15
g2
Ntp15756
Rp15757
sg204
(lp15758
g15732
asg206
g0
(g207
g2
Ntp15759
Rp15760
(dp15761
g211
(lp15762
sg213
(lp15763
sg215
(lp15764
I0
aI1
asg217
g218
sg219
(tsg220
(lp15765
g222
asg223
I01
sg224
(g225
g225
tp15766
sg227
(dp15767
S'support_code_apply'
p15768
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15769
ssg231
(dp15770
I0
(lp15771
I0
assg234
(lp15772
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15773
asbsbsg177
g0
(g178
g2
Ntp15774
Rp15775
(dp15776
g182
(I01
I01
tp15777
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp15778
Rp15779
sg204
(lp15780
g13926
asg206
g11696
sbsg177
g0
(g178
g2
Ntp15781
Rp15782
(dp15783
g182
(I00
I00
tp15784
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbsg1834
g1353
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g1328
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp15785
Rp15786
(dp15787
g52
g197
sg1833
g0
(g7
g2
Ntp15788
Rp15789
(dp15790
g11
S'auto_1534'
p15791
sg13
I0
sg14
g0
(g15
g2
Ntp15792
Rp15793
(dp15794
g19
(lp15795
(lp15796
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15797
tp15798
a(g22
I72
g26
S'exec code in run_globals'
p15799
tp15800
a(g29
I249
g30
S'Model(hyperparams).train()'
p15801
tp15802
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15803
tp15804
a(g37
I83
g38
S'learning_rate=LR).items())'
p15805
tp15806
a(g7508
I628
g7509
S'updates[param] = param - step'
p15807
tp15808
aasbsg52
Nsg53
g0
(g54
g2
Ntp15809
Rp15810
(dp15811
g58
(lp15812
g1753
ag0
(g7
g2
Ntp15813
Rp15814
(dp15815
g11
S'auto_1533'
p15816
sg13
I0
sg14
g0
(g15
g2
Ntp15817
Rp15818
(dp15819
g19
(lp15820
(lp15821
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15822
tp15823
a(g22
I72
g26
S'exec code in run_globals'
p15824
tp15825
a(g29
I249
g30
S'Model(hyperparams).train()'
p15826
tp15827
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15828
tp15829
a(g37
I83
g38
S'learning_rate=LR).items())'
p15830
tp15831
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p15832
tp15833
aasbsg52
Nsg53
g0
(g54
g2
Ntp15834
Rp15835
(dp15836
g58
(lp15837
g0
(g7
g2
Ntp15838
Rp15839
(dp15840
g11
S'auto_1529'
p15841
sg13
I0
sg14
g0
(g15
g2
Ntp15842
Rp15843
(dp15844
g19
(lp15845
(lp15846
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15847
tp15848
a(g22
I72
g26
S'exec code in run_globals'
p15849
tp15850
a(g29
I249
g30
S'Model(hyperparams).train()'
p15851
tp15852
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15853
tp15854
a(g37
I83
g38
S'learning_rate=LR).items())'
p15855
tp15856
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p15857
tp15858
aasbsg52
Nsg53
g0
(g54
g2
Ntp15859
Rp15860
(dp15861
g58
(lp15862
g0
(g7
g2
Ntp15863
Rp15864
(dp15865
g11
S'auto_1528'
p15866
sg13
I0
sg14
g0
(g15
g2
Ntp15867
Rp15868
(dp15869
g19
(lp15870
(lp15871
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15872
tp15873
a(g22
I72
g26
S'exec code in run_globals'
p15874
tp15875
a(g29
I249
g30
S'Model(hyperparams).train()'
p15876
tp15877
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15878
tp15879
a(g37
I83
g38
S'learning_rate=LR).items())'
p15880
tp15881
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p15882
tp15883
aasbsg52
Nsg53
g0
(g54
g2
Ntp15884
Rp15885
(dp15886
g58
(lp15887
g11819
asg14
g0
(g15
g2
Ntp15888
Rp15889
sg204
(lp15890
g15864
asg206
g0
(g207
g2
Ntp15891
Rp15892
(dp15893
g211
(lp15894
sg213
(lp15895
sg215
(lp15896
I0
asg217
g218
sg219
(tsg220
(lp15897
g222
asg223
I01
sg224
(g225
tp15898
sg227
(dp15899
S'support_code_apply'
p15900
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15901
ssg231
(dp15902
I0
(lp15903
I0
assg234
(lp15904
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15905
asbsbsg177
g0
(g178
g2
Ntp15906
Rp15907
(dp15908
g182
(I01
tp15909
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp15910
Rp15911
(dp15912
g11
S'auto_1519'
p15913
sg13
I0
sg14
g0
(g15
g2
Ntp15914
Rp15915
(dp15916
g19
(lp15917
(lp15918
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15919
tp15920
a(g22
I72
g26
S'exec code in run_globals'
p15921
tp15922
a(g29
I249
g30
S'Model(hyperparams).train()'
p15923
tp15924
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15925
tp15926
a(g37
I83
g38
S'learning_rate=LR).items())'
p15927
tp15928
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p15929
tp15930
aasbsg52
Nsg53
g0
(g54
g2
Ntp15931
Rp15932
(dp15933
g58
(lp15934
g0
(g7
g2
Ntp15935
Rp15936
(dp15937
g11
S'auto_1511'
p15938
sg13
I0
sg14
g0
(g15
g2
Ntp15939
Rp15940
(dp15941
g19
(lp15942
(lp15943
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15944
tp15945
a(g22
I72
g26
S'exec code in run_globals'
p15946
tp15947
a(g29
I249
g30
S'Model(hyperparams).train()'
p15948
tp15949
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15950
tp15951
a(g37
I83
g38
S'learning_rate=LR).items())'
p15952
tp15953
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p15954
tp15955
aasbsg52
Nsg53
g0
(g54
g2
Ntp15956
Rp15957
(dp15958
g58
(lp15959
g0
(g7
g2
Ntp15960
Rp15961
(dp15962
g11
S'auto_1510'
p15963
sg13
I0
sg14
g0
(g15
g2
Ntp15964
Rp15965
(dp15966
g19
(lp15967
(lp15968
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p15969
tp15970
a(g22
I72
g26
S'exec code in run_globals'
p15971
tp15972
a(g29
I249
g30
S'Model(hyperparams).train()'
p15973
tp15974
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p15975
tp15976
a(g37
I83
g38
S'learning_rate=LR).items())'
p15977
tp15978
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p15979
tp15980
aasbsg52
Nsg53
g0
(g54
g2
Ntp15981
Rp15982
(dp15983
g58
(lp15984
g7956
asg14
g0
(g15
g2
Ntp15985
Rp15986
sg204
(lp15987
g15961
asg206
g0
(g207
g2
Ntp15988
Rp15989
(dp15990
g211
(lp15991
sg213
(lp15992
sg215
(lp15993
I0
asg217
g218
sg219
(tsg220
(lp15994
g222
asg223
I01
sg224
(g225
tp15995
sg227
(dp15996
S'support_code_apply'
p15997
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p15998
ssg231
(dp15999
I0
(lp16000
I0
assg234
(lp16001
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16002
asbsbsg177
g0
(g178
g2
Ntp16003
Rp16004
(dp16005
g182
(I01
tp16006
sg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp16007
Rp16008
(dp16009
g11
S'auto_1119'
p16010
sg13
Nsg14
g0
(g15
g2
Ntp16011
Rp16012
(dp16013
g19
(lp16014
(lp16015
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16016
tp16017
a(g22
I72
g26
S'exec code in run_globals'
p16018
tp16019
a(g29
I249
g30
S'Model(hyperparams).train()'
p16020
tp16021
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16022
tp16023
a(g37
I83
g38
S'learning_rate=LR).items())'
p16024
tp16025
a(g7508
I618
g7509
S'broadcastable=param.broadcastable)'
p16026
tp16027
aasbsg472
g0
(g473
g2
Ntp16028
Rp16029
(dp16030
g52
Nsg477
(lp16031
g194
(g195
(I0
tp16032
g197
tp16033
Rp16034
(I1
(I10
tp16035
g189
I00
S'\xf0d\x8e\xb70\xc4\xb59\xfa\xe7+7xDm:\xe5\x120:\x99Y\x1d:`\xb2B\xb9\xfc\x99\xf1\xb9\x0b}\xdc9\xa5\x8f\x8f\xba'
p16036
tp16037
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp16038
Rp16039
(dp16040
g182
(I00
tp16041
sg183
S'float32'
p16042
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g16039
sbasg14
g0
(g15
g2
Ntp16043
Rp16044
sg204
(lp16045
g15936
asg206
g1220
sbsg177
g0
(g178
g2
Ntp16046
Rp16047
(dp16048
g182
(I00
tp16049
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp16050
Rp16051
(dp16052
g11
S'auto_1518'
p16053
sg13
I0
sg14
g0
(g15
g2
Ntp16054
Rp16055
(dp16056
g19
(lp16057
(lp16058
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16059
tp16060
a(g22
I72
g26
S'exec code in run_globals'
p16061
tp16062
a(g29
I249
g30
S'Model(hyperparams).train()'
p16063
tp16064
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16065
tp16066
a(g37
I83
g38
S'learning_rate=LR).items())'
p16067
tp16068
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p16069
tp16070
aasbsg52
Nsg53
g0
(g54
g2
Ntp16071
Rp16072
(dp16073
g58
(lp16074
g0
(g7
g2
Ntp16075
Rp16076
(dp16077
g11
S'auto_1513'
p16078
sg13
I0
sg14
g0
(g15
g2
Ntp16079
Rp16080
(dp16081
g19
(lp16082
(lp16083
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16084
tp16085
a(g22
I72
g26
S'exec code in run_globals'
p16086
tp16087
a(g29
I249
g30
S'Model(hyperparams).train()'
p16088
tp16089
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16090
tp16091
a(g37
I83
g38
S'learning_rate=LR).items())'
p16092
tp16093
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p16094
tp16095
aasbsg52
Nsg53
g0
(g54
g2
Ntp16096
Rp16097
(dp16098
g58
(lp16099
g0
(g7
g2
Ntp16100
Rp16101
(dp16102
g11
S'auto_1512'
p16103
sg13
I0
sg14
g0
(g15
g2
Ntp16104
Rp16105
(dp16106
g19
(lp16107
(lp16108
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16109
tp16110
a(g22
I72
g26
S'exec code in run_globals'
p16111
tp16112
a(g29
I249
g30
S'Model(hyperparams).train()'
p16113
tp16114
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16115
tp16116
a(g37
I83
g38
S'learning_rate=LR).items())'
p16117
tp16118
a(g7508
I622
g7509
S'm_t = beta1*m_prev + (one-beta1)*g_t'
p16119
tp16120
aasbsg52
Nsg53
g0
(g54
g2
Ntp16121
Rp16122
(dp16123
g58
(lp16124
g7692
ag7956
asg14
g0
(g15
g2
Ntp16125
Rp16126
sg204
(lp16127
g16101
asg206
g5417
sbsg177
g0
(g178
g2
Ntp16128
Rp16129
(dp16130
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16131
Rp16132
sg204
(lp16133
g16076
asg206
g0
(g207
g2
Ntp16134
Rp16135
(dp16136
g211
(lp16137
sg213
(lp16138
sg215
(lp16139
I0
asg217
g218
sg219
(tsg220
(lp16140
g222
asg223
I01
sg224
(g225
tp16141
sg227
(dp16142
S'support_code_apply'
p16143
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16144
ssg231
(dp16145
I0
(lp16146
I0
assg234
(lp16147
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16148
asbsbsg177
g0
(g178
g2
Ntp16149
Rp16150
(dp16151
g182
(I01
tp16152
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp16153
Rp16154
(dp16155
g11
S'auto_1517'
p16156
sg13
I0
sg14
g0
(g15
g2
Ntp16157
Rp16158
(dp16159
g19
(lp16160
(lp16161
(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16162
tp16163
a(g37
I83
g38
S'learning_rate=LR).items())'
p16164
tp16165
a(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p16166
tp16167
a(g7508
I145
g12380
S'return theano.grad(loss_or_grads, params)'
p16168
tp16169
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p16170
tp16171
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p16172
tp16173
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16174
tp16175
a(g8287
I1162
g8297
S'new_output_grads)'
p16176
tp16177
aasbsg52
S'(dmean/db)'
p16178
sg53
g0
(g54
g2
Ntp16179
Rp16180
(dp16181
g58
(lp16182
g0
(g7
g2
Ntp16183
Rp16184
(dp16185
g11
S'auto_1516'
p16186
sg13
I0
sg14
g0
(g15
g2
Ntp16187
Rp16188
(dp16189
g19
(lp16190
(lp16191
(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16192
tp16193
a(g37
I83
g38
S'learning_rate=LR).items())'
p16194
tp16195
a(g7508
I605
g7509
S'all_grads = get_or_compute_grads(loss_or_grads, params)'
p16196
tp16197
a(g7508
I145
g12380
S'return theano.grad(loss_or_grads, params)'
p16198
tp16199
a(g8287
I605
g8288
S'grad_dict, wrt, cost_name)'
p16200
tp16201
a(g8287
I1371
g8291
S'rval = [access_grad_cache(elem) for elem in wrt]'
p16202
tp16203
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16204
tp16205
a(g8287
I1162
g8297
S'new_output_grads)'
p16206
tp16207
aasbsg52
Nsg53
g0
(g54
g2
Ntp16208
Rp16209
(dp16210
g58
(lp16211
g0
(g7
g2
Ntp16212
Rp16213
(dp16214
g11
S'auto_1515'
p16215
sg13
I0
sg14
g0
(g15
g2
Ntp16216
Rp16217
(dp16218
g19
(lp16219
(lp16220
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16221
tp16222
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p16223
tp16224
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16225
tp16226
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p16227
tp16228
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16229
tp16230
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p16231
tp16232
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16233
tp16234
a(g8287
I1162
g8297
S'new_output_grads)'
p16235
tp16236
aasbsg52
Nsg53
g0
(g54
g2
Ntp16237
Rp16238
(dp16239
g58
(lp16240
g0
(g7
g2
Ntp16241
Rp16242
(dp16243
g11
S'auto_1514'
p16244
sg13
I0
sg14
g0
(g15
g2
Ntp16245
Rp16246
(dp16247
g19
(lp16248
(lp16249
(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16250
tp16251
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p16252
tp16253
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16254
tp16255
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p16256
tp16257
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16258
tp16259
a(g8287
I1021
g8297
S'output_grads = [access_grad_cache(var) for var in node.outputs]'
p16260
tp16261
a(g8287
I1326
g8294
S'term = access_term_cache(node)[idx]'
p16262
tp16263
a(g8287
I1162
g8297
S'new_output_grads)'
p16264
tp16265
aasbsg52
Nsg53
g0
(g54
g2
Ntp16266
Rp16267
(dp16268
g58
(lp16269
g12571
asg14
g0
(g15
g2
Ntp16270
Rp16271
sg204
(lp16272
g16242
asg206
g0
(g3002
g2
Ntp16273
Rp16274
(dp16275
g183
g531
sg503
g1157
sg3006
(I0
tp16276
sg3007
g3008
sbsbsg177
g0
(g178
g2
Ntp16277
Rp16278
(dp16279
g182
(I00
tp16280
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16281
Rp16282
sg204
(lp16283
g16213
asg206
g0
(g207
g2
Ntp16284
Rp16285
(dp16286
g211
(lp16287
sg213
(lp16288
I0
asg215
(lp16289
I0
asg217
g218
sg219
g16280
sg220
(lp16290
g222
asg223
I01
sg224
(g225
I0
tp16291
sg227
(dp16292
S'support_code_apply'
p16293
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16294
ssg231
(dp16295
I0
(lp16296
I0
assg234
(lp16297
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16298
asbsbsg177
g0
(g178
g2
Ntp16299
Rp16300
(dp16301
g182
(I01
I00
tp16302
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16303
Rp16304
sg204
(lp16305
g16184
asg206
g0
(g497
g2
Ntp16306
Rp16307
(dp16308
g52
Nsg503
g13406
sg511
(dp16309
sg513
Nsg516
g0
(g517
g2
Ntp16310
Rp16311
(dp16312
g521
I0
sg522
(dp16313
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp16314
Rp16315
(dp16316
g182
(I01
I00
tp16317
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16318
Rp16319
sg204
(lp16320
g16154
asg206
g0
(g207
g2
Ntp16321
Rp16322
(dp16323
g211
(lp16324
I0
asg213
(lp16325
I1
asg215
(lp16326
sg217
g218
sg219
g16302
sg220
(lp16327
g222
asg223
I01
sg224
(I1
tp16328
sg227
(dp16329
S'support_code_apply'
p16330
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16331
ssg231
(dp16332
I0
(lp16333
I0
assg234
(lp16334
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16335
asbsbsg177
g0
(g178
g2
Ntp16336
Rp16337
(dp16338
g182
(I00
tp16339
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16340
Rp16341
sg204
(lp16342
g16051
asg206
g1220
sbsg177
g0
(g178
g2
Ntp16343
Rp16344
(dp16345
g182
(I00
tp16346
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16347
Rp16348
sg204
(lp16349
g15911
asg206
g1153
sbsg177
g0
(g178
g2
Ntp16350
Rp16351
(dp16352
g182
(I00
tp16353
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16354
Rp16355
sg204
(lp16356
g15839
asg206
g1220
sbsg177
g0
(g178
g2
Ntp16357
Rp16358
(dp16359
g182
(I00
tp16360
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp16361
Rp16362
(dp16363
g11
S'auto_1532'
p16364
sg13
I0
sg14
g0
(g15
g2
Ntp16365
Rp16366
(dp16367
g19
(lp16368
(lp16369
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16370
tp16371
a(g22
I72
g26
S'exec code in run_globals'
p16372
tp16373
a(g29
I249
g30
S'Model(hyperparams).train()'
p16374
tp16375
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16376
tp16377
a(g37
I83
g38
S'learning_rate=LR).items())'
p16378
tp16379
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p16380
tp16381
aasbsg52
Nsg53
g0
(g54
g2
Ntp16382
Rp16383
(dp16384
g58
(lp16385
g0
(g7
g2
Ntp16386
Rp16387
(dp16388
g11
S'auto_1530'
p16389
sg13
I0
sg14
g0
(g15
g2
Ntp16390
Rp16391
(dp16392
g19
(lp16393
(lp16394
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16395
tp16396
a(g22
I72
g26
S'exec code in run_globals'
p16397
tp16398
a(g29
I249
g30
S'Model(hyperparams).train()'
p16399
tp16400
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16401
tp16402
a(g37
I83
g38
S'learning_rate=LR).items())'
p16403
tp16404
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p16405
tp16406
aasbsg52
Nsg53
g0
(g54
g2
Ntp16407
Rp16408
(dp16409
g58
(lp16410
g0
(g7
g2
Ntp16411
Rp16412
(dp16413
g11
S'auto_1527'
p16414
sg13
I0
sg14
g0
(g15
g2
Ntp16415
Rp16416
(dp16417
g19
(lp16418
(lp16419
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16420
tp16421
a(g22
I72
g26
S'exec code in run_globals'
p16422
tp16423
a(g29
I249
g30
S'Model(hyperparams).train()'
p16424
tp16425
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16426
tp16427
a(g37
I83
g38
S'learning_rate=LR).items())'
p16428
tp16429
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16430
tp16431
aasbsg52
Nsg53
g0
(g54
g2
Ntp16432
Rp16433
(dp16434
g58
(lp16435
g0
(g7
g2
Ntp16436
Rp16437
(dp16438
g11
S'auto_1521'
p16439
sg13
I0
sg14
g0
(g15
g2
Ntp16440
Rp16441
(dp16442
g19
(lp16443
(lp16444
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16445
tp16446
a(g22
I72
g26
S'exec code in run_globals'
p16447
tp16448
a(g29
I249
g30
S'Model(hyperparams).train()'
p16449
tp16450
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16451
tp16452
a(g37
I83
g38
S'learning_rate=LR).items())'
p16453
tp16454
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16455
tp16456
aasbsg52
Nsg53
g0
(g54
g2
Ntp16457
Rp16458
(dp16459
g58
(lp16460
g0
(g7
g2
Ntp16461
Rp16462
(dp16463
g11
S'auto_1520'
p16464
sg13
I0
sg14
g0
(g15
g2
Ntp16465
Rp16466
(dp16467
g19
(lp16468
(lp16469
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16470
tp16471
a(g22
I72
g26
S'exec code in run_globals'
p16472
tp16473
a(g29
I249
g30
S'Model(hyperparams).train()'
p16474
tp16475
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16476
tp16477
a(g37
I83
g38
S'learning_rate=LR).items())'
p16478
tp16479
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16480
tp16481
aasbsg52
Nsg53
g0
(g54
g2
Ntp16482
Rp16483
(dp16484
g58
(lp16485
g7752
asg14
g0
(g15
g2
Ntp16486
Rp16487
sg204
(lp16488
g16462
asg206
g0
(g207
g2
Ntp16489
Rp16490
(dp16491
g211
(lp16492
sg213
(lp16493
sg215
(lp16494
I0
asg217
g218
sg219
(tsg220
(lp16495
g222
asg223
I01
sg224
(g225
tp16496
sg227
(dp16497
S'support_code_apply'
p16498
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16499
ssg231
(dp16500
I0
(lp16501
I0
assg234
(lp16502
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16503
asbsbsg177
g0
(g178
g2
Ntp16504
Rp16505
(dp16506
g182
(I01
tp16507
sg183
g7775
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g441
g2
Ntp16508
Rp16509
(dp16510
g11
S'auto_1120'
p16511
sg13
Nsg14
g0
(g15
g2
Ntp16512
Rp16513
(dp16514
g19
(lp16515
(lp16516
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16517
tp16518
a(g22
I72
g26
S'exec code in run_globals'
p16519
tp16520
a(g29
I249
g30
S'Model(hyperparams).train()'
p16521
tp16522
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16523
tp16524
a(g37
I83
g38
S'learning_rate=LR).items())'
p16525
tp16526
a(g7508
I620
g7509
S'broadcastable=param.broadcastable)'
p16527
tp16528
aasbsg472
g0
(g473
g2
Ntp16529
Rp16530
(dp16531
g52
Nsg477
(lp16532
g194
(g195
(I0
tp16533
g197
tp16534
Rp16535
(I1
(I10
tp16536
g189
I00
S'$g\xaa6S\x1d\xac6!-\xdd6\x1e\xda"7\x89\x14-76x\x177~V\xa06y\x90\t7\x1b\x1d\x887?Xu7'
p16537
tp16538
basg485
I00
sg486
I00
sg177
g0
(g178
g2
Ntp16539
Rp16540
(dp16541
g182
(I00
tp16542
sg183
S'float32'
p16543
sg185
g189
sg192
I00
sg52
Nsbsg492
Nsbsg52
Nsg53
Nsg177
g16540
sbasg14
g0
(g15
g2
Ntp16544
Rp16545
sg204
(lp16546
g16437
asg206
g1220
sbsg177
g0
(g178
g2
Ntp16547
Rp16548
(dp16549
g182
(I00
tp16550
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp16551
Rp16552
(dp16553
g11
S'auto_1526'
p16554
sg13
I0
sg14
g0
(g15
g2
Ntp16555
Rp16556
(dp16557
g19
(lp16558
(lp16559
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16560
tp16561
a(g22
I72
g26
S'exec code in run_globals'
p16562
tp16563
a(g29
I249
g30
S'Model(hyperparams).train()'
p16564
tp16565
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16566
tp16567
a(g37
I83
g38
S'learning_rate=LR).items())'
p16568
tp16569
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16570
tp16571
aasbsg52
Nsg53
g0
(g54
g2
Ntp16572
Rp16573
(dp16574
g58
(lp16575
g0
(g7
g2
Ntp16576
Rp16577
(dp16578
g11
S'auto_1523'
p16579
sg13
I0
sg14
g0
(g15
g2
Ntp16580
Rp16581
(dp16582
g19
(lp16583
(lp16584
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16585
tp16586
a(g22
I72
g26
S'exec code in run_globals'
p16587
tp16588
a(g29
I249
g30
S'Model(hyperparams).train()'
p16589
tp16590
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16591
tp16592
a(g37
I83
g38
S'learning_rate=LR).items())'
p16593
tp16594
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16595
tp16596
aasbsg52
Nsg53
g0
(g54
g2
Ntp16597
Rp16598
(dp16599
g58
(lp16600
g0
(g7
g2
Ntp16601
Rp16602
(dp16603
g11
S'auto_1522'
p16604
sg13
I0
sg14
g0
(g15
g2
Ntp16605
Rp16606
(dp16607
g19
(lp16608
(lp16609
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16610
tp16611
a(g22
I72
g26
S'exec code in run_globals'
p16612
tp16613
a(g29
I249
g30
S'Model(hyperparams).train()'
p16614
tp16615
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16616
tp16617
a(g37
I83
g38
S'learning_rate=LR).items())'
p16618
tp16619
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16620
tp16621
aasbsg52
Nsg53
g0
(g54
g2
Ntp16622
Rp16623
(dp16624
g58
(lp16625
g7692
ag7752
asg14
g0
(g15
g2
Ntp16626
Rp16627
sg204
(lp16628
g16602
asg206
g5417
sbsg177
g0
(g178
g2
Ntp16629
Rp16630
(dp16631
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16632
Rp16633
sg204
(lp16634
g16577
asg206
g0
(g207
g2
Ntp16635
Rp16636
(dp16637
g211
(lp16638
sg213
(lp16639
sg215
(lp16640
I0
asg217
g218
sg219
(tsg220
(lp16641
g222
asg223
I01
sg224
(g225
tp16642
sg227
(dp16643
S'support_code_apply'
p16644
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16645
ssg231
(dp16646
I0
(lp16647
I0
assg234
(lp16648
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16649
asbsbsg177
g0
(g178
g2
Ntp16650
Rp16651
(dp16652
g182
(I01
tp16653
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp16654
Rp16655
(dp16656
g11
S'auto_1525'
p16657
sg13
I0
sg14
g0
(g15
g2
Ntp16658
Rp16659
(dp16660
g19
(lp16661
(lp16662
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16663
tp16664
a(g22
I72
g26
S'exec code in run_globals'
p16665
tp16666
a(g29
I249
g30
S'Model(hyperparams).train()'
p16667
tp16668
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16669
tp16670
a(g37
I83
g38
S'learning_rate=LR).items())'
p16671
tp16672
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16673
tp16674
aasbsg52
Nsg53
g0
(g54
g2
Ntp16675
Rp16676
(dp16677
g58
(lp16678
g16154
ag0
(g7
g2
Ntp16679
Rp16680
(dp16681
g11
S'auto_1524'
p16682
sg13
I0
sg14
g0
(g15
g2
Ntp16683
Rp16684
(dp16685
g19
(lp16686
(lp16687
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16688
tp16689
a(g22
I72
g26
S'exec code in run_globals'
p16690
tp16691
a(g29
I249
g30
S'Model(hyperparams).train()'
p16692
tp16693
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16694
tp16695
a(g37
I83
g38
S'learning_rate=LR).items())'
p16696
tp16697
a(g7508
I623
g7509
S'v_t = beta2*v_prev + (one-beta2)*g_t**2'
p16698
tp16699
aasbsg52
Nsg53
g0
(g54
g2
Ntp16700
Rp16701
(dp16702
g58
(lp16703
g10758
asg14
g0
(g15
g2
Ntp16704
Rp16705
sg204
(lp16706
g16680
asg206
g0
(g207
g2
Ntp16707
Rp16708
(dp16709
g211
(lp16710
sg213
(lp16711
sg215
(lp16712
I0
asg217
g218
sg219
(tsg220
(lp16713
g222
asg223
I01
sg224
(g225
tp16714
sg227
(dp16715
S'support_code_apply'
p16716
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16717
ssg231
(dp16718
I0
(lp16719
I0
assg234
(lp16720
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16721
asbsbsg177
g0
(g178
g2
Ntp16722
Rp16723
(dp16724
g182
(I01
tp16725
sg183
g10785
sg185
g7718
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16726
Rp16727
sg204
(lp16728
g16655
asg206
g7850
sbsg177
g0
(g178
g2
Ntp16729
Rp16730
(dp16731
g182
(I00
tp16732
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16733
Rp16734
sg204
(lp16735
g16552
asg206
g1220
sbsg177
g0
(g178
g2
Ntp16736
Rp16737
(dp16738
g182
(I00
tp16739
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16740
Rp16741
sg204
(lp16742
g16412
asg206
g1153
sbsg177
g0
(g178
g2
Ntp16743
Rp16744
(dp16745
g182
(I00
tp16746
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16747
Rp16748
sg204
(lp16749
g16387
asg206
g7880
sbsg177
g0
(g178
g2
Ntp16750
Rp16751
(dp16752
g182
(I00
tp16753
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp16754
Rp16755
(dp16756
g11
S'auto_1531'
p16757
sg13
I0
sg14
g0
(g15
g2
Ntp16758
Rp16759
(dp16760
g19
(lp16761
(lp16762
(g22
I174
g23
S'"__main__", fname, loader, pkg_name)'
p16763
tp16764
a(g22
I72
g26
S'exec code in run_globals'
p16765
tp16766
a(g29
I249
g30
S'Model(hyperparams).train()'
p16767
tp16768
a(g33
I70
g34
S'result = make_model(hyperparams, INPUT_DIMS, OUTPUT_DIMS)'
p16769
tp16770
a(g37
I83
g38
S'learning_rate=LR).items())'
p16771
tp16772
a(g7508
I624
g7509
S'step = a_t*m_t/(T.sqrt(v_t) + epsilon)'
p16773
tp16774
aasbsg52
Nsg53
g0
(g54
g2
Ntp16775
Rp16776
(dp16777
g58
(lp16778
g11505
asg14
g0
(g15
g2
Ntp16779
Rp16780
sg204
(lp16781
g16755
asg206
g0
(g207
g2
Ntp16782
Rp16783
(dp16784
g211
(lp16785
sg213
(lp16786
sg215
(lp16787
I0
asg217
g218
sg219
(tsg220
(lp16788
g222
asg223
I01
sg224
(g225
tp16789
sg227
(dp16790
S'support_code_apply'
p16791
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16792
ssg231
(dp16793
I0
(lp16794
I0
assg234
(lp16795
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p16796
asbsbsg177
g0
(g178
g2
Ntp16797
Rp16798
(dp16799
g182
(I01
tp16800
sg183
g11528
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16801
Rp16802
sg204
(lp16803
g16362
asg206
g1153
sbsg177
g0
(g178
g2
Ntp16804
Rp16805
(dp16806
g182
(I00
tp16807
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16808
Rp16809
sg204
(lp16810
g15814
asg206
g5326
sbsg177
g0
(g178
g2
Ntp16811
Rp16812
(dp16813
g182
(I00
tp16814
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp16815
Rp16816
sg204
(lp16817
g15789
asg206
g5417
sbsg177
g0
(g178
g2
Ntp16818
Rp16819
(dp16820
g182
(I00
tp16821
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbsg1834
g1778
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g1753
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16822
Rp16823
(dp16824
g52
Nsg1833
g8026
sg1834
g8144
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g8123
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16825
Rp16826
(dp16827
g52
Nsg1833
g11137
sg1834
g11255
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g11234
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16828
Rp16829
(dp16830
g52
Nsg1833
g7782
sg1834
g7828
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g7807
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16831
Rp16832
(dp16833
g52
Nsg1833
g14225
sg1834
g14343
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g14322
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16834
Rp16835
(dp16836
g52
Nsg1833
g15253
sg1834
g15371
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g15350
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16837
Rp16838
(dp16839
g52
Nsg1833
g12123
sg1834
g12241
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g12220
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16840
Rp16841
(dp16842
g52
Nsg1833
g13512
sg1834
g13630
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g13609
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16843
Rp16844
(dp16845
g52
Nsg1833
g11944
sg1834
g11990
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g11969
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16846
Rp16847
(dp16848
g52
Nsg1833
g15911
sg1834
g16029
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g16008
sg1839
I01
sg492
Nsbag0
(g1829
g2
Ntp16849
Rp16850
(dp16851
g52
Nsg1833
g16412
sg1834
g16530
sg1835
I01
sg485
I00
sg1836
I01
sg1837
I01
sg1838
g16509
sg1839
I01
sg492
Nsbasg1879
(lp16852
I01
aI01
aI01
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
asg1881
I01
sg1882
Nsg1883
g0
(g1884
g2
Ntp16853
Rp16854
(dp16855
g1827
Nsg58
(lp16856
g0
(g7
g2
Ntp16857
Rp16858
(dp16859
g13
Nsg52
g58
sg1883
g16854
sg1892
(lp16860
(g0
(g54
g2
Ntp16861
Rp16862
(dp16863
g58
(lp16864
g16858
asg1883
g16854
sg204
(lp16865
g0
(g7
g2
Ntp16866
Rp16867
(dp16868
g13
I0
sg52
g8329
sg1883
g16854
sg1892
(lp16869
(g0
(g54
g2
Ntp16870
Rp16871
(dp16872
g58
(lp16873
g16867
ag0
(g7
g2
Ntp16874
Rp16875
(dp16876
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp16877
(g16871
I1
tp16878
a(g0
(g54
g2
Ntp16879
Rp16880
(dp16881
g58
(lp16882
g16875
asg1883
g16854
sg204
(lp16883
g0
(g7
g2
Ntp16884
Rp16885
(dp16886
g13
I0
sg52
g12391
sg1883
g16854
sg1892
(lp16887
(g0
(g54
g2
Ntp16888
Rp16889
(dp16890
g58
(lp16891
g0
(g149
g2
Ntp16892
Rp16893
(dp16894
g13
Nsg52
Nsg1883
g16854
sg177
g13605
sg1892
(lp16895
(g16889
I0
tp16896
a(g0
(g54
g2
Ntp16897
Rp16898
(dp16899
g58
(lp16900
g0
(g7
g2
Ntp16901
Rp16902
(dp16903
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp16904
(g16898
I0
tp16905
asg11
S'auto_1860'
p16906
sg14
g0
(g15
g2
Ntp16907
Rp16908
(dp16909
g19
(lp16910
sbsg53
g0
(g54
g2
Ntp16911
Rp16912
(dp16913
g58
(lp16914
g0
(g7
g2
Ntp16915
Rp16916
(dp16917
g13
Nsg52
g7284
sg1883
g16854
sg1892
(lp16918
(g16912
I0
tp16919
a(g0
(g54
g2
Ntp16920
Rp16921
(dp16922
g58
(lp16923
g16916
asg1883
g16854
sg204
(lp16924
g0
(g7
g2
Ntp16925
Rp16926
(dp16927
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp16928
(g0
(g54
g2
Ntp16929
Rp16930
(dp16931
g58
(lp16932
g0
(g441
g2
Ntp16933
Rp16934
(dp16935
g13
Nsg472
g475
sg52
g493
sg1883
g16854
sg1892
(lp16936
(g0
(g54
g2
Ntp16937
Rp16938
(dp16939
g58
(lp16940
g16934
ag0
(g149
g2
Ntp16941
Rp16942
(dp16943
g13
Nsg52
Nsg1883
g16854
sg177
g9717
sg1892
(lp16944
(g0
(g54
g2
Ntp16945
Rp16946
(dp16947
g58
(lp16948
g0
(g441
g2
Ntp16949
Rp16950
(dp16951
g13
Nsg472
g1353
sg52
g493
sg1883
g16854
sg1892
(lp16952
(g16946
I0
tp16953
a(g0
(g54
g2
Ntp16954
Rp16955
(dp16956
g58
(lp16957
g16950
ag0
(g149
g2
Ntp16958
Rp16959
(dp16960
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp16961
Rp16962
(dp16963
g182
(I01
I01
tp16964
sg183
S'float32'
p16965
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp16966
(g16955
I1
tp16967
asg11
S'auto_4379'
p16968
sg14
g0
(g15
g2
Ntp16969
Rp16970
(dp16971
g19
(lp16972
sg175
g2038
(g189
S'\xb8\xc2\xe0\xc0'
p16973
tp16974
Rp16975
sbsg193
g194
(g195
(I0
tp16976
g197
tp16977
Rp16978
(I1
(I1
I1
tp16979
g189
I00
S'\xb8\xc2\xe0\xc0'
p16980
tp16981
bsbag16926
ag0
(g7
g2
Ntp16982
Rp16983
(dp16984
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp16985
(g16930
I3
tp16986
a(g16955
I3
tp16987
asg11
S'auto_5915'
p16988
sg14
g0
(g15
g2
Ntp16989
Rp16990
(dp16991
g19
(lp16992
sbsg53
g0
(g54
g2
Ntp16993
Rp16994
(dp16995
g58
(lp16996
g0
(g149
g2
Ntp16997
Rp16998
(dp16999
g13
Nsg52
Nsg1883
g16854
sg177
g9993
sg1892
(lp17000
(g0
(g54
g2
Ntp17001
Rp17002
(dp17003
g58
(lp17004
g0
(g149
g2
Ntp17005
Rp17006
(dp17007
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp17008
Rp17009
(dp17010
g182
(I01
I01
tp17011
sg183
S'float32'
p17012
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp17013
(g17002
I0
tp17014
asg11
S'auto_4363'
p17015
sg14
g0
(g15
g2
Ntp17016
Rp17017
(dp17018
g19
(lp17019
sg175
g2038
(g189
S'\x00\x00\x00\xc0'
p17020
tp17021
Rp17022
sbsg193
g194
(g195
(I0
tp17023
g197
tp17024
Rp17025
(I1
(I1
I1
tp17026
g189
I00
S'\x00\x00\x00\xc0'
p17027
tp17028
bsbag16998
ag0
(g7
g2
Ntp17029
Rp17030
(dp17031
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17032
(g17002
I2
tp17033
a(g0
(g54
g2
Ntp17034
Rp17035
(dp17036
g58
(lp17037
g17030
asg1883
g16854
sg204
(lp17038
g0
(g7
g2
Ntp17039
Rp17040
(dp17041
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17042
(g0
(g54
g2
Ntp17043
Rp17044
(dp17045
g58
(lp17046
g17040
asg1883
g16854
sg204
(lp17047
g0
(g7
g2
Ntp17048
Rp17049
(dp17050
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17051
(g0
(g54
g2
Ntp17052
Rp17053
(dp17054
g58
(lp17055
g17049
ag0
(g7
g2
Ntp17056
Rp17057
(dp17058
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17059
(g0
(g54
g2
Ntp17060
Rp17061
(dp17062
g58
(lp17063
g17057
asg1883
g16854
sg204
(lp17064
g0
(g7
g2
Ntp17065
Rp17066
(dp17067
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17068
(g0
(g54
g2
Ntp17069
Rp17070
(dp17071
g58
(lp17072
g0
(g7
g2
Ntp17073
Rp17074
(dp17075
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17076
(g17070
I0
tp17077
asg11
S'auto_4345'
p17078
sg14
g0
(g15
g2
Ntp17079
Rp17080
(dp17081
g19
(lp17082
sbsg53
g0
(g54
g2
Ntp17083
Rp17084
(dp17085
g58
(lp17086
g0
(g7
g2
Ntp17087
Rp17088
(dp17089
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17090
(g17084
I0
tp17091
a(g17053
I2
tp17092
asg11
S'auto_1596'
p17093
sg14
g0
(g15
g2
Ntp17094
Rp17095
(dp17096
g19
g10569
sbsg53
g0
(g54
g2
Ntp17097
Rp17098
(dp17099
g58
(lp17100
g0
(g7
g2
Ntp17101
Rp17102
(dp17103
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17104
(g17098
I0
tp17105
a(g0
(g54
g2
Ntp17106
Rp17107
(dp17108
g58
(lp17109
g17102
ag0
(g2920
g2
Ntp17110
Rp17111
(dp17112
g13
Nsg52
Nsg1883
g16854
sg177
g2925
sg1892
(lp17113
(g17107
I1
tp17114
asg11
S'auto_1597'
p17115
sg14
g0
(g15
g2
Ntp17116
Rp17117
(dp17118
g19
g10531
sbsg193
g2038
(g2899
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p17119
tp17120
Rp17121
sbasg1883
g16854
sg204
(lp17122
g17057
asg14
g0
(g15
g2
Ntp17123
Rp17124
(dp17125
g2143
(lp17126
g2146
ag2146
asbsg2147
(dp17127
sg206
g10550
sbI0
tp17128
asg11
S'auto_1594'
p17129
sg14
g0
(g15
g2
Ntp17130
Rp17131
(dp17132
g19
g10475
sbsg53
g0
(g54
g2
Ntp17133
Rp17134
(dp17135
g58
(lp17136
g0
(g7
g2
Ntp17137
Rp17138
(dp17139
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17140
(g17134
I0
tp17141
asg11
S'auto_2077'
p17142
sg14
g0
(g15
g2
Ntp17143
Rp17144
(dp17145
g19
(lp17146
g10499
asbsg53
g0
(g54
g2
Ntp17147
Rp17148
(dp17149
g58
(lp17150
g0
(g7
g2
Ntp17151
Rp17152
(dp17153
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17154
(g17148
I0
tp17155
asg11
S'auto_1798'
p17156
sg14
g0
(g15
g2
Ntp17157
Rp17158
(dp17159
g19
(lp17160
sbsg53
g0
(g54
g2
Ntp17161
Rp17162
(dp17163
g58
(lp17164
g0
(g7
g2
Ntp17165
Rp17166
(dp17167
g13
Nsg52
g1843
sg1883
g16854
sg1892
(lp17168
(g0
(g54
g2
Ntp17169
Rp17170
(dp17171
g58
(lp17172
g17166
asg1883
g16854
sg204
(lp17173
g0
(g7
g2
Ntp17174
Rp17175
(dp17176
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17177
(g17148
I1
tp17178
asg11
S'auto_1799'
p17179
sg14
g0
(g15
g2
Ntp17180
Rp17181
(dp17182
g19
(lp17183
sbsg53
g17170
sg177
g2894
sbasg14
g0
(g15
g2
Ntp17184
Rp17185
(dp17186
g2143
(lp17187
g2886
ag2146
asbsg2147
(dp17188
sg206
g0
(g2888
g2
Ntp17189
Rp17190
(dp17191
g2892
I1
sbsbI0
tp17192
a(g17162
I0
tp17193
a(g17002
I4
tp17194
a(g0
(g54
g2
Ntp17195
Rp17196
(dp17197
g58
(lp17198
g0
(g149
g2
Ntp17199
Rp17200
(dp17201
g13
Nsg52
Nsg1883
g16854
sg177
g9884
sg1892
(lp17202
(g17002
I3
tp17203
a(g16946
I2
tp17204
a(g16938
I2
tp17205
a(g17196
I0
tp17206
asg11
S'auto_4077'
p17207
sg14
g0
(g15
g2
Ntp17208
Rp17209
(dp17210
g19
(lp17211
g9844
asg175
g2038
(g189
S'\x00\x00\x00\x00'
p17212
tp17213
Rp17214
sbsg193
g194
(g195
(I0
tp17215
g197
tp17216
Rp17217
(I1
(I1
I1
tp17218
g189
I00
S'\x00\x00\x00\x00'
p17219
tp17220
bsbag16998
ag17166
ag0
(g7
g2
Ntp17221
Rp17222
(dp17223
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17224
(g17196
I3
tp17225
asg11
S'auto_4483'
p17226
sg14
g0
(g15
g2
Ntp17227
Rp17228
(dp17229
g19
(lp17230
g8836
asbsg53
g0
(g54
g2
Ntp17231
Rp17232
(dp17233
g58
(lp17234
g0
(g7
g2
Ntp17235
Rp17236
(dp17237
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17238
(g17232
I0
tp17239
a(g0
(g54
g2
Ntp17240
Rp17241
(dp17242
g58
(lp17243
g17236
asg1883
g16854
sg204
(lp17244
g0
(g7
g2
Ntp17245
Rp17246
(dp17247
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17248
(g0
(g54
g2
Ntp17249
Rp17250
(dp17251
g58
(lp17252
g17246
ag0
(g7
g2
Ntp17253
Rp17254
(dp17255
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17256
(g0
(g54
g2
Ntp17257
Rp17258
(dp17259
g58
(lp17260
g17254
asg1883
g16854
sg204
(lp17261
g0
(g7
g2
Ntp17262
Rp17263
(dp17264
g13
I0
sg52
g16178
sg1883
g16854
sg1892
(lp17265
(g0
(g54
g2
Ntp17266
Rp17267
(dp17268
g58
(lp17269
g16893
ag0
(g441
g2
Ntp17270
Rp17271
(dp17272
g13
Nsg472
g16530
sg52
Nsg1883
g16854
sg1892
(lp17273
(g17267
I1
tp17274
asg11
S'auto_1551'
p17275
sg14
g0
(g15
g2
Ntp17276
Rp17277
(dp17278
g19
g16515
sbsg53
Nsg177
g16540
sbag0
(g149
g2
Ntp17279
Rp17280
(dp17281
g13
Nsg52
Nsg1883
g16854
sg177
g16651
sg1892
(lp17282
(g16889
I2
tp17283
a(g17267
I2
tp17284
asg11
S'auto_4172'
p17285
sg14
g0
(g15
g2
Ntp17286
Rp17287
(dp17288
g19
(lp17289
g16584
asg175
g2038
(g189
S'\x00\x12\x83:'
p17290
tp17291
Rp17292
sbsg193
g194
(g195
(I0
tp17293
g197
tp17294
Rp17295
(I1
(I1
tp17296
g189
I00
S'\x00\x12\x83:'
p17297
tp17298
bsbag17263
asg1883
g16854
sg204
(lp17299
g0
(g7
g2
Ntp17300
Rp17301
(dp17302
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17303
(g3082
I14
tp17304
a(g0
(g54
g2
Ntp17305
Rp17306
(dp17307
g58
(lp17308
g0
(g441
g2
Ntp17309
Rp17310
(dp17311
g13
Nsg472
g1778
sg52
g197
sg1883
g16854
sg1892
(lp17312
(g0
(g54
g2
Ntp17313
Rp17314
(dp17315
g58
(lp17316
g17310
asg1883
g16854
sg204
(lp17317
g0
(g7
g2
Ntp17318
Rp17319
(dp17320
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17321
(g17196
I4
tp17322
asg11
S'auto_1552'
p17323
sg14
g0
(g15
g2
Ntp17324
Rp17325
(dp17326
g19
g10025
sbsg53
g17314
sg177
g10066
sbasg14
g0
(g15
g2
Ntp17327
Rp17328
(dp17329
g2143
(lp17330
g2146
ag2146
asbsg2147
(dp17331
sg206
g10051
sbI0
tp17332
a(g17306
I0
tp17333
asg11
S'auto_1541'
p17334
sg14
g0
(g15
g2
Ntp17335
Rp17336
(dp17337
g19
g1759
sbsg53
Nsg177
g1788
sbag0
(g7
g2
Ntp17338
Rp17339
(dp17340
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17341
(g0
(g54
g2
Ntp17342
Rp17343
(dp17344
g58
(lp17345
g0
(g441
g2
Ntp17346
Rp17347
(dp17348
g13
Nsg472
g1113
sg52
g197
sg1883
g16854
sg1892
(lp17349
(g0
(g54
g2
Ntp17350
Rp17351
(dp17352
g58
(lp17353
g17347
asg1883
g16854
sg204
(lp17354
g0
(g7
g2
Ntp17355
Rp17356
(dp17357
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17358
(g0
(g54
g2
Ntp17359
Rp17360
(dp17361
g58
(lp17362
g0
(g7
g2
Ntp17363
Rp17364
(dp17365
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17366
(g17360
I0
tp17367
asg11
S'auto_4482'
p17368
sg14
g0
(g15
g2
Ntp17369
Rp17370
(dp17371
g19
(lp17372
g9003
asbsg53
g0
(g54
g2
Ntp17373
Rp17374
(dp17375
g58
(lp17376
g16858
ag0
(g7
g2
Ntp17377
Rp17378
(dp17379
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17380
(g17374
I1
tp17381
asg11
S'auto_6438'
p17382
sg14
g0
(g15
g2
Ntp17383
Rp17384
(dp17385
g19
(lp17386
sbsg53
g16938
sg177
g0
(g178
g2
Ntp17387
Rp17388
(dp17389
g182
(I00
I00
tp17390
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp17391
g17364
asg14
g0
(g15
g2
Ntp17392
Rp17393
(dp17394
g2143
(lp17395
g2145
ag2146
asbsg2147
(dp17396
sg206
g2151
sbsg177
g0
(g178
g2
Ntp17397
Rp17398
(dp17399
g182
(I00
I00
tp17400
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbag17356
asg1883
g16854
sg204
(lp17401
g0
(g7
g2
Ntp17402
Rp17403
(dp17404
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17405
(g0
(g54
g2
Ntp17406
Rp17407
(dp17408
g58
(lp17409
g0
(g149
g2
Ntp17410
Rp17411
(dp17412
g13
Nsg52
Nsg1883
g16854
sg177
g8934
sg1892
(lp17413
(g17407
I0
tp17414
asg11
S'auto_4097'
p17415
sg14
g0
(g15
g2
Ntp17416
Rp17417
(dp17418
g19
(lp17419
g8894
asg175
g2038
(g189
S'\x00\x00\x00?'
p17420
tp17421
Rp17422
sbsg193
g194
(g195
(I0
tp17423
g197
tp17424
Rp17425
(I1
(I1
I1
tp17426
g189
I00
S'\x00\x00\x00?'
p17427
tp17428
bsbag17403
asg1883
g16854
sg204
(lp17429
g17236
asg14
g0
(g15
g2
Ntp17430
Rp17431
(dp17432
g2188
g0
(g54
g2
Ntp17433
Rp17434
(dp17435
g58
(lp17436
g0
(g2193
g2
Ntp17437
Rp17438
(dp17439
g11
S'auto_7466'
p17440
sg13
Nsg14
g0
(g15
g2
Ntp17441
Rp17442
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17443
Rp17444
(dp17445
g11
S'auto_7467'
p17446
sg13
Nsg14
g0
(g15
g2
Ntp17447
Rp17448
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp17449
Rp17450
sg204
(lp17451
g0
(g2193
g2
Ntp17452
Rp17453
(dp17454
g11
S'auto_7468'
p17455
sg13
I0
sg14
g0
(g15
g2
Ntp17456
Rp17457
sg52
Nsg53
g17434
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp17458
Rp17459
(dp17460
g58
(lp17461
g0
(g2193
g2
Ntp17462
Rp17463
(dp17464
g11
S'auto_6346'
p17465
sg13
Nsg14
g0
(g15
g2
Ntp17466
Rp17467
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17468
Rp17469
(dp17470
g11
S'auto_6347'
p17471
sg13
Nsg14
g0
(g15
g2
Ntp17472
Rp17473
sg52
Nsg53
Nsg177
g2202
sbasg2248
I2
sg52
Nsg2249
(g2202
g2202
tp17474
sg204
(lp17475
g0
(g2193
g2
Ntp17476
Rp17477
(dp17478
g11
S'auto_6351'
p17479
sg13
I0
sg14
g0
(g15
g2
Ntp17480
Rp17481
(dp17482
g19
(lp17483
sbsg52
Nsg53
g0
(g54
g2
Ntp17484
Rp17485
(dp17486
g58
(lp17487
g17463
ag0
(g2193
g2
Ntp17488
Rp17489
(dp17490
g11
S'auto_6350'
p17491
sg13
I0
sg14
g0
(g15
g2
Ntp17492
Rp17493
(dp17494
g19
(lp17495
sbsg52
Nsg53
g0
(g54
g2
Ntp17496
Rp17497
(dp17498
g58
(lp17499
g17469
ag0
(g2193
g2
Ntp17500
Rp17501
(dp17502
g11
S'auto_6349'
p17503
sg13
I0
sg14
g0
(g15
g2
Ntp17504
Rp17505
(dp17506
g19
(lp17507
sbsg52
Nsg53
g0
(g54
g2
Ntp17508
Rp17509
(dp17510
g58
(lp17511
g17469
asg14
g0
(g15
g2
Ntp17512
Rp17513
sg204
(lp17514
g17501
asg206
g506
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp17515
Rp17516
sg204
(lp17517
g17489
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp17518
Rp17519
sg204
(lp17520
g17477
asg206
g1224
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = fabs(%(i1)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s + V%(id)s_tmp1;\n%(o0)s = %(i0)s * V%(id)s_tmp2;\n}\n'
p17521
sg2314
(g2202
tp17522
sg2322
(lp17523
S'%(nodename)s_subnode0'
p17524
aS'%(nodename)s_subnode1'
p17525
aS'%(nodename)s_subnode2'
p17526
asg2328
I1
sbsbsg4120
(lp17527
g2330
asg2143
(lp17528
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p17529
ag2146
asbsg2147
(dp17530
sg206
g0
(g497
g2
Ntp17531
Rp17532
(dp17533
g52
Nsg503
g17459
sg511
(dp17534
sg513
Nsg516
g0
(g517
g2
Ntp17535
Rp17536
(dp17537
g521
I0
sg522
(dp17538
sbsg524
I00
sbsbI1
tp17539
a(g0
(g54
g2
Ntp17540
Rp17541
(dp17542
g58
(lp17543
g0
(g7
g2
Ntp17544
Rp17545
(dp17546
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17547
(g17541
I0
tp17548
a(g17541
I1
tp17549
asg11
S'auto_4593'
p17550
sg14
g0
(g15
g2
Ntp17551
Rp17552
(dp17553
g19
(lp17554
sbsg53
g0
(g54
g2
Ntp17555
Rp17556
(dp17557
g58
(lp17558
g17254
ag0
(g7
g2
Ntp17559
Rp17560
(dp17561
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17562
(g17556
I1
tp17563
asg11
S'auto_1609'
p17564
sg14
g0
(g15
g2
Ntp17565
Rp17566
(dp17567
g19
g10888
sbsg53
g0
(g54
g2
Ntp17568
Rp17569
(dp17570
g58
(lp17571
g0
(g7
g2
Ntp17572
Rp17573
(dp17574
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17575
(g17232
I1
tp17576
a(g17569
I0
tp17577
asg11
S'auto_6520'
p17578
sg14
g0
(g15
g2
Ntp17579
Rp17580
(dp17581
g19
(lp17582
sbsg53
g16946
sg177
g0
(g178
g2
Ntp17583
Rp17584
(dp17585
g182
(I00
I00
tp17586
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp17587
g17560
asg14
g0
(g15
g2
Ntp17588
Rp17589
(dp17590
g2143
(lp17591
g2146
ag2146
asbsg2147
(dp17592
sg206
g10914
sbsg177
g10929
sbag0
(g149
g2
Ntp17593
Rp17594
(dp17595
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp17596
Rp17597
(dp17598
g182
(tsg183
g184
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp17599
(g17556
I2
tp17600
asg11
S'auto_4643'
p17601
sg14
g0
(g15
g2
Ntp17602
Rp17603
(dp17604
g19
(lp17605
sg175
Nsbsg193
g194
(g195
(I0
tp17606
g197
tp17607
Rp17608
(I1
(tg189
I00
S'\x00\x00\x00?'
p17609
tp17610
bsbasg1883
g16854
sg204
(lp17611
g17545
asg14
g0
(g15
g2
Ntp17612
Rp17613
(dp17614
g2143
(lp17615
S'local_dot22_to_dot22scalar'
p17616
ag2146
asbsg2147
(dp17617
sg206
g0
(ctheano.tensor.blas
Dot22Scalar
p17618
g2
Ntp17619
Rp17620
sbsg177
g0
(g178
g2
Ntp17621
Rp17622
(dp17623
g182
(I00
I00
tp17624
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17545
ag17403
asg1883
g16854
sg204
(lp17625
g16875
asg14
g0
(g15
g2
Ntp17626
Rp17627
(dp17628
g2188
g0
(g54
g2
Ntp17629
Rp17630
(dp17631
g58
(lp17632
g0
(g2193
g2
Ntp17633
Rp17634
(dp17635
g11
S'auto_7633'
p17636
sg13
Nsg14
g0
(g15
g2
Ntp17637
Rp17638
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17639
Rp17640
(dp17641
g11
S'auto_7634'
p17642
sg13
Nsg14
g0
(g15
g2
Ntp17643
Rp17644
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17645
Rp17646
(dp17647
g11
S'auto_7635'
p17648
sg13
Nsg14
g0
(g15
g2
Ntp17649
Rp17650
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp17651
Rp17652
sg204
(lp17653
g0
(g2193
g2
Ntp17654
Rp17655
(dp17656
g11
S'auto_7636'
p17657
sg13
I0
sg14
g0
(g15
g2
Ntp17658
Rp17659
sg52
Nsg53
g17630
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp17660
Rp17661
(dp17662
g58
(lp17663
g0
(g2193
g2
Ntp17664
Rp17665
(dp17666
g11
S'auto_6799'
p17667
sg13
Nsg14
g0
(g15
g2
Ntp17668
Rp17669
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17670
Rp17671
(dp17672
g11
S'auto_6800'
p17673
sg13
Nsg14
g0
(g15
g2
Ntp17674
Rp17675
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17676
Rp17677
(dp17678
g11
S'auto_6801'
p17679
sg13
Nsg14
g0
(g15
g2
Ntp17680
Rp17681
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp17682
sg204
(lp17683
g0
(g2193
g2
Ntp17684
Rp17685
(dp17686
g11
S'auto_6804'
p17687
sg13
I0
sg14
g0
(g15
g2
Ntp17688
Rp17689
(dp17690
g19
(lp17691
sbsg52
Nsg53
g0
(g54
g2
Ntp17692
Rp17693
(dp17694
g58
(lp17695
g17665
ag0
(g2193
g2
Ntp17696
Rp17697
(dp17698
g11
S'auto_6803'
p17699
sg13
I0
sg14
g0
(g15
g2
Ntp17700
Rp17701
(dp17702
g19
(lp17703
sbsg52
Nsg53
g0
(g54
g2
Ntp17704
Rp17705
(dp17706
g58
(lp17707
g17671
ag0
(g2193
g2
Ntp17708
Rp17709
(dp17710
g11
S'auto_6802'
p17711
sg13
I0
sg14
g0
(g15
g2
Ntp17712
Rp17713
(dp17714
g19
(lp17715
sbsg52
Nsg53
g0
(g54
g2
Ntp17716
Rp17717
(dp17718
g58
(lp17719
g17677
asg14
g0
(g15
g2
Ntp17720
Rp17721
sg204
(lp17722
g17709
asg206
g11021
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp17723
Rp17724
sg204
(lp17725
g17697
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp17726
Rp17727
sg204
(lp17728
g17685
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i2)s > 0) ? 1. : ((%(i2)s < 0) ? -1. : (isnan(%(i2)s) ? NAN : 0.));\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s * V%(id)s_tmp1;\n%(o0)s = %(i0)s + V%(id)s_tmp2;\n}\n'
p17729
sg2314
(g2202
tp17730
sg508
g0
(g2316
g2
Ntp17731
Rp17732
(dp17733
g2320
(I2
tp17734
sbsg2322
(lp17735
S'%(nodename)s_subnode0'
p17736
aS'%(nodename)s_subnode1'
p17737
aS'%(nodename)s_subnode2'
p17738
asg2328
I1
sbsbsg2143
(lp17739
g2330
ag2146
asbsg2147
(dp17740
sg206
g0
(g497
g2
Ntp17741
Rp17742
(dp17743
g52
Nsg503
g17661
sg511
(dp17744
I0
(lp17745
I2
assg513
Nsg516
g0
(g517
g2
Ntp17746
Rp17747
(dp17748
g521
I3713080549410493181
sg522
(dp17749
I0
I2
ssbsg524
I00
sbsbI2
tp17750
asg11
S'auto_6699'
p17751
sg14
g0
(g15
g2
Ntp17752
Rp17753
(dp17754
g19
(lp17755
sbsg53
g17360
sg177
g0
(g178
g2
Ntp17756
Rp17757
(dp17758
g182
(I00
I00
tp17759
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp17760
Rp17761
(dp17762
g2188
g0
(g54
g2
Ntp17763
Rp17764
(dp17765
g58
(lp17766
g0
(g2193
g2
Ntp17767
Rp17768
(dp17769
g11
S'auto_7392'
p17770
sg13
Nsg14
g0
(g15
g2
Ntp17771
Rp17772
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17773
Rp17774
(dp17775
g11
S'auto_7393'
p17776
sg13
Nsg14
g0
(g15
g2
Ntp17777
Rp17778
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp17779
Rp17780
sg204
(lp17781
g0
(g2193
g2
Ntp17782
Rp17783
(dp17784
g11
S'auto_7394'
p17785
sg13
I0
sg14
g0
(g15
g2
Ntp17786
Rp17787
sg52
Nsg53
g17764
sg177
g2202
sbasg206
g0
(g1155
g2
Ntp17788
Rp17789
(dp17790
g508
g0
(g2316
g2
Ntp17791
Rp17792
(dp17793
g2320
(I0
tp17794
sbsg52
Nsbsbsg2143
(lp17795
g2330
ag2146
asbsg2147
(dp17796
sg206
g0
(g497
g2
Ntp17797
Rp17798
(dp17799
g52
Nsg503
g17789
sg511
(dp17800
I0
(lp17801
I0
assg513
g1163
sg516
g0
(g517
g2
Ntp17802
Rp17803
(dp17804
g521
I3713080549408328131
sg522
(dp17805
I0
I0
ssbsg524
I00
sbsbI1
tp17806
asg11
S'auto_1567'
p17807
sg14
g0
(g15
g2
Ntp17808
Rp17809
(dp17810
g19
g9474
sbsg53
g17351
sg177
g9515
sbasg14
g0
(g15
g2
Ntp17811
Rp17812
(dp17813
g2143
(lp17814
g2146
ag2146
asbsg2147
(dp17815
sg206
g9500
sbI0
tp17816
a(g17343
I0
tp17817
asg11
S'auto_1539'
p17818
sg14
g0
(g15
g2
Ntp17819
Rp17820
(dp17821
g19
g1094
sbsg53
Nsg177
g1123
sbag17339
ag0
(g7
g2
Ntp17822
Rp17823
(dp17824
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17825
(g3082
I10
tp17826
a(g17343
I2
tp17827
asg11
S'auto_6976'
p17828
sg14
g0
(g15
g2
Ntp17829
Rp17830
(dp17831
g19
(lp17832
sbsg53
g0
(g54
g2
Ntp17833
Rp17834
(dp17835
g58
(lp17836
g0
(g149
g2
Ntp17837
Rp17838
(dp17839
g13
Nsg52
Nsg1883
g16854
sg177
g12216
sg1892
(lp17840
(g17834
I0
tp17841
a(g16898
I4
tp17842
a(g0
(g54
g2
Ntp17843
Rp17844
(dp17845
g58
(lp17846
g17838
ag0
(g441
g2
Ntp17847
Rp17848
(dp17849
g13
Nsg472
g16029
sg52
Nsg1883
g16854
sg1892
(lp17850
(g17844
I1
tp17851
asg11
S'auto_1550'
p17852
sg14
g0
(g15
g2
Ntp17853
Rp17854
(dp17855
g19
g16014
sbsg53
Nsg177
g16039
sbag0
(g149
g2
Ntp17856
Rp17857
(dp17858
g13
Nsg52
Nsg1883
g16854
sg177
g16150
sg1892
(lp17859
(g17834
I2
tp17860
a(g17844
I2
tp17861
asg11
S'auto_4196'
p17862
sg14
g0
(g15
g2
Ntp17863
Rp17864
(dp17865
g19
(lp17866
g16083
asg175
g2038
(g189
S'\xd0\xcc\xcc='
p17867
tp17868
Rp17869
sbsg193
g194
(g195
(I0
tp17870
g197
tp17871
Rp17872
(I1
(I1
tp17873
g189
I00
S'\xd0\xcc\xcc='
p17874
tp17875
bsbag17263
asg1883
g16854
sg204
(lp17876
g0
(g7
g2
Ntp17877
Rp17878
(dp17879
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp17880
(g3082
I13
tp17881
a(g17306
I2
tp17882
asg11
S'auto_7194'
p17883
sg14
g0
(g15
g2
Ntp17884
Rp17885
(dp17886
g19
(lp17887
sbsg53
g17844
sg177
g0
(g178
g2
Ntp17888
Rp17889
(dp17890
g182
(I00
tp17891
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp17892
Rp17893
(dp17894
g2188
g0
(g54
g2
Ntp17895
Rp17896
(dp17897
g58
(lp17898
g0
(g2193
g2
Ntp17899
Rp17900
(dp17901
g11
S'auto_7613'
p17902
sg13
Nsg14
g0
(g15
g2
Ntp17903
Rp17904
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17905
Rp17906
(dp17907
g11
S'auto_7614'
p17908
sg13
Nsg14
g0
(g15
g2
Ntp17909
Rp17910
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17911
Rp17912
(dp17913
g11
S'auto_7615'
p17914
sg13
Nsg14
g0
(g15
g2
Ntp17915
Rp17916
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17917
Rp17918
(dp17919
g11
S'auto_7616'
p17920
sg13
Nsg14
g0
(g15
g2
Ntp17921
Rp17922
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp17923
Rp17924
sg204
(lp17925
g0
(g2193
g2
Ntp17926
Rp17927
(dp17928
g11
S'auto_7617'
p17929
sg13
I0
sg14
g0
(g15
g2
Ntp17930
Rp17931
sg52
Nsg53
g17896
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp17932
Rp17933
(dp17934
g58
(lp17935
g0
(g2193
g2
Ntp17936
Rp17937
(dp17938
g11
S'auto_7175'
p17939
sg13
Nsg14
g0
(g15
g2
Ntp17940
Rp17941
(dp17942
g2511
g2038
(g189
S'fff?'
p17943
tp17944
Rp17945
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17946
Rp17947
(dp17948
g11
S'auto_7176'
p17949
sg13
Nsg14
g0
(g15
g2
Ntp17950
Rp17951
(dp17952
g2511
g2038
(g189
S'\x00\x00\x00\x00'
p17953
tp17954
Rp17955
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17956
Rp17957
(dp17958
g11
S'auto_7177'
p17959
sg13
Nsg14
g0
(g15
g2
Ntp17960
Rp17961
(dp17962
g2511
g2038
(g189
S'\xd0\xcc\xcc='
p17963
tp17964
Rp17965
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp17966
Rp17967
(dp17968
g11
S'auto_7178'
p17969
sg13
Nsg14
g0
(g15
g2
Ntp17970
Rp17971
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp17972
sg204
(lp17973
g0
(g2193
g2
Ntp17974
Rp17975
(dp17976
g11
S'auto_7181'
p17977
sg13
I0
sg14
g0
(g15
g2
Ntp17978
Rp17979
(dp17980
g19
(lp17981
sbsg52
Nsg53
g0
(g54
g2
Ntp17982
Rp17983
(dp17984
g58
(lp17985
g0
(g2193
g2
Ntp17986
Rp17987
(dp17988
g11
S'auto_7180'
p17989
sg13
I0
sg14
g0
(g15
g2
Ntp17990
Rp17991
(dp17992
g19
(lp17993
sbsg52
Nsg53
g0
(g54
g2
Ntp17994
Rp17995
(dp17996
g58
(lp17997
g17937
ag17947
asg14
g0
(g15
g2
Ntp17998
Rp17999
sg204
(lp18000
g17987
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp18001
Rp18002
(dp18003
g11
S'auto_7179'
p18004
sg13
I0
sg14
g0
(g15
g2
Ntp18005
Rp18006
(dp18007
g19
(lp18008
sbsg52
Nsg53
g0
(g54
g2
Ntp18009
Rp18010
(dp18011
g58
(lp18012
g17957
ag17967
asg14
g0
(g15
g2
Ntp18013
Rp18014
sg204
(lp18015
g18002
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18016
Rp18017
sg204
(lp18018
g17975
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i2)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp2 + V%(id)s_tmp1;\n}\n'
p18019
sg2314
(g2202
tp18020
sg508
g0
(g2316
g2
Ntp18021
Rp18022
(dp18023
g2320
(I1
tp18024
sbsg2322
(lp18025
S'%(nodename)s_subnode0'
p18026
aS'%(nodename)s_subnode1'
p18027
aS'%(nodename)s_subnode2'
p18028
asg2328
I1
sbsbsg2143
(lp18029
g2330
ag2146
asbsg2147
(dp18030
sg206
g0
(g497
g2
Ntp18031
Rp18032
(dp18033
g52
Nsg503
g17933
sg511
(dp18034
I0
(lp18035
I1
assg513
Nsg516
g0
(g517
g2
Ntp18036
Rp18037
(dp18038
g521
I3713080549409410656
sg522
(dp18039
I0
I1
ssbsg524
I00
sbsbI0
tp18040
asg11
S'auto_4204'
p18041
sg14
g0
(g15
g2
Ntp18042
Rp18043
(dp18044
g19
(lp18045
g12180
asg175
g2038
(g189
S'fff?'
p18046
tp18047
Rp18048
sbsg193
g194
(g195
(I0
tp18049
g197
tp18050
Rp18051
(I1
(I1
tp18052
g189
I00
S'fff?'
p18053
tp18054
bsbag0
(g441
g2
Ntp18055
Rp18056
(dp18057
g13
Nsg472
g12241
sg52
Nsg1883
g16854
sg1892
(lp18058
(g17834
I1
tp18059
asg11
S'auto_1547'
p18060
sg14
g0
(g15
g2
Ntp18061
Rp18062
(dp18063
g19
g12226
sbsg53
Nsg177
g12251
sbag17857
ag16885
asg1883
g16854
sg204
(lp18064
g17823
asg14
g0
(g15
g2
Ntp18065
Rp18066
(dp18067
g2188
g0
(g54
g2
Ntp18068
Rp18069
(dp18070
g58
(lp18071
g0
(g2193
g2
Ntp18072
Rp18073
(dp18074
g11
S'auto_7800'
p18075
sg13
Nsg14
g0
(g15
g2
Ntp18076
Rp18077
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18078
Rp18079
(dp18080
g11
S'auto_7801'
p18081
sg13
Nsg14
g0
(g15
g2
Ntp18082
Rp18083
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18084
Rp18085
(dp18086
g11
S'auto_7802'
p18087
sg13
Nsg14
g0
(g15
g2
Ntp18088
Rp18089
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18090
Rp18091
(dp18092
g11
S'auto_7803'
p18093
sg13
Nsg14
g0
(g15
g2
Ntp18094
Rp18095
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp18096
Rp18097
sg204
(lp18098
g0
(g2193
g2
Ntp18099
Rp18100
(dp18101
g11
S'auto_7804'
p18102
sg13
I0
sg14
g0
(g15
g2
Ntp18103
Rp18104
sg52
Nsg53
g18069
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp18105
Rp18106
(dp18107
g58
(lp18108
g0
(g2193
g2
Ntp18109
Rp18110
(dp18111
g11
S'auto_6957'
p18112
sg13
Nsg14
g0
(g15
g2
Ntp18113
Rp18114
(dp18115
g2511
g2038
(g189
S'fff?'
p18116
tp18117
Rp18118
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18119
Rp18120
(dp18121
g11
S'auto_6958'
p18122
sg13
Nsg14
g0
(g15
g2
Ntp18123
Rp18124
(dp18125
g2511
g2038
(g189
S'\x00\x00\x00\x00'
p18126
tp18127
Rp18128
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18129
Rp18130
(dp18131
g11
S'auto_6959'
p18132
sg13
Nsg14
g0
(g15
g2
Ntp18133
Rp18134
(dp18135
g2511
g2038
(g189
S'\xd0\xcc\xcc='
p18136
tp18137
Rp18138
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18139
Rp18140
(dp18141
g11
S'auto_6960'
p18142
sg13
Nsg14
g0
(g15
g2
Ntp18143
Rp18144
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp18145
sg204
(lp18146
g0
(g2193
g2
Ntp18147
Rp18148
(dp18149
g11
S'auto_6963'
p18150
sg13
I0
sg14
g0
(g15
g2
Ntp18151
Rp18152
(dp18153
g19
(lp18154
sbsg52
Nsg53
g0
(g54
g2
Ntp18155
Rp18156
(dp18157
g58
(lp18158
g0
(g2193
g2
Ntp18159
Rp18160
(dp18161
g11
S'auto_6962'
p18162
sg13
I0
sg14
g0
(g15
g2
Ntp18163
Rp18164
(dp18165
g19
(lp18166
sbsg52
Nsg53
g0
(g54
g2
Ntp18167
Rp18168
(dp18169
g58
(lp18170
g18110
ag18120
asg14
g0
(g15
g2
Ntp18171
Rp18172
sg204
(lp18173
g18160
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp18174
Rp18175
(dp18176
g11
S'auto_6961'
p18177
sg13
I0
sg14
g0
(g15
g2
Ntp18178
Rp18179
(dp18180
g19
(lp18181
sbsg52
Nsg53
g0
(g54
g2
Ntp18182
Rp18183
(dp18184
g58
(lp18185
g18130
ag18140
asg14
g0
(g15
g2
Ntp18186
Rp18187
sg204
(lp18188
g18175
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18189
Rp18190
sg204
(lp18191
g18148
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i2)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp2 + V%(id)s_tmp1;\n}\n'
p18192
sg2314
(g2202
tp18193
sg508
g0
(g2316
g2
Ntp18194
Rp18195
(dp18196
g2320
(I1
tp18197
sbsg2322
(lp18198
S'%(nodename)s_subnode0'
p18199
aS'%(nodename)s_subnode1'
p18200
aS'%(nodename)s_subnode2'
p18201
asg2328
I1
sbsbsg2143
(lp18202
g2330
ag2146
asbsg2147
(dp18203
sg206
g0
(g497
g2
Ntp18204
Rp18205
(dp18206
g52
Nsg503
g18106
sg511
(dp18207
I0
(lp18208
I1
assg513
Nsg516
g0
(g517
g2
Ntp18209
Rp18210
(dp18211
g521
I3713080549409410656
sg522
(dp18212
I0
I1
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp18213
Rp18214
(dp18215
g182
(I00
tp18216
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g149
g2
Ntp18217
Rp18218
(dp18219
g13
Nsg52
Nsg1883
g16854
sg177
g13898
sg1892
(lp18220
(g17343
I3
tp18221
a(g17306
I3
tp18222
asg11
S'auto_4188'
p18223
sg14
g0
(g15
g2
Ntp18224
Rp18225
(dp18226
g19
(lp18227
g13862
asg175
g2038
(g189
S'w\xcc+2'
p18228
tp18229
Rp18230
sbsg193
g194
(g195
(I0
tp18231
g197
tp18232
Rp18233
(I1
(I1
tp18234
g189
I00
S'w\xcc+2'
p18235
tp18236
bsbag0
(g7
g2
Ntp18237
Rp18238
(dp18239
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18240
(g3082
I11
tp18241
a(g17343
I4
tp18242
asg11
S'auto_6956'
p18243
sg14
g0
(g15
g2
Ntp18244
Rp18245
(dp18246
g19
(lp18247
sbsg53
g16889
sg177
g0
(g178
g2
Ntp18248
Rp18249
(dp18250
g182
(I00
tp18251
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp18252
g0
(g7
g2
Ntp18253
Rp18254
(dp18255
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18256
(g3082
I2
tp18257
asg11
S'auto_7069'
p18258
sg14
g0
(g15
g2
Ntp18259
Rp18260
(dp18261
g19
(lp18262
sbsg53
g17343
sg177
g0
(g178
g2
Ntp18263
Rp18264
(dp18265
g182
(I00
tp18266
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp18267
Rp18268
(dp18269
g2188
g0
(g54
g2
Ntp18270
Rp18271
(dp18272
g58
(lp18273
g0
(g2193
g2
Ntp18274
Rp18275
(dp18276
g11
S'auto_7856'
p18277
sg13
Nsg14
g0
(g15
g2
Ntp18278
Rp18279
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18280
Rp18281
(dp18282
g11
S'auto_7857'
p18283
sg13
Nsg14
g0
(g15
g2
Ntp18284
Rp18285
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18286
Rp18287
(dp18288
g11
S'auto_7858'
p18289
sg13
Nsg14
g0
(g15
g2
Ntp18290
Rp18291
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18292
Rp18293
(dp18294
g11
S'auto_7859'
p18295
sg13
Nsg14
g0
(g15
g2
Ntp18296
Rp18297
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18298
Rp18299
(dp18300
g11
S'auto_7860'
p18301
sg13
Nsg14
g0
(g15
g2
Ntp18302
Rp18303
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp18304
Rp18305
sg204
(lp18306
g0
(g2193
g2
Ntp18307
Rp18308
(dp18309
g11
S'auto_7861'
p18310
sg13
I0
sg14
g0
(g15
g2
Ntp18311
Rp18312
sg52
Nsg53
g18271
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp18313
Rp18314
(dp18315
g58
(lp18316
g0
(g2193
g2
Ntp18317
Rp18318
(dp18319
g11
S'auto_7043'
p18320
sg13
Nsg14
g0
(g15
g2
Ntp18321
Rp18322
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18323
Rp18324
(dp18325
g11
S'auto_7044'
p18326
sg13
Nsg14
g0
(g15
g2
Ntp18327
Rp18328
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18329
Rp18330
(dp18331
g11
S'auto_7045'
p18332
sg13
Nsg14
g0
(g15
g2
Ntp18333
Rp18334
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18335
Rp18336
(dp18337
g11
S'auto_7046'
p18338
sg13
Nsg14
g0
(g15
g2
Ntp18339
Rp18340
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18341
Rp18342
(dp18343
g11
S'auto_7047'
p18344
sg13
Nsg14
g0
(g15
g2
Ntp18345
Rp18346
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp18347
sg204
(lp18348
g0
(g2193
g2
Ntp18349
Rp18350
(dp18351
g11
S'auto_7052'
p18352
sg13
I0
sg14
g0
(g15
g2
Ntp18353
Rp18354
(dp18355
g19
(lp18356
sbsg52
Nsg53
g0
(g54
g2
Ntp18357
Rp18358
(dp18359
g58
(lp18360
g18318
ag0
(g2193
g2
Ntp18361
Rp18362
(dp18363
g11
S'auto_7051'
p18364
sg13
I0
sg14
g0
(g15
g2
Ntp18365
Rp18366
(dp18367
g19
(lp18368
sbsg52
Nsg53
g0
(g54
g2
Ntp18369
Rp18370
(dp18371
g58
(lp18372
g0
(g2193
g2
Ntp18373
Rp18374
(dp18375
g11
S'auto_7050'
p18376
sg13
I0
sg14
g0
(g15
g2
Ntp18377
Rp18378
(dp18379
g19
(lp18380
sbsg52
Nsg53
g0
(g54
g2
Ntp18381
Rp18382
(dp18383
g58
(lp18384
g18324
ag18330
asg14
g0
(g15
g2
Ntp18385
Rp18386
sg204
(lp18387
g18374
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp18388
Rp18389
(dp18390
g11
S'auto_7049'
p18391
sg13
I0
sg14
g0
(g15
g2
Ntp18392
Rp18393
(dp18394
g19
(lp18395
sbsg52
Nsg53
g0
(g54
g2
Ntp18396
Rp18397
(dp18398
g58
(lp18399
g18336
ag0
(g2193
g2
Ntp18400
Rp18401
(dp18402
g11
S'auto_7048'
p18403
sg13
I0
sg14
g0
(g15
g2
Ntp18404
Rp18405
(dp18406
g19
(lp18407
sbsg52
Nsg53
g0
(g54
g2
Ntp18408
Rp18409
(dp18410
g58
(lp18411
g18342
asg14
g0
(g15
g2
Ntp18412
Rp18413
sg204
(lp18414
g18401
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18415
Rp18416
sg204
(lp18417
g18389
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18418
Rp18419
sg204
(lp18420
g18362
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18421
Rp18422
sg204
(lp18423
g18350
asg206
g3526
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i4)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i3)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i1)s * %(i2)s;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = V%(id)s_tmp3 / V%(id)s_tmp2;\n%(o0)s = %(i0)s - V%(id)s_tmp4;\n}\n'
p18424
sg2314
(g2202
tp18425
sg508
g0
(g2316
g2
Ntp18426
Rp18427
(dp18428
g2320
(I0
tp18429
sbsg2322
(lp18430
S'%(nodename)s_subnode0'
p18431
aS'%(nodename)s_subnode1'
p18432
aS'%(nodename)s_subnode2'
p18433
aS'%(nodename)s_subnode3'
p18434
aS'%(nodename)s_subnode4'
p18435
asg2328
I1
sbsbsg2143
(lp18436
g2330
ag2146
asbsg2147
(dp18437
sg206
g0
(g497
g2
Ntp18438
Rp18439
(dp18440
g52
Nsg503
g18314
sg511
(dp18441
I0
(lp18442
I0
assg513
Nsg516
g0
(g517
g2
Ntp18443
Rp18444
(dp18445
g521
I3713080549408328131
sg522
(dp18446
I0
I0
ssbsg524
I00
sbsbI1
tp18447
a(g17306
I1
tp18448
asg11
S'auto_5485'
p18449
sg14
g0
(g15
g2
Ntp18450
Rp18451
(dp18452
g19
(lp18453
sbsg53
g16898
sg177
g0
(g178
g2
Ntp18454
Rp18455
(dp18456
g182
(I01
tp18457
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17878
ag18218
ag17301
asg1883
g16854
sg204
(lp18458
g0
(g7
g2
Ntp18459
Rp18460
(dp18461
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18462
(g3082
I4
tp18463
asg11
S'auto_7221'
p18464
sg14
g0
(g15
g2
Ntp18465
Rp18466
(dp18467
g19
(lp18468
sbsg53
g17306
sg177
g0
(g178
g2
Ntp18469
Rp18470
(dp18471
g182
(I00
tp18472
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp18473
Rp18474
(dp18475
g2188
g0
(g54
g2
Ntp18476
Rp18477
(dp18478
g58
(lp18479
g0
(g2193
g2
Ntp18480
Rp18481
(dp18482
g11
S'auto_7701'
p18483
sg13
Nsg14
g0
(g15
g2
Ntp18484
Rp18485
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18486
Rp18487
(dp18488
g11
S'auto_7702'
p18489
sg13
Nsg14
g0
(g15
g2
Ntp18490
Rp18491
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18492
Rp18493
(dp18494
g11
S'auto_7703'
p18495
sg13
Nsg14
g0
(g15
g2
Ntp18496
Rp18497
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18498
Rp18499
(dp18500
g11
S'auto_7704'
p18501
sg13
Nsg14
g0
(g15
g2
Ntp18502
Rp18503
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18504
Rp18505
(dp18506
g11
S'auto_7705'
p18507
sg13
Nsg14
g0
(g15
g2
Ntp18508
Rp18509
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp18510
Rp18511
sg204
(lp18512
g0
(g2193
g2
Ntp18513
Rp18514
(dp18515
g11
S'auto_7706'
p18516
sg13
I0
sg14
g0
(g15
g2
Ntp18517
Rp18518
sg52
Nsg53
g18477
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp18519
Rp18520
(dp18521
g58
(lp18522
g0
(g2193
g2
Ntp18523
Rp18524
(dp18525
g11
S'auto_7195'
p18526
sg13
Nsg14
g0
(g15
g2
Ntp18527
Rp18528
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18529
Rp18530
(dp18531
g11
S'auto_7196'
p18532
sg13
Nsg14
g0
(g15
g2
Ntp18533
Rp18534
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18535
Rp18536
(dp18537
g11
S'auto_7197'
p18538
sg13
Nsg14
g0
(g15
g2
Ntp18539
Rp18540
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18541
Rp18542
(dp18543
g11
S'auto_7198'
p18544
sg13
Nsg14
g0
(g15
g2
Ntp18545
Rp18546
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18547
Rp18548
(dp18549
g11
S'auto_7199'
p18550
sg13
Nsg14
g0
(g15
g2
Ntp18551
Rp18552
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp18553
sg204
(lp18554
g0
(g2193
g2
Ntp18555
Rp18556
(dp18557
g11
S'auto_7204'
p18558
sg13
I0
sg14
g0
(g15
g2
Ntp18559
Rp18560
(dp18561
g19
(lp18562
sbsg52
Nsg53
g0
(g54
g2
Ntp18563
Rp18564
(dp18565
g58
(lp18566
g18524
ag0
(g2193
g2
Ntp18567
Rp18568
(dp18569
g11
S'auto_7203'
p18570
sg13
I0
sg14
g0
(g15
g2
Ntp18571
Rp18572
(dp18573
g19
(lp18574
sbsg52
Nsg53
g0
(g54
g2
Ntp18575
Rp18576
(dp18577
g58
(lp18578
g0
(g2193
g2
Ntp18579
Rp18580
(dp18581
g11
S'auto_7202'
p18582
sg13
I0
sg14
g0
(g15
g2
Ntp18583
Rp18584
(dp18585
g19
(lp18586
sbsg52
Nsg53
g0
(g54
g2
Ntp18587
Rp18588
(dp18589
g58
(lp18590
g18530
ag18536
asg14
g0
(g15
g2
Ntp18591
Rp18592
sg204
(lp18593
g18580
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp18594
Rp18595
(dp18596
g11
S'auto_7201'
p18597
sg13
I0
sg14
g0
(g15
g2
Ntp18598
Rp18599
(dp18600
g19
(lp18601
sbsg52
Nsg53
g0
(g54
g2
Ntp18602
Rp18603
(dp18604
g58
(lp18605
g18542
ag0
(g2193
g2
Ntp18606
Rp18607
(dp18608
g11
S'auto_7200'
p18609
sg13
I0
sg14
g0
(g15
g2
Ntp18610
Rp18611
(dp18612
g19
(lp18613
sbsg52
Nsg53
g0
(g54
g2
Ntp18614
Rp18615
(dp18616
g58
(lp18617
g18548
asg14
g0
(g15
g2
Ntp18618
Rp18619
sg204
(lp18620
g18607
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18621
Rp18622
sg204
(lp18623
g18595
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18624
Rp18625
sg204
(lp18626
g18568
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18627
Rp18628
sg204
(lp18629
g18556
asg206
g3526
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i4)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i3)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i1)s * %(i2)s;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = V%(id)s_tmp3 / V%(id)s_tmp2;\n%(o0)s = %(i0)s - V%(id)s_tmp4;\n}\n'
p18630
sg2314
(g2202
tp18631
sg508
g0
(g2316
g2
Ntp18632
Rp18633
(dp18634
g2320
(I0
tp18635
sbsg2322
(lp18636
S'%(nodename)s_subnode0'
p18637
aS'%(nodename)s_subnode1'
p18638
aS'%(nodename)s_subnode2'
p18639
aS'%(nodename)s_subnode3'
p18640
aS'%(nodename)s_subnode4'
p18641
asg2328
I1
sbsbsg2143
(lp18642
g2330
ag2146
asbsg2147
(dp18643
sg206
g0
(g497
g2
Ntp18644
Rp18645
(dp18646
g52
Nsg503
g18520
sg511
(dp18647
I0
(lp18648
I0
assg513
Nsg516
g0
(g517
g2
Ntp18649
Rp18650
(dp18651
g521
I3713080549408328131
sg522
(dp18652
I0
I0
ssbsg524
I00
sbsbI4
tp18653
asg11
S'auto_7174'
p18654
sg14
g0
(g15
g2
Ntp18655
Rp18656
(dp18657
g19
(lp18658
sbsg53
g17267
sg177
g0
(g178
g2
Ntp18659
Rp18660
(dp18661
g182
(I00
tp18662
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp18663
Rp18664
(dp18665
g2188
g0
(g54
g2
Ntp18666
Rp18667
(dp18668
g58
(lp18669
g0
(g2193
g2
Ntp18670
Rp18671
(dp18672
g11
S'auto_7593'
p18673
sg13
Nsg14
g0
(g15
g2
Ntp18674
Rp18675
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18676
Rp18677
(dp18678
g11
S'auto_7594'
p18679
sg13
Nsg14
g0
(g15
g2
Ntp18680
Rp18681
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18682
Rp18683
(dp18684
g11
S'auto_7595'
p18685
sg13
Nsg14
g0
(g15
g2
Ntp18686
Rp18687
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18688
Rp18689
(dp18690
g11
S'auto_7596'
p18691
sg13
Nsg14
g0
(g15
g2
Ntp18692
Rp18693
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp18694
Rp18695
sg204
(lp18696
g0
(g2193
g2
Ntp18697
Rp18698
(dp18699
g11
S'auto_7597'
p18700
sg13
I0
sg14
g0
(g15
g2
Ntp18701
Rp18702
sg52
Nsg53
g18667
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp18703
Rp18704
(dp18705
g58
(lp18706
g0
(g2193
g2
Ntp18707
Rp18708
(dp18709
g11
S'auto_7153'
p18710
sg13
Nsg14
g0
(g15
g2
Ntp18711
Rp18712
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18713
Rp18714
(dp18715
g11
S'auto_7154'
p18716
sg13
Nsg14
g0
(g15
g2
Ntp18717
Rp18718
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18719
Rp18720
(dp18721
g11
S'auto_7155'
p18722
sg13
Nsg14
g0
(g15
g2
Ntp18723
Rp18724
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18725
Rp18726
(dp18727
g11
S'auto_7156'
p18728
sg13
Nsg14
g0
(g15
g2
Ntp18729
Rp18730
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp18731
sg204
(lp18732
g0
(g2193
g2
Ntp18733
Rp18734
(dp18735
g11
S'auto_7160'
p18736
sg13
I0
sg14
g0
(g15
g2
Ntp18737
Rp18738
(dp18739
g19
(lp18740
sbsg52
Nsg53
g0
(g54
g2
Ntp18741
Rp18742
(dp18743
g58
(lp18744
g0
(g2193
g2
Ntp18745
Rp18746
(dp18747
g11
S'auto_7159'
p18748
sg13
I0
sg14
g0
(g15
g2
Ntp18749
Rp18750
(dp18751
g19
(lp18752
sbsg52
Nsg53
g0
(g54
g2
Ntp18753
Rp18754
(dp18755
g58
(lp18756
g18708
ag18714
asg14
g0
(g15
g2
Ntp18757
Rp18758
sg204
(lp18759
g18746
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp18760
Rp18761
(dp18762
g11
S'auto_7158'
p18763
sg13
I0
sg14
g0
(g15
g2
Ntp18764
Rp18765
(dp18766
g19
(lp18767
sbsg52
Nsg53
g0
(g54
g2
Ntp18768
Rp18769
(dp18770
g58
(lp18771
g18720
ag0
(g2193
g2
Ntp18772
Rp18773
(dp18774
g11
S'auto_7157'
p18775
sg13
I0
sg14
g0
(g15
g2
Ntp18776
Rp18777
(dp18778
g19
(lp18779
sbsg52
Nsg53
g0
(g54
g2
Ntp18780
Rp18781
(dp18782
g58
(lp18783
g18726
asg14
g0
(g15
g2
Ntp18784
Rp18785
sg204
(lp18786
g18773
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18787
Rp18788
sg204
(lp18789
g18761
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp18790
Rp18791
sg204
(lp18792
g18734
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p18793
sg2314
(g2202
tp18794
sg508
g0
(g2316
g2
Ntp18795
Rp18796
(dp18797
g2320
(I1
tp18798
sbsg2322
(lp18799
S'%(nodename)s_subnode0'
p18800
aS'%(nodename)s_subnode1'
p18801
aS'%(nodename)s_subnode2'
p18802
aS'%(nodename)s_subnode3'
p18803
asg2328
I1
sbsbsg2143
(lp18804
g2330
ag2146
asbsg2147
(dp18805
sg206
g0
(g497
g2
Ntp18806
Rp18807
(dp18808
g52
Nsg503
g18704
sg511
(dp18809
I0
(lp18810
I1
assg513
Nsg516
g0
(g517
g2
Ntp18811
Rp18812
(dp18813
g521
I3713080549409410656
sg522
(dp18814
I0
I1
ssbsg524
I00
sbsbI3
tp18815
a(g17844
I3
tp18816
asg11
S'auto_1766'
p18817
sg14
g0
(g15
g2
Ntp18818
Rp18819
(dp18820
g19
g16248
sbsg53
g17258
sg177
g16278
sbasg14
g0
(g15
g2
Ntp18821
Rp18822
(dp18823
g2143
(lp18824
g2146
ag2146
asbsg2147
(dp18825
sg206
g16274
sbI0
tp18826
a(g17250
I1
tp18827
a(g17556
I0
tp18828
a(g0
(g54
g2
Ntp18829
Rp18830
(dp18831
g58
(lp18832
g17246
ag17254
ag0
(g149
g2
Ntp18833
Rp18834
(dp18835
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp18836
Rp18837
(dp18838
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp18839
(g0
(g54
g2
Ntp18840
Rp18841
(dp18842
g58
(lp18843
g16867
ag16875
ag18834
asg1883
g16854
sg204
(lp18844
g0
(g7
g2
Ntp18845
Rp18846
(dp18847
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18848
(g0
(g54
g2
Ntp18849
Rp18850
(dp18851
g58
(lp18852
g0
(g149
g2
Ntp18853
Rp18854
(dp18855
g13
Nsg52
Nsg1883
g16854
sg177
g8119
sg1892
(lp18856
(g0
(g54
g2
Ntp18857
Rp18858
(dp18859
g58
(lp18860
g16998
ag18854
ag0
(g7
g2
Ntp18861
Rp18862
(dp18863
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18864
(g18858
I2
tp18865
a(g16994
I2
tp18866
asg11
S'auto_1980'
p18867
sg14
g0
(g15
g2
Ntp18868
Rp18869
(dp18870
g19
(lp18871
sbsg53
g0
(g54
g2
Ntp18872
Rp18873
(dp18874
g58
(lp18875
g0
(g7
g2
Ntp18876
Rp18877
(dp18878
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18879
(g3082
I7
tp18880
a(g18873
I0
tp18881
asg11
S'auto_6841'
p18882
sg14
g0
(g15
g2
Ntp18883
Rp18884
(dp18885
g19
(lp18886
sbsg53
g0
(g54
g2
Ntp18887
Rp18888
(dp18889
g58
(lp18890
g0
(g149
g2
Ntp18891
Rp18892
(dp18893
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp18894
Rp18895
(dp18896
g182
(tsg183
S'float32'
p18897
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp18898
(g18888
I0
tp18899
a(g0
(g54
g2
Ntp18900
Rp18901
(dp18902
g58
(lp18903
g18892
ag0
(g441
g2
Ntp18904
Rp18905
(dp18906
g13
Nsg472
g11990
sg52
Nsg1883
g16854
sg1892
(lp18907
(g18901
I1
tp18908
asg11
S'auto_1549'
p18909
sg14
g0
(g15
g2
Ntp18910
Rp18911
(dp18912
g19
g11975
sbsg53
Nsg177
g11999
sbasg1883
g16854
sg204
(lp18913
g0
(g7
g2
Ntp18914
Rp18915
(dp18916
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18917
(g3082
I12
tp18918
a(g0
(g54
g2
Ntp18919
Rp18920
(dp18921
g58
(lp18922
g18915
asg1883
g16854
sg204
(lp18923
g0
(g7
g2
Ntp18924
Rp18925
(dp18926
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp18927
(g16898
I3
tp18928
asg11
S'auto_1886'
p18929
sg14
g0
(g15
g2
Ntp18930
Rp18931
(dp18932
g19
(lp18933
sbsg53
g18920
sg177
g0
(g178
g2
Ntp18934
Rp18935
(dp18936
g182
(I01
tp18937
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp18938
Rp18939
(dp18940
g2143
(lp18941
S'local_dimshuffle_lift'
p18942
ag2146
asbsg2147
(dp18943
sg206
g0
(g207
g2
Ntp18944
Rp18945
(dp18946
g211
(lp18947
sg213
(lp18948
sg215
(lp18949
I0
asg217
g218
sg219
(tsg220
(lp18950
g222
asg223
I01
sg224
g12110
sg227
(dp18951
S'support_code_apply'
p18952
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p18953
ssg231
(dp18954
I0
(lp18955
I0
assg234
(lp18956
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p18957
asbsbI0
tp18958
asg11
S'auto_6980'
p18959
sg14
g0
(g15
g2
Ntp18960
Rp18961
(dp18962
g19
(lp18963
sbsg53
g18901
sg177
g0
(g178
g2
Ntp18964
Rp18965
(dp18966
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp18967
Rp18968
(dp18969
g2188
g0
(g54
g2
Ntp18970
Rp18971
(dp18972
g58
(lp18973
g0
(g2193
g2
Ntp18974
Rp18975
(dp18976
g11
S'auto_7319'
p18977
sg13
Nsg14
g0
(g15
g2
Ntp18978
Rp18979
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp18980
Rp18981
(dp18982
g11
S'auto_7320'
p18983
sg13
Nsg14
g0
(g15
g2
Ntp18984
Rp18985
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp18986
Rp18987
sg204
(lp18988
g0
(g2193
g2
Ntp18989
Rp18990
(dp18991
g11
S'auto_7321'
p18992
sg13
I0
sg14
g0
(g15
g2
Ntp18993
Rp18994
sg52
Nsg53
g18971
sg177
g2202
sbasg206
g0
(g1155
g2
Ntp18995
Rp18996
(dp18997
g508
g0
(g2316
g2
Ntp18998
Rp18999
(dp19000
g2320
(I1
tp19001
sbsg52
Nsbsbsg2143
(lp19002
g2330
ag2146
asbsg2147
(dp19003
sg206
g0
(g497
g2
Ntp19004
Rp19005
(dp19006
g52
Nsg503
g18996
sg511
(dp19007
I0
(lp19008
I1
assg513
g1163
sg516
g0
(g517
g2
Ntp19009
Rp19010
(dp19011
g521
I3713080549409410656
sg522
(dp19012
I0
I1
ssbsg524
I00
sbsbI0
tp19013
asg11
S'auto_4271'
p19014
sg14
g0
(g15
g2
Ntp19015
Rp19016
(dp19017
g19
(lp19018
sg175
Nsbsg193
g194
(g195
(I0
tp19019
g197
tp19020
Rp19021
(I1
(tg189
I00
S'\x00\x00\x80?'
p19022
tp19023
bsbag0
(g441
g2
Ntp19024
Rp19025
(dp19026
g13
Nsg472
g7828
sg52
Nsg1883
g16854
sg1892
(lp19027
(g18888
I1
tp19028
asg11
S'auto_1544'
p19029
sg14
g0
(g15
g2
Ntp19030
Rp19031
(dp19032
g19
g7813
sbsg53
Nsg177
g7837
sbasg1883
g16854
sg204
(lp19033
g18877
asg14
g0
(g15
g2
Ntp19034
Rp19035
(dp19036
g2188
g0
(g54
g2
Ntp19037
Rp19038
(dp19039
g58
(lp19040
g0
(g2193
g2
Ntp19041
Rp19042
(dp19043
g11
S'auto_7331'
p19044
sg13
Nsg14
g0
(g15
g2
Ntp19045
Rp19046
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19047
Rp19048
(dp19049
g11
S'auto_7332'
p19050
sg13
Nsg14
g0
(g15
g2
Ntp19051
Rp19052
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp19053
Rp19054
sg204
(lp19055
g0
(g2193
g2
Ntp19056
Rp19057
(dp19058
g11
S'auto_7333'
p19059
sg13
I0
sg14
g0
(g15
g2
Ntp19060
Rp19061
sg52
Nsg53
g19038
sg177
g2202
sbasg206
g0
(g1155
g2
Ntp19062
Rp19063
(dp19064
g508
g0
(g2316
g2
Ntp19065
Rp19066
(dp19067
g2320
(I1
tp19068
sbsg52
Nsbsbsg2143
(lp19069
g2330
ag2146
asbsg2147
(dp19070
sg206
g0
(g497
g2
Ntp19071
Rp19072
(dp19073
g52
Nsg503
g19063
sg511
(dp19074
I0
(lp19075
I1
assg513
g1163
sg516
g0
(g517
g2
Ntp19076
Rp19077
(dp19078
g521
I3713080549409410656
sg522
(dp19079
I0
I1
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp19080
Rp19081
(dp19082
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp19083
g18862
asg14
g0
(g15
g2
Ntp19084
Rp19085
(dp19086
g2143
(lp19087
g18942
ag2146
asbsg2147
(dp19088
sg206
g0
(g207
g2
Ntp19089
Rp19090
(dp19091
g211
(lp19092
sg213
(lp19093
sg215
(lp19094
I0
aI1
asg217
g218
sg219
(tsg220
(lp19095
g222
asg223
I01
sg224
g8013
sg227
(dp19096
S'support_code_apply'
p19097
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p19098
ssg231
(dp19099
I0
(lp19100
I0
assg234
(lp19101
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p19102
asbsbsg177
g0
(g178
g2
Ntp19103
Rp19104
(dp19105
g182
(I01
I01
tp19106
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp19107
g0
(g7
g2
Ntp19108
Rp19109
(dp19110
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19111
(g16930
I5
tp19112
a(g16955
I5
tp19113
asg11
S'auto_5964'
p19114
sg14
g0
(g15
g2
Ntp19115
Rp19116
(dp19117
g19
(lp19118
sbsg53
g18858
sg177
g0
(g178
g2
Ntp19119
Rp19120
(dp19121
g182
(I01
I01
tp19122
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp19123
Rp19124
(dp19125
g2188
g0
(g54
g2
Ntp19126
Rp19127
(dp19128
g58
(lp19129
g0
(g2193
g2
Ntp19130
Rp19131
(dp19132
g11
S'auto_7428'
p19133
sg13
Nsg14
g0
(g15
g2
Ntp19134
Rp19135
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19136
Rp19137
(dp19138
g11
S'auto_7429'
p19139
sg13
Nsg14
g0
(g15
g2
Ntp19140
Rp19141
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19142
Rp19143
(dp19144
g11
S'auto_7430'
p19145
sg13
Nsg14
g0
(g15
g2
Ntp19146
Rp19147
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp19148
Rp19149
sg204
(lp19150
g0
(g2193
g2
Ntp19151
Rp19152
(dp19153
g11
S'auto_7431'
p19154
sg13
I0
sg14
g0
(g15
g2
Ntp19155
Rp19156
sg52
Nsg53
g19127
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp19157
Rp19158
(dp19159
g58
(lp19160
g0
(g2193
g2
Ntp19161
Rp19162
(dp19163
g11
S'auto_5950'
p19164
sg13
Nsg14
g0
(g15
g2
Ntp19165
Rp19166
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19167
Rp19168
(dp19169
g11
S'auto_5951'
p19170
sg13
Nsg14
g0
(g15
g2
Ntp19171
Rp19172
(dp19173
g2511
g2038
(g189
S'fff?'
p19174
tp19175
Rp19176
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19177
Rp19178
(dp19179
g11
S'auto_5952'
p19180
sg13
Nsg14
g0
(g15
g2
Ntp19181
Rp19182
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp19183
sg204
(lp19184
g0
(g2193
g2
Ntp19185
Rp19186
(dp19187
g11
S'auto_5954'
p19188
sg13
I0
sg14
g0
(g15
g2
Ntp19189
Rp19190
(dp19191
g19
(lp19192
sbsg52
Nsg53
g0
(g54
g2
Ntp19193
Rp19194
(dp19195
g58
(lp19196
g19162
ag0
(g2193
g2
Ntp19197
Rp19198
(dp19199
g11
S'auto_5953'
p19200
sg13
I0
sg14
g0
(g15
g2
Ntp19201
Rp19202
(dp19203
g19
(lp19204
sbsg52
Nsg53
g0
(g54
g2
Ntp19205
Rp19206
(dp19207
g58
(lp19208
g19168
ag19178
asg14
g0
(g15
g2
Ntp19209
Rp19210
sg204
(lp19211
g19198
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp19212
Rp19213
sg204
(lp19214
g19186
asg206
g3526
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i1)s, %(i2)s);\n%(o0)s = %(i0)s - V%(id)s_tmp1;\n}\n'
p19215
sg2314
(g2202
tp19216
sg2322
(lp19217
S'%(nodename)s_subnode0'
p19218
aS'%(nodename)s_subnode1'
p19219
asg2328
I1
sbsbsg4120
(lp19220
g2330
asg2143
(lp19221
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p19222
ag2146
asbsg2147
(dp19223
sg206
g0
(g497
g2
Ntp19224
Rp19225
(dp19226
g52
Nsg503
g19158
sg511
(dp19227
sg513
Nsg516
g0
(g517
g2
Ntp19228
Rp19229
(dp19230
g521
I0
sg522
(dp19231
sbsg524
I00
sbsbI1
tp19232
a(g18850
I0
tp19233
a(g0
(g54
g2
Ntp19234
Rp19235
(dp19236
g58
(lp19237
g18854
ag0
(g441
g2
Ntp19238
Rp19239
(dp19240
g13
Nsg472
g14343
sg52
Nsg1883
g16854
sg1892
(lp19241
(g19235
I1
tp19242
asg11
S'auto_1545'
p19243
sg14
g0
(g15
g2
Ntp19244
Rp19245
(dp19246
g19
g14328
sbsg53
Nsg177
g14353
sbag0
(g7
g2
Ntp19247
Rp19248
(dp19249
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19250
(g19235
I2
tp19251
asg11
S'auto_4603'
p19252
sg14
g0
(g15
g2
Ntp19253
Rp19254
(dp19255
g19
(lp19256
sbsg53
g18830
sg177
g0
(g178
g2
Ntp19257
Rp19258
(dp19259
g182
(I00
I00
tp19260
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp19261
g0
(g7
g2
Ntp19262
Rp19263
(dp19264
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19265
(g3082
I8
tp19266
a(g16955
I4
tp19267
asg11
S'auto_7106'
p19268
sg14
g0
(g15
g2
Ntp19269
Rp19270
(dp19271
g19
(lp19272
sbsg53
g19235
sg177
g0
(g178
g2
Ntp19273
Rp19274
(dp19275
g182
(I00
I00
tp19276
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp19277
Rp19278
(dp19279
g2188
g0
(g54
g2
Ntp19280
Rp19281
(dp19282
g58
(lp19283
g0
(g2193
g2
Ntp19284
Rp19285
(dp19286
g11
S'auto_7669'
p19287
sg13
Nsg14
g0
(g15
g2
Ntp19288
Rp19289
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19290
Rp19291
(dp19292
g11
S'auto_7670'
p19293
sg13
Nsg14
g0
(g15
g2
Ntp19294
Rp19295
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19296
Rp19297
(dp19298
g11
S'auto_7671'
p19299
sg13
Nsg14
g0
(g15
g2
Ntp19300
Rp19301
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp19302
Rp19303
sg204
(lp19304
g0
(g2193
g2
Ntp19305
Rp19306
(dp19307
g11
S'auto_7672'
p19308
sg13
I0
sg14
g0
(g15
g2
Ntp19309
Rp19310
sg52
Nsg53
g19281
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp19311
Rp19312
(dp19313
g58
(lp19314
g0
(g2193
g2
Ntp19315
Rp19316
(dp19317
g11
S'auto_7092'
p19318
sg13
Nsg14
g0
(g15
g2
Ntp19319
Rp19320
(dp19321
g2511
g2038
(g189
S'fff?'
p19322
tp19323
Rp19324
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19325
Rp19326
(dp19327
g11
S'auto_7093'
p19328
sg13
Nsg14
g0
(g15
g2
Ntp19329
Rp19330
(dp19331
g2511
g2038
(g189
S'\x00\x00\x00\x00'
p19332
tp19333
Rp19334
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19335
Rp19336
(dp19337
g11
S'auto_7094'
p19338
sg13
Nsg14
g0
(g15
g2
Ntp19339
Rp19340
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp19341
sg204
(lp19342
g0
(g2193
g2
Ntp19343
Rp19344
(dp19345
g11
S'auto_7096'
p19346
sg13
I0
sg14
g0
(g15
g2
Ntp19347
Rp19348
(dp19349
g19
(lp19350
sbsg52
Nsg53
g0
(g54
g2
Ntp19351
Rp19352
(dp19353
g58
(lp19354
g0
(g2193
g2
Ntp19355
Rp19356
(dp19357
g11
S'auto_7095'
p19358
sg13
I0
sg14
g0
(g15
g2
Ntp19359
Rp19360
(dp19361
g19
(lp19362
sbsg52
Nsg53
g0
(g54
g2
Ntp19363
Rp19364
(dp19365
g58
(lp19366
g19316
ag19326
asg14
g0
(g15
g2
Ntp19367
Rp19368
sg204
(lp19369
g19356
asg206
g1224
sbsg177
g2202
sbag19336
asg14
g0
(g15
g2
Ntp19370
Rp19371
sg204
(lp19372
g19344
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp1 + %(i2)s;\n}\n'
p19373
sg2314
(g2202
tp19374
sg508
g0
(g2316
g2
Ntp19375
Rp19376
(dp19377
g2320
(I1
tp19378
sbsg2322
(lp19379
S'%(nodename)s_subnode0'
p19380
aS'%(nodename)s_subnode1'
p19381
asg2328
I1
sbsbsg2143
(lp19382
g2330
ag2146
asbsg2147
(dp19383
sg206
g0
(g497
g2
Ntp19384
Rp19385
(dp19386
g52
Nsg503
g19312
sg511
(dp19387
I0
(lp19388
I1
assg513
Nsg516
g0
(g517
g2
Ntp19389
Rp19390
(dp19391
g521
I3713080549409410656
sg522
(dp19392
I0
I1
ssbsg524
I00
sbsbI0
tp19393
asg11
S'auto_4145'
p19394
sg14
g0
(g15
g2
Ntp19395
Rp19396
(dp19397
g19
(lp19398
g8083
asg175
g2038
(g189
S'fff?'
p19399
tp19400
Rp19401
sbsg193
g194
(g195
(I0
tp19402
g197
tp19403
Rp19404
(I1
(I1
I1
tp19405
g189
I00
S'fff?'
p19406
tp19407
bsbag0
(g441
g2
Ntp19408
Rp19409
(dp19410
g13
Nsg472
g8144
sg52
Nsg1883
g16854
sg1892
(lp19411
(g18850
I1
tp19412
asg11
S'auto_1542'
p19413
sg14
g0
(g15
g2
Ntp19414
Rp19415
(dp19416
g19
g8129
sbsg53
Nsg177
g8154
sbag18846
asg1883
g16854
sg204
(lp19417
g0
(g7
g2
Ntp19418
Rp19419
(dp19420
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19421
(g3082
I5
tp19422
a(g16930
I4
tp19423
asg11
S'auto_6871'
p19424
sg14
g0
(g15
g2
Ntp19425
Rp19426
(dp19427
g19
(lp19428
sbsg53
g18850
sg177
g0
(g178
g2
Ntp19429
Rp19430
(dp19431
g182
(I00
I00
tp19432
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp19433
Rp19434
(dp19435
g2188
g0
(g54
g2
Ntp19436
Rp19437
(dp19438
g58
(lp19439
g0
(g2193
g2
Ntp19440
Rp19441
(dp19442
g11
S'auto_7840'
p19443
sg13
Nsg14
g0
(g15
g2
Ntp19444
Rp19445
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19446
Rp19447
(dp19448
g11
S'auto_7841'
p19449
sg13
Nsg14
g0
(g15
g2
Ntp19450
Rp19451
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19452
Rp19453
(dp19454
g11
S'auto_7842'
p19455
sg13
Nsg14
g0
(g15
g2
Ntp19456
Rp19457
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp19458
Rp19459
sg204
(lp19460
g0
(g2193
g2
Ntp19461
Rp19462
(dp19463
g11
S'auto_7843'
p19464
sg13
I0
sg14
g0
(g15
g2
Ntp19465
Rp19466
sg52
Nsg53
g19437
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp19467
Rp19468
(dp19469
g58
(lp19470
g0
(g2193
g2
Ntp19471
Rp19472
(dp19473
g11
S'auto_6857'
p19474
sg13
Nsg14
g0
(g15
g2
Ntp19475
Rp19476
(dp19477
g2511
g2038
(g189
S'fff?'
p19478
tp19479
Rp19480
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19481
Rp19482
(dp19483
g11
S'auto_6858'
p19484
sg13
Nsg14
g0
(g15
g2
Ntp19485
Rp19486
(dp19487
g2511
g2038
(g189
S'\x00\x00\x00\x00'
p19488
tp19489
Rp19490
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19491
Rp19492
(dp19493
g11
S'auto_6859'
p19494
sg13
Nsg14
g0
(g15
g2
Ntp19495
Rp19496
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp19497
sg204
(lp19498
g0
(g2193
g2
Ntp19499
Rp19500
(dp19501
g11
S'auto_6861'
p19502
sg13
I0
sg14
g0
(g15
g2
Ntp19503
Rp19504
(dp19505
g19
(lp19506
sbsg52
Nsg53
g0
(g54
g2
Ntp19507
Rp19508
(dp19509
g58
(lp19510
g0
(g2193
g2
Ntp19511
Rp19512
(dp19513
g11
S'auto_6860'
p19514
sg13
I0
sg14
g0
(g15
g2
Ntp19515
Rp19516
(dp19517
g19
(lp19518
sbsg52
Nsg53
g0
(g54
g2
Ntp19519
Rp19520
(dp19521
g58
(lp19522
g19472
ag19482
asg14
g0
(g15
g2
Ntp19523
Rp19524
sg204
(lp19525
g19512
asg206
g1224
sbsg177
g2202
sbag19492
asg14
g0
(g15
g2
Ntp19526
Rp19527
sg204
(lp19528
g19500
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp1 + %(i2)s;\n}\n'
p19529
sg2314
(g2202
tp19530
sg508
g0
(g2316
g2
Ntp19531
Rp19532
(dp19533
g2320
(I1
tp19534
sbsg2322
(lp19535
S'%(nodename)s_subnode0'
p19536
aS'%(nodename)s_subnode1'
p19537
asg2328
I1
sbsbsg2143
(lp19538
g2330
ag2146
asbsg2147
(dp19539
sg206
g0
(g497
g2
Ntp19540
Rp19541
(dp19542
g52
Nsg503
g19468
sg511
(dp19543
I0
(lp19544
I1
assg513
Nsg516
g0
(g517
g2
Ntp19545
Rp19546
(dp19547
g521
I3713080549409410656
sg522
(dp19548
I0
I1
ssbsg524
I00
sbsbI2
tp19549
asg11
S'auto_4601'
p19550
sg14
g0
(g15
g2
Ntp19551
Rp19552
(dp19553
g19
(lp19554
sbsg53
g18841
sg177
g0
(g178
g2
Ntp19555
Rp19556
(dp19557
g182
(I00
I00
tp19558
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp19559
Rp19560
(dp19561
g2143
(lp19562
g17616
ag2146
asbsg2147
(dp19563
sg206
g17620
sbI2
tp19564
a(g18830
I2
tp19565
asg11
S'auto_4659'
p19566
sg14
g0
(g15
g2
Ntp19567
Rp19568
(dp19569
g19
(lp19570
sg175
Nsbsg193
g194
(g195
(I0
tp19571
g197
tp19572
Rp19573
(I1
(tg189
I00
S'\xd0\xcc\xcc='
p19574
tp19575
bsbasg1883
g16854
sg204
(lp19576
g19248
asg14
g0
(g15
g2
Ntp19577
Rp19578
(dp19579
g2143
(lp19580
g17616
ag2146
asbsg2147
(dp19581
sg206
g17620
sbI1
tp19582
asg11
S'auto_6182'
p19583
sg14
g0
(g15
g2
Ntp19584
Rp19585
(dp19586
g19
(lp19587
sbsg53
g17002
sg177
g0
(g178
g2
Ntp19588
Rp19589
(dp19590
g182
(I00
I00
tp19591
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp19592
g0
(g7
g2
Ntp19593
Rp19594
(dp19595
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19596
(g0
(g54
g2
Ntp19597
Rp19598
(dp19599
g58
(lp19600
g0
(g149
g2
Ntp19601
Rp19602
(dp19603
g13
Nsg52
Nsg1883
g16854
sg177
g11230
sg1892
(lp19604
(g0
(g54
g2
Ntp19605
Rp19606
(dp19607
g58
(lp19608
g19602
ag0
(g441
g2
Ntp19609
Rp19610
(dp19611
g13
Nsg472
g11255
sg52
Nsg1883
g16854
sg1892
(lp19612
(g19606
I1
tp19613
asg11
S'auto_1543'
p19614
sg14
g0
(g15
g2
Ntp19615
Rp19616
(dp19617
g19
g11240
sbsg53
Nsg177
g11265
sbag0
(g149
g2
Ntp19618
Rp19619
(dp19620
g13
Nsg52
Nsg1883
g16854
sg177
g11376
sg1892
(lp19621
(g19606
I2
tp19622
a(g19598
I2
tp19623
asg11
S'auto_4113'
p19624
sg14
g0
(g15
g2
Ntp19625
Rp19626
(dp19627
g19
(lp19628
g11309
asg175
g2038
(g189
S'\x00\x12\x83:'
p19629
tp19630
Rp19631
sbsg193
g194
(g195
(I0
tp19632
g197
tp19633
Rp19634
(I1
(I1
I1
tp19635
g189
I00
S'\x00\x12\x83:'
p19636
tp19637
bsbag0
(g7
g2
Ntp19638
Rp19639
(dp19640
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19641
(g19606
I3
tp19642
asg11
S'auto_4485'
p19643
sg14
g0
(g15
g2
Ntp19644
Rp19645
(dp19646
g19
(lp19647
g8276
asbsg53
g16871
sg177
g0
(g178
g2
Ntp19648
Rp19649
(dp19650
g182
(I00
I00
tp19651
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp19652
g0
(g7
g2
Ntp19653
Rp19654
(dp19655
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19656
(g3082
I6
tp19657
a(g16930
I7
tp19658
asg11
S'auto_6837'
p19659
sg14
g0
(g15
g2
Ntp19660
Rp19661
(dp19662
g19
(lp19663
sbsg53
g19606
sg177
g0
(g178
g2
Ntp19664
Rp19665
(dp19666
g182
(I00
I00
tp19667
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp19668
Rp19669
(dp19670
g2188
g0
(g54
g2
Ntp19671
Rp19672
(dp19673
g58
(lp19674
g0
(g2193
g2
Ntp19675
Rp19676
(dp19677
g11
S'auto_7820'
p19678
sg13
Nsg14
g0
(g15
g2
Ntp19679
Rp19680
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19681
Rp19682
(dp19683
g11
S'auto_7821'
p19684
sg13
Nsg14
g0
(g15
g2
Ntp19685
Rp19686
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19687
Rp19688
(dp19689
g11
S'auto_7822'
p19690
sg13
Nsg14
g0
(g15
g2
Ntp19691
Rp19692
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19693
Rp19694
(dp19695
g11
S'auto_7823'
p19696
sg13
Nsg14
g0
(g15
g2
Ntp19697
Rp19698
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp19699
Rp19700
sg204
(lp19701
g0
(g2193
g2
Ntp19702
Rp19703
(dp19704
g11
S'auto_7824'
p19705
sg13
I0
sg14
g0
(g15
g2
Ntp19706
Rp19707
sg52
Nsg53
g19672
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp19708
Rp19709
(dp19710
g58
(lp19711
g0
(g2193
g2
Ntp19712
Rp19713
(dp19714
g11
S'auto_6816'
p19715
sg13
Nsg14
g0
(g15
g2
Ntp19716
Rp19717
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19718
Rp19719
(dp19720
g11
S'auto_6817'
p19721
sg13
Nsg14
g0
(g15
g2
Ntp19722
Rp19723
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19724
Rp19725
(dp19726
g11
S'auto_6818'
p19727
sg13
Nsg14
g0
(g15
g2
Ntp19728
Rp19729
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19730
Rp19731
(dp19732
g11
S'auto_6819'
p19733
sg13
Nsg14
g0
(g15
g2
Ntp19734
Rp19735
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp19736
sg204
(lp19737
g0
(g2193
g2
Ntp19738
Rp19739
(dp19740
g11
S'auto_6823'
p19741
sg13
I0
sg14
g0
(g15
g2
Ntp19742
Rp19743
(dp19744
g19
(lp19745
sbsg52
Nsg53
g0
(g54
g2
Ntp19746
Rp19747
(dp19748
g58
(lp19749
g0
(g2193
g2
Ntp19750
Rp19751
(dp19752
g11
S'auto_6822'
p19753
sg13
I0
sg14
g0
(g15
g2
Ntp19754
Rp19755
(dp19756
g19
(lp19757
sbsg52
Nsg53
g0
(g54
g2
Ntp19758
Rp19759
(dp19760
g58
(lp19761
g19713
ag19719
asg14
g0
(g15
g2
Ntp19762
Rp19763
sg204
(lp19764
g19751
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp19765
Rp19766
(dp19767
g11
S'auto_6821'
p19768
sg13
I0
sg14
g0
(g15
g2
Ntp19769
Rp19770
(dp19771
g19
(lp19772
sbsg52
Nsg53
g0
(g54
g2
Ntp19773
Rp19774
(dp19775
g58
(lp19776
g19725
ag0
(g2193
g2
Ntp19777
Rp19778
(dp19779
g11
S'auto_6820'
p19780
sg13
I0
sg14
g0
(g15
g2
Ntp19781
Rp19782
(dp19783
g19
(lp19784
sbsg52
Nsg53
g0
(g54
g2
Ntp19785
Rp19786
(dp19787
g58
(lp19788
g19731
asg14
g0
(g15
g2
Ntp19789
Rp19790
sg204
(lp19791
g19778
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp19792
Rp19793
sg204
(lp19794
g19766
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp19795
Rp19796
sg204
(lp19797
g19739
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p19798
sg2314
(g2202
tp19799
sg508
g0
(g2316
g2
Ntp19800
Rp19801
(dp19802
g2320
(I1
tp19803
sbsg2322
(lp19804
S'%(nodename)s_subnode0'
p19805
aS'%(nodename)s_subnode1'
p19806
aS'%(nodename)s_subnode2'
p19807
aS'%(nodename)s_subnode3'
p19808
asg2328
I1
sbsbsg2143
(lp19809
g2330
ag2146
asbsg2147
(dp19810
sg206
g0
(g497
g2
Ntp19811
Rp19812
(dp19813
g52
Nsg503
g19709
sg511
(dp19814
I0
(lp19815
I1
assg513
Nsg516
g0
(g517
g2
Ntp19816
Rp19817
(dp19818
g521
I3713080549409410656
sg522
(dp19819
I0
I1
ssbsg524
I00
sbsbI0
tp19820
a(g16994
I1
tp19821
a(g19598
I0
tp19822
asg11
S'auto_4121'
p19823
sg14
g0
(g15
g2
Ntp19824
Rp19825
(dp19826
g19
(lp19827
g11194
asg175
g2038
(g189
S'w\xbe\x7f?'
p19828
tp19829
Rp19830
sbsg193
g194
(g195
(I0
tp19831
g197
tp19832
Rp19833
(I1
(I1
I1
tp19834
g189
I00
S'w\xbe\x7f?'
p19835
tp19836
bsbag0
(g441
g2
Ntp19837
Rp19838
(dp19839
g13
Nsg472
g15371
sg52
Nsg1883
g16854
sg1892
(lp19840
(g19598
I1
tp19841
asg11
S'auto_1546'
p19842
sg14
g0
(g15
g2
Ntp19843
Rp19844
(dp19845
g19
g15356
sbsg53
Nsg177
g15381
sbag19619
ag19594
asg1883
g16854
sg204
(lp19846
g0
(g7
g2
Ntp19847
Rp19848
(dp19849
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp19850
(g3082
I9
tp19851
a(g16955
I7
tp19852
asg11
S'auto_7091'
p19853
sg14
g0
(g15
g2
Ntp19854
Rp19855
(dp19856
g19
(lp19857
sbsg53
g19598
sg177
g0
(g178
g2
Ntp19858
Rp19859
(dp19860
g182
(I00
I00
tp19861
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp19862
Rp19863
(dp19864
g2188
g0
(g54
g2
Ntp19865
Rp19866
(dp19867
g58
(lp19868
g0
(g2193
g2
Ntp19869
Rp19870
(dp19871
g11
S'auto_7649'
p19872
sg13
Nsg14
g0
(g15
g2
Ntp19873
Rp19874
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19875
Rp19876
(dp19877
g11
S'auto_7650'
p19878
sg13
Nsg14
g0
(g15
g2
Ntp19879
Rp19880
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19881
Rp19882
(dp19883
g11
S'auto_7651'
p19884
sg13
Nsg14
g0
(g15
g2
Ntp19885
Rp19886
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19887
Rp19888
(dp19889
g11
S'auto_7652'
p19890
sg13
Nsg14
g0
(g15
g2
Ntp19891
Rp19892
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp19893
Rp19894
sg204
(lp19895
g0
(g2193
g2
Ntp19896
Rp19897
(dp19898
g11
S'auto_7653'
p19899
sg13
I0
sg14
g0
(g15
g2
Ntp19900
Rp19901
sg52
Nsg53
g19866
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp19902
Rp19903
(dp19904
g58
(lp19905
g0
(g2193
g2
Ntp19906
Rp19907
(dp19908
g11
S'auto_7070'
p19909
sg13
Nsg14
g0
(g15
g2
Ntp19910
Rp19911
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19912
Rp19913
(dp19914
g11
S'auto_7071'
p19915
sg13
Nsg14
g0
(g15
g2
Ntp19916
Rp19917
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19918
Rp19919
(dp19920
g11
S'auto_7072'
p19921
sg13
Nsg14
g0
(g15
g2
Ntp19922
Rp19923
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp19924
Rp19925
(dp19926
g11
S'auto_7073'
p19927
sg13
Nsg14
g0
(g15
g2
Ntp19928
Rp19929
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp19930
sg204
(lp19931
g0
(g2193
g2
Ntp19932
Rp19933
(dp19934
g11
S'auto_7077'
p19935
sg13
I0
sg14
g0
(g15
g2
Ntp19936
Rp19937
(dp19938
g19
(lp19939
sbsg52
Nsg53
g0
(g54
g2
Ntp19940
Rp19941
(dp19942
g58
(lp19943
g0
(g2193
g2
Ntp19944
Rp19945
(dp19946
g11
S'auto_7076'
p19947
sg13
I0
sg14
g0
(g15
g2
Ntp19948
Rp19949
(dp19950
g19
(lp19951
sbsg52
Nsg53
g0
(g54
g2
Ntp19952
Rp19953
(dp19954
g58
(lp19955
g19907
ag19913
asg14
g0
(g15
g2
Ntp19956
Rp19957
sg204
(lp19958
g19945
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp19959
Rp19960
(dp19961
g11
S'auto_7075'
p19962
sg13
I0
sg14
g0
(g15
g2
Ntp19963
Rp19964
(dp19965
g19
(lp19966
sbsg52
Nsg53
g0
(g54
g2
Ntp19967
Rp19968
(dp19969
g58
(lp19970
g19919
ag0
(g2193
g2
Ntp19971
Rp19972
(dp19973
g11
S'auto_7074'
p19974
sg13
I0
sg14
g0
(g15
g2
Ntp19975
Rp19976
(dp19977
g19
(lp19978
sbsg52
Nsg53
g0
(g54
g2
Ntp19979
Rp19980
(dp19981
g58
(lp19982
g19925
asg14
g0
(g15
g2
Ntp19983
Rp19984
sg204
(lp19985
g19972
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp19986
Rp19987
sg204
(lp19988
g19960
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp19989
Rp19990
sg204
(lp19991
g19933
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p19992
sg2314
(g2202
tp19993
sg508
g0
(g2316
g2
Ntp19994
Rp19995
(dp19996
g2320
(I1
tp19997
sbsg2322
(lp19998
S'%(nodename)s_subnode0'
p19999
aS'%(nodename)s_subnode1'
p20000
aS'%(nodename)s_subnode2'
p20001
aS'%(nodename)s_subnode3'
p20002
asg2328
I1
sbsbsg2143
(lp20003
g2330
ag2146
asbsg2147
(dp20004
sg206
g0
(g497
g2
Ntp20005
Rp20006
(dp20007
g52
Nsg503
g19903
sg511
(dp20008
I0
(lp20009
I1
assg513
Nsg516
g0
(g517
g2
Ntp20010
Rp20011
(dp20012
g521
I3713080549409410656
sg522
(dp20013
I0
I1
ssbsg524
I00
sbsbI3
tp20014
asg11
S'auto_4486'
p20015
sg14
g0
(g15
g2
Ntp20016
Rp20017
(dp20018
g19
(lp20019
g14475
asbsg53
g17250
sg177
g0
(g178
g2
Ntp20020
Rp20021
(dp20022
g182
(I00
I00
tp20023
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp20024
Rp20025
(dp20026
g2143
(lp20027
g2145
ag2146
asbsg2147
(dp20028
sg206
g2151
sbI0
tp20029
a(g18830
I0
tp20030
asg11
S'auto_1737'
p20031
sg14
g0
(g15
g2
Ntp20032
Rp20033
(dp20034
g19
g14503
sbsg53
g17241
sg177
g14544
sbasg14
g0
(g15
g2
Ntp20035
Rp20036
(dp20037
g2143
(lp20038
g2146
ag2146
asbsg2147
(dp20039
sg206
g14529
sbI0
tp20040
asg11
S'auto_6360'
p20041
sg14
g0
(g15
g2
Ntp20042
Rp20043
(dp20044
g19
(lp20045
sbsg53
g17407
sg177
g0
(g178
g2
Ntp20046
Rp20047
(dp20048
g182
(I00
I00
tp20049
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17573
asg1883
g16854
sg204
(lp20050
g17222
asg14
g0
(g15
g2
Ntp20051
Rp20052
(dp20053
g2143
(lp20054
g2145
ag2146
asbsg2147
(dp20055
sg206
g2151
sbsg177
g0
(g178
g2
Ntp20056
Rp20057
(dp20058
g182
(I00
I00
tp20059
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17319
asg1883
g16854
sg204
(lp20060
g17030
asg14
g0
(g15
g2
Ntp20061
Rp20062
(dp20063
g2188
g0
(g54
g2
Ntp20064
Rp20065
(dp20066
g58
(lp20067
g0
(g2193
g2
Ntp20068
Rp20069
(dp20070
g11
S'auto_7514'
p20071
sg13
Nsg14
g0
(g15
g2
Ntp20072
Rp20073
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20074
Rp20075
(dp20076
g11
S'auto_7515'
p20077
sg13
Nsg14
g0
(g15
g2
Ntp20078
Rp20079
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20080
Rp20081
(dp20082
g11
S'auto_7516'
p20083
sg13
Nsg14
g0
(g15
g2
Ntp20084
Rp20085
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20086
Rp20087
(dp20088
g11
S'auto_7517'
p20089
sg13
Nsg14
g0
(g15
g2
Ntp20090
Rp20091
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20092
Rp20093
(dp20094
g11
S'auto_7518'
p20095
sg13
Nsg14
g0
(g15
g2
Ntp20096
Rp20097
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp20098
Rp20099
sg204
(lp20100
g0
(g2193
g2
Ntp20101
Rp20102
(dp20103
g11
S'auto_7519'
p20104
sg13
I0
sg14
g0
(g15
g2
Ntp20105
Rp20106
sg52
Nsg53
g20065
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp20107
Rp20108
(dp20109
g58
(lp20110
g0
(g2193
g2
Ntp20111
Rp20112
(dp20113
g11
S'auto_6714'
p20114
sg13
Nsg14
g0
(g15
g2
Ntp20115
Rp20116
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20117
Rp20118
(dp20119
g11
S'auto_6715'
p20120
sg13
Nsg14
g0
(g15
g2
Ntp20121
Rp20122
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20123
Rp20124
(dp20125
g11
S'auto_6716'
p20126
sg13
Nsg14
g0
(g15
g2
Ntp20127
Rp20128
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20129
Rp20130
(dp20131
g11
S'auto_6717'
p20132
sg13
Nsg14
g0
(g15
g2
Ntp20133
Rp20134
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20135
Rp20136
(dp20137
g11
S'auto_6718'
p20138
sg13
Nsg14
g0
(g15
g2
Ntp20139
Rp20140
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp20141
sg204
(lp20142
g0
(g2193
g2
Ntp20143
Rp20144
(dp20145
g11
S'auto_6722'
p20146
sg13
I0
sg14
g0
(g15
g2
Ntp20147
Rp20148
(dp20149
g19
(lp20150
sbsg52
Nsg53
g0
(g54
g2
Ntp20151
Rp20152
(dp20153
g58
(lp20154
g20112
ag0
(g2193
g2
Ntp20155
Rp20156
(dp20157
g11
S'auto_6721'
p20158
sg13
I0
sg14
g0
(g15
g2
Ntp20159
Rp20160
(dp20161
g19
(lp20162
sbsg52
Nsg53
g0
(g54
g2
Ntp20163
Rp20164
(dp20165
g58
(lp20166
g20118
ag0
(g2193
g2
Ntp20167
Rp20168
(dp20169
g11
S'auto_6720'
p20170
sg13
I0
sg14
g0
(g15
g2
Ntp20171
Rp20172
(dp20173
g19
(lp20174
sbsg52
Nsg53
g0
(g54
g2
Ntp20175
Rp20176
(dp20177
g58
(lp20178
g20124
ag0
(g2193
g2
Ntp20179
Rp20180
(dp20181
g11
S'auto_6719'
p20182
sg13
I0
sg14
g0
(g15
g2
Ntp20183
Rp20184
(dp20185
g19
(lp20186
sbsg52
Nsg53
g0
(g54
g2
Ntp20187
Rp20188
(dp20189
g58
(lp20190
g20130
ag20136
asg14
g0
(g15
g2
Ntp20191
Rp20192
sg204
(lp20193
g20180
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp20194
Rp20195
sg204
(lp20196
g20168
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp20197
Rp20198
sg204
(lp20199
g20156
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp20200
Rp20201
sg204
(lp20202
g20144
asg206
g3535
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s + %(i4)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i1)s - V%(id)s_tmp2;\n%(o0)s = ((V%(id)s_tmp3)>(%(i0)s)? (V%(id)s_tmp3): ((%(i0)s)>=(V%(id)s_tmp3)? (%(i0)s): nan("")));\n}\n'
p20203
sg2314
(g2202
tp20204
sg508
g0
(g2316
g2
Ntp20205
Rp20206
(dp20207
g2320
(I3
tp20208
sbsg2322
(lp20209
S'%(nodename)s_subnode0'
p20210
aS'%(nodename)s_subnode1'
p20211
aS'%(nodename)s_subnode2'
p20212
aS'%(nodename)s_subnode3'
p20213
asg2328
I1
sbsbsg2143
(lp20214
g2330
ag2146
asbsg2147
(dp20215
sg206
g0
(g497
g2
Ntp20216
Rp20217
(dp20218
g52
Nsg503
g20108
sg511
(dp20219
I0
(lp20220
I3
assg513
Nsg516
g0
(g517
g2
Ntp20221
Rp20222
(dp20223
g521
I3713080549411575706
sg522
(dp20224
I0
I3
ssbsg524
I00
sbsbI2
tp20225
asg11
S'auto_1536'
p20226
sg14
g0
(g15
g2
Ntp20227
Rp20228
(dp20229
g19
g1851
sbsg53
Nsg177
g1864
sbasg1883
g16854
sg204
(lp20230
g17152
asg14
g0
(g15
g2
Ntp20231
Rp20232
(dp20233
g2143
(lp20234
g2886
ag2146
asbsg2147
(dp20235
sg206
g0
(g2888
g2
Ntp20236
Rp20237
(dp20238
g2892
I0
sbsbsg177
g2894
sbag17175
asg1883
g16854
sg204
(lp20239
g17138
asg14
g0
(g15
g2
Ntp20240
Rp20241
(dp20242
g2143
(lp20243
g2886
ag2146
asbsg2147
(dp20244
sg206
g3334
sbsg177
g0
(g178
g2
Ntp20245
Rp20246
(dp20247
g182
(I00
tp20248
sg183
g2896
sg185
g2899
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp20249
g17102
asg14
g0
(g15
g2
Ntp20250
Rp20251
(dp20252
g2188
g0
(g54
g2
Ntp20253
Rp20254
(dp20255
g58
(lp20256
g0
(g2193
g2
Ntp20257
Rp20258
(dp20259
g11
S'auto_7384'
p20260
sg13
Nsg14
g0
(g15
g2
Ntp20261
Rp20262
sg52
Nsg53
Nsg177
g2925
sbasg14
g0
(g15
g2
Ntp20263
Rp20264
sg204
(lp20265
g0
(g2193
g2
Ntp20266
Rp20267
(dp20268
g11
S'auto_7385'
p20269
sg13
I0
sg14
g0
(g15
g2
Ntp20270
Rp20271
sg52
Nsg53
g20254
sg177
g2202
sbasg206
g3280
sbsg2143
(lp20272
g2146
ag2146
asbsg2147
(dp20273
sg206
g3295
sbsg177
g10521
sbag0
(g2920
g2
Ntp20274
Rp20275
(dp20276
g13
Nsg52
Nsg1883
g16854
sg177
g2925
sg1892
(lp20277
(g17098
I1
tp20278
asg11
S'auto_1595'
p20279
sg14
g0
(g15
g2
Ntp20280
Rp20281
(dp20282
g19
g10592
sbsg193
g2038
(g2899
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p20283
tp20284
Rp20285
sbasg1883
g16854
sg204
(lp20286
g17088
asg14
g0
(g15
g2
Ntp20287
Rp20288
(dp20289
g2143
(lp20290
g2146
ag2146
asbsg2147
(dp20291
sg206
g10611
sbsg177
g10615
sbasg1883
g16854
sg204
(lp20292
g17074
asg14
g0
(g15
g2
Ntp20293
Rp20294
(dp20295
g2143
(lp20296
g18942
ag2146
asbsg2147
(dp20297
sg206
g0
(g207
g2
Ntp20298
Rp20299
(dp20300
g211
(lp20301
sg213
(lp20302
sg215
(lp20303
I0
aI1
asg217
g218
sg219
(tsg220
(lp20304
g222
asg223
I01
sg224
(g225
g225
tp20305
sg227
(dp20306
S'support_code_apply'
p20307
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p20308
ssg231
(dp20309
I0
(lp20310
I0
assg234
(lp20311
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p20312
asbsbsg177
g0
(g178
g2
Ntp20313
Rp20314
(dp20315
g182
(I01
I01
tp20316
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17066
asg1883
g16854
sg204
(lp20317
g0
(g7
g2
Ntp20318
Rp20319
(dp20320
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp20321
(g17002
I5
tp20322
asg11
S'auto_4350'
p20323
sg14
g0
(g15
g2
Ntp20324
Rp20325
(dp20326
g19
(lp20327
sbsg53
g17070
sg177
g0
(g178
g2
Ntp20328
Rp20329
(dp20330
g182
(I01
I01
tp20331
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp20332
Rp20333
(dp20334
g2188
g0
(g54
g2
Ntp20335
Rp20336
(dp20337
g58
(lp20338
g0
(g2193
g2
Ntp20339
Rp20340
(dp20341
g11
S'auto_7502'
p20342
sg13
Nsg14
g0
(g15
g2
Ntp20343
Rp20344
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20345
Rp20346
(dp20347
g11
S'auto_7503'
p20348
sg13
Nsg14
g0
(g15
g2
Ntp20349
Rp20350
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp20351
Rp20352
sg204
(lp20353
g0
(g2193
g2
Ntp20354
Rp20355
(dp20356
g11
S'auto_7504'
p20357
sg13
I0
sg14
g0
(g15
g2
Ntp20358
Rp20359
sg52
Nsg53
g20336
sg177
g2202
sbasg206
g1224
sbsg4120
(lp20360
g2330
ag2330
asg2143
(lp20361
g18942
aS"('Revert', 'inplace_elemwise_optimizer')"
p20362
aS"('Revert', 'inplace_elemwise_optimizer')"
p20363
ag2146
asbsg2147
(dp20364
sg206
g1220
sbI1
tp20365
asg11
S'auto_4346'
p20366
sg14
g0
(g15
g2
Ntp20367
Rp20368
(dp20369
g19
(lp20370
sbsg53
g17061
sg177
g0
(g178
g2
Ntp20371
Rp20372
(dp20373
g182
(I01
I01
tp20374
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp20375
Rp20376
(dp20377
g2143
(lp20378
g18942
ag2146
asbsg2147
(dp20379
sg206
g0
(g207
g2
Ntp20380
Rp20381
(dp20382
g211
(lp20383
sg213
(lp20384
sg215
(lp20385
I0
aI1
asg217
g218
sg219
(tsg220
(lp20386
g222
asg223
I01
sg224
g20305
sg227
(dp20387
S'support_code_apply'
p20388
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p20389
ssg231
(dp20390
I0
(lp20391
I0
assg234
(lp20392
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p20393
asbsbI0
tp20394
a(g17053
I1
tp20395
asg11
S'auto_1598'
p20396
sg14
g0
(g15
g2
Ntp20397
Rp20398
(dp20399
g19
g10452
sbsg53
g17107
sg177
g10554
sbag17088
asg1883
g16854
sg204
(lp20400
g0
(g7
g2
Ntp20401
Rp20402
(dp20403
g13
I0
sg52
g3080
sg1883
g16854
sg1892
(lp20404
(g3082
I0
tp20405
asg11
S'auto_6756'
p20406
sg14
g0
(g15
g2
Ntp20407
Rp20408
(dp20409
g19
(lp20410
sbsg53
g17053
sg177
g0
(g178
g2
Ntp20411
Rp20412
(dp20413
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp20414
Rp20415
(dp20416
g2188
g0
(g54
g2
Ntp20417
Rp20418
(dp20419
g58
(lp20420
g0
(g2193
g2
Ntp20421
Rp20422
(dp20423
g11
S'auto_7685'
p20424
sg13
Nsg14
g0
(g15
g2
Ntp20425
Rp20426
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20427
Rp20428
(dp20429
g11
S'auto_7686'
p20430
sg13
Nsg14
g0
(g15
g2
Ntp20431
Rp20432
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20433
Rp20434
(dp20435
g11
S'auto_7687'
p20436
sg13
Nsg14
g0
(g15
g2
Ntp20437
Rp20438
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp20439
Rp20440
sg204
(lp20441
g0
(g2193
g2
Ntp20442
Rp20443
(dp20444
g11
S'auto_7688'
p20445
sg13
I0
sg14
g0
(g15
g2
Ntp20446
Rp20447
sg52
Nsg53
g20418
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp20448
Rp20449
(dp20450
g58
(lp20451
g0
(g2193
g2
Ntp20452
Rp20453
(dp20454
g11
S'auto_6742'
p20455
sg13
Nsg14
g0
(g15
g2
Ntp20456
Rp20457
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20458
Rp20459
(dp20460
g11
S'auto_6743'
p20461
sg13
Nsg14
g0
(g15
g2
Ntp20462
Rp20463
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20464
Rp20465
(dp20466
g11
S'auto_6744'
p20467
sg13
Nsg14
g0
(g15
g2
Ntp20468
Rp20469
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp20470
sg204
(lp20471
g0
(g2193
g2
Ntp20472
Rp20473
(dp20474
g11
S'auto_6746'
p20475
sg13
I0
sg14
g0
(g15
g2
Ntp20476
Rp20477
(dp20478
g19
(lp20479
sbsg52
Nsg53
g0
(g54
g2
Ntp20480
Rp20481
(dp20482
g58
(lp20483
g0
(g2193
g2
Ntp20484
Rp20485
(dp20486
g11
S'auto_6745'
p20487
sg13
I0
sg14
g0
(g15
g2
Ntp20488
Rp20489
(dp20490
g19
(lp20491
sbsg52
Nsg53
g0
(g54
g2
Ntp20492
Rp20493
(dp20494
g58
(lp20495
g20453
ag20459
asg14
g0
(g15
g2
Ntp20496
Rp20497
sg204
(lp20498
g20485
asg206
g3179
sbsg177
g2202
sbag20465
asg14
g0
(g15
g2
Ntp20499
Rp20500
sg204
(lp20501
g20473
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s / %(i1)s;\n%(o0)s = V%(id)s_tmp1 / %(i2)s;\n}\n'
p20502
sg2314
(g2202
tp20503
sg508
g0
(g2316
g2
Ntp20504
Rp20505
(dp20506
g2320
(I0
tp20507
sbsg2322
(lp20508
S'%(nodename)s_subnode0'
p20509
aS'%(nodename)s_subnode1'
p20510
asg2328
I1
sbsbsg2143
(lp20511
g2330
ag2146
asbsg2147
(dp20512
sg206
g0
(g497
g2
Ntp20513
Rp20514
(dp20515
g52
Nsg503
g20449
sg511
(dp20516
I0
(lp20517
I0
assg513
Nsg516
g0
(g517
g2
Ntp20518
Rp20519
(dp20520
g521
I3713080549408328131
sg522
(dp20521
I0
I0
ssbsg524
I00
sbsbI0
tp20522
asg11
S'auto_1599'
p20523
sg14
g0
(g15
g2
Ntp20524
Rp20525
(dp20526
g19
g10420
sbsg53
g17044
sg177
g10443
sbasg14
g0
(g15
g2
Ntp20527
Rp20528
(dp20529
g2143
(lp20530
g2146
ag2146
asbsg2147
(dp20531
sg206
g10440
sbI0
tp20532
asg11
S'auto_6741'
p20533
sg14
g0
(g15
g2
Ntp20534
Rp20535
(dp20536
g19
(lp20537
sbsg53
g17035
sg177
g0
(g178
g2
Ntp20538
Rp20539
(dp20540
g182
(I00
I00
tp20541
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp20542
Rp20543
(dp20544
g2188
g0
(g54
g2
Ntp20545
Rp20546
(dp20547
g58
(lp20548
g0
(g2193
g2
Ntp20549
Rp20550
(dp20551
g11
S'auto_7566'
p20552
sg13
Nsg14
g0
(g15
g2
Ntp20553
Rp20554
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp20555
Rp20556
sg204
(lp20557
g0
(g2193
g2
Ntp20558
Rp20559
(dp20560
g11
S'auto_7567'
p20561
sg13
I0
sg14
g0
(g15
g2
Ntp20562
Rp20563
sg52
Nsg53
g20546
sg177
g2202
sbasg206
g0
(g3541
g2
Ntp20564
Rp20565
(dp20566
g508
g0
(g2316
g2
Ntp20567
Rp20568
(dp20569
g2320
(I0
tp20570
sbsg52
Nsbsbsg2143
(lp20571
g2330
ag2146
asbsg2147
(dp20572
sg206
g0
(g497
g2
Ntp20573
Rp20574
(dp20575
g52
Nsg503
g20565
sg511
(dp20576
I0
(lp20577
I0
assg513
g6014
sg516
g0
(g517
g2
Ntp20578
Rp20579
(dp20580
g521
I3713080549408328131
sg522
(dp20581
I0
I0
ssbsg524
I00
sbsbI0
tp20582
asg11
S'auto_6738'
p20583
sg14
g0
(g15
g2
Ntp20584
Rp20585
(dp20586
g19
(lp20587
sbsg53
g17196
sg177
g0
(g178
g2
Ntp20588
Rp20589
(dp20590
g182
(I00
I00
tp20591
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17200
ag17166
ag20319
asg1883
g16854
sg204
(lp20592
g17254
asg14
g0
(g15
g2
Ntp20593
Rp20594
(dp20595
g2188
g0
(g54
g2
Ntp20596
Rp20597
(dp20598
g58
(lp20599
g0
(g2193
g2
Ntp20600
Rp20601
(dp20602
g11
S'auto_7538'
p20603
sg13
Nsg14
g0
(g15
g2
Ntp20604
Rp20605
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20606
Rp20607
(dp20608
g11
S'auto_7539'
p20609
sg13
Nsg14
g0
(g15
g2
Ntp20610
Rp20611
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20612
Rp20613
(dp20614
g11
S'auto_7540'
p20615
sg13
Nsg14
g0
(g15
g2
Ntp20616
Rp20617
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20618
Rp20619
(dp20620
g11
S'auto_7541'
p20621
sg13
Nsg14
g0
(g15
g2
Ntp20622
Rp20623
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20624
Rp20625
(dp20626
g11
S'auto_7542'
p20627
sg13
Nsg14
g0
(g15
g2
Ntp20628
Rp20629
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20630
Rp20631
(dp20632
g11
S'auto_7543'
p20633
sg13
Nsg14
g0
(g15
g2
Ntp20634
Rp20635
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp20636
Rp20637
sg204
(lp20638
g0
(g2193
g2
Ntp20639
Rp20640
(dp20641
g11
S'auto_7544'
p20642
sg13
I0
sg14
g0
(g15
g2
Ntp20643
Rp20644
sg52
Nsg53
g20597
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp20645
Rp20646
(dp20647
g58
(lp20648
g0
(g2193
g2
Ntp20649
Rp20650
(dp20651
g11
S'auto_6154'
p20652
sg13
Nsg14
g0
(g15
g2
Ntp20653
Rp20654
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20655
Rp20656
(dp20657
g11
S'auto_6155'
p20658
sg13
Nsg14
g0
(g15
g2
Ntp20659
Rp20660
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20661
Rp20662
(dp20663
g11
S'auto_6156'
p20664
sg13
Nsg14
g0
(g15
g2
Ntp20665
Rp20666
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20667
Rp20668
(dp20669
g11
S'auto_6157'
p20670
sg13
Nsg14
g0
(g15
g2
Ntp20671
Rp20672
(dp20673
g2511
g2038
(g189
S'\x00\x00\x00\x00'
p20674
tp20675
Rp20676
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20677
Rp20678
(dp20679
g11
S'auto_6158'
p20680
sg13
Nsg14
g0
(g15
g2
Ntp20681
Rp20682
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20683
Rp20684
(dp20685
g11
S'auto_6159'
p20686
sg13
Nsg14
g0
(g15
g2
Ntp20687
Rp20688
sg52
Nsg53
Nsg177
g2202
sbasg2248
I6
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
g2202
tp20689
sg204
(lp20690
g0
(g2193
g2
Ntp20691
Rp20692
(dp20693
g11
S'auto_6164'
p20694
sg13
I0
sg14
g0
(g15
g2
Ntp20695
Rp20696
(dp20697
g19
(lp20698
sbsg52
Nsg53
g0
(g54
g2
Ntp20699
Rp20700
(dp20701
g58
(lp20702
g0
(g2193
g2
Ntp20703
Rp20704
(dp20705
g11
S'auto_6163'
p20706
sg13
I0
sg14
g0
(g15
g2
Ntp20707
Rp20708
(dp20709
g19
(lp20710
sbsg52
Nsg53
g0
(g54
g2
Ntp20711
Rp20712
(dp20713
g58
(lp20714
g20650
ag0
(g2193
g2
Ntp20715
Rp20716
(dp20717
g11
S'auto_6162'
p20718
sg13
I0
sg14
g0
(g15
g2
Ntp20719
Rp20720
(dp20721
g19
(lp20722
sbsg52
Nsg53
g0
(g54
g2
Ntp20723
Rp20724
(dp20725
g58
(lp20726
g20656
ag0
(g2193
g2
Ntp20727
Rp20728
(dp20729
g11
S'auto_6161'
p20730
sg13
I0
sg14
g0
(g15
g2
Ntp20731
Rp20732
(dp20733
g19
(lp20734
sbsg52
Nsg53
g0
(g54
g2
Ntp20735
Rp20736
(dp20737
g58
(lp20738
g20662
ag20668
asg14
g0
(g15
g2
Ntp20739
Rp20740
sg204
(lp20741
g20728
asg206
g10105
sbsg177
g2584
sbasg14
g0
(g15
g2
Ntp20742
Rp20743
sg204
(lp20744
g20716
asg206
g3526
sbsg177
g2202
sbag20662
ag20678
asg14
g0
(g15
g2
Ntp20745
Rp20746
sg204
(lp20747
g20704
asg206
g1224
sbsg177
g2202
sbag20684
asg14
g0
(g15
g2
Ntp20748
Rp20749
sg204
(lp20750
g20692
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i2)s == %(i3)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s - V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * V%(id)s_tmp2 * %(i2)s * %(i4)s;\n%(o0)s = V%(id)s_tmp3 / %(i5)s;\n}\n'
p20751
sg2314
(g2202
tp20752
sg2322
(lp20753
S'%(nodename)s_subnode0'
p20754
aS'%(nodename)s_subnode1'
p20755
aS'%(nodename)s_subnode2'
p20756
aS'%(nodename)s_subnode3'
p20757
asg2328
I1
sbsbsg2143
(lp20758
g2628
ag2146
asbsg2147
(dp20759
sg206
g0
(g497
g2
Ntp20760
Rp20761
(dp20762
g52
Nsg503
g20646
sg511
(dp20763
sg513
Nsg516
g0
(g517
g2
Ntp20764
Rp20765
(dp20766
g521
I0
sg522
(dp20767
sbsg524
I00
sbsbI1
tp20768
a(g16946
I4
tp20769
a(g16938
I4
tp20770
a(g17196
I1
tp20771
a(g18858
I0
tp20772
a(g16994
I0
tp20773
a(g16930
I9
tp20774
a(g16955
I9
tp20775
asg11
S'auto_4061'
p20776
sg14
g0
(g15
g2
Ntp20777
Rp20778
(dp20779
g19
(lp20780
g9953
asg175
g2038
(g189
S'\x00\x00\x80?'
p20781
tp20782
Rp20783
sbsg193
g194
(g195
(I0
tp20784
g197
tp20785
Rp20786
(I1
(I1
I1
tp20787
g189
I00
S'\x00\x00\x80?'
p20788
tp20789
bsbag19602
ag18862
asg1883
g16854
sg204
(lp20790
g16983
asg14
g0
(g15
g2
Ntp20791
Rp20792
(dp20793
g2188
g0
(g54
g2
Ntp20794
Rp20795
(dp20796
g58
(lp20797
g0
(g2193
g2
Ntp20798
Rp20799
(dp20800
g11
S'auto_7444'
p20801
sg13
Nsg14
g0
(g15
g2
Ntp20802
Rp20803
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20804
Rp20805
(dp20806
g11
S'auto_7445'
p20807
sg13
Nsg14
g0
(g15
g2
Ntp20808
Rp20809
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20810
Rp20811
(dp20812
g11
S'auto_7446'
p20813
sg13
Nsg14
g0
(g15
g2
Ntp20814
Rp20815
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp20816
Rp20817
sg204
(lp20818
g0
(g2193
g2
Ntp20819
Rp20820
(dp20821
g11
S'auto_7447'
p20822
sg13
I0
sg14
g0
(g15
g2
Ntp20823
Rp20824
sg52
Nsg53
g20795
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp20825
Rp20826
(dp20827
g58
(lp20828
g0
(g2193
g2
Ntp20829
Rp20830
(dp20831
g11
S'auto_5898'
p20832
sg13
Nsg14
g0
(g15
g2
Ntp20833
Rp20834
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20835
Rp20836
(dp20837
g11
S'auto_5899'
p20838
sg13
Nsg14
g0
(g15
g2
Ntp20839
Rp20840
(dp20841
g2511
g2038
(g189
S'w\xbe\x7f?'
p20842
tp20843
Rp20844
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20845
Rp20846
(dp20847
g11
S'auto_5900'
p20848
sg13
Nsg14
g0
(g15
g2
Ntp20849
Rp20850
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp20851
sg204
(lp20852
g0
(g2193
g2
Ntp20853
Rp20854
(dp20855
g11
S'auto_5904'
p20856
sg13
I0
sg14
g0
(g15
g2
Ntp20857
Rp20858
(dp20859
g19
(lp20860
sbsg52
Nsg53
g0
(g54
g2
Ntp20861
Rp20862
(dp20863
g58
(lp20864
g0
(g2193
g2
Ntp20865
Rp20866
(dp20867
g11
S'auto_5903'
p20868
sg13
I0
sg14
g0
(g15
g2
Ntp20869
Rp20870
(dp20871
g19
(lp20872
sbsg52
Nsg53
g0
(g54
g2
Ntp20873
Rp20874
(dp20875
g58
(lp20876
g20830
ag0
(g2193
g2
Ntp20877
Rp20878
(dp20879
g11
S'auto_5902'
p20880
sg13
I0
sg14
g0
(g15
g2
Ntp20881
Rp20882
(dp20883
g19
(lp20884
sbsg52
Nsg53
g0
(g54
g2
Ntp20885
Rp20886
(dp20887
g58
(lp20888
g20836
ag20846
asg14
g0
(g15
g2
Ntp20889
Rp20890
sg204
(lp20891
g20878
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp20892
Rp20893
sg204
(lp20894
g20866
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp20895
Rp20896
sg204
(lp20897
g20854
asg206
g7884
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i1)s, %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s - V%(id)s_tmp1;\n%(o0)s = sqrt((npy_float32)V%(id)s_tmp2);\n}\n'
p20898
sg2314
(g2202
tp20899
sg2322
(lp20900
S'%(nodename)s_subnode0'
p20901
aS'%(nodename)s_subnode1'
p20902
aS'%(nodename)s_subnode2'
p20903
asg2328
I1
sbsbsg4120
(lp20904
g2330
asg2143
(lp20905
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p20906
ag2146
asbsg2147
(dp20907
sg206
g0
(g497
g2
Ntp20908
Rp20909
(dp20910
g52
Nsg503
g20826
sg511
(dp20911
sg513
Nsg516
g0
(g517
g2
Ntp20912
Rp20913
(dp20914
g521
I0
sg522
(dp20915
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp20916
Rp20917
(dp20918
g182
(I01
I01
tp20919
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag19263
ag19109
ag0
(g149
g2
Ntp20920
Rp20921
(dp20922
g13
Nsg52
Nsg1883
g16854
sg177
g11553
sg1892
(lp20923
(g16930
I6
tp20924
a(g16955
I6
tp20925
asg11
S'auto_4129'
p20926
sg14
g0
(g15
g2
Ntp20927
Rp20928
(dp20929
g19
(lp20930
g11487
asg175
g2038
(g189
S'w\xcc+2'
p20931
tp20932
Rp20933
sbsg193
g194
(g195
(I0
tp20934
g197
tp20935
Rp20936
(I1
(I1
I1
tp20937
g189
I00
S'w\xcc+2'
p20938
tp20939
bsbag19848
ag0
(g149
g2
Ntp20940
Rp20941
(dp20942
g13
Nsg52
Nsg1883
g16854
sg177
g9942
sg1892
(lp20943
(g16946
I3
tp20944
a(g16938
I3
tp20945
a(g16930
I8
tp20946
a(g16955
I8
tp20947
asg11
S'auto_4069'
p20948
sg14
g0
(g15
g2
Ntp20949
Rp20950
(dp20951
g19
(lp20952
g9902
asg175
g2038
(g189
S'\x00\x00\x80\xbf'
p20953
tp20954
Rp20955
sbsg193
g194
(g195
(I0
tp20956
g197
tp20957
Rp20958
(I1
(I1
I1
tp20959
g189
I00
S'\x00\x00\x80\xbf'
p20960
tp20961
bsbag16998
asg1883
g16854
sg204
(lp20962
g0
(g7
g2
Ntp20963
Rp20964
(dp20965
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp20966
(g3082
I3
tp20967
asg11
S'auto_7152'
p20968
sg14
g0
(g15
g2
Ntp20969
Rp20970
(dp20971
g19
(lp20972
sbsg53
g16955
sg177
g0
(g178
g2
Ntp20973
Rp20974
(dp20975
g182
(I00
I00
tp20976
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp20977
Rp20978
(dp20979
g2188
g0
(g54
g2
Ntp20980
Rp20981
(dp20982
g58
(lp20983
g0
(g2193
g2
Ntp20984
Rp20985
(dp20986
g11
S'auto_7736'
p20987
sg13
Nsg14
g0
(g15
g2
Ntp20988
Rp20989
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20990
Rp20991
(dp20992
g11
S'auto_7737'
p20993
sg13
Nsg14
g0
(g15
g2
Ntp20994
Rp20995
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp20996
Rp20997
(dp20998
g11
S'auto_7738'
p20999
sg13
Nsg14
g0
(g15
g2
Ntp21000
Rp21001
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21002
Rp21003
(dp21004
g11
S'auto_7739'
p21005
sg13
Nsg14
g0
(g15
g2
Ntp21006
Rp21007
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21008
Rp21009
(dp21010
g11
S'auto_7740'
p21011
sg13
Nsg14
g0
(g15
g2
Ntp21012
Rp21013
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21014
Rp21015
(dp21016
g11
S'auto_7741'
p21017
sg13
Nsg14
g0
(g15
g2
Ntp21018
Rp21019
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21020
Rp21021
(dp21022
g11
S'auto_7742'
p21023
sg13
Nsg14
g0
(g15
g2
Ntp21024
Rp21025
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21026
Rp21027
(dp21028
g11
S'auto_7743'
p21029
sg13
Nsg14
g0
(g15
g2
Ntp21030
Rp21031
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21032
Rp21033
(dp21034
g11
S'auto_7744'
p21035
sg13
Nsg14
g0
(g15
g2
Ntp21036
Rp21037
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21038
Rp21039
(dp21040
g11
S'auto_7745'
p21041
sg13
Nsg14
g0
(g15
g2
Ntp21042
Rp21043
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp21044
Rp21045
sg204
(lp21046
g0
(g2193
g2
Ntp21047
Rp21048
(dp21049
g11
S'auto_7746'
p21050
sg13
I0
sg14
g0
(g15
g2
Ntp21051
Rp21052
sg52
Nsg53
g20981
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp21053
Rp21054
(dp21055
g58
(lp21056
g0
(g2193
g2
Ntp21057
Rp21058
(dp21059
g11
S'auto_7107'
p21060
sg13
Nsg14
g0
(g15
g2
Ntp21061
Rp21062
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21063
Rp21064
(dp21065
g11
S'auto_7108'
p21066
sg13
Nsg14
g0
(g15
g2
Ntp21067
Rp21068
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21069
Rp21070
(dp21071
g11
S'auto_7109'
p21072
sg13
Nsg14
g0
(g15
g2
Ntp21073
Rp21074
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21075
Rp21076
(dp21077
g11
S'auto_7110'
p21078
sg13
Nsg14
g0
(g15
g2
Ntp21079
Rp21080
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21081
Rp21082
(dp21083
g11
S'auto_7111'
p21084
sg13
Nsg14
g0
(g15
g2
Ntp21085
Rp21086
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21087
Rp21088
(dp21089
g11
S'auto_7112'
p21090
sg13
Nsg14
g0
(g15
g2
Ntp21091
Rp21092
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21093
Rp21094
(dp21095
g11
S'auto_7113'
p21096
sg13
Nsg14
g0
(g15
g2
Ntp21097
Rp21098
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21099
Rp21100
(dp21101
g11
S'auto_7114'
p21102
sg13
Nsg14
g0
(g15
g2
Ntp21103
Rp21104
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21105
Rp21106
(dp21107
g11
S'auto_7115'
p21108
sg13
Nsg14
g0
(g15
g2
Ntp21109
Rp21110
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21111
Rp21112
(dp21113
g11
S'auto_7116'
p21114
sg13
Nsg14
g0
(g15
g2
Ntp21115
Rp21116
sg52
Nsg53
Nsg177
g2202
sbasg2248
I10
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
tp21117
sg204
(lp21118
g0
(g2193
g2
Ntp21119
Rp21120
(dp21121
g11
S'auto_7123'
p21122
sg13
I0
sg14
g0
(g15
g2
Ntp21123
Rp21124
(dp21125
g19
(lp21126
sbsg52
Nsg53
g0
(g54
g2
Ntp21127
Rp21128
(dp21129
g58
(lp21130
g0
(g2193
g2
Ntp21131
Rp21132
(dp21133
g11
S'auto_7122'
p21134
sg13
I0
sg14
g0
(g15
g2
Ntp21135
Rp21136
(dp21137
g19
(lp21138
sbsg52
Nsg53
g0
(g54
g2
Ntp21139
Rp21140
(dp21141
g58
(lp21142
g21058
ag0
(g2193
g2
Ntp21143
Rp21144
(dp21145
g11
S'auto_7121'
p21146
sg13
I0
sg14
g0
(g15
g2
Ntp21147
Rp21148
(dp21149
g19
(lp21150
sbsg52
Nsg53
g0
(g54
g2
Ntp21151
Rp21152
(dp21153
g58
(lp21154
g0
(g2193
g2
Ntp21155
Rp21156
(dp21157
g11
S'auto_7120'
p21158
sg13
I0
sg14
g0
(g15
g2
Ntp21159
Rp21160
(dp21161
g19
(lp21162
sbsg52
Nsg53
g0
(g54
g2
Ntp21163
Rp21164
(dp21165
g58
(lp21166
g21064
ag21070
ag21076
ag21082
asg14
g0
(g15
g2
Ntp21167
Rp21168
sg204
(lp21169
g21156
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp21170
Rp21171
(dp21172
g11
S'auto_7119'
p21173
sg13
I0
sg14
g0
(g15
g2
Ntp21174
Rp21175
(dp21176
g19
(lp21177
sbsg52
Nsg53
g0
(g54
g2
Ntp21178
Rp21179
(dp21180
g58
(lp21181
g21088
ag0
(g2193
g2
Ntp21182
Rp21183
(dp21184
g11
S'auto_7118'
p21185
sg13
I0
sg14
g0
(g15
g2
Ntp21186
Rp21187
(dp21188
g19
(lp21189
sbsg52
Nsg53
g0
(g54
g2
Ntp21190
Rp21191
(dp21192
g58
(lp21193
g21094
ag0
(g2193
g2
Ntp21194
Rp21195
(dp21196
g11
S'auto_7117'
p21197
sg13
I0
sg14
g0
(g15
g2
Ntp21198
Rp21199
(dp21200
g19
(lp21201
sbsg52
Nsg53
g0
(g54
g2
Ntp21202
Rp21203
(dp21204
g58
(lp21205
g21100
asg14
g0
(g15
g2
Ntp21206
Rp21207
sg204
(lp21208
g21195
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21209
Rp21210
sg204
(lp21211
g21183
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21212
Rp21213
sg204
(lp21214
g21171
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21215
Rp21216
sg204
(lp21217
g21144
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21218
Rp21219
sg204
(lp21220
g21132
asg206
g1157
sbsg177
g2202
sbag21106
ag21112
asg14
g0
(g15
g2
Ntp21221
Rp21222
sg204
(lp21223
g21120
asg206
g11700
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i7)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i6)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i5)s * V%(id)s_tmp2;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s * %(i2)s * %(i3)s * %(i4)s;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = V%(id)s_tmp4 / V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s + V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 < %(i8)s ? %(i8)s : V%(id)s_tmp6 > %(i9)s ? %(i9)s : V%(id)s_tmp6;\n}\n'
p21224
sg2314
(g2202
tp21225
sg508
g0
(g2316
g2
Ntp21226
Rp21227
(dp21228
g2320
(I0
tp21229
sbsg2322
(lp21230
S'%(nodename)s_subnode0'
p21231
aS'%(nodename)s_subnode1'
p21232
aS'%(nodename)s_subnode2'
p21233
aS'%(nodename)s_subnode3'
p21234
aS'%(nodename)s_subnode4'
p21235
aS'%(nodename)s_subnode5'
p21236
aS'%(nodename)s_subnode6'
p21237
asg2328
I1
sbsbsg2143
(lp21238
g2330
ag2146
asbsg2147
(dp21239
sg206
g0
(g497
g2
Ntp21240
Rp21241
(dp21242
g52
Nsg503
g21054
sg511
(dp21243
I0
(lp21244
I0
assg513
Nsg516
g0
(g517
g2
Ntp21245
Rp21246
(dp21247
g521
I3713080549408328131
sg522
(dp21248
I0
I0
ssbsg524
I00
sbsbI0
tp21249
asg11
S'auto_1540'
p21250
sg14
g0
(g15
g2
Ntp21251
Rp21252
(dp21253
g19
g1334
sbsg53
Nsg177
g1363
sbag16942
ag17200
ag20941
ag16998
asg1883
g16854
sg204
(lp21254
g17573
asg14
g0
(g15
g2
Ntp21255
Rp21256
(dp21257
g2188
g0
(g54
g2
Ntp21258
Rp21259
(dp21260
g58
(lp21261
g0
(g2193
g2
Ntp21262
Rp21263
(dp21264
g11
S'auto_7237'
p21265
sg13
Nsg14
g0
(g15
g2
Ntp21266
Rp21267
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21268
Rp21269
(dp21270
g11
S'auto_7238'
p21271
sg13
Nsg14
g0
(g15
g2
Ntp21272
Rp21273
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21274
Rp21275
(dp21276
g11
S'auto_7239'
p21277
sg13
Nsg14
g0
(g15
g2
Ntp21278
Rp21279
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21280
Rp21281
(dp21282
g11
S'auto_7240'
p21283
sg13
Nsg14
g0
(g15
g2
Ntp21284
Rp21285
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21286
Rp21287
(dp21288
g11
S'auto_7241'
p21289
sg13
Nsg14
g0
(g15
g2
Ntp21290
Rp21291
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp21292
Rp21293
sg204
(lp21294
g0
(g2193
g2
Ntp21295
Rp21296
(dp21297
g11
S'auto_7242'
p21298
sg13
I0
sg14
g0
(g15
g2
Ntp21299
Rp21300
sg52
Nsg53
g21259
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp21301
Rp21302
(dp21303
g58
(lp21304
g0
(g2193
g2
Ntp21305
Rp21306
(dp21307
g11
S'auto_6492'
p21308
sg13
Nsg14
g0
(g15
g2
Ntp21309
Rp21310
(dp21311
g2511
g2038
(g189
S'w\xda1\xbf'
p21312
tp21313
Rp21314
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21315
Rp21316
(dp21317
g11
S'auto_6493'
p21318
sg13
Nsg14
g0
(g15
g2
Ntp21319
Rp21320
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21321
Rp21322
(dp21323
g11
S'auto_6494'
p21324
sg13
Nsg14
g0
(g15
g2
Ntp21325
Rp21326
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21327
Rp21328
(dp21329
g11
S'auto_6495'
p21330
sg13
Nsg14
g0
(g15
g2
Ntp21331
Rp21332
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21333
Rp21334
(dp21335
g11
S'auto_6496'
p21336
sg13
Nsg14
g0
(g15
g2
Ntp21337
Rp21338
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
S'Composite{Switch(LT(Abs(i0), i1), i2, Switch(LT(i0, i2), i3, i4))}'
p21339
sg2249
(g2202
g2202
g2202
g2202
g2202
tp21340
sg204
(lp21341
g0
(g2193
g2
Ntp21342
Rp21343
(dp21344
g11
S'auto_6503'
p21345
sg13
I0
sg14
g0
(g15
g2
Ntp21346
Rp21347
(dp21348
g19
(lp21349
sbsg52
Nsg53
g0
(g54
g2
Ntp21350
Rp21351
(dp21352
g58
(lp21353
g0
(g2193
g2
Ntp21354
Rp21355
(dp21356
g11
S'auto_6501'
p21357
sg13
I0
sg14
g0
(g15
g2
Ntp21358
Rp21359
(dp21360
g19
(lp21361
sbsg52
Nsg53
g0
(g54
g2
Ntp21362
Rp21363
(dp21364
g58
(lp21365
g0
(g2193
g2
Ntp21366
Rp21367
(dp21368
g11
S'auto_6500'
p21369
sg13
I0
sg14
g0
(g15
g2
Ntp21370
Rp21371
(dp21372
g19
(lp21373
sbsg52
Nsg53
g0
(g54
g2
Ntp21374
Rp21375
(dp21376
g58
(lp21377
g21306
asg14
g0
(g15
g2
Ntp21378
Rp21379
sg204
(lp21380
g21367
asg206
g506
sbsg177
g2202
sbag21316
asg14
g0
(g15
g2
Ntp21381
Rp21382
sg204
(lp21383
g21355
asg206
g625
sbsg177
g2584
sbag21322
ag0
(g2193
g2
Ntp21384
Rp21385
(dp21386
g11
S'auto_6502'
p21387
sg13
I0
sg14
g0
(g15
g2
Ntp21388
Rp21389
(dp21390
g19
(lp21391
sbsg52
Nsg53
g0
(g54
g2
Ntp21392
Rp21393
(dp21394
g58
(lp21395
g0
(g2193
g2
Ntp21396
Rp21397
(dp21398
g11
S'auto_6499'
p21399
sg13
I0
sg14
g0
(g15
g2
Ntp21400
Rp21401
(dp21402
g19
(lp21403
sbsg52
Nsg53
g0
(g54
g2
Ntp21404
Rp21405
(dp21406
g58
(lp21407
g21306
ag21322
asg14
g0
(g15
g2
Ntp21408
Rp21409
sg204
(lp21410
g21397
asg206
g625
sbsg177
g2584
sbag21328
ag21334
asg14
g0
(g15
g2
Ntp21411
Rp21412
sg204
(lp21413
g21385
asg206
g1025
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21414
Rp21415
sg204
(lp21416
g21343
asg206
g1025
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s < %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = V%(id)s_tmp1 ? %(i3)s : %(i4)s;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = fabs(%(i0)s);\nnpy_bool V%(id)s_tmp4;\nV%(id)s_tmp4 = (V%(id)s_tmp3 < %(i1)s);\n%(o0)s = V%(id)s_tmp4 ? %(i2)s : V%(id)s_tmp2;\n}\n'
p21417
sg2314
(g2202
tp21418
sg2322
(lp21419
S'%(nodename)s_subnode0'
p21420
aS'%(nodename)s_subnode1'
p21421
aS'%(nodename)s_subnode2'
p21422
aS'%(nodename)s_subnode3'
p21423
aS'%(nodename)s_subnode4'
p21424
asg2328
I1
sbsbsg4120
(lp21425
g2330
asg2143
(lp21426
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p21427
ag2146
asbsg2147
(dp21428
sg206
g0
(g497
g2
Ntp21429
Rp21430
(dp21431
g52
Nsg503
g21302
sg511
(dp21432
sg513
Nsg516
g0
(g517
g2
Ntp21433
Rp21434
(dp21435
g521
I0
sg522
(dp21436
sbsg524
I00
sbsbI1
tp21437
a(g16938
I1
tp21438
asg11
S'auto_4089'
p21439
sg14
g0
(g15
g2
Ntp21440
Rp21441
(dp21442
g19
(lp21443
g9677
asg175
g2038
(g189
S'33\xb3>'
p21444
tp21445
Rp21446
sbsg193
g194
(g195
(I0
tp21447
g197
tp21448
Rp21449
(I1
(I1
I1
tp21450
g189
I00
S'33\xb3>'
p21451
tp21452
bsbag17200
ag20941
ag16998
asg1883
g16854
sg204
(lp21453
g17378
asg14
g0
(g15
g2
Ntp21454
Rp21455
(dp21456
g2188
g0
(g54
g2
Ntp21457
Rp21458
(dp21459
g58
(lp21460
g0
(g2193
g2
Ntp21461
Rp21462
(dp21463
g11
S'auto_7288'
p21464
sg13
Nsg14
g0
(g15
g2
Ntp21465
Rp21466
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21467
Rp21468
(dp21469
g11
S'auto_7289'
p21470
sg13
Nsg14
g0
(g15
g2
Ntp21471
Rp21472
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21473
Rp21474
(dp21475
g11
S'auto_7290'
p21476
sg13
Nsg14
g0
(g15
g2
Ntp21477
Rp21478
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21479
Rp21480
(dp21481
g11
S'auto_7291'
p21482
sg13
Nsg14
g0
(g15
g2
Ntp21483
Rp21484
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21485
Rp21486
(dp21487
g11
S'auto_7292'
p21488
sg13
Nsg14
g0
(g15
g2
Ntp21489
Rp21490
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp21491
Rp21492
sg204
(lp21493
g0
(g2193
g2
Ntp21494
Rp21495
(dp21496
g11
S'auto_7293'
p21497
sg13
I0
sg14
g0
(g15
g2
Ntp21498
Rp21499
sg52
Nsg53
g21458
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp21500
Rp21501
(dp21502
g58
(lp21503
g0
(g2193
g2
Ntp21504
Rp21505
(dp21506
g11
S'auto_6410'
p21507
sg13
Nsg14
g0
(g15
g2
Ntp21508
Rp21509
(dp21510
g2511
g2038
(g189
S'*\x14z>'
p21511
tp21512
Rp21513
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21514
Rp21515
(dp21516
g11
S'auto_6411'
p21517
sg13
Nsg14
g0
(g15
g2
Ntp21518
Rp21519
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21520
Rp21521
(dp21522
g11
S'auto_6412'
p21523
sg13
Nsg14
g0
(g15
g2
Ntp21524
Rp21525
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21526
Rp21527
(dp21528
g11
S'auto_6413'
p21529
sg13
Nsg14
g0
(g15
g2
Ntp21530
Rp21531
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21532
Rp21533
(dp21534
g11
S'auto_6414'
p21535
sg13
Nsg14
g0
(g15
g2
Ntp21536
Rp21537
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp21538
sg204
(lp21539
g0
(g2193
g2
Ntp21540
Rp21541
(dp21542
g11
S'auto_6421'
p21543
sg13
I0
sg14
g0
(g15
g2
Ntp21544
Rp21545
(dp21546
g19
(lp21547
sbsg52
Nsg53
g0
(g54
g2
Ntp21548
Rp21549
(dp21550
g58
(lp21551
g0
(g2193
g2
Ntp21552
Rp21553
(dp21554
g11
S'auto_6419'
p21555
sg13
I0
sg14
g0
(g15
g2
Ntp21556
Rp21557
(dp21558
g19
(lp21559
sbsg52
Nsg53
g0
(g54
g2
Ntp21560
Rp21561
(dp21562
g58
(lp21563
g0
(g2193
g2
Ntp21564
Rp21565
(dp21566
g11
S'auto_6417'
p21567
sg13
I0
sg14
g0
(g15
g2
Ntp21568
Rp21569
(dp21570
g19
(lp21571
sbsg52
Nsg53
g0
(g54
g2
Ntp21572
Rp21573
(dp21574
g58
(lp21575
g21505
asg14
g0
(g15
g2
Ntp21576
Rp21577
sg204
(lp21578
g21565
asg206
g506
sbsg177
g2202
sbag21515
asg14
g0
(g15
g2
Ntp21579
Rp21580
sg204
(lp21581
g21553
asg206
g625
sbsg177
g2584
sbag21521
ag0
(g2193
g2
Ntp21582
Rp21583
(dp21584
g11
S'auto_6420'
p21585
sg13
I0
sg14
g0
(g15
g2
Ntp21586
Rp21587
(dp21588
g19
(lp21589
sbsg52
Nsg53
g0
(g54
g2
Ntp21590
Rp21591
(dp21592
g58
(lp21593
g0
(g2193
g2
Ntp21594
Rp21595
(dp21596
g11
S'auto_6418'
p21597
sg13
I0
sg14
g0
(g15
g2
Ntp21598
Rp21599
(dp21600
g19
(lp21601
sbsg52
Nsg53
g0
(g54
g2
Ntp21602
Rp21603
(dp21604
g58
(lp21605
g21505
ag21521
asg14
g0
(g15
g2
Ntp21606
Rp21607
sg204
(lp21608
g21595
asg206
g625
sbsg177
g2584
sbag21527
ag21533
asg14
g0
(g15
g2
Ntp21609
Rp21610
sg204
(lp21611
g21583
asg206
g1025
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21612
Rp21613
sg204
(lp21614
g21541
asg206
g1025
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s < %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = V%(id)s_tmp1 ? %(i3)s : %(i4)s;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = fabs(%(i0)s);\nnpy_bool V%(id)s_tmp4;\nV%(id)s_tmp4 = (V%(id)s_tmp3 < %(i1)s);\n%(o0)s = V%(id)s_tmp4 ? %(i2)s : V%(id)s_tmp2;\n}\n'
p21615
sg2314
(g2202
tp21616
sg2322
(lp21617
S'%(nodename)s_subnode0'
p21618
aS'%(nodename)s_subnode1'
p21619
aS'%(nodename)s_subnode2'
p21620
aS'%(nodename)s_subnode3'
p21621
aS'%(nodename)s_subnode4'
p21622
asg2328
I1
sbsbsg4120
(lp21623
g2330
asg2143
(lp21624
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p21625
ag2146
asbsg2147
(dp21626
sg206
g0
(g497
g2
Ntp21627
Rp21628
(dp21629
g52
Nsg503
g21501
sg511
(dp21630
sg513
Nsg516
g0
(g517
g2
Ntp21631
Rp21632
(dp21633
g521
I0
sg522
(dp21634
sbsg524
I00
sbsbI0
tp21635
a(g16930
I0
tp21636
asg11
S'auto_1538'
p21637
sg14
g0
(g15
g2
Ntp21638
Rp21639
(dp21640
g19
g449
sbsg53
Nsg177
g488
sbag0
(g149
g2
Ntp21641
Rp21642
(dp21643
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp21644
Rp21645
(dp21646
g182
(I01
I01
tp21647
sg183
S'float32'
p21648
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp21649
(g16930
I1
tp21650
asg11
S'auto_4371'
p21651
sg14
g0
(g15
g2
Ntp21652
Rp21653
(dp21654
g19
(lp21655
sg175
g2038
(g189
S'Y\xa6R\xc1'
p21656
tp21657
Rp21658
sbsg193
g194
(g195
(I0
tp21659
g197
tp21660
Rp21661
(I1
(I1
I1
tp21662
g189
I00
S'Y\xa6R\xc1'
p21663
tp21664
bsbag16926
ag16983
ag19419
ag19109
ag20921
ag19654
ag20941
ag16998
asg1883
g16854
sg204
(lp21665
g0
(g7
g2
Ntp21666
Rp21667
(dp21668
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp21669
(g3082
I1
tp21670
asg11
S'auto_6934'
p21671
sg14
g0
(g15
g2
Ntp21672
Rp21673
(dp21674
g19
(lp21675
sbsg53
g16930
sg177
g0
(g178
g2
Ntp21676
Rp21677
(dp21678
g182
(I00
I00
tp21679
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp21680
Rp21681
(dp21682
g2188
g0
(g54
g2
Ntp21683
Rp21684
(dp21685
g58
(lp21686
g0
(g2193
g2
Ntp21687
Rp21688
(dp21689
g11
S'auto_7880'
p21690
sg13
Nsg14
g0
(g15
g2
Ntp21691
Rp21692
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21693
Rp21694
(dp21695
g11
S'auto_7881'
p21696
sg13
Nsg14
g0
(g15
g2
Ntp21697
Rp21698
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21699
Rp21700
(dp21701
g11
S'auto_7882'
p21702
sg13
Nsg14
g0
(g15
g2
Ntp21703
Rp21704
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21705
Rp21706
(dp21707
g11
S'auto_7883'
p21708
sg13
Nsg14
g0
(g15
g2
Ntp21709
Rp21710
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21711
Rp21712
(dp21713
g11
S'auto_7884'
p21714
sg13
Nsg14
g0
(g15
g2
Ntp21715
Rp21716
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21717
Rp21718
(dp21719
g11
S'auto_7885'
p21720
sg13
Nsg14
g0
(g15
g2
Ntp21721
Rp21722
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21723
Rp21724
(dp21725
g11
S'auto_7886'
p21726
sg13
Nsg14
g0
(g15
g2
Ntp21727
Rp21728
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21729
Rp21730
(dp21731
g11
S'auto_7887'
p21732
sg13
Nsg14
g0
(g15
g2
Ntp21733
Rp21734
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21735
Rp21736
(dp21737
g11
S'auto_7888'
p21738
sg13
Nsg14
g0
(g15
g2
Ntp21739
Rp21740
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21741
Rp21742
(dp21743
g11
S'auto_7889'
p21744
sg13
Nsg14
g0
(g15
g2
Ntp21745
Rp21746
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp21747
Rp21748
sg204
(lp21749
g0
(g2193
g2
Ntp21750
Rp21751
(dp21752
g11
S'auto_7890'
p21753
sg13
I0
sg14
g0
(g15
g2
Ntp21754
Rp21755
sg52
Nsg53
g21684
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp21756
Rp21757
(dp21758
g58
(lp21759
g0
(g2193
g2
Ntp21760
Rp21761
(dp21762
g11
S'auto_6889'
p21763
sg13
Nsg14
g0
(g15
g2
Ntp21764
Rp21765
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21766
Rp21767
(dp21768
g11
S'auto_6890'
p21769
sg13
Nsg14
g0
(g15
g2
Ntp21770
Rp21771
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21772
Rp21773
(dp21774
g11
S'auto_6891'
p21775
sg13
Nsg14
g0
(g15
g2
Ntp21776
Rp21777
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21778
Rp21779
(dp21780
g11
S'auto_6892'
p21781
sg13
Nsg14
g0
(g15
g2
Ntp21782
Rp21783
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21784
Rp21785
(dp21786
g11
S'auto_6893'
p21787
sg13
Nsg14
g0
(g15
g2
Ntp21788
Rp21789
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21790
Rp21791
(dp21792
g11
S'auto_6894'
p21793
sg13
Nsg14
g0
(g15
g2
Ntp21794
Rp21795
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21796
Rp21797
(dp21798
g11
S'auto_6895'
p21799
sg13
Nsg14
g0
(g15
g2
Ntp21800
Rp21801
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21802
Rp21803
(dp21804
g11
S'auto_6896'
p21805
sg13
Nsg14
g0
(g15
g2
Ntp21806
Rp21807
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21808
Rp21809
(dp21810
g11
S'auto_6897'
p21811
sg13
Nsg14
g0
(g15
g2
Ntp21812
Rp21813
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp21814
Rp21815
(dp21816
g11
S'auto_6898'
p21817
sg13
Nsg14
g0
(g15
g2
Ntp21818
Rp21819
sg52
Nsg53
Nsg177
g2202
sbasg2248
I10
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
tp21820
sg204
(lp21821
g0
(g2193
g2
Ntp21822
Rp21823
(dp21824
g11
S'auto_6905'
p21825
sg13
I0
sg14
g0
(g15
g2
Ntp21826
Rp21827
(dp21828
g19
(lp21829
sbsg52
Nsg53
g0
(g54
g2
Ntp21830
Rp21831
(dp21832
g58
(lp21833
g0
(g2193
g2
Ntp21834
Rp21835
(dp21836
g11
S'auto_6904'
p21837
sg13
I0
sg14
g0
(g15
g2
Ntp21838
Rp21839
(dp21840
g19
(lp21841
sbsg52
Nsg53
g0
(g54
g2
Ntp21842
Rp21843
(dp21844
g58
(lp21845
g21761
ag0
(g2193
g2
Ntp21846
Rp21847
(dp21848
g11
S'auto_6903'
p21849
sg13
I0
sg14
g0
(g15
g2
Ntp21850
Rp21851
(dp21852
g19
(lp21853
sbsg52
Nsg53
g0
(g54
g2
Ntp21854
Rp21855
(dp21856
g58
(lp21857
g0
(g2193
g2
Ntp21858
Rp21859
(dp21860
g11
S'auto_6902'
p21861
sg13
I0
sg14
g0
(g15
g2
Ntp21862
Rp21863
(dp21864
g19
(lp21865
sbsg52
Nsg53
g0
(g54
g2
Ntp21866
Rp21867
(dp21868
g58
(lp21869
g21767
ag21773
ag21779
ag21785
asg14
g0
(g15
g2
Ntp21870
Rp21871
sg204
(lp21872
g21859
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp21873
Rp21874
(dp21875
g11
S'auto_6901'
p21876
sg13
I0
sg14
g0
(g15
g2
Ntp21877
Rp21878
(dp21879
g19
(lp21880
sbsg52
Nsg53
g0
(g54
g2
Ntp21881
Rp21882
(dp21883
g58
(lp21884
g21791
ag0
(g2193
g2
Ntp21885
Rp21886
(dp21887
g11
S'auto_6900'
p21888
sg13
I0
sg14
g0
(g15
g2
Ntp21889
Rp21890
(dp21891
g19
(lp21892
sbsg52
Nsg53
g0
(g54
g2
Ntp21893
Rp21894
(dp21895
g58
(lp21896
g21797
ag0
(g2193
g2
Ntp21897
Rp21898
(dp21899
g11
S'auto_6899'
p21900
sg13
I0
sg14
g0
(g15
g2
Ntp21901
Rp21902
(dp21903
g19
(lp21904
sbsg52
Nsg53
g0
(g54
g2
Ntp21905
Rp21906
(dp21907
g58
(lp21908
g21803
asg14
g0
(g15
g2
Ntp21909
Rp21910
sg204
(lp21911
g21898
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21912
Rp21913
sg204
(lp21914
g21886
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21915
Rp21916
sg204
(lp21917
g21874
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21918
Rp21919
sg204
(lp21920
g21847
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp21921
Rp21922
sg204
(lp21923
g21835
asg206
g1157
sbsg177
g2202
sbag21809
ag21815
asg14
g0
(g15
g2
Ntp21924
Rp21925
sg204
(lp21926
g21823
asg206
g11700
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i7)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i6)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i5)s * V%(id)s_tmp2;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s * %(i2)s * %(i3)s * %(i4)s;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = V%(id)s_tmp4 / V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s + V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 < %(i8)s ? %(i8)s : V%(id)s_tmp6 > %(i9)s ? %(i9)s : V%(id)s_tmp6;\n}\n'
p21927
sg2314
(g2202
tp21928
sg508
g0
(g2316
g2
Ntp21929
Rp21930
(dp21931
g2320
(I0
tp21932
sbsg2322
(lp21933
S'%(nodename)s_subnode0'
p21934
aS'%(nodename)s_subnode1'
p21935
aS'%(nodename)s_subnode2'
p21936
aS'%(nodename)s_subnode3'
p21937
aS'%(nodename)s_subnode4'
p21938
aS'%(nodename)s_subnode5'
p21939
aS'%(nodename)s_subnode6'
p21940
asg2328
I1
sbsbsg2143
(lp21941
g2330
ag2146
asbsg2147
(dp21942
sg206
g0
(g497
g2
Ntp21943
Rp21944
(dp21945
g52
Nsg503
g21757
sg511
(dp21946
I0
(lp21947
I0
assg513
Nsg516
g0
(g517
g2
Ntp21948
Rp21949
(dp21950
g521
I3713080549408328131
sg522
(dp21951
I0
I0
ssbsg524
I00
sbsbI2
tp21952
a(g16955
I2
tp21953
asg11
S'auto_1954'
p21954
sg14
g0
(g15
g2
Ntp21955
Rp21956
(dp21957
g19
(lp21958
sbsg53
g16921
sg177
g0
(g178
g2
Ntp21959
Rp21960
(dp21961
g182
(I01
I01
tp21962
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbasg14
g0
(g15
g2
Ntp21963
Rp21964
(dp21965
g2143
(lp21966
g18942
ag2146
asbsg2147
(dp21967
sg206
g0
(g207
g2
Ntp21968
Rp21969
(dp21970
g211
(lp21971
sg213
(lp21972
sg215
(lp21973
I0
aI1
asg217
g218
sg219
(tsg220
(lp21974
g222
asg223
I01
sg224
g8013
sg227
(dp21975
S'support_code_apply'
p21976
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p21977
ssg231
(dp21978
I0
(lp21979
I0
assg234
(lp21980
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p21981
asbsbI0
tp21982
asg11
S'auto_1537'
p21983
sg14
g0
(g15
g2
Ntp21984
Rp21985
(dp21986
g19
g7292
sbsg53
Nsg177
g7305
sbasg1883
g16854
sg204
(lp21987
g16902
asg14
g0
(g15
g2
Ntp21988
Rp21989
(dp21990
g2143
(lp21991
g18942
ag2146
asbsg2147
(dp21992
sg206
g0
(g207
g2
Ntp21993
Rp21994
(dp21995
g211
(lp21996
sg213
(lp21997
sg215
(lp21998
I0
asg217
g218
sg219
(tsg220
(lp21999
g222
asg223
I01
sg224
g12110
sg227
(dp22000
S'support_code_apply'
p22001
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p22002
ssg231
(dp22003
I0
(lp22004
I0
assg234
(lp22005
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p22006
asbsbsg177
g0
(g178
g2
Ntp22007
Rp22008
(dp22009
g182
(I01
tp22010
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g149
g2
Ntp22011
Rp22012
(dp22013
g13
Nsg52
Nsg1883
g16854
sg177
g0
(g178
g2
Ntp22014
Rp22015
(dp22016
g182
(I01
tp22017
sg183
S'float32'
p22018
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp22019
(g16898
I1
tp22020
asg11
S'auto_4212'
p22021
sg14
g0
(g15
g2
Ntp22022
Rp22023
(dp22024
g19
(lp22025
sg175
g2038
(g189
S'\x00\x00\x80?'
p22026
tp22027
Rp22028
sbsg193
g194
(g195
(I0
tp22029
g197
tp22030
Rp22031
(I1
(I1
tp22032
g189
I00
S'\x00\x00\x80?'
p22033
tp22034
bsbag16893
ag18925
ag17838
asg1883
g16854
sg204
(lp22035
g17339
asg14
g0
(g15
g2
Ntp22036
Rp22037
(dp22038
g2188
g0
(g54
g2
Ntp22039
Rp22040
(dp22041
g58
(lp22042
g0
(g2193
g2
Ntp22043
Rp22044
(dp22045
g11
S'auto_7404'
p22046
sg13
Nsg14
g0
(g15
g2
Ntp22047
Rp22048
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22049
Rp22050
(dp22051
g11
S'auto_7405'
p22052
sg13
Nsg14
g0
(g15
g2
Ntp22053
Rp22054
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22055
Rp22056
(dp22057
g11
S'auto_7406'
p22058
sg13
Nsg14
g0
(g15
g2
Ntp22059
Rp22060
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22061
Rp22062
(dp22063
g11
S'auto_7407'
p22064
sg13
Nsg14
g0
(g15
g2
Ntp22065
Rp22066
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22067
Rp22068
(dp22069
g11
S'auto_7408'
p22070
sg13
Nsg14
g0
(g15
g2
Ntp22071
Rp22072
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp22073
Rp22074
sg204
(lp22075
g0
(g2193
g2
Ntp22076
Rp22077
(dp22078
g11
S'auto_7409'
p22079
sg13
I0
sg14
g0
(g15
g2
Ntp22080
Rp22081
sg52
Nsg53
g22040
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp22082
Rp22083
(dp22084
g58
(lp22085
g0
(g2193
g2
Ntp22086
Rp22087
(dp22088
g11
S'auto_5454'
p22089
sg13
Nsg14
g0
(g15
g2
Ntp22090
Rp22091
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22092
Rp22093
(dp22094
g11
S'auto_5455'
p22095
sg13
Nsg14
g0
(g15
g2
Ntp22096
Rp22097
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22098
Rp22099
(dp22100
g11
S'auto_5456'
p22101
sg13
Nsg14
g0
(g15
g2
Ntp22102
Rp22103
(dp22104
g2511
g2038
(g189
S'w\xbe\x7f?'
p22105
tp22106
Rp22107
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22108
Rp22109
(dp22110
g11
S'auto_5457'
p22111
sg13
Nsg14
g0
(g15
g2
Ntp22112
Rp22113
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22114
Rp22115
(dp22116
g11
S'auto_5458'
p22117
sg13
Nsg14
g0
(g15
g2
Ntp22118
Rp22119
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp22120
sg204
(lp22121
g0
(g2193
g2
Ntp22122
Rp22123
(dp22124
g11
S'auto_5466'
p22125
sg13
I0
sg14
g0
(g15
g2
Ntp22126
Rp22127
(dp22128
g19
(lp22129
sbsg52
Nsg53
g0
(g54
g2
Ntp22130
Rp22131
(dp22132
g58
(lp22133
g0
(g2193
g2
Ntp22134
Rp22135
(dp22136
g11
S'auto_5463'
p22137
sg13
I0
sg14
g0
(g15
g2
Ntp22138
Rp22139
(dp22140
g19
(lp22141
sbsg52
Nsg53
g0
(g54
g2
Ntp22142
Rp22143
(dp22144
g58
(lp22145
g22087
ag0
(g2193
g2
Ntp22146
Rp22147
(dp22148
g11
S'auto_5462'
p22149
sg13
I0
sg14
g0
(g15
g2
Ntp22150
Rp22151
(dp22152
g19
(lp22153
sbsg52
Nsg53
g0
(g54
g2
Ntp22154
Rp22155
(dp22156
g58
(lp22157
g0
(g2193
g2
Ntp22158
Rp22159
(dp22160
g11
S'auto_5461'
p22161
sg13
I0
sg14
g0
(g15
g2
Ntp22162
Rp22163
(dp22164
g19
(lp22165
sbsg52
Nsg53
g0
(g54
g2
Ntp22166
Rp22167
(dp22168
g58
(lp22169
g22093
ag0
(g2193
g2
Ntp22170
Rp22171
(dp22172
g11
S'auto_5460'
p22173
sg13
I0
sg14
g0
(g15
g2
Ntp22174
Rp22175
(dp22176
g19
(lp22177
sbsg52
Nsg53
g0
(g54
g2
Ntp22178
Rp22179
(dp22180
g58
(lp22181
g22099
ag22109
asg14
g0
(g15
g2
Ntp22182
Rp22183
sg204
(lp22184
g22171
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22185
Rp22186
sg204
(lp22187
g22159
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22188
Rp22189
sg204
(lp22190
g22147
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22191
Rp22192
sg204
(lp22193
g22135
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp22194
Rp22195
(dp22196
g11
S'auto_5465'
p22197
sg13
I0
sg14
g0
(g15
g2
Ntp22198
Rp22199
(dp22200
g19
(lp22201
sbsg52
Nsg53
g0
(g54
g2
Ntp22202
Rp22203
(dp22204
g58
(lp22205
g22093
ag0
(g2193
g2
Ntp22206
Rp22207
(dp22208
g11
S'auto_5464'
p22209
sg13
I0
sg14
g0
(g15
g2
Ntp22210
Rp22211
(dp22212
g19
(lp22213
sbsg52
Nsg53
g0
(g54
g2
Ntp22214
Rp22215
(dp22216
g58
(lp22217
g22115
ag22109
asg14
g0
(g15
g2
Ntp22218
Rp22219
sg204
(lp22220
g22207
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22221
Rp22222
sg204
(lp22223
g22195
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22224
Rp22225
sg204
(lp22226
g22123
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i4)s, %(i3)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s - V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = pow(%(i2)s, %(i3)s);\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s - V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = sqrt((npy_float32)V%(id)s_tmp4);\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s * V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 / V%(id)s_tmp2;\n}\n'
p22227
sg2314
(g2202
tp22228
sg2322
(lp22229
S'%(nodename)s_subnode0'
p22230
aS'%(nodename)s_subnode1'
p22231
aS'%(nodename)s_subnode2'
p22232
aS'%(nodename)s_subnode3'
p22233
aS'%(nodename)s_subnode4'
p22234
aS'%(nodename)s_subnode5'
p22235
aS'%(nodename)s_subnode6'
p22236
asg2328
I1
sbsbsg4120
(lp22237
g2330
ag2330
asg2143
(lp22238
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p22239
aS"('Revert', 'inplace_elemwise_optimizer')"
p22240
ag2146
asbsg2147
(dp22241
sg206
g0
(g497
g2
Ntp22242
Rp22243
(dp22244
g52
Nsg503
g22083
sg511
(dp22245
sg513
Nsg516
g0
(g517
g2
Ntp22246
Rp22247
(dp22248
g521
I0
sg522
(dp22249
sbsg524
I00
sbsbI2
tp22250
a(g17267
I0
tp22251
asg11
S'auto_4180'
p22252
sg14
g0
(g15
g2
Ntp22253
Rp22254
(dp22255
g19
(lp22256
g13569
asg175
g2038
(g189
S'w\xbe\x7f?'
p22257
tp22258
Rp22259
sbsg193
g194
(g195
(I0
tp22260
g197
tp22261
Rp22262
(I1
(I1
tp22263
g189
I00
S'w\xbe\x7f?'
p22264
tp22265
bsbag0
(g441
g2
Ntp22266
Rp22267
(dp22268
g13
Nsg472
g13630
sg52
Nsg1883
g16854
sg1892
(lp22269
(g16889
I1
tp22270
asg11
S'auto_1548'
p22271
sg14
g0
(g15
g2
Ntp22272
Rp22273
(dp22274
g19
g13615
sbsg53
Nsg177
g13640
sbag17280
ag16885
asg1883
g16854
sg204
(lp22275
g18238
asg14
g0
(g15
g2
Ntp22276
Rp22277
(dp22278
g2188
g0
(g54
g2
Ntp22279
Rp22280
(dp22281
g58
(lp22282
g0
(g2193
g2
Ntp22283
Rp22284
(dp22285
g11
S'auto_7780'
p22286
sg13
Nsg14
g0
(g15
g2
Ntp22287
Rp22288
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22289
Rp22290
(dp22291
g11
S'auto_7781'
p22292
sg13
Nsg14
g0
(g15
g2
Ntp22293
Rp22294
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22295
Rp22296
(dp22297
g11
S'auto_7782'
p22298
sg13
Nsg14
g0
(g15
g2
Ntp22299
Rp22300
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22301
Rp22302
(dp22303
g11
S'auto_7783'
p22304
sg13
Nsg14
g0
(g15
g2
Ntp22305
Rp22306
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp22307
Rp22308
sg204
(lp22309
g0
(g2193
g2
Ntp22310
Rp22311
(dp22312
g11
S'auto_7784'
p22313
sg13
I0
sg14
g0
(g15
g2
Ntp22314
Rp22315
sg52
Nsg53
g22280
sg177
g2202
sbasg206
g0
(g2225
g2
Ntp22316
Rp22317
(dp22318
g58
(lp22319
g0
(g2193
g2
Ntp22320
Rp22321
(dp22322
g11
S'auto_6935'
p22323
sg13
Nsg14
g0
(g15
g2
Ntp22324
Rp22325
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22326
Rp22327
(dp22328
g11
S'auto_6936'
p22329
sg13
Nsg14
g0
(g15
g2
Ntp22330
Rp22331
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22332
Rp22333
(dp22334
g11
S'auto_6937'
p22335
sg13
Nsg14
g0
(g15
g2
Ntp22336
Rp22337
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp22338
Rp22339
(dp22340
g11
S'auto_6938'
p22341
sg13
Nsg14
g0
(g15
g2
Ntp22342
Rp22343
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp22344
sg204
(lp22345
g0
(g2193
g2
Ntp22346
Rp22347
(dp22348
g11
S'auto_6942'
p22349
sg13
I0
sg14
g0
(g15
g2
Ntp22350
Rp22351
(dp22352
g19
(lp22353
sbsg52
Nsg53
g0
(g54
g2
Ntp22354
Rp22355
(dp22356
g58
(lp22357
g0
(g2193
g2
Ntp22358
Rp22359
(dp22360
g11
S'auto_6941'
p22361
sg13
I0
sg14
g0
(g15
g2
Ntp22362
Rp22363
(dp22364
g19
(lp22365
sbsg52
Nsg53
g0
(g54
g2
Ntp22366
Rp22367
(dp22368
g58
(lp22369
g22321
ag22327
asg14
g0
(g15
g2
Ntp22370
Rp22371
sg204
(lp22372
g22359
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp22373
Rp22374
(dp22375
g11
S'auto_6940'
p22376
sg13
I0
sg14
g0
(g15
g2
Ntp22377
Rp22378
(dp22379
g19
(lp22380
sbsg52
Nsg53
g0
(g54
g2
Ntp22381
Rp22382
(dp22383
g58
(lp22384
g22333
ag0
(g2193
g2
Ntp22385
Rp22386
(dp22387
g11
S'auto_6939'
p22388
sg13
I0
sg14
g0
(g15
g2
Ntp22389
Rp22390
(dp22391
g19
(lp22392
sbsg52
Nsg53
g0
(g54
g2
Ntp22393
Rp22394
(dp22395
g58
(lp22396
g22339
asg14
g0
(g15
g2
Ntp22397
Rp22398
sg204
(lp22399
g22386
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22400
Rp22401
sg204
(lp22402
g22374
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp22403
Rp22404
sg204
(lp22405
g22347
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p22406
sg2314
(g2202
tp22407
sg508
g0
(g2316
g2
Ntp22408
Rp22409
(dp22410
g2320
(I1
tp22411
sbsg2322
(lp22412
S'%(nodename)s_subnode0'
p22413
aS'%(nodename)s_subnode1'
p22414
aS'%(nodename)s_subnode2'
p22415
aS'%(nodename)s_subnode3'
p22416
asg2328
I1
sbsbsg2143
(lp22417
g2330
ag2146
asbsg2147
(dp22418
sg206
g0
(g497
g2
Ntp22419
Rp22420
(dp22421
g52
Nsg503
g22317
sg511
(dp22422
I0
(lp22423
I1
assg513
Nsg516
g0
(g517
g2
Ntp22424
Rp22425
(dp22426
g521
I3713080549409410656
sg522
(dp22427
I0
I1
ssbsg524
I00
sbsbI3
tp22428
a(g17834
I3
tp22429
asg11
S'auto_1688'
p22430
sg14
g0
(g15
g2
Ntp22431
Rp22432
(dp22433
g19
g12461
sbsg53
g16880
sg177
g13373
sbasg14
g0
(g15
g2
Ntp22434
Rp22435
(dp22436
g2143
(lp22437
g2146
ag2146
asbsg2147
(dp22438
sg206
g13369
sbI0
tp22439
a(g18841
I1
tp22440
asg11
S'auto_6815'
p22441
sg14
g0
(g15
g2
Ntp22442
Rp22443
(dp22444
g19
(lp22445
sbsg53
g17541
sg177
g0
(g178
g2
Ntp22446
Rp22447
(dp22448
g182
(I00
I00
tp22449
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp22450
g19639
asg14
g0
(g15
g2
Ntp22451
Rp22452
(dp22453
g2143
(lp22454
g2145
ag2146
asbsg2147
(dp22455
sg206
g2151
sbI0
tp22456
a(g18841
I0
tp22457
asg11
S'auto_1628'
p22458
sg14
g0
(g15
g2
Ntp22459
Rp22460
(dp22461
g19
g8311
sbsg53
g16862
sg177
g8353
sbasg14
g0
(g15
g2
Ntp22462
Rp22463
(dp22464
g2143
(lp22465
g2146
ag2146
asbsg2147
(dp22466
sg206
g8338
sbI0
tp22467
a(g17374
I0
tp22468
asg11
S'auto_1535'
p22469
sg14
g0
(g15
g2
Ntp22470
Rp22471
(dp22472
g19
g335
sbsg53
Nsg177
g348
sbag17166
ag16916
ag16934
ag17347
ag16950
ag17310
ag19409
ag19610
ag19025
ag19239
ag19838
ag18056
ag22267
ag18905
ag17848
ag17271
asg204
(lp22473
g20402
ag21667
ag18254
ag20964
ag18460
ag19419
ag19654
ag18877
ag19263
ag19848
ag17823
ag18238
ag18915
ag17878
ag17301
asg3786
(dp22474
I1
I3
sI2
I4
sI3
I5
sI4
I6
sI5
I7
sI6
I8
sI7
I9
sI8
I10
sI9
I11
sI10
I12
sI11
I13
sI12
I14
sI13
I15
sI14
I16
ssg3788
g0
(g3789
g2
Ntp22475
Rp22476
(dp22477
g3793
(lp22478
sg3795
g3796
((lp22479
g16889
ag16930
ag17541
ag17844
ag19598
ag17070
ag18858
ag17306
ag17834
ag16862
ag19606
ag16898
ag16938
ag17053
ag17162
ag18873
ag17170
ag18830
ag18920
ag18901
ag17258
ag18841
ag17002
ag17084
ag17241
ag16994
ag17148
ag19235
ag17267
ag18850
ag16921
ag17134
ag17407
ag16912
ag17343
ag17044
ag16955
ag17556
ag17351
ag18888
ag17250
ag16871
ag17374
ag16880
ag17196
ag17061
ag17232
ag16946
ag17360
ag17569
ag17098
ag17035
ag17314
ag17107
atp22480
Rp22481
sg3800
(itheano.gof.opt
_metadict
p22482
(dp22483
g3803
(dp22484
g0
(g3805
g3806
(g8934
g17425
tp22485
tp22486
Rp22487
(dp22488
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x00?'
p22489
tp22490
Rp22491
sg3816
g17425
sbg17411
sg0
(g3805
g3806
(g16150
g17872
tp22492
tp22493
Rp22494
(dp22495
g3811
I00
sg3812
g2038
(g189
S'\xd0\xcc\xcc='
p22496
tp22497
Rp22498
sg3816
g17872
sbg17857
sg0
(g3805
g3806
(g16962
g16978
tp22499
tp22500
Rp22501
(dp22502
g3811
I00
sg3812
g2038
(g189
S'\xb8\xc2\xe0\xc0'
p22503
tp22504
Rp22505
sg3816
g16978
sbg16959
sg0
(g3805
g3806
(g11376
g19634
tp22506
tp22507
Rp22508
(dp22509
g3811
I00
sg3812
g2038
(g189
S'\x00\x12\x83:'
p22510
tp22511
Rp22512
sg3816
g19634
sbg19619
sg0
(g3805
g3806
(g9942
g20958
tp22513
tp22514
Rp22515
(dp22516
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x80\xbf'
p22517
tp22518
Rp22519
sg3816
g20958
sbg20941
sg0
(g3805
g3806
(g12216
g18051
tp22520
tp22521
Rp22522
(dp22523
g3811
I00
sg3812
g2038
(g189
S'fff?'
p22524
tp22525
Rp22526
sg3816
g18051
sbg17838
sg0
(g3805
g3806
(g13898
g18233
tp22527
tp22528
Rp22529
(dp22530
g3811
I00
sg3812
g2038
(g189
S'w\xcc+2'
p22531
tp22532
Rp22533
sg3816
g18233
sbg18218
sg0
(g3805
g3806
(g18837
g19573
tp22534
tp22535
Rp22536
(dp22537
g3811
I00
sg3812
g2038
(g189
S'\xd0\xcc\xcc='
p22538
tp22539
Rp22540
sg3816
g19573
sbg18834
sg0
(g3805
g3806
(g9717
g21449
tp22541
tp22542
Rp22543
(dp22544
g3811
I00
sg3812
g2038
(g189
S'33\xb3>'
p22545
tp22546
Rp22547
sg3816
g21449
sbg16942
s(g2925
g20285
tp22548
g20275
sg0
(g3805
g3806
(g9884
g17217
tp22549
tp22550
Rp22551
(dp22552
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x00\x00'
p22553
tp22554
Rp22555
sg3816
g17217
sbg17200
sg0
(g3805
g3806
(g13605
g22262
tp22556
tp22557
Rp22558
(dp22559
g3811
I00
sg3812
g2038
(g189
S'w\xbe\x7f?'
p22560
tp22561
Rp22562
sg3816
g22262
sbg16893
sg0
(g3805
g3806
(g11553
g20936
tp22563
tp22564
Rp22565
(dp22566
g3811
I00
sg3812
g2038
(g189
S'w\xcc+2'
p22567
tp22568
Rp22569
sg3816
g20936
sbg20921
sg0
(g3805
g3806
(g8119
g19404
tp22570
tp22571
Rp22572
(dp22573
g3811
I00
sg3812
g2038
(g189
S'fff?'
p22574
tp22575
Rp22576
sg3816
g19404
sbg18854
sg0
(g3805
g3806
(g22015
g22031
tp22577
tp22578
Rp22579
(dp22580
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x80?'
p22581
tp22582
Rp22583
sg3816
g22031
sbg22012
s(g2925
g17121
tp22584
g17111
sg0
(g3805
g3806
(g16651
g17295
tp22585
tp22586
Rp22587
(dp22588
g3811
I00
sg3812
g2038
(g189
S'\x00\x12\x83:'
p22589
tp22590
Rp22591
sg3816
g17295
sbg17280
sg0
(g3805
g3806
(g17597
g17608
tp22592
tp22593
Rp22594
(dp22595
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x00?'
p22596
tp22597
Rp22598
sg3816
g17608
sbg17594
sg0
(g3805
g3806
(g18895
g19021
tp22599
tp22600
Rp22601
(dp22602
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x80?'
p22603
tp22604
Rp22605
sg3816
g19021
sbg18892
sg0
(g3805
g3806
(g21645
g21661
tp22606
tp22607
Rp22608
(dp22609
g3811
I00
sg3812
g2038
(g189
S'Y\xa6R\xc1'
p22610
tp22611
Rp22612
sg3816
g21661
sbg21642
sg0
(g3805
g3806
(g11230
g19833
tp22613
tp22614
Rp22615
(dp22616
g3811
I00
sg3812
g2038
(g189
S'w\xbe\x7f?'
p22617
tp22618
Rp22619
sg3816
g19833
sbg19602
sg0
(g3805
g3806
(g9993
g20786
tp22620
tp22621
Rp22622
(dp22623
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x80?'
p22624
tp22625
Rp22626
sg3816
g20786
sbg16998
sg0
(g3805
g3806
(g17009
g17025
tp22627
tp22628
Rp22629
(dp22630
g3811
I00
sg3812
g2038
(g189
S'\x00\x00\x00\xc0'
p22631
tp22632
Rp22633
sg3816
g17025
sbg17006
ssg3847
(lp22634
sbsg3849
g0
(g3850
g2
Ntp22635
Rp22636
(dp22637
g3854
g0
(g3855
g2
Ntp22638
Rp22639
(lp22640
g22639
ag22639
absg3859
(dp22641
sbsg3861
(lp22642
sg3863
g3796
((lp22643
I46912995091600
aI46912990571152
aI46912995436048
aI46912995092624
aI46912959760656
aI46912995388496
aI46912995434000
aI46912995437840
aI46912995197456
aI46912990572496
aI46912986779088
aI46912995199120
aI46912995167760
aI46912995061328
aI46912963395216
aI46912995086032
aI46912995094288
aI46912961180560
aI46912963358480
aI46912990568528
aI46912995197392
aI46912961180176
aI46912995058256
atp22644
Rp22645
sg3867
(itheano.gof.opt
_metadict
p22646
(dp22647
g3803
(dp22648
g16942
g22543
sg18218
g22529
sg17280
g22587
sg16998
g22622
sg17857
g22494
sg20275
g22548
sg17006
g22629
sg20921
g22565
sg17594
g22594
sg17200
g22551
sg18892
g22601
sg17838
g22522
sg16959
g22501
sg22012
g22579
sg21642
g22608
sg19619
g22508
sg20941
g22515
sg19602
g22615
sg18854
g22572
sg18834
g22536
sg17111
g22584
sg16893
g22558
sg17411
g22487
ssg3847
(lp22649
sbsbsg3872
g0
(g3873
g2
Ntp22650
Rp22651
(dp22652
g3877
(dp22653
g16950
g0
(g3850
g2
Ntp22654
Rp22655
(dp22656
g3854
g0
(g3855
g2
Ntp22657
Rp22658
(lp22659
g0
(g3855
g2
Ntp22660
Rp22661
(lp22662
g22658
ag22658
ag16950
abag22661
absg3859
(dp22663
g16950
g22661
ssbsg17403
g0
(g3850
g2
Ntp22664
Rp22665
(dp22666
g3854
g0
(g3855
g2
Ntp22667
Rp22668
(lp22669
g0
(g3855
g2
Ntp22670
Rp22671
(lp22672
g22668
ag22668
ag17403
abag22671
absg3859
(dp22673
g17403
g22671
ssbsg19239
g0
(g3850
g2
Ntp22674
Rp22675
(dp22676
g3854
g0
(g3855
g2
Ntp22677
Rp22678
(lp22679
g0
(g3855
g2
Ntp22680
Rp22681
(lp22682
g22678
ag22678
ag19239
abag22681
absg3859
(dp22683
g19239
g22681
ssbsg17347
g0
(g3850
g2
Ntp22684
Rp22685
(dp22686
g3854
g0
(g3855
g2
Ntp22687
Rp22688
(lp22689
g0
(g3855
g2
Ntp22690
Rp22691
(lp22692
g0
(g3855
g2
Ntp22693
Rp22694
(lp22695
g22688
ag22691
ag17356
abag22688
ag17347
abag22694
absg3859
(dp22696
g17356
g22694
sg17347
g22691
ssbsg17310
g0
(g3850
g2
Ntp22697
Rp22698
(dp22699
g3854
g0
(g3855
g2
Ntp22700
Rp22701
(lp22702
g0
(g3855
g2
Ntp22703
Rp22704
(lp22705
g0
(g3855
g2
Ntp22706
Rp22707
(lp22708
g22701
ag22704
ag17319
abag22701
ag17310
abag22707
absg3859
(dp22709
g17319
g22707
sg17310
g22704
ssbsg17222
g0
(g3850
g2
Ntp22710
Rp22711
(dp22712
g3854
g0
(g3855
g2
Ntp22713
Rp22714
(lp22715
g0
(g3855
g2
Ntp22716
Rp22717
(lp22718
g22714
ag22714
ag17222
abag22717
absg3859
(dp22719
g17222
g22717
ssbsg17271
g0
(g3850
g2
Ntp22720
Rp22721
(dp22722
g3854
g0
(g3855
g2
Ntp22723
Rp22724
(lp22725
g0
(g3855
g2
Ntp22726
Rp22727
(lp22728
g22724
ag22724
ag17271
abag22727
absg3859
(dp22729
g17271
g22727
ssbsg18905
g0
(g3850
g2
Ntp22730
Rp22731
(dp22732
g3854
g0
(g3855
g2
Ntp22733
Rp22734
(lp22735
g0
(g3855
g2
Ntp22736
Rp22737
(lp22738
g22734
ag22734
ag18905
abag22737
absg3859
(dp22739
g18905
g22737
ssbsg18056
g0
(g3850
g2
Ntp22740
Rp22741
(dp22742
g3854
g0
(g3855
g2
Ntp22743
Rp22744
(lp22745
g0
(g3855
g2
Ntp22746
Rp22747
(lp22748
g22744
ag22744
ag18056
abag22747
absg3859
(dp22749
g18056
g22747
ssbsg17049
g0
(g3850
g2
Ntp22750
Rp22751
(dp22752
g3854
g0
(g3855
g2
Ntp22753
Rp22754
(lp22755
g0
(g3855
g2
Ntp22756
Rp22757
(lp22758
g22754
ag22754
ag17049
abag22757
absg3859
(dp22759
g17049
g22757
ssbsg17030
g0
(g3850
g2
Ntp22760
Rp22761
(dp22762
g3854
g0
(g3855
g2
Ntp22763
Rp22764
(lp22765
g0
(g3855
g2
Ntp22766
Rp22767
(lp22768
g22764
ag22764
ag17030
abag22767
absg3859
(dp22769
g17030
g22767
ssbsg19838
g0
(g3850
g2
Ntp22770
Rp22771
(dp22772
g3854
g0
(g3855
g2
Ntp22773
Rp22774
(lp22775
g0
(g3855
g2
Ntp22776
Rp22777
(lp22778
g22774
ag22774
ag19838
abag22777
absg3859
(dp22779
g19838
g22777
ssbsg16934
g0
(g3850
g2
Ntp22780
Rp22781
(dp22782
g3854
g0
(g3855
g2
Ntp22783
Rp22784
(lp22785
g0
(g3855
g2
Ntp22786
Rp22787
(lp22788
g22784
ag22784
ag16934
abag22787
absg3859
(dp22789
g16934
g22787
ssbsg19409
g0
(g3850
g2
Ntp22790
Rp22791
(dp22792
g3854
g0
(g3855
g2
Ntp22793
Rp22794
(lp22795
g0
(g3855
g2
Ntp22796
Rp22797
(lp22798
g22794
ag22794
ag19409
abag22797
absg3859
(dp22799
g19409
g22797
ssbsg17364
g0
(g3850
g2
Ntp22800
Rp22801
(dp22802
g3854
g0
(g3855
g2
Ntp22803
Rp22804
(lp22805
g0
(g3855
g2
Ntp22806
Rp22807
(lp22808
g22804
ag22804
ag17364
abag22807
absg3859
(dp22809
g17364
g22807
ssbsg22267
g0
(g3850
g2
Ntp22810
Rp22811
(dp22812
g3854
g0
(g3855
g2
Ntp22813
Rp22814
(lp22815
g0
(g3855
g2
Ntp22816
Rp22817
(lp22818
g22814
ag22814
ag22267
abag22817
absg3859
(dp22819
g22267
g22817
ssbsg17848
g0
(g3850
g2
Ntp22820
Rp22821
(dp22822
g3854
g0
(g3855
g2
Ntp22823
Rp22824
(lp22825
g0
(g3855
g2
Ntp22826
Rp22827
(lp22828
g22824
ag22824
ag17848
abag22827
absg3859
(dp22829
g17848
g22827
ssbsg19610
g0
(g3850
g2
Ntp22830
Rp22831
(dp22832
g3854
g0
(g3855
g2
Ntp22833
Rp22834
(lp22835
g0
(g3855
g2
Ntp22836
Rp22837
(lp22838
g22834
ag22834
ag19610
abag22837
absg3859
(dp22839
g19610
g22837
ssbsg19025
g0
(g3850
g2
Ntp22840
Rp22841
(dp22842
g3854
g0
(g3855
g2
Ntp22843
Rp22844
(lp22845
g0
(g3855
g2
Ntp22846
Rp22847
(lp22848
g22844
ag22844
ag19025
abag22847
absg3859
(dp22849
g19025
g22847
ssbssg3929
(dp22850
g17356
g17347
sg17319
g17310
sg17403
g17403
sg19239
g19239
sg17347
g17347
sg17310
g17310
sg17222
g17222
sg17271
g17271
sg16950
g16950
sg18905
g18905
sg18056
g18056
sg17049
g17049
sg17030
g17030
sg19838
g19838
sg16934
g16934
sg19409
g19409
sg17364
g17364
sg22267
g22267
sg17848
g17848
sg19610
g19610
sg19025
g19025
ssg3931
(dp22851
g16858
g0
(g3850
g2
Ntp22852
Rp22853
(dp22854
g3854
g0
(g3855
g2
Ntp22855
Rp22856
(lp22857
g0
(g3855
g2
Ntp22858
Rp22859
(lp22860
g22856
ag22856
ag16867
abag22859
absg3859
(dp22861
g16867
g22859
ssbsg16916
g0
(g3850
g2
Ntp22862
Rp22863
(dp22864
g3854
g0
(g3855
g2
Ntp22865
Rp22866
(lp22867
g0
(g3855
g2
Ntp22868
Rp22869
(lp22870
g0
(g3855
g2
Ntp22871
Rp22872
(lp22873
g22866
ag22869
ag16926
abag22866
ag16902
abag22872
absg3859
(dp22874
g16926
g22872
sg16902
g22869
ssbsg18915
g0
(g3850
g2
Ntp22875
Rp22876
(dp22877
g3854
g0
(g3855
g2
Ntp22878
Rp22879
(lp22880
g0
(g3855
g2
Ntp22881
Rp22882
(lp22883
g22879
ag22879
ag18925
abag22882
absg3859
(dp22884
g18925
g22882
ssbsg17310
g0
(g3850
g2
Ntp22885
Rp22886
(dp22887
g3854
g0
(g3855
g2
Ntp22888
Rp22889
(lp22890
g0
(g3855
g2
Ntp22891
Rp22892
(lp22893
g22889
ag22889
ag17319
abag22892
absg3859
(dp22894
g17319
g22892
ssbsg17057
g0
(g3850
g2
Ntp22895
Rp22896
(dp22897
g3854
g0
(g3855
g2
Ntp22898
Rp22899
(lp22900
g0
(g3855
g2
Ntp22901
Rp22902
(lp22903
g22899
ag22899
ag17066
abag22902
absg3859
(dp22904
g17066
g22902
ssbsg17236
g0
(g3850
g2
Ntp22905
Rp22906
(dp22907
g3854
g0
(g3855
g2
Ntp22908
Rp22909
(lp22910
g0
(g3855
g2
Ntp22911
Rp22912
(lp22913
g22909
ag22909
ag17246
abag22912
absg3859
(dp22914
g17246
g22912
ssbsg17102
g0
(g3850
g2
Ntp22915
Rp22916
(dp22917
g3854
g0
(g3855
g2
Ntp22918
Rp22919
(lp22920
g0
(g3855
g2
Ntp22921
Rp22922
(lp22923
g0
(g3855
g2
Ntp22924
Rp22925
(lp22926
g22919
ag22922
ag17088
abag22919
ag17057
abag22925
absg3859
(dp22927
g17088
g22925
sg17057
g22922
ssbsg17573
g0
(g3850
g2
Ntp22928
Rp22929
(dp22930
g3854
g0
(g3855
g2
Ntp22931
Rp22932
(lp22933
g0
(g3855
g2
Ntp22934
Rp22935
(lp22936
g22932
ag22932
ag17560
abag22935
absg3859
(dp22937
g17560
g22935
ssbsg18877
g0
(g3850
g2
Ntp22938
Rp22939
(dp22940
g3854
g0
(g3855
g2
Ntp22941
Rp22942
(lp22943
g0
(g3855
g2
Ntp22944
Rp22945
(lp22946
g22942
ag22942
ag18862
abag22945
absg3859
(dp22947
g18862
g22945
ssbsg17347
g0
(g3850
g2
Ntp22948
Rp22949
(dp22950
g3854
g0
(g3855
g2
Ntp22951
Rp22952
(lp22953
g0
(g3855
g2
Ntp22954
Rp22955
(lp22956
g22952
ag22952
ag17356
abag22955
absg3859
(dp22957
g17356
g22955
ssbsg17088
g0
(g3850
g2
Ntp22958
Rp22959
(dp22960
g3854
g0
(g3855
g2
Ntp22961
Rp22962
(lp22963
g0
(g3855
g2
Ntp22964
Rp22965
(lp22966
g22962
ag22962
ag17074
abag22965
absg3859
(dp22967
g17074
g22965
ssbssg3966
(dp22968
g17356
g17347
sg18925
g18915
sg17560
g17573
sg16902
g16916
sg17246
g17236
sg16926
g16916
sg17066
g17057
sg17057
g17102
sg17074
g17088
sg17088
g17102
sg18862
g18877
sg16867
g16858
sg17319
g17310
ssg1883
g16854
sg3968
I01
sg1892
g3969
((lp22969
(lp22970
g17166
ag3969
((lp22971
(lp22972
g17170
aI1
aa(lp22973
g17162
aI1
aa(lp22974
g17002
aI1
aa(lp22975
g17196
aI1
aatp22976
Rp22977
aa(lp22978
g17175
ag3969
((lp22979
(lp22980
g17148
aI1
aatp22981
Rp22982
aa(lp22983
g17152
ag3969
((lp22984
(lp22985
g17148
aI1
aatp22986
Rp22987
aa(lp22988
g17138
ag3969
((lp22989
(lp22990
g17134
aI1
aatp22991
Rp22992
aa(lp22993
g17102
ag3969
((lp22994
(lp22995
g17098
aI1
aa(lp22996
g17107
aI1
aatp22997
Rp22998
aa(lp22999
g20275
ag3969
((lp23000
(lp23001
g17098
aI1
aatp23002
Rp23003
aa(lp23004
g17088
ag3969
((lp23005
(lp23006
g17084
aI1
aa(lp23007
g17053
aI1
aatp23008
Rp23009
aa(lp23010
g17111
ag3969
((lp23011
(lp23012
g17107
aI1
aatp23013
Rp23014
aa(lp23015
g17057
ag3969
((lp23016
(lp23017
g17061
aI1
aa(lp23018
g17053
aI1
aatp23019
Rp23020
aa(lp23021
g17310
ag3969
((lp23022
(lp23023
g17314
aI1
aa(lp23024
g17306
aI1
aatp23025
Rp23026
aa(lp23027
g17319
ag3969
((lp23028
(lp23029
g17196
aI1
aatp23030
Rp23031
aa(lp23032
g16950
ag3969
((lp23033
(lp23034
g16946
aI1
aa(lp23035
g16955
aI1
aatp23036
Rp23037
aa(lp23038
g16942
ag3969
((lp23039
(lp23040
g16946
aI1
aa(lp23041
g16938
aI1
aatp23042
Rp23043
aa(lp23044
g17200
ag3969
((lp23045
(lp23046
g17002
aI1
aa(lp23047
g16946
aI1
aa(lp23048
g16938
aI1
aa(lp23049
g17196
aI1
aatp23050
Rp23051
aa(lp23052
g20941
ag3969
((lp23053
(lp23054
g16946
aI1
aa(lp23055
g16938
aI1
aa(lp23056
g16930
aI1
aa(lp23057
g16955
aI1
aatp23058
Rp23059
aa(lp23060
g16998
ag3969
((lp23061
(lp23062
g17002
aI1
aa(lp23063
g16946
aI1
aa(lp23064
g16938
aI1
aa(lp23065
g17196
aI1
aa(lp23066
g18858
aI1
aa(lp23067
g16994
aI1
aa(lp23068
g16930
aI1
aa(lp23069
g16955
aI1
aatp23070
Rp23071
aa(lp23072
g17573
ag3969
((lp23073
(lp23074
g17232
aI1
aa(lp23075
g17569
aI1
aatp23076
Rp23077
aa(lp23078
g17347
ag3969
((lp23079
(lp23080
g17351
aI1
aa(lp23081
g17343
aI1
aatp23082
Rp23083
aa(lp23084
g17356
ag3969
((lp23085
(lp23086
g17360
aI1
aatp23087
Rp23088
aa(lp23089
g16934
ag3969
((lp23090
(lp23091
g16938
aI1
aa(lp23092
g16930
aI1
aatp23093
Rp23094
aa(lp23095
g17378
ag3969
((lp23096
(lp23097
g17374
aI1
aatp23098
Rp23099
aa(lp23100
g16858
ag3969
((lp23101
(lp23102
g17374
aI1
aa(lp23103
g16862
aI1
aatp23104
Rp23105
aa(lp23106
g17364
ag3969
((lp23107
(lp23108
g17360
aI1
aatp23109
Rp23110
aa(lp23111
g0
(g7
g2
Ntp23112
Rp23113
(dp23114
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23115
sg11
S'auto_1579'
p23116
sg14
g0
(g15
g2
Ntp23117
Rp23118
(dp23119
g19
g8973
sbsg53
g0
(g54
g2
Ntp23120
Rp23121
(dp23122
g58
(lp23123
g17364
ag17356
asg1883
g16854
sg204
(lp23124
g23113
asg14
g0
(g15
g2
Ntp23125
Rp23126
(dp23127
g4120
(lp23128
g2330
asg2143
(lp23129
g2146
asbsg2147
(dp23130
sg206
g1153
sbsg177
g9522
sbag3969
((lp23131
tp23132
Rp23133
aa(lp23134
g17411
ag3969
((lp23135
(lp23136
g17407
aI1
aatp23137
Rp23138
aa(lp23139
g17236
ag3969
((lp23140
(lp23141
g17232
aI1
aa(lp23142
g17241
aI1
aatp23143
Rp23144
aa(lp23145
g17222
ag3969
((lp23146
(lp23147
g17196
aI1
aatp23148
Rp23149
aa(lp23150
g0
(g7
g2
Ntp23151
Rp23152
(dp23153
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23154
sg11
S'auto_6306'
p23155
sg14
g0
(g15
g2
Ntp23156
Rp23157
(dp23158
g19
(lp23159
sbsg53
g0
(g54
g2
Ntp23160
Rp23161
(dp23162
g58
(lp23163
g17200
ag16998
ag17166
ag17222
ag17319
asg1883
g16854
sg204
(lp23164
g23152
asg14
g0
(g15
g2
Ntp23165
Rp23166
(dp23167
g4120
(lp23168
g2330
asg2143
(lp23169
g2628
asbsg2147
(dp23170
sg206
g0
(g497
g2
Ntp23171
Rp23172
(dp23173
g52
Nsg503
g0
(g2225
g2
Ntp23174
Rp23175
(dp23176
g58
(lp23177
g0
(g2193
g2
Ntp23178
Rp23179
(dp23180
g11
S'auto_6281'
p23181
sg13
Nsg14
g0
(g15
g2
Ntp23182
Rp23183
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23184
Rp23185
(dp23186
g11
S'auto_6282'
p23187
sg13
Nsg14
g0
(g15
g2
Ntp23188
Rp23189
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23190
Rp23191
(dp23192
g11
S'auto_6283'
p23193
sg13
Nsg14
g0
(g15
g2
Ntp23194
Rp23195
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23196
Rp23197
(dp23198
g11
S'auto_6284'
p23199
sg13
Nsg14
g0
(g15
g2
Ntp23200
Rp23201
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23202
Rp23203
(dp23204
g11
S'auto_6285'
p23205
sg13
Nsg14
g0
(g15
g2
Ntp23206
Rp23207
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp23208
sg204
(lp23209
g0
(g2193
g2
Ntp23210
Rp23211
(dp23212
g11
S'auto_6290'
p23213
sg13
I0
sg14
g0
(g15
g2
Ntp23214
Rp23215
(dp23216
g19
g20150
sbsg52
Nsg53
g0
(g54
g2
Ntp23217
Rp23218
(dp23219
g58
(lp23220
g23179
ag0
(g2193
g2
Ntp23221
Rp23222
(dp23223
g11
S'auto_6289'
p23224
sg13
I0
sg14
g0
(g15
g2
Ntp23225
Rp23226
(dp23227
g19
g20162
sbsg52
Nsg53
g0
(g54
g2
Ntp23228
Rp23229
(dp23230
g58
(lp23231
g23185
ag0
(g2193
g2
Ntp23232
Rp23233
(dp23234
g11
S'auto_6288'
p23235
sg13
I0
sg14
g0
(g15
g2
Ntp23236
Rp23237
(dp23238
g19
g20174
sbsg52
Nsg53
g0
(g54
g2
Ntp23239
Rp23240
(dp23241
g58
(lp23242
g23191
ag0
(g2193
g2
Ntp23243
Rp23244
(dp23245
g11
S'auto_6287'
p23246
sg13
I0
sg14
g0
(g15
g2
Ntp23247
Rp23248
(dp23249
g19
g20186
sbsg52
Nsg53
g0
(g54
g2
Ntp23250
Rp23251
(dp23252
g58
(lp23253
g23197
ag23203
asg14
g0
(g15
g2
Ntp23254
Rp23255
sg204
(lp23256
g23244
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23257
Rp23258
sg204
(lp23259
g23233
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23260
Rp23261
sg204
(lp23262
g23222
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23263
Rp23264
sg204
(lp23265
g23211
asg206
g3535
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s + %(i4)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i1)s - V%(id)s_tmp2;\n%(o0)s = ((V%(id)s_tmp3)>(%(i0)s)? (V%(id)s_tmp3): ((%(i0)s)>=(V%(id)s_tmp3)? (%(i0)s): nan("")));\n}\n'
p23266
sg2314
(g2202
tp23267
sg2322
(lp23268
S'%(nodename)s_subnode0'
p23269
aS'%(nodename)s_subnode1'
p23270
aS'%(nodename)s_subnode2'
p23271
aS'%(nodename)s_subnode3'
p23272
asg2328
I1
sbsg511
(dp23273
sg513
Nsg516
g0
(g517
g2
Ntp23274
Rp23275
(dp23276
g521
I0
sg522
(dp23277
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp23278
Rp23279
(dp23280
g182
(I00
I00
tp23281
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp23282
tp23283
Rp23284
aa(lp23285
g0
(g7
g2
Ntp23286
Rp23287
(dp23288
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23289
sg11
S'auto_1592'
p23290
sg14
g0
(g15
g2
Ntp23291
Rp23292
(dp23293
g19
g10227
sbsg53
g0
(g54
g2
Ntp23294
Rp23295
(dp23296
g58
(lp23297
g17030
asg1883
g16854
sg204
(lp23298
g23287
asg14
g0
(g15
g2
Ntp23299
Rp23300
(dp23301
g4120
(lp23302
g2330
asg2143
(lp23303
g2146
asbsg2147
(dp23304
sg206
g6009
sbsg177
g10247
sbag3969
((lp23305
tp23306
Rp23307
aa(lp23308
g17049
ag3969
((lp23309
(lp23310
g17053
aI1
aatp23311
Rp23312
aa(lp23313
g0
(g7
g2
Ntp23314
Rp23315
(dp23316
g13
I0
sg52
g3080
sg1883
g16854
sg1892
(lp23317
sg11
S'auto_6222'
p23318
sg14
g0
(g15
g2
Ntp23319
Rp23320
(dp23321
g19
(lp23322
sbsg53
g0
(g54
g2
Ntp23323
Rp23324
(dp23325
g58
(lp23326
g17049
ag17057
ag17088
asg1883
g16854
sg204
(lp23327
g23315
asg14
g0
(g15
g2
Ntp23328
Rp23329
(dp23330
g4120
(lp23331
g2330
asg2143
(lp23332
g2628
asbsg2147
(dp23333
sg206
g0
(g497
g2
Ntp23334
Rp23335
(dp23336
g52
Nsg503
g0
(g2225
g2
Ntp23337
Rp23338
(dp23339
g58
(lp23340
g0
(g2193
g2
Ntp23341
Rp23342
(dp23343
g11
S'auto_6208'
p23344
sg13
Nsg14
g0
(g15
g2
Ntp23345
Rp23346
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23347
Rp23348
(dp23349
g11
S'auto_6209'
p23350
sg13
Nsg14
g0
(g15
g2
Ntp23351
Rp23352
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23353
Rp23354
(dp23355
g11
S'auto_6210'
p23356
sg13
Nsg14
g0
(g15
g2
Ntp23357
Rp23358
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp23359
sg204
(lp23360
g0
(g2193
g2
Ntp23361
Rp23362
(dp23363
g11
S'auto_6212'
p23364
sg13
I0
sg14
g0
(g15
g2
Ntp23365
Rp23366
(dp23367
g19
g20479
sbsg52
Nsg53
g0
(g54
g2
Ntp23368
Rp23369
(dp23370
g58
(lp23371
g0
(g2193
g2
Ntp23372
Rp23373
(dp23374
g11
S'auto_6211'
p23375
sg13
I0
sg14
g0
(g15
g2
Ntp23376
Rp23377
(dp23378
g19
g20491
sbsg52
Nsg53
g0
(g54
g2
Ntp23379
Rp23380
(dp23381
g58
(lp23382
g23342
ag23348
asg14
g0
(g15
g2
Ntp23383
Rp23384
sg204
(lp23385
g23373
asg206
g3179
sbsg177
g2202
sbag23354
asg14
g0
(g15
g2
Ntp23386
Rp23387
sg204
(lp23388
g23362
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s / %(i1)s;\n%(o0)s = V%(id)s_tmp1 / %(i2)s;\n}\n'
p23389
sg2314
(g2202
tp23390
sg2322
(lp23391
S'%(nodename)s_subnode0'
p23392
aS'%(nodename)s_subnode1'
p23393
asg2328
I1
sbsg511
(dp23394
sg513
Nsg516
g0
(g517
g2
Ntp23395
Rp23396
(dp23397
g521
I0
sg522
(dp23398
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp23399
Rp23400
(dp23401
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp23402
tp23403
Rp23404
aa(lp23405
g17560
ag3969
((lp23406
(lp23407
g17556
aI1
aatp23408
Rp23409
aa(lp23410
g17066
ag3969
((lp23411
(lp23412
g17070
aI1
aatp23413
Rp23414
aa(lp23415
g17074
ag3969
((lp23416
(lp23417
g17070
aI1
aatp23418
Rp23419
aa(lp23420
g20319
ag3969
((lp23421
(lp23422
g17002
aI1
aatp23423
Rp23424
aa(lp23425
g17006
ag3969
((lp23426
(lp23427
g17002
aI1
aatp23428
Rp23429
aa(lp23430
g17254
ag3969
((lp23431
(lp23432
g17556
aI1
aa(lp23433
g17250
aI1
aa(lp23434
g18830
aI1
aa(lp23435
g17258
aI1
aatp23436
Rp23437
aa(lp23438
g17594
ag3969
((lp23439
(lp23440
g17556
aI1
aatp23441
Rp23442
aa(lp23443
g17545
ag3969
((lp23444
(lp23445
g17541
aI2
aatp23446
Rp23447
aa(lp23448
g0
(g7
g2
Ntp23449
Rp23450
(dp23451
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23452
sg11
S'auto_6076'
p23453
sg14
g0
(g15
g2
Ntp23454
Rp23455
(dp23456
g19
(lp23457
sbsg53
g0
(g54
g2
Ntp23458
Rp23459
(dp23460
g58
(lp23461
g17545
ag17545
ag17403
asg1883
g16854
sg204
(lp23462
g23450
asg14
g0
(g15
g2
Ntp23463
Rp23464
(dp23465
g4120
(lp23466
g2330
ag2330
ag2330
asg2143
(lp23467
g2628
aS"('Revert', 'inplace_elemwise_optimizer')"
p23468
aS"('Revert', 'inplace_elemwise_optimizer')"
p23469
asbsg2147
(dp23470
sg206
g0
(g497
g2
Ntp23471
Rp23472
(dp23473
g52
Nsg503
g0
(g2225
g2
Ntp23474
Rp23475
(dp23476
g58
(lp23477
g0
(g2193
g2
Ntp23478
Rp23479
(dp23480
g11
S'auto_6059'
p23481
sg13
Nsg14
g0
(g15
g2
Ntp23482
Rp23483
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23484
Rp23485
(dp23486
g11
S'auto_6060'
p23487
sg13
Nsg14
g0
(g15
g2
Ntp23488
Rp23489
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23490
Rp23491
(dp23492
g11
S'auto_6061'
p23493
sg13
Nsg14
g0
(g15
g2
Ntp23494
Rp23495
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp23496
sg204
(lp23497
g0
(g2193
g2
Ntp23498
Rp23499
(dp23500
g11
S'auto_6065'
p23501
sg13
I0
sg14
g0
(g15
g2
Ntp23502
Rp23503
(dp23504
g19
g17691
sbsg52
Nsg53
g0
(g54
g2
Ntp23505
Rp23506
(dp23507
g58
(lp23508
g23479
ag0
(g2193
g2
Ntp23509
Rp23510
(dp23511
g11
S'auto_6064'
p23512
sg13
I0
sg14
g0
(g15
g2
Ntp23513
Rp23514
(dp23515
g19
g17703
sbsg52
Nsg53
g0
(g54
g2
Ntp23516
Rp23517
(dp23518
g58
(lp23519
g23485
ag0
(g2193
g2
Ntp23520
Rp23521
(dp23522
g11
S'auto_6063'
p23523
sg13
I0
sg14
g0
(g15
g2
Ntp23524
Rp23525
(dp23526
g19
g17715
sbsg52
Nsg53
g0
(g54
g2
Ntp23527
Rp23528
(dp23529
g58
(lp23530
g23491
asg14
g0
(g15
g2
Ntp23531
Rp23532
sg204
(lp23533
g23521
asg206
g11021
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23534
Rp23535
sg204
(lp23536
g23510
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23537
Rp23538
sg204
(lp23539
g23499
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i2)s > 0) ? 1. : ((%(i2)s < 0) ? -1. : (isnan(%(i2)s) ? NAN : 0.));\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s * V%(id)s_tmp1;\n%(o0)s = %(i0)s + V%(id)s_tmp2;\n}\n'
p23540
sg2314
(g2202
tp23541
sg2322
(lp23542
S'%(nodename)s_subnode0'
p23543
aS'%(nodename)s_subnode1'
p23544
aS'%(nodename)s_subnode2'
p23545
asg2328
I1
sbsg511
(dp23546
sg513
Nsg516
g0
(g517
g2
Ntp23547
Rp23548
(dp23549
g521
I0
sg522
(dp23550
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp23551
Rp23552
(dp23553
g182
(I00
I00
tp23554
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp23555
tp23556
Rp23557
aa(lp23558
g16867
ag3969
((lp23559
(lp23560
g16871
aI1
aa(lp23561
g18841
aI1
aatp23562
Rp23563
aa(lp23564
g19639
ag3969
((lp23565
(lp23566
g19606
aI1
aatp23567
Rp23568
aa(lp23569
g19602
ag3969
((lp23570
(lp23571
g19606
aI1
aa(lp23572
g16994
aI1
aa(lp23573
g19598
aI1
aatp23574
Rp23575
aa(lp23576
g19610
ag3969
((lp23577
(lp23578
g19606
aI1
aatp23579
Rp23580
aa(lp23581
g19619
ag3969
((lp23582
(lp23583
g19606
aI1
aa(lp23584
g19598
aI1
aatp23585
Rp23586
aa(lp23587
g0
(g7
g2
Ntp23588
Rp23589
(dp23590
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23591
sg11
S'auto_6025'
p23592
sg14
g0
(g15
g2
Ntp23593
Rp23594
(dp23595
g19
(lp23596
sbsg53
g0
(g54
g2
Ntp23597
Rp23598
(dp23599
g58
(lp23600
g19602
ag19610
ag19619
ag19639
asg1883
g16854
sg204
(lp23601
g23589
asg14
g0
(g15
g2
Ntp23602
Rp23603
(dp23604
g4120
(lp23605
g2330
asg2143
(lp23606
g2628
asbsg2147
(dp23607
sg206
g0
(g497
g2
Ntp23608
Rp23609
(dp23610
g52
Nsg503
g0
(g2225
g2
Ntp23611
Rp23612
(dp23613
g58
(lp23614
g0
(g2193
g2
Ntp23615
Rp23616
(dp23617
g11
S'auto_6003'
p23618
sg13
Nsg14
g0
(g15
g2
Ntp23619
Rp23620
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23621
Rp23622
(dp23623
g11
S'auto_6004'
p23624
sg13
Nsg14
g0
(g15
g2
Ntp23625
Rp23626
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23627
Rp23628
(dp23629
g11
S'auto_6005'
p23630
sg13
Nsg14
g0
(g15
g2
Ntp23631
Rp23632
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23633
Rp23634
(dp23635
g11
S'auto_6006'
p23636
sg13
Nsg14
g0
(g15
g2
Ntp23637
Rp23638
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp23639
sg204
(lp23640
g0
(g2193
g2
Ntp23641
Rp23642
(dp23643
g11
S'auto_6011'
p23644
sg13
I0
sg14
g0
(g15
g2
Ntp23645
Rp23646
(dp23647
g19
g19745
sbsg52
Nsg53
g0
(g54
g2
Ntp23648
Rp23649
(dp23650
g58
(lp23651
g0
(g2193
g2
Ntp23652
Rp23653
(dp23654
g11
S'auto_6009'
p23655
sg13
I0
sg14
g0
(g15
g2
Ntp23656
Rp23657
(dp23658
g19
g19757
sbsg52
Nsg53
g0
(g54
g2
Ntp23659
Rp23660
(dp23661
g58
(lp23662
g23616
ag23622
asg14
g0
(g15
g2
Ntp23663
Rp23664
sg204
(lp23665
g23653
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp23666
Rp23667
(dp23668
g11
S'auto_6010'
p23669
sg13
I0
sg14
g0
(g15
g2
Ntp23670
Rp23671
(dp23672
g19
g19772
sbsg52
Nsg53
g0
(g54
g2
Ntp23673
Rp23674
(dp23675
g58
(lp23676
g23628
ag0
(g2193
g2
Ntp23677
Rp23678
(dp23679
g11
S'auto_6008'
p23680
sg13
I0
sg14
g0
(g15
g2
Ntp23681
Rp23682
(dp23683
g19
g19784
sbsg52
Nsg53
g0
(g54
g2
Ntp23684
Rp23685
(dp23686
g58
(lp23687
g23634
asg14
g0
(g15
g2
Ntp23688
Rp23689
sg204
(lp23690
g23678
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23691
Rp23692
sg204
(lp23693
g23667
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp23694
Rp23695
sg204
(lp23696
g23642
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p23697
sg2314
(g2202
tp23698
sg2322
(lp23699
S'%(nodename)s_subnode0'
p23700
aS'%(nodename)s_subnode1'
p23701
aS'%(nodename)s_subnode2'
p23702
aS'%(nodename)s_subnode3'
p23703
asg2328
I1
sbsg511
(dp23704
sg513
Nsg516
g0
(g517
g2
Ntp23705
Rp23706
(dp23707
g521
I0
sg522
(dp23708
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp23709
Rp23710
(dp23711
g182
(I00
I00
tp23712
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp23713
tp23714
Rp23715
aa(lp23716
g18892
ag3969
((lp23717
(lp23718
g18888
aI1
aa(lp23719
g18901
aI1
aatp23720
Rp23721
aa(lp23722
g19025
ag3969
((lp23723
(lp23724
g18888
aI1
aatp23725
Rp23726
aa(lp23727
g0
(g7
g2
Ntp23728
Rp23729
(dp23730
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23731
sg11
S'auto_4314'
p23732
sg14
g0
(g15
g2
Ntp23733
Rp23734
(dp23735
S'values_eq_approx'
p23736
ctheano.tensor.type
values_eq_approx_remove_inf_nan
p23737
sg19
(lp23738
sbsg53
g0
(g54
g2
Ntp23739
Rp23740
(dp23741
g58
(lp23742
g18892
ag19025
asg1883
g16854
sg204
(lp23743
g23729
asg14
g0
(g15
g2
Ntp23744
Rp23745
(dp23746
g4120
(lp23747
g2330
asg2143
(lp23748
S'local_add_canonizer'
p23749
asbsg2147
(dp23750
sg206
g1153
sbsg177
g0
(g178
g2
Ntp23751
Rp23752
(dp23753
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp23754
tp23755
Rp23756
aa(lp23757
g18862
ag3969
((lp23758
(lp23759
g18858
aI1
aa(lp23760
g16994
aI1
aatp23761
Rp23762
aa(lp23763
g18854
ag3969
((lp23764
(lp23765
g18858
aI1
aa(lp23766
g18850
aI1
aa(lp23767
g19235
aI1
aatp23768
Rp23769
aa(lp23770
g19109
ag3969
((lp23771
(lp23772
g16930
aI1
aa(lp23773
g16955
aI1
aatp23774
Rp23775
aa(lp23776
g18834
ag3969
((lp23777
(lp23778
g18841
aI1
aa(lp23779
g18830
aI1
aatp23780
Rp23781
aa(lp23782
g18846
ag3969
((lp23783
(lp23784
g18850
aI1
aatp23785
Rp23786
aa(lp23787
g19409
ag3969
((lp23788
(lp23789
g18850
aI1
aatp23790
Rp23791
aa(lp23792
g0
(g7
g2
Ntp23793
Rp23794
(dp23795
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23796
sg11
S'auto_5941'
p23797
sg14
g0
(g15
g2
Ntp23798
Rp23799
(dp23800
g19
(lp23801
sbsg53
g0
(g54
g2
Ntp23802
Rp23803
(dp23804
g58
(lp23805
g18854
ag19409
ag18846
asg1883
g16854
sg204
(lp23806
g23794
asg14
g0
(g15
g2
Ntp23807
Rp23808
(dp23809
g4120
(lp23810
g2330
asg2143
(lp23811
g2628
asbsg2147
(dp23812
sg206
g0
(g497
g2
Ntp23813
Rp23814
(dp23815
g52
Nsg503
g0
(g2225
g2
Ntp23816
Rp23817
(dp23818
g58
(lp23819
g0
(g2193
g2
Ntp23820
Rp23821
(dp23822
g11
S'auto_5927'
p23823
sg13
Nsg14
g0
(g15
g2
Ntp23824
Rp23825
(dp23826
g2511
g19480
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23827
Rp23828
(dp23829
g11
S'auto_5928'
p23830
sg13
Nsg14
g0
(g15
g2
Ntp23831
Rp23832
(dp23833
g2511
g19490
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23834
Rp23835
(dp23836
g11
S'auto_5929'
p23837
sg13
Nsg14
g0
(g15
g2
Ntp23838
Rp23839
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp23840
sg204
(lp23841
g0
(g2193
g2
Ntp23842
Rp23843
(dp23844
g11
S'auto_5931'
p23845
sg13
I0
sg14
g0
(g15
g2
Ntp23846
Rp23847
(dp23848
g19
g19506
sbsg52
Nsg53
g0
(g54
g2
Ntp23849
Rp23850
(dp23851
g58
(lp23852
g0
(g2193
g2
Ntp23853
Rp23854
(dp23855
g11
S'auto_5930'
p23856
sg13
I0
sg14
g0
(g15
g2
Ntp23857
Rp23858
(dp23859
g19
g19518
sbsg52
Nsg53
g0
(g54
g2
Ntp23860
Rp23861
(dp23862
g58
(lp23863
g23821
ag23828
asg14
g0
(g15
g2
Ntp23864
Rp23865
sg204
(lp23866
g23854
asg206
g1224
sbsg177
g2202
sbag23835
asg14
g0
(g15
g2
Ntp23867
Rp23868
sg204
(lp23869
g23843
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp1 + %(i2)s;\n}\n'
p23870
sg2314
(g2202
tp23871
sg2322
(lp23872
S'%(nodename)s_subnode0'
p23873
aS'%(nodename)s_subnode1'
p23874
asg2328
I1
sbsg511
(dp23875
sg513
Nsg516
g0
(g517
g2
Ntp23876
Rp23877
(dp23878
g521
I0
sg522
(dp23879
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp23880
Rp23881
(dp23882
g182
(I00
I00
tp23883
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp23884
tp23885
Rp23886
aa(lp23887
g16983
ag3969
((lp23888
(lp23889
g16930
aI1
aa(lp23890
g16955
aI1
aatp23891
Rp23892
aa(lp23893
g16916
ag3969
((lp23894
(lp23895
g16921
aI1
aa(lp23896
g16912
aI1
aatp23897
Rp23898
aa(lp23899
g16926
ag3969
((lp23900
(lp23901
g16930
aI1
aa(lp23902
g16955
aI1
aatp23903
Rp23904
aa(lp23905
g21642
ag3969
((lp23906
(lp23907
g16930
aI1
aatp23908
Rp23909
aa(lp23910
g20921
ag3969
((lp23911
(lp23912
g16930
aI1
aa(lp23913
g16955
aI1
aatp23914
Rp23915
aa(lp23916
g0
(g7
g2
Ntp23917
Rp23918
(dp23919
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp23920
sg11
S'auto_5826'
p23921
sg14
g0
(g15
g2
Ntp23922
Rp23923
(dp23924
g19
(lp23925
sbsg53
g0
(g54
g2
Ntp23926
Rp23927
(dp23928
g58
(lp23929
g16934
ag21642
ag16926
ag16983
ag19419
ag19109
ag20921
ag19654
ag20941
ag16998
asg1883
g16854
sg204
(lp23930
g23918
asg14
g0
(g15
g2
Ntp23931
Rp23932
(dp23933
g4120
(lp23934
g2330
asg2143
(lp23935
g2628
asbsg2147
(dp23936
sg206
g0
(g497
g2
Ntp23937
Rp23938
(dp23939
g52
Nsg503
g0
(g2225
g2
Ntp23940
Rp23941
(dp23942
g58
(lp23943
g0
(g2193
g2
Ntp23944
Rp23945
(dp23946
g11
S'auto_5780'
p23947
sg13
Nsg14
g0
(g15
g2
Ntp23948
Rp23949
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23950
Rp23951
(dp23952
g11
S'auto_5781'
p23953
sg13
Nsg14
g0
(g15
g2
Ntp23954
Rp23955
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23956
Rp23957
(dp23958
g11
S'auto_5782'
p23959
sg13
Nsg14
g0
(g15
g2
Ntp23960
Rp23961
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23962
Rp23963
(dp23964
g11
S'auto_5783'
p23965
sg13
Nsg14
g0
(g15
g2
Ntp23966
Rp23967
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23968
Rp23969
(dp23970
g11
S'auto_5784'
p23971
sg13
Nsg14
g0
(g15
g2
Ntp23972
Rp23973
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23974
Rp23975
(dp23976
g11
S'auto_5785'
p23977
sg13
Nsg14
g0
(g15
g2
Ntp23978
Rp23979
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23980
Rp23981
(dp23982
g11
S'auto_5786'
p23983
sg13
Nsg14
g0
(g15
g2
Ntp23984
Rp23985
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23986
Rp23987
(dp23988
g11
S'auto_5787'
p23989
sg13
Nsg14
g0
(g15
g2
Ntp23990
Rp23991
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23992
Rp23993
(dp23994
g11
S'auto_5788'
p23995
sg13
Nsg14
g0
(g15
g2
Ntp23996
Rp23997
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp23998
Rp23999
(dp24000
g11
S'auto_5789'
p24001
sg13
Nsg14
g0
(g15
g2
Ntp24002
Rp24003
sg52
Nsg53
Nsg177
g2202
sbasg2248
I10
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
tp24004
sg204
(lp24005
g0
(g2193
g2
Ntp24006
Rp24007
(dp24008
g11
S'auto_5797'
p24009
sg13
I0
sg14
g0
(g15
g2
Ntp24010
Rp24011
(dp24012
g19
g21829
sbsg52
Nsg53
g0
(g54
g2
Ntp24013
Rp24014
(dp24015
g58
(lp24016
g0
(g2193
g2
Ntp24017
Rp24018
(dp24019
g11
S'auto_5796'
p24020
sg13
I0
sg14
g0
(g15
g2
Ntp24021
Rp24022
(dp24023
g19
g21841
sbsg52
Nsg53
g0
(g54
g2
Ntp24024
Rp24025
(dp24026
g58
(lp24027
g23945
ag0
(g2193
g2
Ntp24028
Rp24029
(dp24030
g11
S'auto_5795'
p24031
sg13
I0
sg14
g0
(g15
g2
Ntp24032
Rp24033
(dp24034
g19
g21853
sbsg52
Nsg53
g0
(g54
g2
Ntp24035
Rp24036
(dp24037
g58
(lp24038
g0
(g2193
g2
Ntp24039
Rp24040
(dp24041
g11
S'auto_5792'
p24042
sg13
I0
sg14
g0
(g15
g2
Ntp24043
Rp24044
(dp24045
g19
g21865
sbsg52
Nsg53
g0
(g54
g2
Ntp24046
Rp24047
(dp24048
g58
(lp24049
g23951
ag23957
ag23963
ag23969
asg14
g0
(g15
g2
Ntp24050
Rp24051
sg204
(lp24052
g24040
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp24053
Rp24054
(dp24055
g11
S'auto_5794'
p24056
sg13
I0
sg14
g0
(g15
g2
Ntp24057
Rp24058
(dp24059
g19
g21880
sbsg52
Nsg53
g0
(g54
g2
Ntp24060
Rp24061
(dp24062
g58
(lp24063
g23975
ag0
(g2193
g2
Ntp24064
Rp24065
(dp24066
g11
S'auto_5793'
p24067
sg13
I0
sg14
g0
(g15
g2
Ntp24068
Rp24069
(dp24070
g19
g21892
sbsg52
Nsg53
g0
(g54
g2
Ntp24071
Rp24072
(dp24073
g58
(lp24074
g23981
ag0
(g2193
g2
Ntp24075
Rp24076
(dp24077
g11
S'auto_5791'
p24078
sg13
I0
sg14
g0
(g15
g2
Ntp24079
Rp24080
(dp24081
g19
g21904
sbsg52
Nsg53
g0
(g54
g2
Ntp24082
Rp24083
(dp24084
g58
(lp24085
g23987
asg14
g0
(g15
g2
Ntp24086
Rp24087
sg204
(lp24088
g24076
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24089
Rp24090
sg204
(lp24091
g24065
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24092
Rp24093
sg204
(lp24094
g24054
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24095
Rp24096
sg204
(lp24097
g24029
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24098
Rp24099
sg204
(lp24100
g24018
asg206
g1157
sbsg177
g2202
sbag23993
ag23999
asg14
g0
(g15
g2
Ntp24101
Rp24102
sg204
(lp24103
g24007
asg206
g11700
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i7)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i6)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i5)s * V%(id)s_tmp2;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s * %(i2)s * %(i3)s * %(i4)s;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = V%(id)s_tmp4 / V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s + V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 < %(i8)s ? %(i8)s : V%(id)s_tmp6 > %(i9)s ? %(i9)s : V%(id)s_tmp6;\n}\n'
p24104
sg2314
(g2202
tp24105
sg2322
(lp24106
S'%(nodename)s_subnode0'
p24107
aS'%(nodename)s_subnode1'
p24108
aS'%(nodename)s_subnode2'
p24109
aS'%(nodename)s_subnode3'
p24110
aS'%(nodename)s_subnode4'
p24111
aS'%(nodename)s_subnode5'
p24112
aS'%(nodename)s_subnode6'
p24113
asg2328
I1
sbsg511
(dp24114
sg513
Nsg516
g0
(g517
g2
Ntp24115
Rp24116
(dp24117
g521
I0
sg522
(dp24118
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp24119
Rp24120
(dp24121
g182
(I00
I00
tp24122
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24123
tp24124
Rp24125
aa(lp24126
g16885
ag3969
((lp24127
(lp24128
g16889
aI1
aa(lp24129
g17834
aI1
aatp24130
Rp24131
aa(lp24132
g16893
ag3969
((lp24133
(lp24134
g16889
aI1
aa(lp24135
g16898
aI1
aa(lp24136
g17267
aI1
aatp24137
Rp24138
aa(lp24139
g22267
ag3969
((lp24140
(lp24141
g16889
aI1
aatp24142
Rp24143
aa(lp24144
g17280
ag3969
((lp24145
(lp24146
g16889
aI1
aa(lp24147
g17267
aI1
aatp24148
Rp24149
aa(lp24150
g0
(g7
g2
Ntp24151
Rp24152
(dp24153
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24154
sg11
S'auto_5594'
p24155
sg14
g0
(g15
g2
Ntp24156
Rp24157
(dp24158
g19
(lp24159
sbsg53
g0
(g54
g2
Ntp24160
Rp24161
(dp24162
g58
(lp24163
g16893
ag22267
ag17280
ag16885
asg1883
g16854
sg204
(lp24164
g24152
asg14
g0
(g15
g2
Ntp24165
Rp24166
(dp24167
g4120
(lp24168
g2330
asg2143
(lp24169
g2628
asbsg2147
(dp24170
sg206
g0
(g497
g2
Ntp24171
Rp24172
(dp24173
g52
Nsg503
g0
(g2225
g2
Ntp24174
Rp24175
(dp24176
g58
(lp24177
g0
(g2193
g2
Ntp24178
Rp24179
(dp24180
g11
S'auto_5572'
p24181
sg13
Nsg14
g0
(g15
g2
Ntp24182
Rp24183
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24184
Rp24185
(dp24186
g11
S'auto_5573'
p24187
sg13
Nsg14
g0
(g15
g2
Ntp24188
Rp24189
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24190
Rp24191
(dp24192
g11
S'auto_5574'
p24193
sg13
Nsg14
g0
(g15
g2
Ntp24194
Rp24195
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24196
Rp24197
(dp24198
g11
S'auto_5575'
p24199
sg13
Nsg14
g0
(g15
g2
Ntp24200
Rp24201
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp24202
sg204
(lp24203
g0
(g2193
g2
Ntp24204
Rp24205
(dp24206
g11
S'auto_5580'
p24207
sg13
I0
sg14
g0
(g15
g2
Ntp24208
Rp24209
(dp24210
g19
g22353
sbsg52
Nsg53
g0
(g54
g2
Ntp24211
Rp24212
(dp24213
g58
(lp24214
g0
(g2193
g2
Ntp24215
Rp24216
(dp24217
g11
S'auto_5578'
p24218
sg13
I0
sg14
g0
(g15
g2
Ntp24219
Rp24220
(dp24221
g19
g22365
sbsg52
Nsg53
g0
(g54
g2
Ntp24222
Rp24223
(dp24224
g58
(lp24225
g24179
ag24185
asg14
g0
(g15
g2
Ntp24226
Rp24227
sg204
(lp24228
g24216
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp24229
Rp24230
(dp24231
g11
S'auto_5579'
p24232
sg13
I0
sg14
g0
(g15
g2
Ntp24233
Rp24234
(dp24235
g19
g22380
sbsg52
Nsg53
g0
(g54
g2
Ntp24236
Rp24237
(dp24238
g58
(lp24239
g24191
ag0
(g2193
g2
Ntp24240
Rp24241
(dp24242
g11
S'auto_5577'
p24243
sg13
I0
sg14
g0
(g15
g2
Ntp24244
Rp24245
(dp24246
g19
g22392
sbsg52
Nsg53
g0
(g54
g2
Ntp24247
Rp24248
(dp24249
g58
(lp24250
g24197
asg14
g0
(g15
g2
Ntp24251
Rp24252
sg204
(lp24253
g24241
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24254
Rp24255
sg204
(lp24256
g24230
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24257
Rp24258
sg204
(lp24259
g24205
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p24260
sg2314
(g2202
tp24261
sg2322
(lp24262
S'%(nodename)s_subnode0'
p24263
aS'%(nodename)s_subnode1'
p24264
aS'%(nodename)s_subnode2'
p24265
aS'%(nodename)s_subnode3'
p24266
asg2328
I1
sbsg511
(dp24267
sg513
Nsg516
g0
(g517
g2
Ntp24268
Rp24269
(dp24270
g521
I0
sg522
(dp24271
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp24272
Rp24273
(dp24274
g182
(I00
tp24275
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24276
tp24277
Rp24278
aa(lp24279
g17838
ag3969
((lp24280
(lp24281
g17834
aI1
aa(lp24282
g16898
aI1
aa(lp24283
g17844
aI1
aatp24284
Rp24285
aa(lp24286
g18056
ag3969
((lp24287
(lp24288
g17834
aI1
aatp24289
Rp24290
aa(lp24291
g17857
ag3969
((lp24292
(lp24293
g17834
aI1
aa(lp24294
g17844
aI1
aatp24295
Rp24296
aa(lp24297
g0
(g7
g2
Ntp24298
Rp24299
(dp24300
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24301
sg11
S'auto_5534'
p24302
sg14
g0
(g15
g2
Ntp24303
Rp24304
(dp24305
g19
(lp24306
sbsg53
g0
(g54
g2
Ntp24307
Rp24308
(dp24309
g58
(lp24310
g17838
ag18056
ag17857
ag16885
asg1883
g16854
sg204
(lp24311
g24299
asg14
g0
(g15
g2
Ntp24312
Rp24313
(dp24314
g4120
(lp24315
g2330
asg2143
(lp24316
g2628
asbsg2147
(dp24317
sg206
g0
(g497
g2
Ntp24318
Rp24319
(dp24320
g52
Nsg503
g0
(g2225
g2
Ntp24321
Rp24322
(dp24323
g58
(lp24324
g0
(g2193
g2
Ntp24325
Rp24326
(dp24327
g11
S'auto_5515'
p24328
sg13
Nsg14
g0
(g15
g2
Ntp24329
Rp24330
(dp24331
g2511
g18118
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24332
Rp24333
(dp24334
g11
S'auto_5516'
p24335
sg13
Nsg14
g0
(g15
g2
Ntp24336
Rp24337
(dp24338
g2511
g18128
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24339
Rp24340
(dp24341
g11
S'auto_5517'
p24342
sg13
Nsg14
g0
(g15
g2
Ntp24343
Rp24344
(dp24345
g2511
g18138
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24346
Rp24347
(dp24348
g11
S'auto_5518'
p24349
sg13
Nsg14
g0
(g15
g2
Ntp24350
Rp24351
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp24352
sg204
(lp24353
g0
(g2193
g2
Ntp24354
Rp24355
(dp24356
g11
S'auto_5521'
p24357
sg13
I0
sg14
g0
(g15
g2
Ntp24358
Rp24359
(dp24360
g19
g18154
sbsg52
Nsg53
g0
(g54
g2
Ntp24361
Rp24362
(dp24363
g58
(lp24364
g0
(g2193
g2
Ntp24365
Rp24366
(dp24367
g11
S'auto_5520'
p24368
sg13
I0
sg14
g0
(g15
g2
Ntp24369
Rp24370
(dp24371
g19
g18166
sbsg52
Nsg53
g0
(g54
g2
Ntp24372
Rp24373
(dp24374
g58
(lp24375
g24326
ag24333
asg14
g0
(g15
g2
Ntp24376
Rp24377
sg204
(lp24378
g24366
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp24379
Rp24380
(dp24381
g11
S'auto_5519'
p24382
sg13
I0
sg14
g0
(g15
g2
Ntp24383
Rp24384
(dp24385
g19
g18181
sbsg52
Nsg53
g0
(g54
g2
Ntp24386
Rp24387
(dp24388
g58
(lp24389
g24340
ag24347
asg14
g0
(g15
g2
Ntp24390
Rp24391
sg204
(lp24392
g24380
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24393
Rp24394
sg204
(lp24395
g24355
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i2)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp2 + V%(id)s_tmp1;\n}\n'
p24396
sg2314
(g2202
tp24397
sg2322
(lp24398
S'%(nodename)s_subnode0'
p24399
aS'%(nodename)s_subnode1'
p24400
aS'%(nodename)s_subnode2'
p24401
asg2328
I1
sbsg511
(dp24402
sg513
Nsg516
g0
(g517
g2
Ntp24403
Rp24404
(dp24405
g521
I0
sg522
(dp24406
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp24407
Rp24408
(dp24409
g182
(I00
tp24410
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24411
tp24412
Rp24413
aa(lp24414
g18905
ag3969
((lp24415
(lp24416
g18901
aI1
aatp24417
Rp24418
aa(lp24419
g0
(g7
g2
Ntp24420
Rp24421
(dp24422
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24423
sg11
S'auto_4275'
p24424
sg14
g0
(g15
g2
Ntp24425
Rp24426
(dp24427
g23736
g23737
sg19
(lp24428
sbsg53
g0
(g54
g2
Ntp24429
Rp24430
(dp24431
g58
(lp24432
g18892
ag18905
asg1883
g16854
sg204
(lp24433
g24421
asg14
g0
(g15
g2
Ntp24434
Rp24435
(dp24436
g4120
(lp24437
g2330
asg2143
(lp24438
g23749
asbsg2147
(dp24439
sg206
g1153
sbsg177
g0
(g178
g2
Ntp24440
Rp24441
(dp24442
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24443
tp24444
Rp24445
aa(lp24446
g18925
ag3969
((lp24447
(lp24448
g16898
aI1
aatp24449
Rp24450
aa(lp24451
g16902
ag3969
((lp24452
(lp24453
g16898
aI1
aatp24454
Rp24455
aa(lp24456
g22012
ag3969
((lp24457
(lp24458
g16898
aI1
aatp24459
Rp24460
aa(lp24461
g17339
ag3969
((lp24462
(lp24463
g17343
aI1
aa(lp24464
g17306
aI1
aatp24465
Rp24466
aa(lp24467
g18218
ag3969
((lp24468
(lp24469
g17343
aI1
aa(lp24470
g17306
aI1
aatp24471
Rp24472
aa(lp24473
g0
(g7
g2
Ntp24474
Rp24475
(dp24476
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24477
sg11
S'auto_5330'
p24478
sg14
g0
(g15
g2
Ntp24479
Rp24480
(dp24481
g19
(lp24482
sbsg53
g0
(g54
g2
Ntp24483
Rp24484
(dp24485
g58
(lp24486
g17347
ag17339
ag17823
ag18218
ag18238
asg1883
g16854
sg204
(lp24487
g24475
asg14
g0
(g15
g2
Ntp24488
Rp24489
(dp24490
g4120
(lp24491
g2330
asg2143
(lp24492
g2628
asbsg2147
(dp24493
sg206
g0
(g497
g2
Ntp24494
Rp24495
(dp24496
g52
Nsg503
g0
(g2225
g2
Ntp24497
Rp24498
(dp24499
g58
(lp24500
g0
(g2193
g2
Ntp24501
Rp24502
(dp24503
g11
S'auto_5303'
p24504
sg13
Nsg14
g0
(g15
g2
Ntp24505
Rp24506
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24507
Rp24508
(dp24509
g11
S'auto_5304'
p24510
sg13
Nsg14
g0
(g15
g2
Ntp24511
Rp24512
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24513
Rp24514
(dp24515
g11
S'auto_5305'
p24516
sg13
Nsg14
g0
(g15
g2
Ntp24517
Rp24518
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24519
Rp24520
(dp24521
g11
S'auto_5306'
p24522
sg13
Nsg14
g0
(g15
g2
Ntp24523
Rp24524
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24525
Rp24526
(dp24527
g11
S'auto_5307'
p24528
sg13
Nsg14
g0
(g15
g2
Ntp24529
Rp24530
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp24531
sg204
(lp24532
g0
(g2193
g2
Ntp24533
Rp24534
(dp24535
g11
S'auto_5313'
p24536
sg13
I0
sg14
g0
(g15
g2
Ntp24537
Rp24538
(dp24539
g19
g18356
sbsg52
Nsg53
g0
(g54
g2
Ntp24540
Rp24541
(dp24542
g58
(lp24543
g24502
ag0
(g2193
g2
Ntp24544
Rp24545
(dp24546
g11
S'auto_5312'
p24547
sg13
I0
sg14
g0
(g15
g2
Ntp24548
Rp24549
(dp24550
g19
g18368
sbsg52
Nsg53
g0
(g54
g2
Ntp24551
Rp24552
(dp24553
g58
(lp24554
g0
(g2193
g2
Ntp24555
Rp24556
(dp24557
g11
S'auto_5310'
p24558
sg13
I0
sg14
g0
(g15
g2
Ntp24559
Rp24560
(dp24561
g19
g18380
sbsg52
Nsg53
g0
(g54
g2
Ntp24562
Rp24563
(dp24564
g58
(lp24565
g24508
ag24514
asg14
g0
(g15
g2
Ntp24566
Rp24567
sg204
(lp24568
g24556
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp24569
Rp24570
(dp24571
g11
S'auto_5311'
p24572
sg13
I0
sg14
g0
(g15
g2
Ntp24573
Rp24574
(dp24575
g19
g18395
sbsg52
Nsg53
g0
(g54
g2
Ntp24576
Rp24577
(dp24578
g58
(lp24579
g24520
ag0
(g2193
g2
Ntp24580
Rp24581
(dp24582
g11
S'auto_5309'
p24583
sg13
I0
sg14
g0
(g15
g2
Ntp24584
Rp24585
(dp24586
g19
g18407
sbsg52
Nsg53
g0
(g54
g2
Ntp24587
Rp24588
(dp24589
g58
(lp24590
g24526
asg14
g0
(g15
g2
Ntp24591
Rp24592
sg204
(lp24593
g24581
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24594
Rp24595
sg204
(lp24596
g24570
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24597
Rp24598
sg204
(lp24599
g24545
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24600
Rp24601
sg204
(lp24602
g24534
asg206
g3526
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i4)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i3)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i1)s * %(i2)s;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = V%(id)s_tmp3 / V%(id)s_tmp2;\n%(o0)s = %(i0)s - V%(id)s_tmp4;\n}\n'
p24603
sg2314
(g2202
tp24604
sg2322
(lp24605
S'%(nodename)s_subnode0'
p24606
aS'%(nodename)s_subnode1'
p24607
aS'%(nodename)s_subnode2'
p24608
aS'%(nodename)s_subnode3'
p24609
aS'%(nodename)s_subnode4'
p24610
asg2328
I1
sbsg511
(dp24611
sg513
Nsg516
g0
(g517
g2
Ntp24612
Rp24613
(dp24614
g521
I0
sg522
(dp24615
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp24616
Rp24617
(dp24618
g182
(I00
tp24619
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24620
tp24621
Rp24622
aa(lp24623
g17246
ag3969
((lp24624
(lp24625
g17250
aI1
aa(lp24626
g18830
aI1
aatp24627
Rp24628
aa(lp24629
g19594
ag3969
((lp24630
(lp24631
g19598
aI1
aatp24632
Rp24633
aa(lp24634
g19838
ag3969
((lp24635
(lp24636
g19598
aI1
aatp24637
Rp24638
aa(lp24639
g0
(g7
g2
Ntp24640
Rp24641
(dp24642
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24643
sg11
S'auto_5232'
p24644
sg14
g0
(g15
g2
Ntp24645
Rp24646
(dp24647
g19
(lp24648
sbsg53
g0
(g54
g2
Ntp24649
Rp24650
(dp24651
g58
(lp24652
g19602
ag19838
ag19619
ag19594
asg1883
g16854
sg204
(lp24653
g24641
asg14
g0
(g15
g2
Ntp24654
Rp24655
(dp24656
g4120
(lp24657
g2330
asg2143
(lp24658
g2628
asbsg2147
(dp24659
sg206
g0
(g497
g2
Ntp24660
Rp24661
(dp24662
g52
Nsg503
g0
(g2225
g2
Ntp24663
Rp24664
(dp24665
g58
(lp24666
g0
(g2193
g2
Ntp24667
Rp24668
(dp24669
g11
S'auto_5210'
p24670
sg13
Nsg14
g0
(g15
g2
Ntp24671
Rp24672
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24673
Rp24674
(dp24675
g11
S'auto_5211'
p24676
sg13
Nsg14
g0
(g15
g2
Ntp24677
Rp24678
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24679
Rp24680
(dp24681
g11
S'auto_5212'
p24682
sg13
Nsg14
g0
(g15
g2
Ntp24683
Rp24684
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24685
Rp24686
(dp24687
g11
S'auto_5213'
p24688
sg13
Nsg14
g0
(g15
g2
Ntp24689
Rp24690
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp24691
sg204
(lp24692
g0
(g2193
g2
Ntp24693
Rp24694
(dp24695
g11
S'auto_5218'
p24696
sg13
I0
sg14
g0
(g15
g2
Ntp24697
Rp24698
(dp24699
g19
g19939
sbsg52
Nsg53
g0
(g54
g2
Ntp24700
Rp24701
(dp24702
g58
(lp24703
g0
(g2193
g2
Ntp24704
Rp24705
(dp24706
g11
S'auto_5216'
p24707
sg13
I0
sg14
g0
(g15
g2
Ntp24708
Rp24709
(dp24710
g19
g19951
sbsg52
Nsg53
g0
(g54
g2
Ntp24711
Rp24712
(dp24713
g58
(lp24714
g24668
ag24674
asg14
g0
(g15
g2
Ntp24715
Rp24716
sg204
(lp24717
g24705
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp24718
Rp24719
(dp24720
g11
S'auto_5217'
p24721
sg13
I0
sg14
g0
(g15
g2
Ntp24722
Rp24723
(dp24724
g19
g19966
sbsg52
Nsg53
g0
(g54
g2
Ntp24725
Rp24726
(dp24727
g58
(lp24728
g24680
ag0
(g2193
g2
Ntp24729
Rp24730
(dp24731
g11
S'auto_5215'
p24732
sg13
I0
sg14
g0
(g15
g2
Ntp24733
Rp24734
(dp24735
g19
g19978
sbsg52
Nsg53
g0
(g54
g2
Ntp24736
Rp24737
(dp24738
g58
(lp24739
g24686
asg14
g0
(g15
g2
Ntp24740
Rp24741
sg204
(lp24742
g24730
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24743
Rp24744
sg204
(lp24745
g24719
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp24746
Rp24747
sg204
(lp24748
g24694
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p24749
sg2314
(g2202
tp24750
sg2322
(lp24751
S'%(nodename)s_subnode0'
p24752
aS'%(nodename)s_subnode1'
p24753
aS'%(nodename)s_subnode2'
p24754
aS'%(nodename)s_subnode3'
p24755
asg2328
I1
sbsg511
(dp24756
sg513
Nsg516
g0
(g517
g2
Ntp24757
Rp24758
(dp24759
g521
I0
sg522
(dp24760
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp24761
Rp24762
(dp24763
g182
(I00
I00
tp24764
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24765
tp24766
Rp24767
aa(lp24768
g19248
ag3969
((lp24769
(lp24770
g19235
aI1
aatp24771
Rp24772
aa(lp24773
g19239
ag3969
((lp24774
(lp24775
g19235
aI1
aatp24776
Rp24777
aa(lp24778
g0
(g7
g2
Ntp24779
Rp24780
(dp24781
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24782
sg11
S'auto_5173'
p24783
sg14
g0
(g15
g2
Ntp24784
Rp24785
(dp24786
g19
(lp24787
sbsg53
g0
(g54
g2
Ntp24788
Rp24789
(dp24790
g58
(lp24791
g18854
ag19239
ag19248
asg1883
g16854
sg204
(lp24792
g24780
asg14
g0
(g15
g2
Ntp24793
Rp24794
(dp24795
g4120
(lp24796
g2330
asg2143
(lp24797
g2628
asbsg2147
(dp24798
sg206
g0
(g497
g2
Ntp24799
Rp24800
(dp24801
g52
Nsg503
g0
(g2225
g2
Ntp24802
Rp24803
(dp24804
g58
(lp24805
g0
(g2193
g2
Ntp24806
Rp24807
(dp24808
g11
S'auto_5159'
p24809
sg13
Nsg14
g0
(g15
g2
Ntp24810
Rp24811
(dp24812
g2511
g19324
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24813
Rp24814
(dp24815
g11
S'auto_5160'
p24816
sg13
Nsg14
g0
(g15
g2
Ntp24817
Rp24818
(dp24819
g2511
g19334
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24820
Rp24821
(dp24822
g11
S'auto_5161'
p24823
sg13
Nsg14
g0
(g15
g2
Ntp24824
Rp24825
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp24826
sg204
(lp24827
g0
(g2193
g2
Ntp24828
Rp24829
(dp24830
g11
S'auto_5163'
p24831
sg13
I0
sg14
g0
(g15
g2
Ntp24832
Rp24833
(dp24834
g19
g19350
sbsg52
Nsg53
g0
(g54
g2
Ntp24835
Rp24836
(dp24837
g58
(lp24838
g0
(g2193
g2
Ntp24839
Rp24840
(dp24841
g11
S'auto_5162'
p24842
sg13
I0
sg14
g0
(g15
g2
Ntp24843
Rp24844
(dp24845
g19
g19362
sbsg52
Nsg53
g0
(g54
g2
Ntp24846
Rp24847
(dp24848
g58
(lp24849
g24807
ag24814
asg14
g0
(g15
g2
Ntp24850
Rp24851
sg204
(lp24852
g24840
asg206
g1224
sbsg177
g2202
sbag24821
asg14
g0
(g15
g2
Ntp24853
Rp24854
sg204
(lp24855
g24829
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp1 + %(i2)s;\n}\n'
p24856
sg2314
(g2202
tp24857
sg2322
(lp24858
S'%(nodename)s_subnode0'
p24859
aS'%(nodename)s_subnode1'
p24860
asg2328
I1
sbsg511
(dp24861
sg513
Nsg516
g0
(g517
g2
Ntp24862
Rp24863
(dp24864
g521
I0
sg522
(dp24865
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp24866
Rp24867
(dp24868
g182
(I00
I00
tp24869
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp24870
tp24871
Rp24872
aa(lp24873
g16959
ag3969
((lp24874
(lp24875
g16955
aI1
aatp24876
Rp24877
aa(lp24878
g0
(g7
g2
Ntp24879
Rp24880
(dp24881
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp24882
sg11
S'auto_5103'
p24883
sg14
g0
(g15
g2
Ntp24884
Rp24885
(dp24886
g19
(lp24887
sbsg53
g0
(g54
g2
Ntp24888
Rp24889
(dp24890
g58
(lp24891
g16950
ag16959
ag16926
ag16983
ag19263
ag19109
ag20921
ag19848
ag20941
ag16998
asg1883
g16854
sg204
(lp24892
g24880
asg14
g0
(g15
g2
Ntp24893
Rp24894
(dp24895
g4120
(lp24896
g2330
asg2143
(lp24897
g2628
asbsg2147
(dp24898
sg206
g0
(g497
g2
Ntp24899
Rp24900
(dp24901
g52
Nsg503
g0
(g2225
g2
Ntp24902
Rp24903
(dp24904
g58
(lp24905
g0
(g2193
g2
Ntp24906
Rp24907
(dp24908
g11
S'auto_5057'
p24909
sg13
Nsg14
g0
(g15
g2
Ntp24910
Rp24911
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24912
Rp24913
(dp24914
g11
S'auto_5058'
p24915
sg13
Nsg14
g0
(g15
g2
Ntp24916
Rp24917
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24918
Rp24919
(dp24920
g11
S'auto_5059'
p24921
sg13
Nsg14
g0
(g15
g2
Ntp24922
Rp24923
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24924
Rp24925
(dp24926
g11
S'auto_5060'
p24927
sg13
Nsg14
g0
(g15
g2
Ntp24928
Rp24929
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24930
Rp24931
(dp24932
g11
S'auto_5061'
p24933
sg13
Nsg14
g0
(g15
g2
Ntp24934
Rp24935
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24936
Rp24937
(dp24938
g11
S'auto_5062'
p24939
sg13
Nsg14
g0
(g15
g2
Ntp24940
Rp24941
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24942
Rp24943
(dp24944
g11
S'auto_5063'
p24945
sg13
Nsg14
g0
(g15
g2
Ntp24946
Rp24947
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24948
Rp24949
(dp24950
g11
S'auto_5064'
p24951
sg13
Nsg14
g0
(g15
g2
Ntp24952
Rp24953
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24954
Rp24955
(dp24956
g11
S'auto_5065'
p24957
sg13
Nsg14
g0
(g15
g2
Ntp24958
Rp24959
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp24960
Rp24961
(dp24962
g11
S'auto_5066'
p24963
sg13
Nsg14
g0
(g15
g2
Ntp24964
Rp24965
sg52
Nsg53
Nsg177
g2202
sbasg2248
I10
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
g2202
tp24966
sg204
(lp24967
g0
(g2193
g2
Ntp24968
Rp24969
(dp24970
g11
S'auto_5074'
p24971
sg13
I0
sg14
g0
(g15
g2
Ntp24972
Rp24973
(dp24974
g19
g21126
sbsg52
Nsg53
g0
(g54
g2
Ntp24975
Rp24976
(dp24977
g58
(lp24978
g0
(g2193
g2
Ntp24979
Rp24980
(dp24981
g11
S'auto_5073'
p24982
sg13
I0
sg14
g0
(g15
g2
Ntp24983
Rp24984
(dp24985
g19
g21138
sbsg52
Nsg53
g0
(g54
g2
Ntp24986
Rp24987
(dp24988
g58
(lp24989
g24907
ag0
(g2193
g2
Ntp24990
Rp24991
(dp24992
g11
S'auto_5072'
p24993
sg13
I0
sg14
g0
(g15
g2
Ntp24994
Rp24995
(dp24996
g19
g21150
sbsg52
Nsg53
g0
(g54
g2
Ntp24997
Rp24998
(dp24999
g58
(lp25000
g0
(g2193
g2
Ntp25001
Rp25002
(dp25003
g11
S'auto_5069'
p25004
sg13
I0
sg14
g0
(g15
g2
Ntp25005
Rp25006
(dp25007
g19
g21162
sbsg52
Nsg53
g0
(g54
g2
Ntp25008
Rp25009
(dp25010
g58
(lp25011
g24913
ag24919
ag24925
ag24931
asg14
g0
(g15
g2
Ntp25012
Rp25013
sg204
(lp25014
g25002
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp25015
Rp25016
(dp25017
g11
S'auto_5071'
p25018
sg13
I0
sg14
g0
(g15
g2
Ntp25019
Rp25020
(dp25021
g19
g21177
sbsg52
Nsg53
g0
(g54
g2
Ntp25022
Rp25023
(dp25024
g58
(lp25025
g24937
ag0
(g2193
g2
Ntp25026
Rp25027
(dp25028
g11
S'auto_5070'
p25029
sg13
I0
sg14
g0
(g15
g2
Ntp25030
Rp25031
(dp25032
g19
g21189
sbsg52
Nsg53
g0
(g54
g2
Ntp25033
Rp25034
(dp25035
g58
(lp25036
g24943
ag0
(g2193
g2
Ntp25037
Rp25038
(dp25039
g11
S'auto_5068'
p25040
sg13
I0
sg14
g0
(g15
g2
Ntp25041
Rp25042
(dp25043
g19
g21201
sbsg52
Nsg53
g0
(g54
g2
Ntp25044
Rp25045
(dp25046
g58
(lp25047
g24949
asg14
g0
(g15
g2
Ntp25048
Rp25049
sg204
(lp25050
g25038
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25051
Rp25052
sg204
(lp25053
g25027
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25054
Rp25055
sg204
(lp25056
g25016
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25057
Rp25058
sg204
(lp25059
g24991
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25060
Rp25061
sg204
(lp25062
g24980
asg206
g1157
sbsg177
g2202
sbag24955
ag24961
asg14
g0
(g15
g2
Ntp25063
Rp25064
sg204
(lp25065
g24969
asg206
g11700
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i7)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i6)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i5)s * V%(id)s_tmp2;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s * %(i2)s * %(i3)s * %(i4)s;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = V%(id)s_tmp4 / V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s + V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 < %(i8)s ? %(i8)s : V%(id)s_tmp6 > %(i9)s ? %(i9)s : V%(id)s_tmp6;\n}\n'
p25066
sg2314
(g2202
tp25067
sg2322
(lp25068
S'%(nodename)s_subnode0'
p25069
aS'%(nodename)s_subnode1'
p25070
aS'%(nodename)s_subnode2'
p25071
aS'%(nodename)s_subnode3'
p25072
aS'%(nodename)s_subnode4'
p25073
aS'%(nodename)s_subnode5'
p25074
aS'%(nodename)s_subnode6'
p25075
asg2328
I1
sbsg511
(dp25076
sg513
Nsg516
g0
(g517
g2
Ntp25077
Rp25078
(dp25079
g521
I0
sg522
(dp25080
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25081
Rp25082
(dp25083
g182
(I00
I00
tp25084
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25085
tp25086
Rp25087
aa(lp25088
g17263
ag3969
((lp25089
(lp25090
g17267
aI1
aa(lp25091
g17844
aI1
aatp25092
Rp25093
aa(lp25094
g17271
ag3969
((lp25095
(lp25096
g17267
aI1
aatp25097
Rp25098
aa(lp25099
g0
(g7
g2
Ntp25100
Rp25101
(dp25102
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25103
sg11
S'auto_4871'
p25104
sg14
g0
(g15
g2
Ntp25105
Rp25106
(dp25107
g19
(lp25108
sbsg53
g0
(g54
g2
Ntp25109
Rp25110
(dp25111
g58
(lp25112
g16893
ag17271
ag17280
ag17263
asg1883
g16854
sg204
(lp25113
g25101
asg14
g0
(g15
g2
Ntp25114
Rp25115
(dp25116
g4120
(lp25117
g2330
asg2143
(lp25118
g2628
asbsg2147
(dp25119
sg206
g0
(g497
g2
Ntp25120
Rp25121
(dp25122
g52
Nsg503
g0
(g2225
g2
Ntp25123
Rp25124
(dp25125
g58
(lp25126
g0
(g2193
g2
Ntp25127
Rp25128
(dp25129
g11
S'auto_4849'
p25130
sg13
Nsg14
g0
(g15
g2
Ntp25131
Rp25132
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25133
Rp25134
(dp25135
g11
S'auto_4850'
p25136
sg13
Nsg14
g0
(g15
g2
Ntp25137
Rp25138
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25139
Rp25140
(dp25141
g11
S'auto_4851'
p25142
sg13
Nsg14
g0
(g15
g2
Ntp25143
Rp25144
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25145
Rp25146
(dp25147
g11
S'auto_4852'
p25148
sg13
Nsg14
g0
(g15
g2
Ntp25149
Rp25150
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp25151
sg204
(lp25152
g0
(g2193
g2
Ntp25153
Rp25154
(dp25155
g11
S'auto_4857'
p25156
sg13
I0
sg14
g0
(g15
g2
Ntp25157
Rp25158
(dp25159
g19
g18740
sbsg52
Nsg53
g0
(g54
g2
Ntp25160
Rp25161
(dp25162
g58
(lp25163
g0
(g2193
g2
Ntp25164
Rp25165
(dp25166
g11
S'auto_4855'
p25167
sg13
I0
sg14
g0
(g15
g2
Ntp25168
Rp25169
(dp25170
g19
g18752
sbsg52
Nsg53
g0
(g54
g2
Ntp25171
Rp25172
(dp25173
g58
(lp25174
g25128
ag25134
asg14
g0
(g15
g2
Ntp25175
Rp25176
sg204
(lp25177
g25165
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp25178
Rp25179
(dp25180
g11
S'auto_4856'
p25181
sg13
I0
sg14
g0
(g15
g2
Ntp25182
Rp25183
(dp25184
g19
g18767
sbsg52
Nsg53
g0
(g54
g2
Ntp25185
Rp25186
(dp25187
g58
(lp25188
g25140
ag0
(g2193
g2
Ntp25189
Rp25190
(dp25191
g11
S'auto_4854'
p25192
sg13
I0
sg14
g0
(g15
g2
Ntp25193
Rp25194
(dp25195
g19
g18779
sbsg52
Nsg53
g0
(g54
g2
Ntp25196
Rp25197
(dp25198
g58
(lp25199
g25146
asg14
g0
(g15
g2
Ntp25200
Rp25201
sg204
(lp25202
g25190
asg206
g3543
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25203
Rp25204
sg204
(lp25205
g25179
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25206
Rp25207
sg204
(lp25208
g25154
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i3)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i2)s * V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp3 + V%(id)s_tmp2;\n}\n'
p25209
sg2314
(g2202
tp25210
sg2322
(lp25211
S'%(nodename)s_subnode0'
p25212
aS'%(nodename)s_subnode1'
p25213
aS'%(nodename)s_subnode2'
p25214
aS'%(nodename)s_subnode3'
p25215
asg2328
I1
sbsg511
(dp25216
sg513
Nsg516
g0
(g517
g2
Ntp25217
Rp25218
(dp25219
g521
I0
sg522
(dp25220
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25221
Rp25222
(dp25223
g182
(I00
tp25224
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25225
tp25226
Rp25227
aa(lp25228
g17848
ag3969
((lp25229
(lp25230
g17844
aI1
aatp25231
Rp25232
aa(lp25233
g0
(g7
g2
Ntp25234
Rp25235
(dp25236
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25237
sg11
S'auto_4811'
p25238
sg14
g0
(g15
g2
Ntp25239
Rp25240
(dp25241
g19
(lp25242
sbsg53
g0
(g54
g2
Ntp25243
Rp25244
(dp25245
g58
(lp25246
g17838
ag17848
ag17857
ag17263
asg1883
g16854
sg204
(lp25247
g25235
asg14
g0
(g15
g2
Ntp25248
Rp25249
(dp25250
g4120
(lp25251
g2330
asg2143
(lp25252
g2628
asbsg2147
(dp25253
sg206
g0
(g497
g2
Ntp25254
Rp25255
(dp25256
g52
Nsg503
g0
(g2225
g2
Ntp25257
Rp25258
(dp25259
g58
(lp25260
g0
(g2193
g2
Ntp25261
Rp25262
(dp25263
g11
S'auto_4792'
p25264
sg13
Nsg14
g0
(g15
g2
Ntp25265
Rp25266
(dp25267
g2511
g17945
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25268
Rp25269
(dp25270
g11
S'auto_4793'
p25271
sg13
Nsg14
g0
(g15
g2
Ntp25272
Rp25273
(dp25274
g2511
g17955
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25275
Rp25276
(dp25277
g11
S'auto_4794'
p25278
sg13
Nsg14
g0
(g15
g2
Ntp25279
Rp25280
(dp25281
g2511
g17965
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25282
Rp25283
(dp25284
g11
S'auto_4795'
p25285
sg13
Nsg14
g0
(g15
g2
Ntp25286
Rp25287
sg52
Nsg53
Nsg177
g2202
sbasg2248
I4
sg52
Nsg2249
(g2202
g2202
g2202
g2202
tp25288
sg204
(lp25289
g0
(g2193
g2
Ntp25290
Rp25291
(dp25292
g11
S'auto_4798'
p25293
sg13
I0
sg14
g0
(g15
g2
Ntp25294
Rp25295
(dp25296
g19
g17981
sbsg52
Nsg53
g0
(g54
g2
Ntp25297
Rp25298
(dp25299
g58
(lp25300
g0
(g2193
g2
Ntp25301
Rp25302
(dp25303
g11
S'auto_4797'
p25304
sg13
I0
sg14
g0
(g15
g2
Ntp25305
Rp25306
(dp25307
g19
g17993
sbsg52
Nsg53
g0
(g54
g2
Ntp25308
Rp25309
(dp25310
g58
(lp25311
g25262
ag25269
asg14
g0
(g15
g2
Ntp25312
Rp25313
sg204
(lp25314
g25302
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp25315
Rp25316
(dp25317
g11
S'auto_4796'
p25318
sg13
I0
sg14
g0
(g15
g2
Ntp25319
Rp25320
(dp25321
g19
g18008
sbsg52
Nsg53
g0
(g54
g2
Ntp25322
Rp25323
(dp25324
g58
(lp25325
g25276
ag25283
asg14
g0
(g15
g2
Ntp25326
Rp25327
sg204
(lp25328
g25316
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25329
Rp25330
sg204
(lp25331
g25291
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = %(i2)s * %(i3)s;\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s * %(i1)s;\n%(o0)s = V%(id)s_tmp2 + V%(id)s_tmp1;\n}\n'
p25332
sg2314
(g2202
tp25333
sg2322
(lp25334
S'%(nodename)s_subnode0'
p25335
aS'%(nodename)s_subnode1'
p25336
aS'%(nodename)s_subnode2'
p25337
asg2328
I1
sbsg511
(dp25338
sg513
Nsg516
g0
(g517
g2
Ntp25339
Rp25340
(dp25341
g521
I0
sg522
(dp25342
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25343
Rp25344
(dp25345
g182
(I00
tp25346
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25347
tp25348
Rp25349
aa(lp25350
g0
(g7
g2
Ntp25351
Rp25352
(dp25353
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25354
sg11
S'auto_4769'
p25355
sg14
g0
(g15
g2
Ntp25356
Rp25357
(dp25358
g19
(lp25359
sbsg53
g0
(g54
g2
Ntp25360
Rp25361
(dp25362
g58
(lp25363
g17310
ag17339
ag17878
ag18218
ag17301
asg1883
g16854
sg204
(lp25364
g25352
asg14
g0
(g15
g2
Ntp25365
Rp25366
(dp25367
g4120
(lp25368
g2330
asg2143
(lp25369
g2628
asbsg2147
(dp25370
sg206
g0
(g497
g2
Ntp25371
Rp25372
(dp25373
g52
Nsg503
g0
(g2225
g2
Ntp25374
Rp25375
(dp25376
g58
(lp25377
g0
(g2193
g2
Ntp25378
Rp25379
(dp25380
g11
S'auto_4742'
p25381
sg13
Nsg14
g0
(g15
g2
Ntp25382
Rp25383
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25384
Rp25385
(dp25386
g11
S'auto_4743'
p25387
sg13
Nsg14
g0
(g15
g2
Ntp25388
Rp25389
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25390
Rp25391
(dp25392
g11
S'auto_4744'
p25393
sg13
Nsg14
g0
(g15
g2
Ntp25394
Rp25395
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25396
Rp25397
(dp25398
g11
S'auto_4745'
p25399
sg13
Nsg14
g0
(g15
g2
Ntp25400
Rp25401
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25402
Rp25403
(dp25404
g11
S'auto_4746'
p25405
sg13
Nsg14
g0
(g15
g2
Ntp25406
Rp25407
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp25408
sg204
(lp25409
g0
(g2193
g2
Ntp25410
Rp25411
(dp25412
g11
S'auto_4752'
p25413
sg13
I0
sg14
g0
(g15
g2
Ntp25414
Rp25415
(dp25416
g19
g18562
sbsg52
Nsg53
g0
(g54
g2
Ntp25417
Rp25418
(dp25419
g58
(lp25420
g25379
ag0
(g2193
g2
Ntp25421
Rp25422
(dp25423
g11
S'auto_4751'
p25424
sg13
I0
sg14
g0
(g15
g2
Ntp25425
Rp25426
(dp25427
g19
g18574
sbsg52
Nsg53
g0
(g54
g2
Ntp25428
Rp25429
(dp25430
g58
(lp25431
g0
(g2193
g2
Ntp25432
Rp25433
(dp25434
g11
S'auto_4749'
p25435
sg13
I0
sg14
g0
(g15
g2
Ntp25436
Rp25437
(dp25438
g19
g18586
sbsg52
Nsg53
g0
(g54
g2
Ntp25439
Rp25440
(dp25441
g58
(lp25442
g25385
ag25391
asg14
g0
(g15
g2
Ntp25443
Rp25444
sg204
(lp25445
g25433
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp25446
Rp25447
(dp25448
g11
S'auto_4750'
p25449
sg13
I0
sg14
g0
(g15
g2
Ntp25450
Rp25451
(dp25452
g19
g18601
sbsg52
Nsg53
g0
(g54
g2
Ntp25453
Rp25454
(dp25455
g58
(lp25456
g25397
ag0
(g2193
g2
Ntp25457
Rp25458
(dp25459
g11
S'auto_4748'
p25460
sg13
I0
sg14
g0
(g15
g2
Ntp25461
Rp25462
(dp25463
g19
g18613
sbsg52
Nsg53
g0
(g54
g2
Ntp25464
Rp25465
(dp25466
g58
(lp25467
g25403
asg14
g0
(g15
g2
Ntp25468
Rp25469
sg204
(lp25470
g25458
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25471
Rp25472
sg204
(lp25473
g25447
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25474
Rp25475
sg204
(lp25476
g25422
asg206
g3179
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25477
Rp25478
sg204
(lp25479
g25411
asg206
g3526
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = sqrt((npy_float32)%(i4)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i3)s + V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = %(i1)s * %(i2)s;\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = V%(id)s_tmp3 / V%(id)s_tmp2;\n%(o0)s = %(i0)s - V%(id)s_tmp4;\n}\n'
p25480
sg2314
(g2202
tp25481
sg2322
(lp25482
S'%(nodename)s_subnode0'
p25483
aS'%(nodename)s_subnode1'
p25484
aS'%(nodename)s_subnode2'
p25485
aS'%(nodename)s_subnode3'
p25486
aS'%(nodename)s_subnode4'
p25487
asg2328
I1
sbsg511
(dp25488
sg513
Nsg516
g0
(g517
g2
Ntp25489
Rp25490
(dp25491
g521
I0
sg522
(dp25492
sbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25493
Rp25494
(dp25495
g182
(I00
tp25496
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25497
tp25498
Rp25499
aa(lp25500
g0
(g7
g2
Ntp25501
Rp25502
(dp25503
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25504
sg11
S'auto_6668'
p25505
sg14
g0
(g15
g2
Ntp25506
Rp25507
(dp25508
g19
(lp25509
sbsg53
g0
(g54
g2
Ntp25510
Rp25511
(dp25512
g58
(lp25513
g16950
ag16942
ag17200
ag20941
ag16998
asg1883
g16854
sg204
(lp25514
g25502
asg14
g0
(g15
g2
Ntp25515
Rp25516
(dp25517
g4120
(lp25518
S"('Revert', 'inplace_elemwise_optimizer')"
p25519
asg2143
(lp25520
g2330
asbsg2147
(dp25521
sg206
g0
(g497
g2
Ntp25522
Rp25523
(dp25524
g52
Nsg503
g0
(g2225
g2
Ntp25525
Rp25526
(dp25527
g58
(lp25528
g0
(g2193
g2
Ntp25529
Rp25530
(dp25531
g11
S'auto_6642'
p25532
sg13
Nsg14
g0
(g15
g2
Ntp25533
Rp25534
(dp25535
g2511
g21314
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25536
Rp25537
(dp25538
g11
S'auto_6643'
p25539
sg13
Nsg14
g0
(g15
g2
Ntp25540
Rp25541
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25542
Rp25543
(dp25544
g11
S'auto_6644'
p25545
sg13
Nsg14
g0
(g15
g2
Ntp25546
Rp25547
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25548
Rp25549
(dp25550
g11
S'auto_6645'
p25551
sg13
Nsg14
g0
(g15
g2
Ntp25552
Rp25553
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25554
Rp25555
(dp25556
g11
S'auto_6646'
p25557
sg13
Nsg14
g0
(g15
g2
Ntp25558
Rp25559
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp25560
sg204
(lp25561
g0
(g2193
g2
Ntp25562
Rp25563
(dp25564
g11
S'auto_6651'
p25565
sg13
I0
sg14
g0
(g15
g2
Ntp25566
Rp25567
(dp25568
g19
g21349
sbsg52
Nsg53
g0
(g54
g2
Ntp25569
Rp25570
(dp25571
g58
(lp25572
g0
(g2193
g2
Ntp25573
Rp25574
(dp25575
g11
S'auto_6650'
p25576
sg13
I0
sg14
g0
(g15
g2
Ntp25577
Rp25578
(dp25579
g19
g21361
sbsg52
Nsg53
g0
(g54
g2
Ntp25580
Rp25581
(dp25582
g58
(lp25583
g0
(g2193
g2
Ntp25584
Rp25585
(dp25586
g11
S'auto_6649'
p25587
sg13
I0
sg14
g0
(g15
g2
Ntp25588
Rp25589
(dp25590
g19
g21373
sbsg52
Nsg53
g0
(g54
g2
Ntp25591
Rp25592
(dp25593
g58
(lp25594
g25530
asg14
g0
(g15
g2
Ntp25595
Rp25596
sg204
(lp25597
g25585
asg206
g506
sbsg177
g2202
sbag25537
asg14
g0
(g15
g2
Ntp25598
Rp25599
sg204
(lp25600
g25574
asg206
g625
sbsg177
g2584
sbag25543
ag0
(g2193
g2
Ntp25601
Rp25602
(dp25603
g11
S'auto_6648'
p25604
sg13
I0
sg14
g0
(g15
g2
Ntp25605
Rp25606
(dp25607
g19
g21391
sbsg52
Nsg53
g0
(g54
g2
Ntp25608
Rp25609
(dp25610
g58
(lp25611
g0
(g2193
g2
Ntp25612
Rp25613
(dp25614
g11
S'auto_6647'
p25615
sg13
I0
sg14
g0
(g15
g2
Ntp25616
Rp25617
(dp25618
g19
g21403
sbsg52
Nsg53
g0
(g54
g2
Ntp25619
Rp25620
(dp25621
g58
(lp25622
g25530
ag25543
asg14
g0
(g15
g2
Ntp25623
Rp25624
sg204
(lp25625
g25613
asg206
g625
sbsg177
g2584
sbag25549
ag25555
asg14
g0
(g15
g2
Ntp25626
Rp25627
sg204
(lp25628
g25602
asg206
g1025
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25629
Rp25630
sg204
(lp25631
g25563
asg206
g1025
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s < %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = V%(id)s_tmp1 ? %(i3)s : %(i4)s;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = fabs(%(i0)s);\nnpy_bool V%(id)s_tmp4;\nV%(id)s_tmp4 = (V%(id)s_tmp3 < %(i1)s);\n%(o0)s = V%(id)s_tmp4 ? %(i2)s : V%(id)s_tmp2;\n}\n'
p25632
sg2314
(g2202
tp25633
sg508
g0
(g2316
g2
Ntp25634
Rp25635
(dp25636
g2320
(I0
tp25637
sbsg2322
(lp25638
S'%(nodename)s_subnode0'
p25639
aS'%(nodename)s_subnode1'
p25640
aS'%(nodename)s_subnode2'
p25641
aS'%(nodename)s_subnode3'
p25642
aS'%(nodename)s_subnode4'
p25643
asg2328
I1
sbsg511
(dp25644
I0
(lp25645
I0
assg513
Nsg516
g0
(g517
g2
Ntp25646
Rp25647
(dp25648
g521
Nsg522
(dp25649
I0
I0
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25650
Rp25651
(dp25652
g182
(I00
I00
tp25653
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25654
tp25655
Rp25656
aa(lp25657
g0
(g7
g2
Ntp25658
Rp25659
(dp25660
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25661
sg11
S'auto_6695'
p25662
sg14
g0
(g15
g2
Ntp25663
Rp25664
(dp25665
g19
(lp25666
sbsg53
g0
(g54
g2
Ntp25667
Rp25668
(dp25669
g58
(lp25670
g16934
ag16942
ag17200
ag20941
ag16998
asg1883
g16854
sg204
(lp25671
g25659
asg14
g0
(g15
g2
Ntp25672
Rp25673
(dp25674
g4120
(lp25675
S"('Revert', 'inplace_elemwise_optimizer')"
p25676
asg2143
(lp25677
g2330
asbsg2147
(dp25678
sg206
g0
(g497
g2
Ntp25679
Rp25680
(dp25681
g52
Nsg503
g0
(g2225
g2
Ntp25682
Rp25683
(dp25684
g58
(lp25685
g0
(g2193
g2
Ntp25686
Rp25687
(dp25688
g11
S'auto_6669'
p25689
sg13
Nsg14
g0
(g15
g2
Ntp25690
Rp25691
(dp25692
g2511
g21513
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25693
Rp25694
(dp25695
g11
S'auto_6670'
p25696
sg13
Nsg14
g0
(g15
g2
Ntp25697
Rp25698
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25699
Rp25700
(dp25701
g11
S'auto_6671'
p25702
sg13
Nsg14
g0
(g15
g2
Ntp25703
Rp25704
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25705
Rp25706
(dp25707
g11
S'auto_6672'
p25708
sg13
Nsg14
g0
(g15
g2
Ntp25709
Rp25710
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25711
Rp25712
(dp25713
g11
S'auto_6673'
p25714
sg13
Nsg14
g0
(g15
g2
Ntp25715
Rp25716
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp25717
sg204
(lp25718
g0
(g2193
g2
Ntp25719
Rp25720
(dp25721
g11
S'auto_6678'
p25722
sg13
I0
sg14
g0
(g15
g2
Ntp25723
Rp25724
(dp25725
g19
g21547
sbsg52
Nsg53
g0
(g54
g2
Ntp25726
Rp25727
(dp25728
g58
(lp25729
g0
(g2193
g2
Ntp25730
Rp25731
(dp25732
g11
S'auto_6677'
p25733
sg13
I0
sg14
g0
(g15
g2
Ntp25734
Rp25735
(dp25736
g19
g21559
sbsg52
Nsg53
g0
(g54
g2
Ntp25737
Rp25738
(dp25739
g58
(lp25740
g0
(g2193
g2
Ntp25741
Rp25742
(dp25743
g11
S'auto_6676'
p25744
sg13
I0
sg14
g0
(g15
g2
Ntp25745
Rp25746
(dp25747
g19
g21571
sbsg52
Nsg53
g0
(g54
g2
Ntp25748
Rp25749
(dp25750
g58
(lp25751
g25687
asg14
g0
(g15
g2
Ntp25752
Rp25753
sg204
(lp25754
g25742
asg206
g506
sbsg177
g2202
sbag25694
asg14
g0
(g15
g2
Ntp25755
Rp25756
sg204
(lp25757
g25731
asg206
g625
sbsg177
g2584
sbag25700
ag0
(g2193
g2
Ntp25758
Rp25759
(dp25760
g11
S'auto_6675'
p25761
sg13
I0
sg14
g0
(g15
g2
Ntp25762
Rp25763
(dp25764
g19
g21589
sbsg52
Nsg53
g0
(g54
g2
Ntp25765
Rp25766
(dp25767
g58
(lp25768
g0
(g2193
g2
Ntp25769
Rp25770
(dp25771
g11
S'auto_6674'
p25772
sg13
I0
sg14
g0
(g15
g2
Ntp25773
Rp25774
(dp25775
g19
g21601
sbsg52
Nsg53
g0
(g54
g2
Ntp25776
Rp25777
(dp25778
g58
(lp25779
g25687
ag25700
asg14
g0
(g15
g2
Ntp25780
Rp25781
sg204
(lp25782
g25770
asg206
g625
sbsg177
g2584
sbag25706
ag25712
asg14
g0
(g15
g2
Ntp25783
Rp25784
sg204
(lp25785
g25759
asg206
g1025
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25786
Rp25787
sg204
(lp25788
g25720
asg206
g1025
sbsg177
g2202
sbasg2312
S'{\nnpy_bool V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i0)s < %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = V%(id)s_tmp1 ? %(i3)s : %(i4)s;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = fabs(%(i0)s);\nnpy_bool V%(id)s_tmp4;\nV%(id)s_tmp4 = (V%(id)s_tmp3 < %(i1)s);\n%(o0)s = V%(id)s_tmp4 ? %(i2)s : V%(id)s_tmp2;\n}\n'
p25789
sg2314
(g2202
tp25790
sg508
g0
(g2316
g2
Ntp25791
Rp25792
(dp25793
g2320
(I0
tp25794
sbsg2322
(lp25795
S'%(nodename)s_subnode0'
p25796
aS'%(nodename)s_subnode1'
p25797
aS'%(nodename)s_subnode2'
p25798
aS'%(nodename)s_subnode3'
p25799
aS'%(nodename)s_subnode4'
p25800
asg2328
I1
sbsg511
(dp25801
I0
(lp25802
I0
assg513
Nsg516
g0
(g517
g2
Ntp25803
Rp25804
(dp25805
g521
Nsg522
(dp25806
I0
I0
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25807
Rp25808
(dp25809
g182
(I00
I00
tp25810
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25811
tp25812
Rp25813
aa(lp25814
g17403
ag3969
((lp25815
(lp25816
g17407
aI1
aa(lp25817
g17541
aI1
aatp25818
Rp25819
aa(lp25820
g0
(g7
g2
Ntp25821
Rp25822
(dp25823
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25824
sg11
S'auto_6713'
p25825
sg14
g0
(g15
g2
Ntp25826
Rp25827
(dp25828
g19
(lp25829
sbsg53
g0
(g54
g2
Ntp25830
Rp25831
(dp25832
g58
(lp25833
g17411
ag17403
asg1883
g16854
sg204
(lp25834
g25822
asg14
g0
(g15
g2
Ntp25835
Rp25836
(dp25837
g4120
(lp25838
S"('Revert', 'inplace_elemwise_optimizer')"
p25839
asg2143
(lp25840
g2330
asbsg2147
(dp25841
sg206
g0
(g497
g2
Ntp25842
Rp25843
(dp25844
g52
Nsg503
g0
(g2225
g2
Ntp25845
Rp25846
(dp25847
g58
(lp25848
g0
(g2193
g2
Ntp25849
Rp25850
(dp25851
g11
S'auto_6700'
p25852
sg13
Nsg14
g0
(g15
g2
Ntp25853
Rp25854
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp25855
Rp25856
(dp25857
g11
S'auto_6701'
p25858
sg13
Nsg14
g0
(g15
g2
Ntp25859
Rp25860
sg52
Nsg53
Nsg177
g2202
sbasg2248
I2
sg52
Nsg2249
(g2202
g2202
tp25861
sg204
(lp25862
g0
(g2193
g2
Ntp25863
Rp25864
(dp25865
g11
S'auto_6704'
p25866
sg13
I0
sg14
g0
(g15
g2
Ntp25867
Rp25868
(dp25869
g19
g17483
sbsg52
Nsg53
g0
(g54
g2
Ntp25870
Rp25871
(dp25872
g58
(lp25873
g25850
ag0
(g2193
g2
Ntp25874
Rp25875
(dp25876
g11
S'auto_6703'
p25877
sg13
I0
sg14
g0
(g15
g2
Ntp25878
Rp25879
(dp25880
g19
g17495
sbsg52
Nsg53
g0
(g54
g2
Ntp25881
Rp25882
(dp25883
g58
(lp25884
g25856
ag0
(g2193
g2
Ntp25885
Rp25886
(dp25887
g11
S'auto_6702'
p25888
sg13
I0
sg14
g0
(g15
g2
Ntp25889
Rp25890
(dp25891
g19
g17507
sbsg52
Nsg53
g0
(g54
g2
Ntp25892
Rp25893
(dp25894
g58
(lp25895
g25856
asg14
g0
(g15
g2
Ntp25896
Rp25897
sg204
(lp25898
g25886
asg206
g506
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25899
Rp25900
sg204
(lp25901
g25875
asg206
g1157
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp25902
Rp25903
sg204
(lp25904
g25864
asg206
g1224
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = fabs(%(i1)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s + V%(id)s_tmp1;\n%(o0)s = %(i0)s * V%(id)s_tmp2;\n}\n'
p25905
sg2314
(g2202
tp25906
sg508
g0
(g2316
g2
Ntp25907
Rp25908
(dp25909
g2320
(I1
tp25910
sbsg2322
(lp25911
S'%(nodename)s_subnode0'
p25912
aS'%(nodename)s_subnode1'
p25913
aS'%(nodename)s_subnode2'
p25914
asg2328
I1
sbsg511
(dp25915
I0
(lp25916
I1
assg513
Nsg516
g0
(g517
g2
Ntp25917
Rp25918
(dp25919
g521
Nsg522
(dp25920
I0
I1
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25921
Rp25922
(dp25923
g182
(I00
I00
tp25924
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25925
tp25926
Rp25927
aa(lp25928
g17030
ag3969
((lp25929
(lp25930
g17002
aI1
aa(lp25931
g17035
aI1
aatp25932
Rp25933
aa(lp25934
g17040
ag3969
((lp25935
(lp25936
g17044
aI1
aatp25937
Rp25938
aa(lp25939
g20402
ag3969
((lp25940
tp25941
Rp25942
aa(lp25943
g0
(g7
g2
Ntp25944
Rp25945
(dp25946
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25947
sg11
S'auto_6760'
p25948
sg14
g0
(g15
g2
Ntp25949
Rp25950
(dp25951
g19
(lp25952
sbsg53
g0
(g54
g2
Ntp25953
Rp25954
(dp25955
g58
(lp25956
g17074
ag17066
asg1883
g16854
sg204
(lp25957
g25945
asg14
g0
(g15
g2
Ntp25958
Rp25959
(dp25960
g4120
(lp25961
S"('Revert', 'inplace_elemwise_optimizer')"
p25962
asg2143
(lp25963
g2330
asbsg2147
(dp25964
sg206
g0
(g497
g2
Ntp25965
Rp25966
(dp25967
g52
Nsg503
g0
(g1222
g2
Ntp25968
Rp25969
(dp25970
g508
g0
(g2316
g2
Ntp25971
Rp25972
(dp25973
g2320
(I0
tp25974
sbsg52
Nsbsg511
(dp25975
I0
(lp25976
I0
assg513
g1230
sg516
g0
(g517
g2
Ntp25977
Rp25978
(dp25979
g521
Nsg522
(dp25980
I0
I0
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp25981
Rp25982
(dp25983
g182
(I01
I01
tp25984
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp25985
tp25986
Rp25987
aa(lp25988
g0
(g7
g2
Ntp25989
Rp25990
(dp25991
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp25992
sg11
S'auto_6764'
p25993
sg14
g0
(g15
g2
Ntp25994
Rp25995
(dp25996
g19
(lp25997
sbsg53
g0
(g54
g2
Ntp25998
Rp25999
(dp26000
g58
(lp26001
g17074
ag17066
asg1883
g16854
sg204
(lp26002
g25990
asg14
g0
(g15
g2
Ntp26003
Rp26004
(dp26005
g4120
(lp26006
S"('Revert', 'inplace_elemwise_optimizer')"
p26007
asg2143
(lp26008
g2330
asbsg2147
(dp26009
sg206
g0
(g497
g2
Ntp26010
Rp26011
(dp26012
g52
Nsg503
g0
(g1222
g2
Ntp26013
Rp26014
(dp26015
g508
g0
(g2316
g2
Ntp26016
Rp26017
(dp26018
g2320
(I1
tp26019
sbsg52
Nsbsg511
(dp26020
I0
(lp26021
I1
assg513
g1230
sg516
g0
(g517
g2
Ntp26022
Rp26023
(dp26024
g521
Nsg522
(dp26025
I0
I1
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26026
Rp26027
(dp26028
g182
(I01
I01
tp26029
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26030
tp26031
Rp26032
aa(lp26033
g0
(g7
g2
Ntp26034
Rp26035
(dp26036
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp26037
sg11
S'auto_6781'
p26038
sg14
g0
(g15
g2
Ntp26039
Rp26040
(dp26041
g19
(lp26042
sbsg53
g0
(g54
g2
Ntp26043
Rp26044
(dp26045
g58
(lp26046
g17545
ag17545
ag17403
asg1883
g16854
sg204
(lp26047
g26035
asg14
g0
(g15
g2
Ntp26048
Rp26049
(dp26050
g4120
(lp26051
S"('Revert', 'inplace_elemwise_optimizer')"
p26052
asg2143
(lp26053
g2330
asbsg2147
(dp26054
sg206
g0
(g497
g2
Ntp26055
Rp26056
(dp26057
g52
Nsg503
g0
(g2225
g2
Ntp26058
Rp26059
(dp26060
g58
(lp26061
g0
(g2193
g2
Ntp26062
Rp26063
(dp26064
g11
S'auto_6765'
p26065
sg13
Nsg14
g0
(g15
g2
Ntp26066
Rp26067
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26068
Rp26069
(dp26070
g11
S'auto_6766'
p26071
sg13
Nsg14
g0
(g15
g2
Ntp26072
Rp26073
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26074
Rp26075
(dp26076
g11
S'auto_6767'
p26077
sg13
Nsg14
g0
(g15
g2
Ntp26078
Rp26079
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
S'Composite{(i0 + (i1 * sgn(i2)))}'
p26080
sg2249
(g2202
g2202
g2202
tp26081
sg204
(lp26082
g0
(g2193
g2
Ntp26083
Rp26084
(dp26085
g11
S'auto_6770'
p26086
sg13
I0
sg14
g0
(g15
g2
Ntp26087
Rp26088
(dp26089
g19
g17691
sbsg52
Nsg53
g0
(g54
g2
Ntp26090
Rp26091
(dp26092
g58
(lp26093
g26063
ag0
(g2193
g2
Ntp26094
Rp26095
(dp26096
g11
S'auto_6769'
p26097
sg13
I0
sg14
g0
(g15
g2
Ntp26098
Rp26099
(dp26100
g19
g17703
sbsg52
Nsg53
g0
(g54
g2
Ntp26101
Rp26102
(dp26103
g58
(lp26104
g26069
ag0
(g2193
g2
Ntp26105
Rp26106
(dp26107
g11
S'auto_6768'
p26108
sg13
I0
sg14
g0
(g15
g2
Ntp26109
Rp26110
(dp26111
g19
g17715
sbsg52
Nsg53
g0
(g54
g2
Ntp26112
Rp26113
(dp26114
g58
(lp26115
g26075
asg14
g0
(g15
g2
Ntp26116
Rp26117
sg204
(lp26118
g26106
asg206
g11021
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26119
Rp26120
sg204
(lp26121
g26095
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26122
Rp26123
sg204
(lp26124
g26084
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i2)s > 0) ? 1. : ((%(i2)s < 0) ? -1. : (isnan(%(i2)s) ? NAN : 0.));\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s * V%(id)s_tmp1;\n%(o0)s = %(i0)s + V%(id)s_tmp2;\n}\n'
p26125
sg2314
(g2202
tp26126
sg508
g0
(g2316
g2
Ntp26127
Rp26128
(dp26129
g2320
(I0
tp26130
sbsg2322
(lp26131
S'%(nodename)s_subnode0'
p26132
aS'%(nodename)s_subnode1'
p26133
aS'%(nodename)s_subnode2'
p26134
asg2328
I1
sbsg511
(dp26135
I0
(lp26136
I0
assg513
Nsg516
g0
(g517
g2
Ntp26137
Rp26138
(dp26139
g521
Nsg522
(dp26140
I0
I0
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26141
Rp26142
(dp26143
g182
(I00
I00
tp26144
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26145
tp26146
Rp26147
aa(lp26148
g0
(g7
g2
Ntp26149
Rp26150
(dp26151
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp26152
sg11
S'auto_6798'
p26153
sg14
g0
(g15
g2
Ntp26154
Rp26155
(dp26156
g19
(lp26157
sbsg53
g0
(g54
g2
Ntp26158
Rp26159
(dp26160
g58
(lp26161
g17545
ag17545
ag17403
asg1883
g16854
sg204
(lp26162
g26150
asg14
g0
(g15
g2
Ntp26163
Rp26164
(dp26165
g4120
(lp26166
S"('Revert', 'inplace_elemwise_optimizer')"
p26167
asg2143
(lp26168
g2330
asbsg2147
(dp26169
sg206
g0
(g497
g2
Ntp26170
Rp26171
(dp26172
g52
Nsg503
g0
(g2225
g2
Ntp26173
Rp26174
(dp26175
g58
(lp26176
g0
(g2193
g2
Ntp26177
Rp26178
(dp26179
g11
S'auto_6782'
p26180
sg13
Nsg14
g0
(g15
g2
Ntp26181
Rp26182
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26183
Rp26184
(dp26185
g11
S'auto_6783'
p26186
sg13
Nsg14
g0
(g15
g2
Ntp26187
Rp26188
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26189
Rp26190
(dp26191
g11
S'auto_6784'
p26192
sg13
Nsg14
g0
(g15
g2
Ntp26193
Rp26194
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
S'Composite{(i0 + (i1 * sgn(i2)))}'
p26195
sg2249
(g2202
g2202
g2202
tp26196
sg204
(lp26197
g0
(g2193
g2
Ntp26198
Rp26199
(dp26200
g11
S'auto_6787'
p26201
sg13
I0
sg14
g0
(g15
g2
Ntp26202
Rp26203
(dp26204
g19
g17691
sbsg52
Nsg53
g0
(g54
g2
Ntp26205
Rp26206
(dp26207
g58
(lp26208
g26178
ag0
(g2193
g2
Ntp26209
Rp26210
(dp26211
g11
S'auto_6786'
p26212
sg13
I0
sg14
g0
(g15
g2
Ntp26213
Rp26214
(dp26215
g19
g17703
sbsg52
Nsg53
g0
(g54
g2
Ntp26216
Rp26217
(dp26218
g58
(lp26219
g26184
ag0
(g2193
g2
Ntp26220
Rp26221
(dp26222
g11
S'auto_6785'
p26223
sg13
I0
sg14
g0
(g15
g2
Ntp26224
Rp26225
(dp26226
g19
g17715
sbsg52
Nsg53
g0
(g54
g2
Ntp26227
Rp26228
(dp26229
g58
(lp26230
g26190
asg14
g0
(g15
g2
Ntp26231
Rp26232
sg204
(lp26233
g26221
asg206
g11021
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26234
Rp26235
sg204
(lp26236
g26210
asg206
g1224
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26237
Rp26238
sg204
(lp26239
g26199
asg206
g1157
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = (%(i2)s > 0) ? 1. : ((%(i2)s < 0) ? -1. : (isnan(%(i2)s) ? NAN : 0.));\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s * V%(id)s_tmp1;\n%(o0)s = %(i0)s + V%(id)s_tmp2;\n}\n'
p26240
sg2314
(g2202
tp26241
sg508
g0
(g2316
g2
Ntp26242
Rp26243
(dp26244
g2320
(I1
tp26245
sbsg2322
(lp26246
S'%(nodename)s_subnode0'
p26247
aS'%(nodename)s_subnode1'
p26248
aS'%(nodename)s_subnode2'
p26249
asg2328
I1
sbsg511
(dp26250
I0
(lp26251
I1
assg513
Nsg516
g0
(g517
g2
Ntp26252
Rp26253
(dp26254
g521
Nsg522
(dp26255
I0
I1
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26256
Rp26257
(dp26258
g182
(I00
I00
tp26259
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26260
tp26261
Rp26262
aa(lp26263
g16875
ag3969
((lp26264
(lp26265
g16871
aI1
aa(lp26266
g16880
aI1
aa(lp26267
g18841
aI1
aatp26268
Rp26269
aa(lp26270
g19654
ag3969
((lp26271
(lp26272
g16930
aI1
aatp26273
Rp26274
aa(lp26275
g18877
ag3969
((lp26276
(lp26277
g18873
aI1
aatp26278
Rp26279
aa(lp26280
g0
(g7
g2
Ntp26281
Rp26282
(dp26283
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp26284
sg11
S'auto_6856'
p26285
sg14
g0
(g15
g2
Ntp26286
Rp26287
(dp26288
g19
(lp26289
sbsg53
g0
(g54
g2
Ntp26290
Rp26291
(dp26292
g58
(lp26293
g16998
ag18854
ag18862
asg1883
g16854
sg204
(lp26294
g26282
asg14
g0
(g15
g2
Ntp26295
Rp26296
(dp26297
g4120
(lp26298
S"('Revert', 'inplace_elemwise_optimizer')"
p26299
asg2143
(lp26300
g2330
asbsg2147
(dp26301
sg206
g0
(g497
g2
Ntp26302
Rp26303
(dp26304
g52
Nsg503
g0
(g2225
g2
Ntp26305
Rp26306
(dp26307
g58
(lp26308
g0
(g2193
g2
Ntp26309
Rp26310
(dp26311
g11
S'auto_6842'
p26312
sg13
Nsg14
g0
(g15
g2
Ntp26313
Rp26314
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26315
Rp26316
(dp26317
g11
S'auto_6843'
p26318
sg13
Nsg14
g0
(g15
g2
Ntp26319
Rp26320
(dp26321
g2511
g19176
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26322
Rp26323
(dp26324
g11
S'auto_6844'
p26325
sg13
Nsg14
g0
(g15
g2
Ntp26326
Rp26327
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp26328
sg204
(lp26329
g0
(g2193
g2
Ntp26330
Rp26331
(dp26332
g11
S'auto_6846'
p26333
sg13
I0
sg14
g0
(g15
g2
Ntp26334
Rp26335
(dp26336
g19
g19192
sbsg52
Nsg53
g0
(g54
g2
Ntp26337
Rp26338
(dp26339
g58
(lp26340
g26310
ag0
(g2193
g2
Ntp26341
Rp26342
(dp26343
g11
S'auto_6845'
p26344
sg13
I0
sg14
g0
(g15
g2
Ntp26345
Rp26346
(dp26347
g19
g19204
sbsg52
Nsg53
g0
(g54
g2
Ntp26348
Rp26349
(dp26350
g58
(lp26351
g26316
ag26323
asg14
g0
(g15
g2
Ntp26352
Rp26353
sg204
(lp26354
g26342
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26355
Rp26356
sg204
(lp26357
g26331
asg206
g3526
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i1)s, %(i2)s);\n%(o0)s = %(i0)s - V%(id)s_tmp1;\n}\n'
p26358
sg2314
(g2202
tp26359
sg508
g0
(g2316
g2
Ntp26360
Rp26361
(dp26362
g2320
(I2
tp26363
sbsg2322
(lp26364
S'%(nodename)s_subnode0'
p26365
aS'%(nodename)s_subnode1'
p26366
asg2328
I1
sbsg511
(dp26367
I0
(lp26368
I2
assg513
Nsg516
g0
(g517
g2
Ntp26369
Rp26370
(dp26371
g521
Nsg522
(dp26372
I0
I2
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26373
Rp26374
(dp26375
g182
(I01
I01
tp26376
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26377
tp26378
Rp26379
aa(lp26380
g19419
ag3969
((lp26381
(lp26382
g16930
aI1
aatp26383
Rp26384
aa(lp26385
g0
(g7
g2
Ntp26386
Rp26387
(dp26388
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp26389
sg11
S'auto_6888'
p26390
sg14
g0
(g15
g2
Ntp26391
Rp26392
(dp26393
g19
(lp26394
sbsg53
g0
(g54
g2
Ntp26395
Rp26396
(dp26397
g58
(lp26398
g16998
ag19602
ag18862
asg1883
g16854
sg204
(lp26399
g26387
asg14
g0
(g15
g2
Ntp26400
Rp26401
(dp26402
g4120
(lp26403
S"('Revert', 'inplace_elemwise_optimizer')"
p26404
asg2143
(lp26405
g2330
asbsg2147
(dp26406
sg206
g0
(g497
g2
Ntp26407
Rp26408
(dp26409
g52
Nsg503
g0
(g2225
g2
Ntp26410
Rp26411
(dp26412
g58
(lp26413
g0
(g2193
g2
Ntp26414
Rp26415
(dp26416
g11
S'auto_6872'
p26417
sg13
Nsg14
g0
(g15
g2
Ntp26418
Rp26419
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26420
Rp26421
(dp26422
g11
S'auto_6873'
p26423
sg13
Nsg14
g0
(g15
g2
Ntp26424
Rp26425
(dp26426
g2511
g20844
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26427
Rp26428
(dp26429
g11
S'auto_6874'
p26430
sg13
Nsg14
g0
(g15
g2
Ntp26431
Rp26432
sg52
Nsg53
Nsg177
g2202
sbasg2248
I3
sg52
Nsg2249
(g2202
g2202
g2202
tp26433
sg204
(lp26434
g0
(g2193
g2
Ntp26435
Rp26436
(dp26437
g11
S'auto_6877'
p26438
sg13
I0
sg14
g0
(g15
g2
Ntp26439
Rp26440
(dp26441
g19
g20860
sbsg52
Nsg53
g0
(g54
g2
Ntp26442
Rp26443
(dp26444
g58
(lp26445
g0
(g2193
g2
Ntp26446
Rp26447
(dp26448
g11
S'auto_6876'
p26449
sg13
I0
sg14
g0
(g15
g2
Ntp26450
Rp26451
(dp26452
g19
g20872
sbsg52
Nsg53
g0
(g54
g2
Ntp26453
Rp26454
(dp26455
g58
(lp26456
g26415
ag0
(g2193
g2
Ntp26457
Rp26458
(dp26459
g11
S'auto_6875'
p26460
sg13
I0
sg14
g0
(g15
g2
Ntp26461
Rp26462
(dp26463
g19
g20884
sbsg52
Nsg53
g0
(g54
g2
Ntp26464
Rp26465
(dp26466
g58
(lp26467
g26421
ag26428
asg14
g0
(g15
g2
Ntp26468
Rp26469
sg204
(lp26470
g26458
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26471
Rp26472
sg204
(lp26473
g26447
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26474
Rp26475
sg204
(lp26476
g26436
asg206
g7884
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i1)s, %(i2)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i0)s - V%(id)s_tmp1;\n%(o0)s = sqrt((npy_float32)V%(id)s_tmp2);\n}\n'
p26477
sg2314
(g2202
tp26478
sg508
g0
(g2316
g2
Ntp26479
Rp26480
(dp26481
g2320
(I2
tp26482
sbsg2322
(lp26483
S'%(nodename)s_subnode0'
p26484
aS'%(nodename)s_subnode1'
p26485
aS'%(nodename)s_subnode2'
p26486
asg2328
I1
sbsg511
(dp26487
I0
(lp26488
I2
assg513
Nsg516
g0
(g517
g2
Ntp26489
Rp26490
(dp26491
g521
Nsg522
(dp26492
I0
I2
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26493
Rp26494
(dp26495
g182
(I01
I01
tp26496
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26497
tp26498
Rp26499
aa(lp26500
g21667
ag3969
((lp26501
tp26502
Rp26503
aa(lp26504
g18238
ag3969
((lp26505
(lp26506
g17343
aI1
aatp26507
Rp26508
aa(lp26509
g17823
ag3969
((lp26510
(lp26511
g17343
aI1
aatp26512
Rp26513
aa(lp26514
g18915
ag3969
((lp26515
(lp26516
g18920
aI1
aatp26517
Rp26518
aa(lp26519
g0
(g7
g2
Ntp26520
Rp26521
(dp26522
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp26523
sg11
S'auto_7011'
p26524
sg14
g0
(g15
g2
Ntp26525
Rp26526
(dp26527
g19
(lp26528
sbsg53
g0
(g54
g2
Ntp26529
Rp26530
(dp26531
g58
(lp26532
g16902
ag22012
ag16893
ag18925
ag17838
asg1883
g16854
sg204
(lp26533
g26521
asg14
g0
(g15
g2
Ntp26534
Rp26535
(dp26536
g4120
(lp26537
S"('Revert', 'inplace_elemwise_optimizer')"
p26538
asg2143
(lp26539
g2330
asbsg2147
(dp26540
sg206
g0
(g497
g2
Ntp26541
Rp26542
(dp26543
g52
Nsg503
g0
(g2225
g2
Ntp26544
Rp26545
(dp26546
g58
(lp26547
g0
(g2193
g2
Ntp26548
Rp26549
(dp26550
g11
S'auto_6981'
p26551
sg13
Nsg14
g0
(g15
g2
Ntp26552
Rp26553
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26554
Rp26555
(dp26556
g11
S'auto_6982'
p26557
sg13
Nsg14
g0
(g15
g2
Ntp26558
Rp26559
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26560
Rp26561
(dp26562
g11
S'auto_6983'
p26563
sg13
Nsg14
g0
(g15
g2
Ntp26564
Rp26565
(dp26566
g2511
g22107
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26567
Rp26568
(dp26569
g11
S'auto_6984'
p26570
sg13
Nsg14
g0
(g15
g2
Ntp26571
Rp26572
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26573
Rp26574
(dp26575
g11
S'auto_6985'
p26576
sg13
Nsg14
g0
(g15
g2
Ntp26577
Rp26578
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp26579
sg204
(lp26580
g0
(g2193
g2
Ntp26581
Rp26582
(dp26583
g11
S'auto_6992'
p26584
sg13
I0
sg14
g0
(g15
g2
Ntp26585
Rp26586
(dp26587
g19
g22129
sbsg52
Nsg53
g0
(g54
g2
Ntp26588
Rp26589
(dp26590
g58
(lp26591
g0
(g2193
g2
Ntp26592
Rp26593
(dp26594
g11
S'auto_6991'
p26595
sg13
I0
sg14
g0
(g15
g2
Ntp26596
Rp26597
(dp26598
g19
g22141
sbsg52
Nsg53
g0
(g54
g2
Ntp26599
Rp26600
(dp26601
g58
(lp26602
g26549
ag0
(g2193
g2
Ntp26603
Rp26604
(dp26605
g11
S'auto_6990'
p26606
sg13
I0
sg14
g0
(g15
g2
Ntp26607
Rp26608
(dp26609
g19
g22153
sbsg52
Nsg53
g0
(g54
g2
Ntp26610
Rp26611
(dp26612
g58
(lp26613
g0
(g2193
g2
Ntp26614
Rp26615
(dp26616
g11
S'auto_6989'
p26617
sg13
I0
sg14
g0
(g15
g2
Ntp26618
Rp26619
(dp26620
g19
g22165
sbsg52
Nsg53
g0
(g54
g2
Ntp26621
Rp26622
(dp26623
g58
(lp26624
g26555
ag0
(g2193
g2
Ntp26625
Rp26626
(dp26627
g11
S'auto_6988'
p26628
sg13
I0
sg14
g0
(g15
g2
Ntp26629
Rp26630
(dp26631
g19
g22177
sbsg52
Nsg53
g0
(g54
g2
Ntp26632
Rp26633
(dp26634
g58
(lp26635
g26561
ag26568
asg14
g0
(g15
g2
Ntp26636
Rp26637
sg204
(lp26638
g26626
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26639
Rp26640
sg204
(lp26641
g26615
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26642
Rp26643
sg204
(lp26644
g26604
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26645
Rp26646
sg204
(lp26647
g26593
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp26648
Rp26649
(dp26650
g11
S'auto_6987'
p26651
sg13
I0
sg14
g0
(g15
g2
Ntp26652
Rp26653
(dp26654
g19
g22201
sbsg52
Nsg53
g0
(g54
g2
Ntp26655
Rp26656
(dp26657
g58
(lp26658
g26555
ag0
(g2193
g2
Ntp26659
Rp26660
(dp26661
g11
S'auto_6986'
p26662
sg13
I0
sg14
g0
(g15
g2
Ntp26663
Rp26664
(dp26665
g19
g22213
sbsg52
Nsg53
g0
(g54
g2
Ntp26666
Rp26667
(dp26668
g58
(lp26669
g26574
ag26568
asg14
g0
(g15
g2
Ntp26670
Rp26671
sg204
(lp26672
g26660
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26673
Rp26674
sg204
(lp26675
g26649
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26676
Rp26677
sg204
(lp26678
g26582
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i4)s, %(i3)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s - V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = pow(%(i2)s, %(i3)s);\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s - V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = sqrt((npy_float32)V%(id)s_tmp4);\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s * V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 / V%(id)s_tmp2;\n}\n'
p26679
sg2314
(g2202
tp26680
sg508
g0
(g2316
g2
Ntp26681
Rp26682
(dp26683
g2320
(I0
tp26684
sbsg2322
(lp26685
S'%(nodename)s_subnode0'
p26686
aS'%(nodename)s_subnode1'
p26687
aS'%(nodename)s_subnode2'
p26688
aS'%(nodename)s_subnode3'
p26689
aS'%(nodename)s_subnode4'
p26690
aS'%(nodename)s_subnode5'
p26691
aS'%(nodename)s_subnode6'
p26692
asg2328
I1
sbsg511
(dp26693
I0
(lp26694
I0
assg513
Nsg516
g0
(g517
g2
Ntp26695
Rp26696
(dp26697
g521
Nsg522
(dp26698
I0
I0
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26699
Rp26700
(dp26701
g182
(I01
tp26702
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26703
tp26704
Rp26705
aa(lp26706
g0
(g7
g2
Ntp26707
Rp26708
(dp26709
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp26710
sg11
S'auto_7042'
p26711
sg14
g0
(g15
g2
Ntp26712
Rp26713
(dp26714
g19
(lp26715
sbsg53
g0
(g54
g2
Ntp26716
Rp26717
(dp26718
g58
(lp26719
g16902
ag22012
ag16893
ag18925
ag17838
asg1883
g16854
sg204
(lp26720
g26708
asg14
g0
(g15
g2
Ntp26721
Rp26722
(dp26723
g4120
(lp26724
S"('Revert', 'inplace_elemwise_optimizer')"
p26725
asg2143
(lp26726
g2330
asbsg2147
(dp26727
sg206
g0
(g497
g2
Ntp26728
Rp26729
(dp26730
g52
Nsg503
g0
(g2225
g2
Ntp26731
Rp26732
(dp26733
g58
(lp26734
g0
(g2193
g2
Ntp26735
Rp26736
(dp26737
g11
S'auto_7012'
p26738
sg13
Nsg14
g0
(g15
g2
Ntp26739
Rp26740
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26741
Rp26742
(dp26743
g11
S'auto_7013'
p26744
sg13
Nsg14
g0
(g15
g2
Ntp26745
Rp26746
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26747
Rp26748
(dp26749
g11
S'auto_7014'
p26750
sg13
Nsg14
g0
(g15
g2
Ntp26751
Rp26752
(dp26753
g2511
g22107
sbsg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26754
Rp26755
(dp26756
g11
S'auto_7015'
p26757
sg13
Nsg14
g0
(g15
g2
Ntp26758
Rp26759
sg52
Nsg53
Nsg177
g2202
sbag0
(g2193
g2
Ntp26760
Rp26761
(dp26762
g11
S'auto_7016'
p26763
sg13
Nsg14
g0
(g15
g2
Ntp26764
Rp26765
sg52
Nsg53
Nsg177
g2202
sbasg2248
I5
sg52
Nsg2249
(g2202
g2202
g2202
g2202
g2202
tp26766
sg204
(lp26767
g0
(g2193
g2
Ntp26768
Rp26769
(dp26770
g11
S'auto_7023'
p26771
sg13
I0
sg14
g0
(g15
g2
Ntp26772
Rp26773
(dp26774
g19
g22129
sbsg52
Nsg53
g0
(g54
g2
Ntp26775
Rp26776
(dp26777
g58
(lp26778
g0
(g2193
g2
Ntp26779
Rp26780
(dp26781
g11
S'auto_7022'
p26782
sg13
I0
sg14
g0
(g15
g2
Ntp26783
Rp26784
(dp26785
g19
g22141
sbsg52
Nsg53
g0
(g54
g2
Ntp26786
Rp26787
(dp26788
g58
(lp26789
g26736
ag0
(g2193
g2
Ntp26790
Rp26791
(dp26792
g11
S'auto_7021'
p26793
sg13
I0
sg14
g0
(g15
g2
Ntp26794
Rp26795
(dp26796
g19
g22153
sbsg52
Nsg53
g0
(g54
g2
Ntp26797
Rp26798
(dp26799
g58
(lp26800
g0
(g2193
g2
Ntp26801
Rp26802
(dp26803
g11
S'auto_7020'
p26804
sg13
I0
sg14
g0
(g15
g2
Ntp26805
Rp26806
(dp26807
g19
g22165
sbsg52
Nsg53
g0
(g54
g2
Ntp26808
Rp26809
(dp26810
g58
(lp26811
g26742
ag0
(g2193
g2
Ntp26812
Rp26813
(dp26814
g11
S'auto_7019'
p26815
sg13
I0
sg14
g0
(g15
g2
Ntp26816
Rp26817
(dp26818
g19
g22177
sbsg52
Nsg53
g0
(g54
g2
Ntp26819
Rp26820
(dp26821
g58
(lp26822
g26748
ag26755
asg14
g0
(g15
g2
Ntp26823
Rp26824
sg204
(lp26825
g26813
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26826
Rp26827
sg204
(lp26828
g26802
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26829
Rp26830
sg204
(lp26831
g26791
asg206
g7884
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26832
Rp26833
sg204
(lp26834
g26780
asg206
g1224
sbsg177
g2202
sbag0
(g2193
g2
Ntp26835
Rp26836
(dp26837
g11
S'auto_7018'
p26838
sg13
I0
sg14
g0
(g15
g2
Ntp26839
Rp26840
(dp26841
g19
g22201
sbsg52
Nsg53
g0
(g54
g2
Ntp26842
Rp26843
(dp26844
g58
(lp26845
g26742
ag0
(g2193
g2
Ntp26846
Rp26847
(dp26848
g11
S'auto_7017'
p26849
sg13
I0
sg14
g0
(g15
g2
Ntp26850
Rp26851
(dp26852
g19
g22213
sbsg52
Nsg53
g0
(g54
g2
Ntp26853
Rp26854
(dp26855
g58
(lp26856
g26761
ag26755
asg14
g0
(g15
g2
Ntp26857
Rp26858
sg204
(lp26859
g26847
asg206
g7854
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26860
Rp26861
sg204
(lp26862
g26836
asg206
g3526
sbsg177
g2202
sbasg14
g0
(g15
g2
Ntp26863
Rp26864
sg204
(lp26865
g26769
asg206
g3179
sbsg177
g2202
sbasg2312
S'{\nnpy_float32 V%(id)s_tmp1;\nV%(id)s_tmp1 = pow(%(i4)s, %(i3)s);\nnpy_float32 V%(id)s_tmp2;\nV%(id)s_tmp2 = %(i1)s - V%(id)s_tmp1;\nnpy_float32 V%(id)s_tmp3;\nV%(id)s_tmp3 = pow(%(i2)s, %(i3)s);\nnpy_float32 V%(id)s_tmp4;\nV%(id)s_tmp4 = %(i1)s - V%(id)s_tmp3;\nnpy_float32 V%(id)s_tmp5;\nV%(id)s_tmp5 = sqrt((npy_float32)V%(id)s_tmp4);\nnpy_float32 V%(id)s_tmp6;\nV%(id)s_tmp6 = %(i0)s * V%(id)s_tmp5;\n%(o0)s = V%(id)s_tmp6 / V%(id)s_tmp2;\n}\n'
p26866
sg2314
(g2202
tp26867
sg508
g0
(g2316
g2
Ntp26868
Rp26869
(dp26870
g2320
(I3
tp26871
sbsg2322
(lp26872
S'%(nodename)s_subnode0'
p26873
aS'%(nodename)s_subnode1'
p26874
aS'%(nodename)s_subnode2'
p26875
aS'%(nodename)s_subnode3'
p26876
aS'%(nodename)s_subnode4'
p26877
aS'%(nodename)s_subnode5'
p26878
aS'%(nodename)s_subnode6'
p26879
asg2328
I1
sbsg511
(dp26880
I0
(lp26881
I3
assg513
Nsg516
g0
(g517
g2
Ntp26882
Rp26883
(dp26884
g521
Nsg522
(dp26885
I0
I3
ssbsg524
I00
sbsbsg177
g0
(g178
g2
Ntp26886
Rp26887
(dp26888
g182
(I01
tp26889
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag3969
((lp26890
tp26891
Rp26892
aa(lp26893
g18254
ag3969
((lp26894
tp26895
Rp26896
aa(lp26897
g19848
ag3969
((lp26898
(lp26899
g16955
aI1
aatp26900
Rp26901
aa(lp26902
g19263
ag3969
((lp26903
(lp26904
g16955
aI1
aatp26905
Rp26906
aa(lp26907
g20964
ag3969
((lp26908
tp26909
Rp26910
aa(lp26911
g17301
ag3969
((lp26912
(lp26913
g17306
aI1
aatp26914
Rp26915
aa(lp26916
g17878
ag3969
((lp26917
(lp26918
g17306
aI1
aatp26919
Rp26920
aa(lp26921
g18460
ag3969
((lp26922
tp26923
Rp26924
aatp26925
Rp26926
sg4617
(dp26927
g16950
g16955
sg17403
g17541
sg19239
g19235
sg17347
g17343
sg17310
g17306
sg17222
g17196
sg17271
g17267
sg18905
g18901
sg18056
g17834
sg17049
g17053
sg17030
g17035
sg19838
g19598
sg16934
g16930
sg19409
g18850
sg17364
g17360
sg22267
g16889
sg17848
g17844
sg19610
g19606
sg19025
g18888
ssg4619
g3969
((lp26928
tp26929
Rp26930
sg4623
g3796
((lp26931
g17556
ag17241
ag17844
ag17134
ag19235
ag17170
ag17374
ag18830
ag16955
ag17306
ag18920
ag17360
ag17044
ag18901
ag17250
ag17061
ag16912
ag17070
ag17053
ag17343
ag17258
ag17002
ag18858
ag16880
ag17834
ag17196
ag17232
ag16898
ag16946
ag18850
ag16889
ag17084
ag17407
ag17148
ag16921
ag17351
ag18873
ag18888
ag17098
ag16938
ag16994
ag16862
ag19606
ag17541
ag16930
ag19598
ag18841
ag17267
ag17035
ag16871
ag17162
ag17314
ag17107
ag17569
atp26932
Rp26933
sg4627
g0
(g3850
g2
Ntp26934
Rp26935
(dp26936
g3854
g0
(g3855
g2
Ntp26937
Rp26938
(lp26939
g0
(g3855
g2
Ntp26940
Rp26941
(lp26942
g0
(g3855
g2
Ntp26943
Rp26944
(lp26945
g0
(g3855
g2
Ntp26946
Rp26947
(lp26948
g0
(g3855
g2
Ntp26949
Rp26950
(lp26951
g0
(g3855
g2
Ntp26952
Rp26953
(lp26954
g0
(g3855
g2
Ntp26955
Rp26956
(lp26957
g0
(g3855
g2
Ntp26958
Rp26959
(lp26960
g0
(g3855
g2
Ntp26961
Rp26962
(lp26963
g0
(g3855
g2
Ntp26964
Rp26965
(lp26966
g0
(g3855
g2
Ntp26967
Rp26968
(lp26969
g0
(g3855
g2
Ntp26970
Rp26971
(lp26972
g0
(g3855
g2
Ntp26973
Rp26974
(lp26975
g0
(g3855
g2
Ntp26976
Rp26977
(lp26978
g0
(g3855
g2
Ntp26979
Rp26980
(lp26981
g0
(g3855
g2
Ntp26982
Rp26983
(lp26984
g0
(g3855
g2
Ntp26985
Rp26986
(lp26987
g0
(g3855
g2
Ntp26988
Rp26989
(lp26990
g0
(g3855
g2
Ntp26991
Rp26992
(lp26993
g0
(g3855
g2
Ntp26994
Rp26995
(lp26996
g26938
ag26992
ag17360
abag26989
ag17196
abag26986
ag17035
abag26983
ag17053
abag26980
ag17541
abag26977
ag19606
abag26974
ag18888
abag26971
ag18850
abag26968
ag16930
abag26965
ag16889
abag26962
ag17834
abag26959
ag18901
abag26956
ag17343
abag26953
ag19598
abag26950
ag19235
abag26947
ag16955
abag26944
ag17267
abag26941
ag17844
abag26938
ag17306
abag26995
absg3859
(dp26997
g17196
g26992
sg17844
g26944
sg17541
g26983
sg16930
g26971
sg17053
g26986
sg19235
g26953
sg16889
g26968
sg17360
g26995
sg18901
g26962
sg17834
g26965
sg16955
g26950
sg17306
g26941
sg19598
g26956
sg18850
g26974
sg17035
g26989
sg18888
g26977
sg17267
g26947
sg17343
g26959
sg19606
g26980
ssbsg4650
g4651
sg4652
I00
sbsg52
S'binary_connect/mlp_model.py:98'
p26998
sg4654
F0.05059647560119629
sg4655
g0
(g4656
g2
Ntp26999
Rp27000
(dp27001
g3793
(dp27002
sg4661
(dp27003
g0
(g7
g2
Ntp27004
Rp27005
(dp27006
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27007
sg11
S'auto_1739'
p27008
sg14
g0
(g15
g2
Ntp27009
Rp27010
(dp27011
g19
g15502
sbsg53
g0
(g54
g2
Ntp27012
Rp27013
(dp27014
g58
(lp27015
g19594
ag0
(g149
g2
Ntp27016
Rp27017
(dp27018
g11
S'auto_4105'
p27019
sg13
Nsg14
g0
(g15
g2
Ntp27020
Rp27021
(dp27022
g19
(lp27023
g11412
asg175
g2038
(g7718
g10789
tp27024
Rp27025
sbsg52
Nsg177
g11448
sg1892
(lp27026
sg193
g194
(g195
(I0
tp27027
g197
tp27028
Rp27029
(I1
(I1
I1
tp27030
g7718
I00
g10789
tp27031
bsbasg1883
g16854
sg204
(lp27032
g27005
asg14
g0
(g15
g2
Ntp27033
Rp27034
(dp27035
g4120
(lp27036
S'local_pow_specialize'
p27037
asg2143
(lp27038
g2146
asbsg2147
(dp27039
sg206
g7850
sbsg177
g15571
sb(g0
(g7
g2
Ntp27040
Rp27041
(dp27042
g11
S'auto_1795'
p27043
sg13
I0
sg14
g0
(g15
g2
Ntp27044
Rp27045
(dp27046
g19
(lp27047
sbsg52
Nsg53
g0
(g54
g2
Ntp27048
Rp27049
(dp27050
g58
(lp27051
g16934
asg14
g0
(g15
g2
Ntp27052
Rp27053
sg204
(lp27054
g27041
asg206
g0
(g2888
g2
Ntp27055
Rp27056
(dp27057
g2892
I1
sbsbsg177
g2894
sbg17175
tp27058
sg0
(g7
g2
Ntp27059
Rp27060
(dp27061
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27062
sg11
S'auto_1660'
p27063
sg14
g0
(g15
g2
Ntp27064
Rp27065
(dp27066
g19
g7471
sbsg53
g0
(g54
g2
Ntp27067
Rp27068
(dp27069
g58
(lp27070
g0
(g7
g2
Ntp27071
Rp27072
(dp27073
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27074
sg11
S'auto_1659'
p27075
sg14
g0
(g15
g2
Ntp27076
Rp27077
(dp27078
g19
g7496
sbsg53
g0
(g54
g2
Ntp27079
Rp27080
(dp27081
g58
(lp27082
g16934
ag0
(g7
g2
Ntp27083
Rp27084
(dp27085
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27086
sg11
S'auto_1658'
p27087
sg14
g0
(g15
g2
Ntp27088
Rp27089
(dp27090
g19
g7523
sbsg53
g0
(g54
g2
Ntp27091
Rp27092
(dp27093
g58
(lp27094
g0
(g7
g2
Ntp27095
Rp27096
(dp27097
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27098
sg11
S'auto_1657'
p27099
sg14
g0
(g15
g2
Ntp27100
Rp27101
(dp27102
g19
g7548
sbsg53
g0
(g54
g2
Ntp27103
Rp27104
(dp27105
g58
(lp27106
g0
(g7
g2
Ntp27107
Rp27108
(dp27109
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27110
sg11
S'auto_1992'
p27111
sg14
g0
(g15
g2
Ntp27112
Rp27113
(dp27114
g19
(lp27115
sbsg53
g0
(g54
g2
Ntp27116
Rp27117
(dp27118
g58
(lp27119
g0
(g7
g2
Ntp27120
Rp27121
(dp27122
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27123
sg11
S'auto_1975'
p27124
sg14
g0
(g15
g2
Ntp27125
Rp27126
(dp27127
g19
(lp27128
g7574
asbsg53
g0
(g54
g2
Ntp27129
Rp27130
(dp27131
g58
(lp27132
g16926
ag0
(g7
g2
Ntp27133
Rp27134
(dp27135
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27136
sg11
S'auto_1971'
p27137
sg14
g0
(g15
g2
Ntp27138
Rp27139
(dp27140
g19
(lp27141
sbsg53
g0
(g54
g2
Ntp27142
Rp27143
(dp27144
g58
(lp27145
g0
(g7
g2
Ntp27146
Rp27147
(dp27148
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27149
sg11
S'auto_1998'
p27150
sg14
g0
(g15
g2
Ntp27151
Rp27152
(dp27153
g23736
g23737
sg19
(lp27154
sbsg53
g0
(g54
g2
Ntp27155
Rp27156
(dp27157
g58
(lp27158
g16998
ag0
(g7
g2
Ntp27159
Rp27160
(dp27161
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27162
sg11
S'auto_1964'
p27163
sg14
g0
(g15
g2
Ntp27164
Rp27165
(dp27166
g19
(lp27167
sbsg53
g0
(g54
g2
Ntp27168
Rp27169
(dp27170
g58
(lp27171
g19602
ag18862
asg1883
g16854
sg204
(lp27172
g27160
asg14
g0
(g15
g2
Ntp27173
Rp27174
(dp27175
g4120
(lp27176
g2628
asg2143
(lp27177
g18942
asbsg2147
(dp27178
sg206
g7850
sbsg177
g0
(g178
g2
Ntp27179
Rp27180
(dp27181
g182
(I01
I01
tp27182
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27183
g27147
asg14
g0
(g15
g2
Ntp27184
Rp27185
(dp27186
g4120
(lp27187
g2628
asg2143
(lp27188
g23749
asbsg2147
(dp27189
sg206
g5417
sbsg177
g0
(g178
g2
Ntp27190
Rp27191
(dp27192
g182
(I01
I01
tp27193
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27194
g27134
asg14
g0
(g15
g2
Ntp27195
Rp27196
(dp27197
g4120
(lp27198
g2628
asg2143
(lp27199
g18942
asbsg2147
(dp27200
sg206
g7880
sbsg177
g0
(g178
g2
Ntp27201
Rp27202
(dp27203
g182
(I01
I01
tp27204
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27205
g27121
asg14
g0
(g15
g2
Ntp27206
Rp27207
(dp27208
g4120
(lp27209
S'local_mul_canonizer'
p27210
asg2143
(lp27211
g18942
asbsg2147
(dp27212
sg206
g1220
sbsg177
g0
(g178
g2
Ntp27213
Rp27214
(dp27215
g182
(I01
I01
tp27216
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp27217
Rp27218
(dp27219
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27220
sg11
S'auto_2005'
p27221
sg14
g0
(g15
g2
Ntp27222
Rp27223
(dp27224
g23736
g23737
sg19
(lp27225
sbsg53
g0
(g54
g2
Ntp27226
Rp27227
(dp27228
g58
(lp27229
g16998
ag0
(g7
g2
Ntp27230
Rp27231
(dp27232
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27233
sg11
S'auto_1984'
p27234
sg14
g0
(g15
g2
Ntp27235
Rp27236
(dp27237
g19
(lp27238
sbsg53
g0
(g54
g2
Ntp27239
Rp27240
(dp27241
g58
(lp27242
g18854
ag18862
asg1883
g16854
sg204
(lp27243
g27231
asg14
g0
(g15
g2
Ntp27244
Rp27245
(dp27246
g4120
(lp27247
g2628
asg2143
(lp27248
g18942
asbsg2147
(dp27249
sg206
g7850
sbsg177
g0
(g178
g2
Ntp27250
Rp27251
(dp27252
g182
(I01
I01
tp27253
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27254
g27218
asg14
g0
(g15
g2
Ntp27255
Rp27256
(dp27257
g4120
(lp27258
g2628
asg2143
(lp27259
g23749
asbsg2147
(dp27260
sg206
g5417
sbsg177
g0
(g178
g2
Ntp27261
Rp27262
(dp27263
g182
(I01
I01
tp27264
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27265
g27108
asg14
g0
(g15
g2
Ntp27266
Rp27267
(dp27268
g4120
(lp27269
g27210
asg2143
(lp27270
g18942
asbsg2147
(dp27271
sg206
g5326
sbsg177
g0
(g178
g2
Ntp27272
Rp27273
(dp27274
g182
(I01
I01
tp27275
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp27276
Rp27277
(dp27278
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27279
sg11
S'auto_1647'
p27280
sg14
g0
(g15
g2
Ntp27281
Rp27282
(dp27283
g19
g8032
sbsg53
g0
(g54
g2
Ntp27284
Rp27285
(dp27286
g58
(lp27287
g0
(g7
g2
Ntp27288
Rp27289
(dp27290
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27291
sg11
S'auto_1646'
p27292
sg14
g0
(g15
g2
Ntp27293
Rp27294
(dp27295
g19
g8057
sbsg53
g0
(g54
g2
Ntp27296
Rp27297
(dp27298
g58
(lp27299
g18854
ag19409
asg1883
g16854
sg204
(lp27300
g27289
asg14
g0
(g15
g2
Ntp27301
Rp27302
(dp27303
g4120
(lp27304
S'GemmOptimizer'
p27305
ag2628
asg2143
(lp27306
g2146
aS"('Revert', 'GemmOptimizer')"
p27307
asbsg2147
(dp27308
sg206
g1220
sbsg177
g8162
sbag18846
asg1883
g16854
sg204
(lp27309
g27277
asg14
g0
(g15
g2
Ntp27310
Rp27311
(dp27312
g4120
(lp27313
g27305
ag2628
asg2143
(lp27314
g2146
aS"('Revert', 'GemmOptimizer')"
p27315
asbsg2147
(dp27316
sg206
g1153
sbsg177
g11076
sbasg1883
g16854
sg204
(lp27317
g27096
asg14
g0
(g15
g2
Ntp27318
Rp27319
(dp27320
g4120
(lp27321
g27210
asg2143
(lp27322
g2146
asbsg2147
(dp27323
sg206
g1220
sbsg177
g11083
sbag0
(g7
g2
Ntp27324
Rp27325
(dp27326
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27327
sg11
S'auto_2025'
p27328
sg14
g0
(g15
g2
Ntp27329
Rp27330
(dp27331
g23736
g23737
sg19
(lp27332
sbsg53
g0
(g54
g2
Ntp27333
Rp27334
(dp27335
g58
(lp27336
g20921
ag0
(g7
g2
Ntp27337
Rp27338
(dp27339
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27340
sg11
S'auto_1639'
p27341
sg14
g0
(g15
g2
Ntp27342
Rp27343
(dp27344
g19
g11118
sbsg53
g0
(g54
g2
Ntp27345
Rp27346
(dp27347
g58
(lp27348
g0
(g7
g2
Ntp27349
Rp27350
(dp27351
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27352
sg11
S'auto_1638'
p27353
sg14
g0
(g15
g2
Ntp27354
Rp27355
(dp27356
g19
g11143
sbsg53
g0
(g54
g2
Ntp27357
Rp27358
(dp27359
g58
(lp27360
g0
(g7
g2
Ntp27361
Rp27362
(dp27363
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27364
sg11
S'auto_1637'
p27365
sg14
g0
(g15
g2
Ntp27366
Rp27367
(dp27368
g19
g11168
sbsg53
g0
(g54
g2
Ntp27369
Rp27370
(dp27371
g58
(lp27372
g19602
ag19610
asg1883
g16854
sg204
(lp27373
g27362
asg14
g0
(g15
g2
Ntp27374
Rp27375
(dp27376
g4120
(lp27377
g2628
asg2143
(lp27378
g2146
asbsg2147
(dp27379
sg206
g1220
sbsg177
g11273
sbag0
(g7
g2
Ntp27380
Rp27381
(dp27382
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27383
sg11
S'auto_1635'
p27384
sg14
g0
(g15
g2
Ntp27385
Rp27386
(dp27387
g19
g11283
sbsg53
g0
(g54
g2
Ntp27388
Rp27389
(dp27390
g58
(lp27391
g19619
ag0
(g7
g2
Ntp27392
Rp27393
(dp27394
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27395
sg11
S'auto_4633'
p27396
sg14
g0
(g15
g2
Ntp27397
Rp27398
(dp27399
g19
(lp27400
sbsg53
g0
(g54
g2
Ntp27401
Rp27402
(dp27403
g58
(lp27404
g19639
asg1883
g16854
sg204
(lp27405
g27393
asg14
g0
(g15
g2
Ntp27406
Rp27407
(dp27408
g4120
(lp27409
g2628
asg2143
(lp27410
g27037
asbsg2147
(dp27411
sg206
g6009
sbsg177
g0
(g178
g2
Ntp27412
Rp27413
(dp27414
g182
(I00
I00
tp27415
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27416
g27381
asg14
g0
(g15
g2
Ntp27417
Rp27418
(dp27419
g4120
(lp27420
g2628
asg2143
(lp27421
g2146
asbsg2147
(dp27422
sg206
g1220
sbsg177
g11462
sbasg1883
g16854
sg204
(lp27423
g27350
asg14
g0
(g15
g2
Ntp27424
Rp27425
(dp27426
g4120
(lp27427
g2628
asg2143
(lp27428
g2146
asbsg2147
(dp27429
sg206
g1153
sbsg177
g11469
sbasg1883
g16854
sg204
(lp27430
g27338
asg14
g0
(g15
g2
Ntp27431
Rp27432
(dp27433
g4120
(lp27434
g2628
asg2143
(lp27435
g2146
asbsg2147
(dp27436
sg206
g7880
sbsg177
g11476
sbasg1883
g16854
sg204
(lp27437
g27325
asg14
g0
(g15
g2
Ntp27438
Rp27439
(dp27440
g4120
(lp27441
g2628
asg2143
(lp27442
g23749
asbsg2147
(dp27443
sg206
g1153
sbsg177
g0
(g178
g2
Ntp27444
Rp27445
(dp27446
g182
(I00
I00
tp27447
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27448
g27084
asg14
g0
(g15
g2
Ntp27449
Rp27450
(dp27451
g4120
(lp27452
g27210
asg2143
(lp27453
g2146
asbsg2147
(dp27454
sg206
g5326
sbsg177
g11567
sbasg1883
g16854
sg204
(lp27455
g27072
asg14
g0
(g15
g2
Ntp27456
Rp27457
(dp27458
g4120
(lp27459
g23749
asg2143
(lp27460
g2146
asbsg2147
(dp27461
sg206
g5417
sbsg177
g11574
sbag16934
asg1883
g16854
sg204
(lp27462
g27060
asg14
g0
(g15
g2
Ntp27463
Rp27464
(dp27465
g4120
(lp27466
g23749
asg2143
(lp27467
g2146
asbsg2147
(dp27468
sg206
g5417
sbsg177
g11581
sb(g0
(g7
g2
Ntp27469
Rp27470
(dp27471
g11
S'auto_1794'
p27472
sg13
I0
sg14
g0
(g15
g2
Ntp27473
Rp27474
(dp27475
g19
(lp27476
sbsg52
Nsg53
g0
(g54
g2
Ntp27477
Rp27478
(dp27479
g58
(lp27480
g16934
asg14
g0
(g15
g2
Ntp27481
Rp27482
sg204
(lp27483
g27470
asg206
g0
(g2888
g2
Ntp27484
Rp27485
(dp27486
g2892
I0
sbsbsg177
g2894
sbg27041
tp27487
sg25101
(g0
(g7
g2
Ntp27488
Rp27489
(dp27490
g11
S'auto_1811'
p27491
sg13
I0
sg14
g0
(g15
g2
Ntp27492
Rp27493
(dp27494
g19
(lp27495
sbsg52
Nsg53
g0
(g54
g2
Ntp27496
Rp27497
(dp27498
g58
(lp27499
g17271
asg14
g0
(g15
g2
Ntp27500
Rp27501
sg204
(lp27502
g27489
asg206
g0
(g2888
g2
Ntp27503
Rp27504
(dp27505
g2892
I0
sbsbsg177
g2894
sbtp27506
sg0
(g7
g2
Ntp27507
Rp27508
(dp27509
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27510
sg11
S'auto_1718'
p27511
sg14
g0
(g15
g2
Ntp27512
Rp27513
(dp27514
g19
g11725
sbsg53
g0
(g54
g2
Ntp27515
Rp27516
(dp27517
g58
(lp27518
g17347
ag0
(g7
g2
Ntp27519
Rp27520
(dp27521
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27522
sg11
S'auto_1717'
p27523
sg14
g0
(g15
g2
Ntp27524
Rp27525
(dp27526
g19
g11750
sbsg53
g0
(g54
g2
Ntp27527
Rp27528
(dp27529
g58
(lp27530
g0
(g7
g2
Ntp27531
Rp27532
(dp27533
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27534
sg11
S'auto_1716'
p27535
sg14
g0
(g15
g2
Ntp27536
Rp27537
(dp27538
g19
g11775
sbsg53
g0
(g54
g2
Ntp27539
Rp27540
(dp27541
g58
(lp27542
g0
(g7
g2
Ntp27543
Rp27544
(dp27545
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27546
sg11
S'auto_1898'
p27547
sg14
g0
(g15
g2
Ntp27548
Rp27549
(dp27550
g19
(lp27551
sbsg53
g0
(g54
g2
Ntp27552
Rp27553
(dp27554
g58
(lp27555
g0
(g7
g2
Ntp27556
Rp27557
(dp27558
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27559
sg11
S'auto_1881'
p27560
sg14
g0
(g15
g2
Ntp27561
Rp27562
(dp27563
g19
(lp27564
g11801
asbsg53
g0
(g54
g2
Ntp27565
Rp27566
(dp27567
g58
(lp27568
g16902
ag0
(g7
g2
Ntp27569
Rp27570
(dp27571
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27572
sg11
S'auto_1877'
p27573
sg14
g0
(g15
g2
Ntp27574
Rp27575
(dp27576
g19
(lp27577
sbsg53
g0
(g54
g2
Ntp27578
Rp27579
(dp27580
g58
(lp27581
g0
(g7
g2
Ntp27582
Rp27583
(dp27584
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27585
sg11
S'auto_1904'
p27586
sg14
g0
(g15
g2
Ntp27587
Rp27588
(dp27589
g23736
g23737
sg19
(lp27590
sbsg53
g0
(g54
g2
Ntp27591
Rp27592
(dp27593
g58
(lp27594
g22012
ag0
(g7
g2
Ntp27595
Rp27596
(dp27597
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27598
sg11
S'auto_1870'
p27599
sg14
g0
(g15
g2
Ntp27600
Rp27601
(dp27602
g19
(lp27603
sbsg53
g0
(g54
g2
Ntp27604
Rp27605
(dp27606
g58
(lp27607
g16893
ag18925
asg1883
g16854
sg204
(lp27608
g27596
asg14
g0
(g15
g2
Ntp27609
Rp27610
(dp27611
g4120
(lp27612
g2628
asg2143
(lp27613
g18942
asbsg2147
(dp27614
sg206
g7850
sbsg177
g0
(g178
g2
Ntp27615
Rp27616
(dp27617
g182
(I01
tp27618
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27619
g27583
asg14
g0
(g15
g2
Ntp27620
Rp27621
(dp27622
g4120
(lp27623
g2628
asg2143
(lp27624
g23749
asbsg2147
(dp27625
sg206
g5417
sbsg177
g0
(g178
g2
Ntp27626
Rp27627
(dp27628
g182
(I01
tp27629
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27630
g27570
asg14
g0
(g15
g2
Ntp27631
Rp27632
(dp27633
g4120
(lp27634
g2628
asg2143
(lp27635
g18942
asbsg2147
(dp27636
sg206
g7880
sbsg177
g0
(g178
g2
Ntp27637
Rp27638
(dp27639
g182
(I01
tp27640
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27641
g27557
asg14
g0
(g15
g2
Ntp27642
Rp27643
(dp27644
g4120
(lp27645
g2628
asg2143
(lp27646
g18942
asbsg2147
(dp27647
sg206
g1220
sbsg177
g0
(g178
g2
Ntp27648
Rp27649
(dp27650
g182
(I01
tp27651
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp27652
Rp27653
(dp27654
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27655
sg11
S'auto_1911'
p27656
sg14
g0
(g15
g2
Ntp27657
Rp27658
(dp27659
g23736
g23737
sg19
(lp27660
sbsg53
g0
(g54
g2
Ntp27661
Rp27662
(dp27663
g58
(lp27664
g22012
ag0
(g7
g2
Ntp27665
Rp27666
(dp27667
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27668
sg11
S'auto_1890'
p27669
sg14
g0
(g15
g2
Ntp27670
Rp27671
(dp27672
g19
(lp27673
sbsg53
g0
(g54
g2
Ntp27674
Rp27675
(dp27676
g58
(lp27677
g17838
ag18925
asg1883
g16854
sg204
(lp27678
g27666
asg14
g0
(g15
g2
Ntp27679
Rp27680
(dp27681
g4120
(lp27682
g2628
asg2143
(lp27683
g18942
asbsg2147
(dp27684
sg206
g7850
sbsg177
g0
(g178
g2
Ntp27685
Rp27686
(dp27687
g182
(I01
tp27688
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27689
g27653
asg14
g0
(g15
g2
Ntp27690
Rp27691
(dp27692
g4120
(lp27693
g2628
asg2143
(lp27694
g23749
asbsg2147
(dp27695
sg206
g5417
sbsg177
g0
(g178
g2
Ntp27696
Rp27697
(dp27698
g182
(I01
tp27699
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27700
g27544
asg14
g0
(g15
g2
Ntp27701
Rp27702
(dp27703
g4120
(lp27704
g2628
asg2143
(lp27705
g18942
asbsg2147
(dp27706
sg206
g5326
sbsg177
g0
(g178
g2
Ntp27707
Rp27708
(dp27709
g182
(I01
tp27710
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp27711
Rp27712
(dp27713
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27714
sg11
S'auto_1706'
p27715
sg14
g0
(g15
g2
Ntp27716
Rp27717
(dp27718
g19
g12129
sbsg53
g0
(g54
g2
Ntp27719
Rp27720
(dp27721
g58
(lp27722
g0
(g7
g2
Ntp27723
Rp27724
(dp27725
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27726
sg11
S'auto_1705'
p27727
sg14
g0
(g15
g2
Ntp27728
Rp27729
(dp27730
g19
g12154
sbsg53
g0
(g54
g2
Ntp27731
Rp27732
(dp27733
g58
(lp27734
g17838
ag18056
asg1883
g16854
sg204
(lp27735
g27724
asg14
g0
(g15
g2
Ntp27736
Rp27737
(dp27738
g4120
(lp27739
g2628
asg2143
(lp27740
g2146
asbsg2147
(dp27741
sg206
g1220
sbsg177
g12259
sbag0
(g7
g2
Ntp27742
Rp27743
(dp27744
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27745
sg11
S'auto_1703'
p27746
sg14
g0
(g15
g2
Ntp27747
Rp27748
(dp27749
g19
g12269
sbsg53
g0
(g54
g2
Ntp27750
Rp27751
(dp27752
g58
(lp27753
g17857
ag16885
asg1883
g16854
sg204
(lp27754
g27743
asg14
g0
(g15
g2
Ntp27755
Rp27756
(dp27757
g4120
(lp27758
g2628
asg2143
(lp27759
g2146
asbsg2147
(dp27760
sg206
g1220
sbsg177
g13444
sbasg1883
g16854
sg204
(lp27761
g27712
asg14
g0
(g15
g2
Ntp27762
Rp27763
(dp27764
g4120
(lp27765
g2628
asg2143
(lp27766
g2146
asbsg2147
(dp27767
sg206
g1153
sbsg177
g13451
sbasg1883
g16854
sg204
(lp27768
g27532
asg14
g0
(g15
g2
Ntp27769
Rp27770
(dp27771
g4120
(lp27772
g2628
asg2143
(lp27773
g2146
asbsg2147
(dp27774
sg206
g1220
sbsg177
g13458
sbag0
(g7
g2
Ntp27775
Rp27776
(dp27777
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27778
sg11
S'auto_1934'
p27779
sg14
g0
(g15
g2
Ntp27780
Rp27781
(dp27782
g23736
g23737
sg19
(lp27783
sbsg53
g0
(g54
g2
Ntp27784
Rp27785
(dp27786
g58
(lp27787
g18218
ag0
(g7
g2
Ntp27788
Rp27789
(dp27790
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27791
sg11
S'auto_1699'
p27792
sg14
g0
(g15
g2
Ntp27793
Rp27794
(dp27795
g19
g13493
sbsg53
g0
(g54
g2
Ntp27796
Rp27797
(dp27798
g58
(lp27799
g0
(g7
g2
Ntp27800
Rp27801
(dp27802
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27803
sg11
S'auto_1698'
p27804
sg14
g0
(g15
g2
Ntp27805
Rp27806
(dp27807
g19
g13518
sbsg53
g0
(g54
g2
Ntp27808
Rp27809
(dp27810
g58
(lp27811
g0
(g7
g2
Ntp27812
Rp27813
(dp27814
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27815
sg11
S'auto_1697'
p27816
sg14
g0
(g15
g2
Ntp27817
Rp27818
(dp27819
g19
g13543
sbsg53
g0
(g54
g2
Ntp27820
Rp27821
(dp27822
g58
(lp27823
g16893
ag22267
asg1883
g16854
sg204
(lp27824
g27813
asg14
g0
(g15
g2
Ntp27825
Rp27826
(dp27827
g4120
(lp27828
g2628
asg2143
(lp27829
g2146
asbsg2147
(dp27830
sg206
g1220
sbsg177
g13648
sbag0
(g7
g2
Ntp27831
Rp27832
(dp27833
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27834
sg11
S'auto_1695'
p27835
sg14
g0
(g15
g2
Ntp27836
Rp27837
(dp27838
g19
g13658
sbsg53
g0
(g54
g2
Ntp27839
Rp27840
(dp27841
g58
(lp27842
g17280
ag0
(g7
g2
Ntp27843
Rp27844
(dp27845
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27846
sg11
S'auto_4626'
p27847
sg14
g0
(g15
g2
Ntp27848
Rp27849
(dp27850
g19
(lp27851
sbsg53
g0
(g54
g2
Ntp27852
Rp27853
(dp27854
g58
(lp27855
g16885
asg1883
g16854
sg204
(lp27856
g27844
asg14
g0
(g15
g2
Ntp27857
Rp27858
(dp27859
g4120
(lp27860
g2628
asg2143
(lp27861
g27037
asbsg2147
(dp27862
sg206
g6009
sbsg177
g0
(g178
g2
Ntp27863
Rp27864
(dp27865
g182
(I00
tp27866
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27867
g27832
asg14
g0
(g15
g2
Ntp27868
Rp27869
(dp27870
g4120
(lp27871
g2628
asg2143
(lp27872
g2146
asbsg2147
(dp27873
sg206
g1220
sbsg177
g13837
sbasg1883
g16854
sg204
(lp27874
g27801
asg14
g0
(g15
g2
Ntp27875
Rp27876
(dp27877
g4120
(lp27878
g2628
asg2143
(lp27879
g2146
asbsg2147
(dp27880
sg206
g1153
sbsg177
g13844
sbasg1883
g16854
sg204
(lp27881
g27789
asg14
g0
(g15
g2
Ntp27882
Rp27883
(dp27884
g4120
(lp27885
g2628
asg2143
(lp27886
g2146
asbsg2147
(dp27887
sg206
g7880
sbsg177
g13851
sbasg1883
g16854
sg204
(lp27888
g27776
asg14
g0
(g15
g2
Ntp27889
Rp27890
(dp27891
g4120
(lp27892
g2628
asg2143
(lp27893
g23749
asbsg2147
(dp27894
sg206
g1153
sbsg177
g0
(g178
g2
Ntp27895
Rp27896
(dp27897
g182
(I00
tp27898
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp27899
g27520
asg14
g0
(g15
g2
Ntp27900
Rp27901
(dp27902
g4120
(lp27903
g2628
asg2143
(lp27904
g2146
asbsg2147
(dp27905
sg206
g5326
sbsg177
g13912
sbasg1883
g16854
sg204
(lp27906
g27508
asg14
g0
(g15
g2
Ntp27907
Rp27908
(dp27909
g4120
(lp27910
g2628
asg2143
(lp27911
g2146
asbsg2147
(dp27912
sg206
g5417
sbsg177
g13919
sb(g0
(g7
g2
Ntp27913
Rp27914
(dp27915
g11
S'auto_1793'
p27916
sg13
I0
sg14
g0
(g15
g2
Ntp27917
Rp27918
(dp27919
g19
(lp27920
sbsg52
Nsg53
g0
(g54
g2
Ntp27921
Rp27922
(dp27923
g58
(lp27924
g17347
asg14
g0
(g15
g2
Ntp27925
Rp27926
sg204
(lp27927
g27914
asg206
g0
(g2888
g2
Ntp27928
Rp27929
(dp27930
g2892
I0
sbsbsg177
g2894
sbtp27931
sg0
(g149
g2
Ntp27932
Rp27933
(dp27934
g11
S'auto_1661'
p27935
sg13
Nsg14
g0
(g15
g2
Ntp27936
Rp27937
(dp27938
g19
g7419
sg175
Nsbsg52
Nsg177
g7434
sg1892
(lp27939
sg193
g7439
sb(tsg0
(g7
g2
Ntp27940
Rp27941
(dp27942
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp27943
sg11
S'auto_1662'
p27944
sg14
g0
(g15
g2
Ntp27945
Rp27946
(dp27947
g19
g7394
sbsg53
g0
(g54
g2
Ntp27948
Rp27949
(dp27950
g58
(lp27951
g27933
asg1883
g16854
sg204
(lp27952
g27941
asg14
g0
(g15
g2
Ntp27953
Rp27954
(dp27955
g4120
(lp27956
g4913
asg2143
(lp27957
g2146
ag2146
asbsg2147
(dp27958
sg206
g7446
sbsg177
g7461
sb(g0
(g149
g2
Ntp27959
Rp27960
(dp27961
g11
S'auto_1789'
p27962
sg13
Nsg14
g0
(g15
g2
Ntp27963
Rp27964
(dp27965
g19
(lp27966
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp27967
Rp27968
(dp27969
g182
(tsg183
S'int64'
p27970
sg185
g2899
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp27971
g197
tp27972
Rp27973
(I1
(tg2899
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p27974
tp27975
bsbg27960
tp27976
sg0
(g149
g2
Ntp27977
Rp27978
(dp27979
g11
S'auto_1847'
p27980
sg13
Nsg14
g0
(g15
g2
Ntp27981
Rp27982
(dp27983
g19
(lp27984
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp27985
Rp27986
(dp27987
g182
(tsg183
S'float32'
p27988
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp27989
sg193
g194
(g195
(I0
tp27990
g197
tp27991
Rp27992
(I1
(tg189
I00
S'w\xcc+2'
p27993
tp27994
bsb(tsg17006
(g27960
g27960
tp27995
sg19263
(g0
(g7
g2
Ntp27996
Rp27997
(dp27998
g11
S'auto_1809'
p27999
sg13
I0
sg14
g0
(g15
g2
Ntp28000
Rp28001
(dp28002
g19
(lp28003
sbsg52
Nsg53
g0
(g54
g2
Ntp28004
Rp28005
(dp28006
g58
(lp28007
g19239
asg14
g0
(g15
g2
Ntp28008
Rp28009
sg204
(lp28010
g27997
asg206
g0
(g2888
g2
Ntp28011
Rp28012
(dp28013
g2892
I0
sbsbsg177
g2894
sbg0
(g7
g2
Ntp28014
Rp28015
(dp28016
g11
S'auto_1810'
p28017
sg13
I0
sg14
g0
(g15
g2
Ntp28018
Rp28019
(dp28020
g19
(lp28021
sbsg52
Nsg53
g0
(g54
g2
Ntp28022
Rp28023
(dp28024
g58
(lp28025
g19239
asg14
g0
(g15
g2
Ntp28026
Rp28027
sg204
(lp28028
g28015
asg206
g0
(g2888
g2
Ntp28029
Rp28030
(dp28031
g2892
I1
sbsbsg177
g2894
sbtp28032
sg0
(g7
g2
Ntp28033
Rp28034
(dp28035
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28036
sg11
S'auto_1663'
p28037
sg14
g0
(g15
g2
Ntp28038
Rp28039
(dp28040
g19
g7369
sbsg53
g0
(g54
g2
Ntp28041
Rp28042
(dp28043
g58
(lp28044
g0
(g149
g2
Ntp28045
Rp28046
(dp28047
g11
S'auto_4156'
p28048
sg13
Nsg14
g0
(g15
g2
Ntp28049
Rp28050
(dp28051
g19
(lp28052
g7395
asg175
g2038
(g189
S'Y\xa6RA'
p28053
tp28054
Rp28055
sbsg52
Nsg177
g7461
sg1892
(lp28056
sg193
g194
(g195
(I0
tp28057
g197
tp28058
Rp28059
(I1
(I1
I1
tp28060
g189
I00
S'Y\xa6RA'
p28061
tp28062
bsbag0
(g7
g2
Ntp28063
Rp28064
(dp28065
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28066
sg11
S'auto_1947'
p28067
sg14
g0
(g15
g2
Ntp28068
Rp28069
(dp28070
g19
(lp28071
sbsg53
g0
(g54
g2
Ntp28072
Rp28073
(dp28074
g58
(lp28075
g20941
ag27084
asg1883
g16854
sg204
(lp28076
g28064
asg14
g0
(g15
g2
Ntp28077
Rp28078
(dp28079
g4120
(lp28080
g27210
asg2143
(lp28081
S'local_neg_to_mul'
p28082
asbsg2147
(dp28083
sg206
g1220
sbsg177
g0
(g178
g2
Ntp28084
Rp28085
(dp28086
g182
(I00
I00
tp28087
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp28088
g28034
asg14
g0
(g15
g2
Ntp28089
Rp28090
(dp28091
g4120
(lp28092
g27210
asg2143
(lp28093
g2146
asbsg2147
(dp28094
sg206
g1220
sbsg177
g11588
sb(g27470
g27041
tp28095
sg0
(g7
g2
Ntp28096
Rp28097
(dp28098
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28099
sg11
S'auto_1742'
p28100
sg14
g0
(g15
g2
Ntp28101
Rp28102
(dp28103
g19
g15399
sbsg53
g0
(g54
g2
Ntp28104
Rp28105
(dp28106
g58
(lp28107
g19619
ag0
(g7
g2
Ntp28108
Rp28109
(dp28110
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28111
sg11
S'auto_4619'
p28112
sg14
g0
(g15
g2
Ntp28113
Rp28114
(dp28115
g19
(lp28116
sbsg53
g0
(g54
g2
Ntp28117
Rp28118
(dp28119
g58
(lp28120
g19594
asg1883
g16854
sg204
(lp28121
g28109
asg14
g0
(g15
g2
Ntp28122
Rp28123
(dp28124
g4120
(lp28125
g2628
asg2143
(lp28126
g27037
asbsg2147
(dp28127
sg206
g6009
sbsg177
g0
(g178
g2
Ntp28128
Rp28129
(dp28130
g182
(I00
I00
tp28131
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp28132
g28097
asg14
g0
(g15
g2
Ntp28133
Rp28134
(dp28135
g4120
(lp28136
g2628
asg2143
(lp28137
g2146
asbsg2147
(dp28138
sg206
g1220
sbsg177
g15578
sb(g27041
g17175
tp28139
sg23729
(tsg26282
(g27960
g27960
tp28140
sg0
(g7
g2
Ntp28141
Rp28142
(dp28143
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28144
sg11
S'auto_1664'
p28145
sg14
g0
(g15
g2
Ntp28146
Rp28147
(dp28148
g19
g7344
sbsg53
g0
(g54
g2
Ntp28149
Rp28150
(dp28151
g58
(lp28152
g16934
ag0
(g7
g2
Ntp28153
Rp28154
(dp28155
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28156
sg11
S'auto_4300'
p28157
sg14
g0
(g15
g2
Ntp28158
Rp28159
(dp28160
g23736
g23737
sg19
(lp28161
sbsg53
g0
(g54
g2
Ntp28162
Rp28163
(dp28164
g58
(lp28165
g0
(g7
g2
Ntp28166
Rp28167
(dp28168
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28169
sg11
S'auto_4292'
p28170
sg14
g0
(g15
g2
Ntp28171
Rp28172
(dp28173
g19
(lp28174
sbsg53
g0
(g54
g2
Ntp28175
Rp28176
(dp28177
g58
(lp28178
g21642
ag16926
ag27134
ag27277
asg1883
g16854
sg204
(lp28179
g28167
asg14
g0
(g15
g2
Ntp28180
Rp28181
(dp28182
g4120
(lp28183
g2628
asg2143
(lp28184
g27210
asbsg2147
(dp28185
sg206
g1220
sbsg177
g0
(g178
g2
Ntp28186
Rp28187
(dp28188
g182
(I00
I00
tp28189
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp28190
Rp28191
(dp28192
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28193
sg11
S'auto_4296'
p28194
sg14
g0
(g15
g2
Ntp28195
Rp28196
(dp28197
g19
(lp28198
sbsg53
g0
(g54
g2
Ntp28199
Rp28200
(dp28201
g58
(lp28202
g27218
ag27325
asg1883
g16854
sg204
(lp28203
g28191
asg14
g0
(g15
g2
Ntp28204
Rp28205
(dp28206
g4120
(lp28207
g2628
asg2143
(lp28208
g27210
asbsg2147
(dp28209
sg206
g1220
sbsg177
g0
(g178
g2
Ntp28210
Rp28211
(dp28212
g182
(I00
I00
tp28213
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp28214
g28154
asg14
g0
(g15
g2
Ntp28215
Rp28216
(dp28217
g4120
(lp28218
g2628
asg2143
(lp28219
g27210
asbsg2147
(dp28220
sg206
g5326
sbsg177
g0
(g178
g2
Ntp28221
Rp28222
(dp28223
g182
(I00
I00
tp28224
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp28225
g28142
asg14
g0
(g15
g2
Ntp28226
Rp28227
(dp28228
g4120
(lp28229
g2628
asg2143
(lp28230
g2146
asbsg2147
(dp28231
sg206
g1153
sbsg177
g11595
sb(g27470
g27041
tp28232
sg0
(g7
g2
Ntp28233
Rp28234
(dp28235
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28236
sg11
S'auto_1665'
p28237
sg14
g0
(g15
g2
Ntp28238
Rp28239
(dp28240
g19
g7317
sbsg53
g0
(g54
g2
Ntp28241
Rp28242
(dp28243
g58
(lp28244
g28142
ag20941
ag16998
asg1883
g16854
sg204
(lp28245
g28234
asg14
g0
(g15
g2
Ntp28246
Rp28247
(dp28248
g4120
(lp28249
g2628
asg2143
(lp28250
g2146
asbsg2147
(dp28251
sg206
g11696
sbsg177
g11712
sb(g27470
g27041
tp28252
sg0
(g7
g2
Ntp28253
Rp28254
(dp28255
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28256
sg11
S'auto_1744'
p28257
sg14
g0
(g15
g2
Ntp28258
Rp28259
(dp28260
g19
g15284
sbsg53
g0
(g54
g2
Ntp28261
Rp28262
(dp28263
g58
(lp28264
g19602
ag19838
asg1883
g16854
sg204
(lp28265
g28254
asg14
g0
(g15
g2
Ntp28266
Rp28267
(dp28268
g4120
(lp28269
g2628
asg2143
(lp28270
g2146
asbsg2147
(dp28271
sg206
g1220
sbsg177
g15389
sb(g0
(g7
g2
Ntp28272
Rp28273
(dp28274
g11
S'auto_1807'
p28275
sg13
I0
sg14
g0
(g15
g2
Ntp28276
Rp28277
(dp28278
g19
(lp28279
sbsg52
Nsg53
g0
(g54
g2
Ntp28280
Rp28281
(dp28282
g58
(lp28283
g19838
asg14
g0
(g15
g2
Ntp28284
Rp28285
sg204
(lp28286
g28273
asg206
g0
(g2888
g2
Ntp28287
Rp28288
(dp28289
g2892
I0
sbsbsg177
g2894
sbg0
(g7
g2
Ntp28290
Rp28291
(dp28292
g11
S'auto_1808'
p28293
sg13
I0
sg14
g0
(g15
g2
Ntp28294
Rp28295
(dp28296
g19
(lp28297
sbsg52
Nsg53
g0
(g54
g2
Ntp28298
Rp28299
(dp28300
g58
(lp28301
g19838
asg14
g0
(g15
g2
Ntp28302
Rp28303
sg204
(lp28304
g28291
asg206
g0
(g2888
g2
Ntp28305
Rp28306
(dp28307
g2892
I1
sbsbsg177
g2894
sbtp28308
sg17364
(g0
(g7
g2
Ntp28309
Rp28310
(dp28311
g11
S'auto_1796'
p28312
sg13
I0
sg14
g0
(g15
g2
Ntp28313
Rp28314
(dp28315
g19
(lp28316
sbsg52
Nsg53
g0
(g54
g2
Ntp28317
Rp28318
(dp28319
g58
(lp28320
g16858
asg14
g0
(g15
g2
Ntp28321
Rp28322
sg204
(lp28323
g28310
asg206
g0
(g2888
g2
Ntp28324
Rp28325
(dp28326
g2892
I0
sbsbsg177
g2894
sbg27041
tp28327
sg0
(g7
g2
Ntp28328
Rp28329
(dp28330
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28331
sg11
S'auto_1650'
p28332
sg14
g0
(g15
g2
Ntp28333
Rp28334
(dp28335
g19
g7912
sbsg53
g0
(g54
g2
Ntp28336
Rp28337
(dp28338
g58
(lp28339
g0
(g149
g2
Ntp28340
Rp28341
(dp28342
g11
S'auto_1631'
p28343
sg13
Nsg14
g0
(g15
g2
Ntp28344
Rp28345
(dp28346
g19
(lp28347
g7699
asg175
Nsbsg52
Nsg177
g7713
sg1892
(lp28348
sg193
g7723
sbag0
(g7
g2
Ntp28349
Rp28350
(dp28351
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28352
sg11
S'auto_1649'
p28353
sg14
g0
(g15
g2
Ntp28354
Rp28355
(dp28356
g19
g7937
sbsg53
g0
(g54
g2
Ntp28357
Rp28358
(dp28359
g58
(lp28360
g0
(g149
g2
Ntp28361
Rp28362
(dp28363
g11
S'auto_1641'
p28364
sg13
Nsg14
g0
(g15
g2
Ntp28365
Rp28366
(dp28367
g19
g7962
sg175
Nsbsg52
Nsg177
g7977
sg1892
(lp28368
sg193
g7982
sbag0
(g7
g2
Ntp28369
Rp28370
(dp28371
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28372
sg11
S'auto_1648'
p28373
sg14
g0
(g15
g2
Ntp28374
Rp28375
(dp28376
g19
g7788
sbsg53
g0
(g54
g2
Ntp28377
Rp28378
(dp28379
g58
(lp28380
g19025
ag28341
asg1883
g16854
sg204
(lp28381
g28370
asg14
g0
(g15
g2
Ntp28382
Rp28383
(dp28384
g4120
(lp28385
S'local_upcast_elemwise_constant_inputs'
p28386
asg2143
(lp28387
g2146
asbsg2147
(dp28388
sg206
g1153
sbsg177
g7844
sbasg1883
g16854
sg204
(lp28389
g28350
asg14
g0
(g15
g2
Ntp28390
Rp28391
(dp28392
g4120
(lp28393
g18942
asg2143
(lp28394
g2146
asbsg2147
(dp28395
sg206
g7850
sbsg177
g7989
sbasg1883
g16854
sg204
(lp28396
g28329
asg14
g0
(g15
g2
Ntp28397
Rp28398
(dp28399
g4120
(lp28400
g18942
asg2143
(lp28401
g2146
asbsg2147
(dp28402
sg206
g5417
sbsg177
g7995
sb(tsg0
(g7
g2
Ntp28403
Rp28404
(dp28405
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28406
sg11
S'auto_1666'
p28407
sg14
g0
(g15
g2
Ntp28408
Rp28409
(dp28410
g19
g13861
sbsg53
g0
(g54
g2
Ntp28411
Rp28412
(dp28413
g58
(lp28414
g0
(g149
g2
Ntp28415
Rp28416
(dp28417
g11
S'auto_1604'
p28418
sg13
Nsg14
g0
(g15
g2
Ntp28419
Rp28420
(dp28421
g19
g11511
sg175
Nsbsg52
Nsg177
g11526
sg1892
(lp28422
sg193
g11531
sbasg1883
g16854
sg204
(lp28423
g28404
asg14
g0
(g15
g2
Ntp28424
Rp28425
(dp28426
g4120
(lp28427
g4913
asg2143
(lp28428
g2146
ag2146
asbsg2147
(dp28429
sg206
g13883
sbsg177
g13898
sb(g27960
tp28430
sg0
(g7
g2
Ntp28431
Rp28432
(dp28433
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28434
sg11
S'auto_1745'
p28435
sg14
g0
(g15
g2
Ntp28436
Rp28437
(dp28438
g19
g15259
sbsg53
g0
(g54
g2
Ntp28439
Rp28440
(dp28441
g58
(lp28442
g28254
ag28097
asg1883
g16854
sg204
(lp28443
g28432
asg14
g0
(g15
g2
Ntp28444
Rp28445
(dp28446
g4120
(lp28447
g2628
asg2143
(lp28448
g2146
asbsg2147
(dp28449
sg206
g1153
sbsg177
g15585
sb(g28273
g28291
tp28450
sg0
(g7
g2
Ntp28451
Rp28452
(dp28453
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28454
sg11
S'auto_1866'
p28455
sg14
g0
(g15
g2
Ntp28456
Rp28457
(dp28458
g19
(lp28459
sbsg53
g0
(g54
g2
Ntp28460
Rp28461
(dp28462
g58
(lp28463
g0
(g7
g2
Ntp28464
Rp28465
(dp28466
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28467
sg11
S'auto_1707'
p28468
sg14
g0
(g15
g2
Ntp28469
Rp28470
(dp28471
g19
g11950
sbsg53
g0
(g54
g2
Ntp28472
Rp28473
(dp28474
g58
(lp28475
g18905
ag28341
asg1883
g16854
sg204
(lp28476
g28465
asg14
g0
(g15
g2
Ntp28477
Rp28478
(dp28479
g4120
(lp28480
g28386
asg2143
(lp28481
g2146
asbsg2147
(dp28482
sg206
g1153
sbsg177
g12006
sbasg1883
g16854
sg204
(lp28483
g28452
asg14
g0
(g15
g2
Ntp28484
Rp28485
(dp28486
g4120
(lp28487
S'MergeOptimizer'
p28488
asg2143
(lp28489
g18942
asbsg2147
(dp28490
sg206
g0
(g207
g2
Ntp28491
Rp28492
(dp28493
g211
(lp28494
sg213
(lp28495
sg215
(lp28496
I0
asg217
g218
sg219
(tsg220
(lp28497
g222
asg223
I01
sg224
g12110
sg227
(dp28498
S'support_code_apply'
p28499
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28500
ssg231
(dp28501
I0
(lp28502
I0
assg234
(lp28503
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28504
asbsbsg177
g0
(g178
g2
Ntp28505
Rp28506
(dp28507
g182
(I01
tp28508
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp28509
sg17857
(g27960
tp28510
sg0
(g7
g2
Ntp28511
Rp28512
(dp28513
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28514
sg11
S'auto_1730'
p28515
sg14
g0
(g15
g2
Ntp28516
Rp28517
(dp28518
g19
g14780
sbsg53
g0
(g54
g2
Ntp28519
Rp28520
(dp28521
g58
(lp28522
g0
(g7
g2
Ntp28523
Rp28524
(dp28525
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28526
sg11
S'auto_2060'
p28527
sg14
g0
(g15
g2
Ntp28528
Rp28529
(dp28530
g19
(lp28531
sbsg53
g0
(g54
g2
Ntp28532
Rp28533
(dp28534
g58
(lp28535
g0
(g7
g2
Ntp28536
Rp28537
(dp28538
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28539
sg11
S'auto_2076'
p28540
sg14
g0
(g15
g2
Ntp28541
Rp28542
(dp28543
g19
(lp28544
sbsg53
g0
(g54
g2
Ntp28545
Rp28546
(dp28547
g58
(lp28548
g0
(g7
g2
Ntp28549
Rp28550
(dp28551
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28552
sg11
S'auto_2071'
p28553
sg14
g0
(g15
g2
Ntp28554
Rp28555
(dp28556
g19
(lp28557
g10258
asbsg53
g0
(g54
g2
Ntp28558
Rp28559
(dp28560
g58
(lp28561
g16998
ag0
(g7
g2
Ntp28562
Rp28563
(dp28564
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28565
sg11
S'auto_2067'
p28566
sg14
g0
(g15
g2
Ntp28567
Rp28568
(dp28569
g19
(lp28570
sbsg53
g0
(g54
g2
Ntp28571
Rp28572
(dp28573
g58
(lp28574
g17088
asg1883
g16854
sg204
(lp28575
g28563
asg14
g0
(g15
g2
Ntp28576
Rp28577
(dp28578
g4120
(lp28579
g27210
asg2143
(lp28580
g18942
asbsg2147
(dp28581
sg206
g0
(g207
g2
Ntp28582
Rp28583
(dp28584
g211
(lp28585
sg213
(lp28586
sg215
(lp28587
I0
aI1
asg217
g218
sg219
(tsg220
(lp28588
g222
asg223
I01
sg224
g10686
sg227
(dp28589
S'support_code_apply'
p28590
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28591
ssg231
(dp28592
I0
(lp28593
I0
assg234
(lp28594
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28595
asbsbsg177
g0
(g178
g2
Ntp28596
Rp28597
(dp28598
g182
(I01
I01
tp28599
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp28600
g28550
asg14
g0
(g15
g2
Ntp28601
Rp28602
(dp28603
g4120
(lp28604
g27210
asg2143
(lp28605
g18942
asbsg2147
(dp28606
sg206
g10652
sbsg177
g0
(g178
g2
Ntp28607
Rp28608
(dp28609
g182
(I01
I01
tp28610
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp28611
Rp28612
(dp28613
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28614
sg11
S'auto_2072'
p28615
sg14
g0
(g15
g2
Ntp28616
Rp28617
(dp28618
g19
(lp28619
g10258
asbsg53
g0
(g54
g2
Ntp28620
Rp28621
(dp28622
g58
(lp28623
g17057
asg1883
g16854
sg204
(lp28624
g28612
asg14
g0
(g15
g2
Ntp28625
Rp28626
(dp28627
g4120
(lp28628
g27210
asg2143
(lp28629
g18942
asbsg2147
(dp28630
sg206
g0
(g207
g2
Ntp28631
Rp28632
(dp28633
g211
(lp28634
sg213
(lp28635
sg215
(lp28636
I0
aI1
asg217
g218
sg219
(tsg220
(lp28637
g222
asg223
I01
sg224
g10686
sg227
(dp28638
S'support_code_apply'
p28639
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28640
ssg231
(dp28641
I0
(lp28642
I0
assg234
(lp28643
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28644
asbsbsg177
g0
(g178
g2
Ntp28645
Rp28646
(dp28647
g182
(I01
I01
tp28648
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp28649
g28537
asg14
g0
(g15
g2
Ntp28650
Rp28651
(dp28652
g4120
(lp28653
g27210
asg2143
(lp28654
g18942
asbsg2147
(dp28655
sg206
g10666
sbsg177
g0
(g178
g2
Ntp28656
Rp28657
(dp28658
g182
(I01
I01
tp28659
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp28660
Rp28661
(dp28662
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28663
sg11
S'auto_1591'
p28664
sg14
g0
(g15
g2
Ntp28665
Rp28666
(dp28667
g19
g8647
sbsg53
g0
(g54
g2
Ntp28668
Rp28669
(dp28670
g58
(lp28671
g17200
ag0
(g7
g2
Ntp28672
Rp28673
(dp28674
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28675
sg11
S'auto_1589'
p28676
sg14
g0
(g15
g2
Ntp28677
Rp28678
(dp28679
g19
g8715
sbsg53
g0
(g54
g2
Ntp28680
Rp28681
(dp28682
g58
(lp28683
g16998
ag0
(g7
g2
Ntp28684
Rp28685
(dp28686
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28687
sg11
S'auto_1587'
p28688
sg14
g0
(g15
g2
Ntp28689
Rp28690
(dp28691
g19
g8783
sbsg53
g0
(g54
g2
Ntp28692
Rp28693
(dp28694
g58
(lp28695
g17166
ag0
(g7
g2
Ntp28696
Rp28697
(dp28698
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28699
sg11
S'auto_1586'
p28700
sg14
g0
(g15
g2
Ntp28701
Rp28702
(dp28703
g19
g8806
sbsg53
g0
(g54
g2
Ntp28704
Rp28705
(dp28706
g58
(lp28707
g17222
ag17319
asg1883
g16854
sg204
(lp28708
g28697
asg14
g0
(g15
g2
Ntp28709
Rp28710
(dp28711
g4120
(lp28712
g2628
asg2143
(lp28713
g2146
asbsg2147
(dp28714
sg206
g1153
sbsg177
g10073
sbasg1883
g16854
sg204
(lp28715
g28685
asg14
g0
(g15
g2
Ntp28716
Rp28717
(dp28718
g4120
(lp28719
g2628
asg2143
(lp28720
g2146
asbsg2147
(dp28721
sg206
g1220
sbsg177
g10080
sbasg1883
g16854
sg204
(lp28722
g28673
asg14
g0
(g15
g2
Ntp28723
Rp28724
(dp28725
g4120
(lp28726
g2628
asg2143
(lp28727
g2146
asbsg2147
(dp28728
sg206
g5417
sbsg177
g10087
sbasg1883
g16854
sg204
(lp28729
g28661
asg14
g0
(g15
g2
Ntp28730
Rp28731
(dp28732
g4120
(lp28733
g2628
asg2143
(lp28734
g2146
asbsg2147
(dp28735
sg206
g5904
sbsg177
g10094
sbasg1883
g16854
sg204
(lp28736
g28524
asg14
g0
(g15
g2
Ntp28737
Rp28738
(dp28739
g4120
(lp28740
g27210
asg2143
(lp28741
S'local_fill_sink'
p28742
asbsg2147
(dp28743
sg206
g10717
sbsg177
g0
(g178
g2
Ntp28744
Rp28745
(dp28746
g182
(I00
I00
tp28747
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag27017
asg1883
g16854
sg204
(lp28748
g28512
asg14
g0
(g15
g2
Ntp28749
Rp28750
(dp28751
g4120
(lp28752
g27210
asg2143
(lp28753
g2146
asbsg2147
(dp28754
sg206
g15117
sbsg177
g15125
sb(g17152
g17175
tp28755
sg0
(g7
g2
Ntp28756
Rp28757
(dp28758
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28759
sg11
S'auto_1746'
p28760
sg14
g0
(g15
g2
Ntp28761
Rp28762
(dp28763
g19
g15234
sbsg53
g0
(g54
g2
Ntp28764
Rp28765
(dp28766
g58
(lp28767
g28432
asg1883
g16854
sg204
(lp28768
g28757
asg14
g0
(g15
g2
Ntp28769
Rp28770
(dp28771
g4120
(lp28772
g2628
asg2143
(lp28773
g2146
asbsg2147
(dp28774
sg206
g7880
sbsg177
g15592
sb(g28273
g28291
tp28775
sg0
(g7
g2
Ntp28776
Rp28777
(dp28778
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28779
sg11
S'auto_1747'
p28780
sg14
g0
(g15
g2
Ntp28781
Rp28782
(dp28783
g19
g15209
sbsg53
g0
(g54
g2
Ntp28784
Rp28785
(dp28786
g58
(lp28787
g28757
ag0
(g7
g2
Ntp28788
Rp28789
(dp28790
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28791
sg11
S'auto_1605'
p28792
sg14
g0
(g15
g2
Ntp28793
Rp28794
(dp28795
g19
g11486
sbsg53
g0
(g54
g2
Ntp28796
Rp28797
(dp28798
g58
(lp28799
g28416
asg1883
g16854
sg204
(lp28800
g28789
asg14
g0
(g15
g2
Ntp28801
Rp28802
(dp28803
g4120
(lp28804
g4913
asg2143
(lp28805
g2146
ag2146
asbsg2147
(dp28806
sg206
g11538
sbsg177
g11553
sbasg1883
g16854
sg204
(lp28807
g28777
asg14
g0
(g15
g2
Ntp28808
Rp28809
(dp28810
g4120
(lp28811
g23749
asg2143
(lp28812
g2146
asbsg2147
(dp28813
sg206
g1153
sbsg177
g15646
sb(g28273
g28291
tp28814
sg28550
(g27960
g27960
tp28815
sg17838
(g27960
tp28816
sg0
(g7
g2
Ntp28817
Rp28818
(dp28819
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28820
sg11
S'auto_1865'
p28821
sg14
g0
(g15
g2
Ntp28822
Rp28823
(dp28824
g19
(lp28825
sbsg53
g0
(g54
g2
Ntp28826
Rp28827
(dp28828
g58
(lp28829
g0
(g149
g2
Ntp28830
Rp28831
(dp28832
g11
S'auto_1632'
p28833
sg13
Nsg14
g0
(g15
g2
Ntp28834
Rp28835
(dp28836
g19
g7758
sg175
Nsbsg52
Nsg177
g7773
sg1892
(lp28837
sg193
g7778
sbasg1883
g16854
sg204
(lp28838
g28818
asg14
g0
(g15
g2
Ntp28839
Rp28840
(dp28841
g4120
(lp28842
g28488
asg2143
(lp28843
g18942
asbsg2147
(dp28844
sg206
g0
(g207
g2
Ntp28845
Rp28846
(dp28847
g211
(lp28848
sg213
(lp28849
sg215
(lp28850
I0
asg217
g218
sg219
(tsg220
(lp28851
g222
asg223
I01
sg224
g12110
sg227
(dp28852
S'support_code_apply'
p28853
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28854
ssg231
(dp28855
I0
(lp28856
I0
assg234
(lp28857
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p28858
asbsbsg177
g0
(g178
g2
Ntp28859
Rp28860
(dp28861
g182
(I01
tp28862
sg183
g7775
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp28863
sg0
(g7
g2
Ntp28864
Rp28865
(dp28866
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28867
sg11
S'auto_1733'
p28868
sg14
g0
(g15
g2
Ntp28869
Rp28870
(dp28871
g19
g14641
sbsg53
g0
(g54
g2
Ntp28872
Rp28873
(dp28874
g58
(lp28875
g16998
ag0
(g7
g2
Ntp28876
Rp28877
(dp28878
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28879
sg11
S'auto_1618'
p28880
sg14
g0
(g15
g2
Ntp28881
Rp28882
(dp28883
g19
g8618
sbsg53
g0
(g54
g2
Ntp28884
Rp28885
(dp28886
g58
(lp28887
g28661
ag17200
asg1883
g16854
sg204
(lp28888
g28877
asg14
g0
(g15
g2
Ntp28889
Rp28890
(dp28891
g4120
(lp28892
g2628
asg2143
(lp28893
g2146
asbsg2147
(dp28894
sg206
g10101
sbsg177
g10115
sbasg1883
g16854
sg204
(lp28895
g28865
asg14
g0
(g15
g2
Ntp28896
Rp28897
(dp28898
g4120
(lp28899
g2628
asg2143
(lp28900
g2146
asbsg2147
(dp28901
sg206
g14762
sbsg177
g14770
sb(g17152
g17175
tp28902
sg18925
(g27960
tp28903
sg27596
(g27960
tp28904
sg0
(g7
g2
Ntp28905
Rp28906
(dp28907
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28908
sg11
S'auto_1734'
p28909
sg14
g0
(g15
g2
Ntp28910
Rp28911
(dp28912
g19
g14612
sbsg53
g0
(g54
g2
Ntp28913
Rp28914
(dp28915
g58
(lp28916
g28865
ag28512
asg1883
g16854
sg204
(lp28917
g28906
asg14
g0
(g15
g2
Ntp28918
Rp28919
(dp28920
g4120
(lp28921
g27210
asg2143
(lp28922
g2146
asbsg2147
(dp28923
sg206
g15132
sbsg177
g15140
sb(g17152
g17175
tp28924
sg0
(g7
g2
Ntp28925
Rp28926
(dp28927
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28928
sg11
S'auto_1750'
p28929
sg14
g0
(g15
g2
Ntp28930
Rp28931
(dp28932
g19
g14371
sbsg53
g0
(g54
g2
Ntp28933
Rp28934
(dp28935
g58
(lp28936
g0
(g149
g2
Ntp28937
Rp28938
(dp28939
g11
S'auto_4137'
p28940
sg13
Nsg14
g0
(g15
g2
Ntp28941
Rp28942
(dp28943
g19
(lp28944
g8198
asg175
g2038
(g189
S'\xd0\xcc\xcc='
p28945
tp28946
Rp28947
sbsg52
Nsg177
g8265
sg1892
(lp28948
sg193
g194
(g195
(I0
tp28949
g197
tp28950
Rp28951
(I1
(I1
I1
tp28952
g189
I00
S'\xd0\xcc\xcc='
p28953
tp28954
bsbag19594
asg1883
g16854
sg204
(lp28955
g28926
asg14
g0
(g15
g2
Ntp28956
Rp28957
(dp28958
g4120
(lp28959
g27305
ag17616
asg2143
(lp28960
g2146
aS"('Revert', 'GemmOptimizer')"
p28961
asbsg2147
(dp28962
sg206
g1220
sbsg177
g15185
sb(g27041
g17175
tp28963
sg27776
(g0
(g7
g2
Ntp28964
Rp28965
(dp28966
g11
S'auto_1805'
p28967
sg13
I0
sg14
g0
(g15
g2
Ntp28968
Rp28969
(dp28970
g19
(lp28971
sbsg52
Nsg53
g0
(g54
g2
Ntp28972
Rp28973
(dp28974
g58
(lp28975
g22267
asg14
g0
(g15
g2
Ntp28976
Rp28977
sg204
(lp28978
g28965
asg206
g0
(g2888
g2
Ntp28979
Rp28980
(dp28981
g2892
I0
sbsbsg177
g2894
sbtp28982
sg0
(g7
g2
Ntp28983
Rp28984
(dp28985
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp28986
sg11
S'auto_1735'
p28987
sg14
g0
(g15
g2
Ntp28988
Rp28989
(dp28990
g19
g14583
sbsg53
g0
(g54
g2
Ntp28991
Rp28992
(dp28993
g58
(lp28994
g28906
asg1883
g16854
sg204
(lp28995
g28984
asg14
g0
(g15
g2
Ntp28996
Rp28997
(dp28998
g4120
(lp28999
g28082
asg2143
(lp29000
g2146
asbsg2147
(dp29001
sg206
g15147
sbsg177
g15155
sb(g17152
g17175
tp29002
sg0
(g7
g2
Ntp29003
Rp29004
(dp29005
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29006
sg11
S'auto_1885'
p29007
sg14
g0
(g15
g2
Ntp29008
Rp29009
(dp29010
g19
(lp29011
sbsg53
g0
(g54
g2
Ntp29012
Rp29013
(dp29014
g58
(lp29015
g28362
asg1883
g16854
sg204
(lp29016
g29004
asg14
g0
(g15
g2
Ntp29017
Rp29018
(dp29019
g4120
(lp29020
g28488
asg2143
(lp29021
g18942
asbsg2147
(dp29022
sg206
g0
(g207
g2
Ntp29023
Rp29024
(dp29025
g211
(lp29026
sg213
(lp29027
sg215
(lp29028
I0
asg217
g218
sg219
(tsg220
(lp29029
g222
asg223
I01
sg224
g12110
sg227
(dp29030
S'support_code_apply'
p29031
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p29032
ssg231
(dp29033
I0
(lp29034
I0
assg234
(lp29035
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p29036
asbsbsg177
g0
(g178
g2
Ntp29037
Rp29038
(dp29039
g182
(I01
tp29040
sg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp29041
sg0
(g149
g2
Ntp29042
Rp29043
(dp29044
g11
S'auto_4148'
p29045
sg13
Nsg14
g0
(g15
g2
Ntp29046
Rp29047
(dp29048
g19
(lp29049
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp29050
Rp29051
(dp29052
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp29053
sg193
g194
(g195
(I0
tp29054
g197
tp29055
Rp29056
(I1
(tg189
I00
S'\x00\x00\x80?'
p29057
tp29058
bsb(tsg0
(g7
g2
Ntp29059
Rp29060
(dp29061
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29062
sg11
S'auto_1736'
p29063
sg14
g0
(g15
g2
Ntp29064
Rp29065
(dp29066
g19
g14554
sbsg53
g0
(g54
g2
Ntp29067
Rp29068
(dp29069
g58
(lp29070
g0
(g7
g2
Ntp29071
Rp29072
(dp29073
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29074
sg11
S'auto_2051'
p29075
sg14
g0
(g15
g2
Ntp29076
Rp29077
(dp29078
g19
(lp29079
sbsg53
g0
(g54
g2
Ntp29080
Rp29081
(dp29082
g58
(lp29083
g20941
ag28906
asg1883
g16854
sg204
(lp29084
g29072
asg14
g0
(g15
g2
Ntp29085
Rp29086
(dp29087
g4120
(lp29088
g27210
asg2143
(lp29089
g28082
asbsg2147
(dp29090
sg206
g1220
sbsg177
g0
(g178
g2
Ntp29091
Rp29092
(dp29093
g182
(I00
I00
tp29094
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17166
asg1883
g16854
sg204
(lp29095
g29060
asg14
g0
(g15
g2
Ntp29096
Rp29097
(dp29098
g4120
(lp29099
g27210
asg2143
(lp29100
g2146
asbsg2147
(dp29101
sg206
g15162
sbsg177
g15170
sb(g17152
g17175
tp29102
sg0
(g7
g2
Ntp29103
Rp29104
(dp29105
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29106
sg11
S'auto_1752'
p29107
sg14
g0
(g15
g2
Ntp29108
Rp29109
(dp29110
g19
g14256
sbsg53
g0
(g54
g2
Ntp29111
Rp29112
(dp29113
g58
(lp29114
g18854
ag19239
asg1883
g16854
sg204
(lp29115
g29104
asg14
g0
(g15
g2
Ntp29116
Rp29117
(dp29118
g4120
(lp29119
g27305
ag2628
asg2143
(lp29120
g2146
aS"('Revert', 'GemmOptimizer')"
p29121
asbsg2147
(dp29122
sg206
g1220
sbsg177
g14361
sb(g27997
g28015
tp29123
sg20941
(g27960
g27960
tp29124
sg27570
(g27960
tp29125
sg17246
(g27041
g28310
tp29126
sg0
(g7
g2
Ntp29127
Rp29128
(dp29129
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29130
sg11
S'auto_1753'
p29131
sg14
g0
(g15
g2
Ntp29132
Rp29133
(dp29134
g19
g14231
sbsg53
g0
(g54
g2
Ntp29135
Rp29136
(dp29137
g58
(lp29138
g29104
ag19248
asg1883
g16854
sg204
(lp29139
g29128
asg14
g0
(g15
g2
Ntp29140
Rp29141
(dp29142
g4120
(lp29143
g27305
ag2628
asg2143
(lp29144
g2146
aS"('Revert', 'GemmOptimizer')"
p29145
asbsg2147
(dp29146
sg206
g1153
sbsg177
g15192
sb(g27997
g28015
tp29147
sg0
(g149
g2
Ntp29148
Rp29149
(dp29150
g11
S'auto_4651'
p29151
sg13
Nsg14
g0
(g15
g2
Ntp29152
Rp29153
(dp29154
g19
(lp29155
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp29156
Rp29157
(dp29158
g182
(tsg183
g184
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp29159
sg193
g194
(g195
(I0
tp29160
g197
tp29161
Rp29162
(I1
(tg189
I00
S'\x00\x00\x00?'
p29163
tp29164
bsb(tsg0
(g149
g2
Ntp29165
Rp29166
(dp29167
g11
S'auto_4220'
p29168
sg13
Nsg14
g0
(g15
g2
Ntp29169
Rp29170
(dp29171
g19
(lp29172
g14008
asg175
g2038
(g189
S'\xb8\xc2\xe0@'
p29173
tp29174
Rp29175
sbsg52
Nsg177
g14074
sg1892
(lp29176
sg193
g194
(g195
(I0
tp29177
g197
tp29178
Rp29179
(I1
(I1
I1
tp29180
g189
I00
S'\xb8\xc2\xe0@'
p29181
tp29182
bsb(g27960
g27960
tp29183
sg0
(g7
g2
Ntp29184
Rp29185
(dp29186
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29187
sg11
S'auto_1738'
p29188
sg14
g0
(g15
g2
Ntp29189
Rp29190
(dp29191
g19
g14474
sbsg53
g0
(g54
g2
Ntp29192
Rp29193
(dp29194
g58
(lp29195
g17246
ag0
(g7
g2
Ntp29196
Rp29197
(dp29198
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29199
sg11
S'auto_4341'
p29200
sg14
g0
(g15
g2
Ntp29201
Rp29202
(dp29203
g23736
g23737
sg19
(lp29204
sbsg53
g0
(g54
g2
Ntp29205
Rp29206
(dp29207
g58
(lp29208
g0
(g7
g2
Ntp29209
Rp29210
(dp29211
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29212
sg11
S'auto_4332'
p29213
sg14
g0
(g15
g2
Ntp29214
Rp29215
(dp29216
g19
(lp29217
sbsg53
g0
(g54
g2
Ntp29218
Rp29219
(dp29220
g58
(lp29221
g17006
ag28865
ag28661
ag17166
asg1883
g16854
sg204
(lp29222
g29210
asg14
g0
(g15
g2
Ntp29223
Rp29224
(dp29225
g4120
(lp29226
g2628
asg2143
(lp29227
g27210
asbsg2147
(dp29228
sg206
g1220
sbsg177
g0
(g178
g2
Ntp29229
Rp29230
(dp29231
g182
(I00
I00
tp29232
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag20319
asg1883
g16854
sg204
(lp29233
g29197
asg14
g0
(g15
g2
Ntp29234
Rp29235
(dp29236
g4120
(lp29237
g2628
asg2143
(lp29238
g27210
asbsg2147
(dp29239
sg206
g5326
sbsg177
g0
(g178
g2
Ntp29240
Rp29241
(dp29242
g182
(I00
I00
tp29243
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp29244
g29185
asg14
g0
(g15
g2
Ntp29245
Rp29246
(dp29247
g4120
(lp29248
g2145
asg2143
(lp29249
g2146
asbsg2147
(dp29250
sg206
g1052
sbsg177
g15177
sb(g27041
g17175
tp29251
sg0
(g7
g2
Ntp29252
Rp29253
(dp29254
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29255
sg11
S'auto_1997'
p29256
sg14
g0
(g15
g2
Ntp29257
Rp29258
(dp29259
g19
(lp29260
sbsg53
g0
(g54
g2
Ntp29261
Rp29262
(dp29263
g58
(lp29264
g0
(g149
g2
Ntp29265
Rp29266
(dp29267
g11
S'auto_1553'
p29268
sg13
Nsg14
g0
(g15
g2
Ntp29269
Rp29270
(dp29271
g19
g968
sg175
Nsbsg52
Nsg177
g987
sg1892
(lp29272
sg193
g992
sbasg1883
g16854
sg204
(lp29273
g29253
asg14
g0
(g15
g2
Ntp29274
Rp29275
(dp29276
g4120
(lp29277
g28488
asg2143
(lp29278
g23749
asbsg2147
(dp29279
sg206
g0
(g207
g2
Ntp29280
Rp29281
(dp29282
g211
(lp29283
sg213
(lp29284
sg215
(lp29285
I0
aI1
asg217
g218
sg219
(tsg220
(lp29286
g222
asg223
I01
sg224
(g225
g225
tp29287
sg227
(dp29288
S'support_code_apply'
p29289
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p29290
ssg231
(dp29291
I0
(lp29292
I0
assg234
(lp29293
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p29294
asbsbsg177
g0
(g178
g2
Ntp29295
Rp29296
(dp29297
g182
(I01
I01
tp29298
sg183
S'float32'
p29299
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp29300
sg0
(g7
g2
Ntp29301
Rp29302
(dp29303
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29304
sg11
S'auto_1644'
p29305
sg14
g0
(g15
g2
Ntp29306
Rp29307
(dp29308
g19
g8172
sbsg53
g0
(g54
g2
Ntp29309
Rp29310
(dp29311
g58
(lp29312
g28938
ag19639
asg1883
g16854
sg204
(lp29313
g29302
asg14
g0
(g15
g2
Ntp29314
Rp29315
(dp29316
g4120
(lp29317
g27305
ag17616
asg2143
(lp29318
g2146
aS"('Revert', 'GemmOptimizer')"
p29319
asbsg2147
(dp29320
sg206
g1220
sbsg177
g11069
sb(g0
(g7
g2
Ntp29321
Rp29322
(dp29323
g11
S'auto_1797'
p29324
sg13
I0
sg14
g0
(g15
g2
Ntp29325
Rp29326
(dp29327
g19
(lp29328
sbsg52
Nsg53
g0
(g54
g2
Ntp29329
Rp29330
(dp29331
g58
(lp29332
g16858
asg14
g0
(g15
g2
Ntp29333
Rp29334
sg204
(lp29335
g29322
asg206
g0
(g2888
g2
Ntp29336
Rp29337
(dp29338
g2892
I1
sbsbsg177
g2894
sbg0
(g7
g2
Ntp29339
Rp29340
(dp29341
g11
S'auto_1791'
p29342
sg13
I0
sg14
g0
(g15
g2
Ntp29343
Rp29344
(dp29345
g19
(lp29346
sbsg52
Nsg53
g0
(g54
g2
Ntp29347
Rp29348
(dp29349
g58
(lp29350
g16950
asg14
g0
(g15
g2
Ntp29351
Rp29352
sg204
(lp29353
g29340
asg206
g0
(g2888
g2
Ntp29354
Rp29355
(dp29356
g2892
I0
sbsbsg177
g2894
sbtp29357
sg28524
(g17152
g17175
tp29358
sg0
(g7
g2
Ntp29359
Rp29360
(dp29361
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29362
sg11
S'auto_1645'
p29363
sg14
g0
(g15
g2
Ntp29364
Rp29365
(dp29366
g19
g8082
sbsg53
g0
(g54
g2
Ntp29367
Rp29368
(dp29369
g58
(lp29370
g28362
asg1883
g16854
sg204
(lp29371
g29360
asg14
g0
(g15
g2
Ntp29372
Rp29373
(dp29374
g4120
(lp29375
g4913
asg2143
(lp29376
g2146
ag2146
asbsg2147
(dp29377
sg206
g8104
sbsg177
g8119
sb(g27960
g27960
tp29378
sg0
(g149
g2
Ntp29379
Rp29380
(dp29381
g11
S'auto_1562'
p29382
sg13
Nsg14
g0
(g15
g2
Ntp29383
Rp29384
(dp29385
g19
g568
sg175
Nsbsg52
Nsg177
g587
sg1892
(lp29386
sg193
g592
sb(tsg0
(g7
g2
Ntp29387
Rp29388
(dp29389
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29390
sg11
S'auto_4597'
p29391
sg14
g0
(g15
g2
Ntp29392
Rp29393
(dp29394
g19
(lp29395
sbsg53
g0
(g54
g2
Ntp29396
Rp29397
(dp29398
g58
(lp29399
g17545
ag0
(g7
g2
Ntp29400
Rp29401
(dp29402
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29403
sg11
S'auto_1608'
p29404
sg14
g0
(g15
g2
Ntp29405
Rp29406
(dp29407
g19
g10991
sbsg53
g0
(g54
g2
Ntp29408
Rp29409
(dp29410
g58
(lp29411
g23113
asg1883
g16854
sg204
(lp29412
g29401
asg14
g0
(g15
g2
Ntp29413
Rp29414
(dp29415
g4120
(lp29416
g2628
asg2143
(lp29417
g2146
asbsg2147
(dp29418
sg206
g11017
sbsg177
g11032
sbasg1883
g16854
sg204
(lp29419
g29388
asg14
g0
(g15
g2
Ntp29420
Rp29421
(dp29422
g4120
(lp29423
g2628
asg2143
(lp29424
g17616
asbsg2147
(dp29425
sg206
g1220
sbsg177
g0
(g178
g2
Ntp29426
Rp29427
(dp29428
g182
(I00
I00
tp29429
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g17152
g29340
tp29430
sg17403
(g28310
g27041
tp29431
sg27289
(g0
(g7
g2
Ntp29432
Rp29433
(dp29434
g11
S'auto_1803'
p29435
sg13
I0
sg14
g0
(g15
g2
Ntp29436
Rp29437
(dp29438
g19
(lp29439
sbsg52
Nsg53
g0
(g54
g2
Ntp29440
Rp29441
(dp29442
g58
(lp29443
g19409
asg14
g0
(g15
g2
Ntp29444
Rp29445
sg204
(lp29446
g29433
asg206
g0
(g2888
g2
Ntp29447
Rp29448
(dp29449
g2892
I0
sbsbsg177
g2894
sbg0
(g7
g2
Ntp29450
Rp29451
(dp29452
g11
S'auto_1804'
p29453
sg13
I0
sg14
g0
(g15
g2
Ntp29454
Rp29455
(dp29456
g19
(lp29457
sbsg52
Nsg53
g0
(g54
g2
Ntp29458
Rp29459
(dp29460
g58
(lp29461
g19409
asg14
g0
(g15
g2
Ntp29462
Rp29463
sg204
(lp29464
g29451
asg206
g0
(g2888
g2
Ntp29465
Rp29466
(dp29467
g2892
I1
sbsbsg177
g2894
sbtp29468
sg0
(g7
g2
Ntp29469
Rp29470
(dp29471
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29472
sg11
S'auto_1564'
p29473
sg14
g0
(g15
g2
Ntp29474
Rp29475
(dp29476
g19
g9640
sbsg53
g0
(g54
g2
Ntp29477
Rp29478
(dp29479
g58
(lp29480
g16950
asg1883
g16854
sg204
(lp29481
g29470
asg14
g0
(g15
g2
Ntp29482
Rp29483
(dp29484
g4120
(lp29485
g2628
asg2143
(lp29486
g2146
asbsg2147
(dp29487
sg206
g499
sbsg177
g9666
sb(g29340
g0
(g7
g2
Ntp29488
Rp29489
(dp29490
g11
S'auto_1792'
p29491
sg13
I0
sg14
g0
(g15
g2
Ntp29492
Rp29493
(dp29494
g19
(lp29495
sbsg52
Nsg53
g0
(g54
g2
Ntp29496
Rp29497
(dp29498
g58
(lp29499
g16950
asg14
g0
(g15
g2
Ntp29500
Rp29501
sg204
(lp29502
g29489
asg206
g0
(g2888
g2
Ntp29503
Rp29504
(dp29505
g2892
I1
sbsbsg177
g2894
sbtp29506
sg27277
(g29433
g29451
tp29507
sg16926
(g27960
g27960
tp29508
sg0
(g7
g2
Ntp29509
Rp29510
(dp29511
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29512
sg11
S'auto_1565'
p29513
sg14
g0
(g15
g2
Ntp29514
Rp29515
(dp29516
g19
g9611
sbsg53
g0
(g54
g2
Ntp29517
Rp29518
(dp29519
g58
(lp29520
g29470
ag16942
asg1883
g16854
sg204
(lp29521
g29510
asg14
g0
(g15
g2
Ntp29522
Rp29523
(dp29524
g4120
(lp29525
g2628
asg2143
(lp29526
g2146
asbsg2147
(dp29527
sg206
g621
sbsg177
g9724
sb(g29340
g29489
tp29528
sg28370
(tsg0
(g149
g2
Ntp29529
Rp29530
(dp29531
g11
S'auto_1582'
p29532
sg13
Nsg14
g0
(g15
g2
Ntp29533
Rp29534
(dp29535
g19
g157
sg175
Nsbsg52
Nsg177
g180
sg1892
(lp29536
sg193
g199
sb(tsg0
(g7
g2
Ntp29537
Rp29538
(dp29539
g13
I0
sg52
g16178
sg1883
g16854
sg1892
(lp29540
sg11
S'auto_1769'
p29541
sg14
g0
(g15
g2
Ntp29542
Rp29543
(dp29544
g19
g16160
sbsg53
g0
(g54
g2
Ntp29545
Rp29546
(dp29547
g58
(lp29548
g0
(g7
g2
Ntp29549
Rp29550
(dp29551
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29552
sg11
S'auto_1767'
p29553
sg14
g0
(g15
g2
Ntp29554
Rp29555
(dp29556
g19
g16219
sbsg53
g0
(g54
g2
Ntp29557
Rp29558
(dp29559
g58
(lp29560
g17263
asg1883
g16854
sg204
(lp29561
g29550
asg14
g0
(g15
g2
Ntp29562
Rp29563
(dp29564
g4120
(lp29565
g18942
asg2143
(lp29566
g2146
asbsg2147
(dp29567
sg206
g16285
sbsg177
g16300
sbasg1883
g16854
sg204
(lp29568
g29538
asg14
g0
(g15
g2
Ntp29569
Rp29570
(dp29571
g4120
(lp29572
g18942
asg2143
(lp29573
g2146
asbsg2147
(dp29574
sg206
g16322
sbsg177
g16337
sb(g17175
tp29575
sg28697
(g28310
g29489
tp29576
sg0
(g7
g2
Ntp29577
Rp29578
(dp29579
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29580
sg11
S'auto_1566'
p29581
sg14
g0
(g15
g2
Ntp29582
Rp29583
(dp29584
g19
g9582
sbsg53
g0
(g54
g2
Ntp29585
Rp29586
(dp29587
g58
(lp29588
g29510
ag17200
ag0
(g7
g2
Ntp29589
Rp29590
(dp29591
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29592
sg11
S'auto_1560'
p29593
sg14
g0
(g15
g2
Ntp29594
Rp29595
(dp29596
g19
g9785
sbsg53
g0
(g54
g2
Ntp29597
Rp29598
(dp29599
g58
(lp29600
g0
(g7
g2
Ntp29601
Rp29602
(dp29603
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29604
sg11
S'auto_1559'
p29605
sg14
g0
(g15
g2
Ntp29606
Rp29607
(dp29608
g19
g9814
sbsg53
g0
(g54
g2
Ntp29609
Rp29610
(dp29611
g58
(lp29612
g16950
ag17200
asg1883
g16854
sg204
(lp29613
g29602
asg14
g0
(g15
g2
Ntp29614
Rp29615
(dp29616
g4120
(lp29617
g2628
asg2143
(lp29618
g2146
asbsg2147
(dp29619
sg206
g621
sbsg177
g9891
sbag20941
ag16998
asg1883
g16854
sg204
(lp29620
g29590
asg14
g0
(g15
g2
Ntp29621
Rp29622
(dp29623
g4120
(lp29624
g2628
asg2143
(lp29625
g2146
asbsg2147
(dp29626
sg206
g1021
sbsg177
g10000
sbasg1883
g16854
sg204
(lp29627
g29578
asg14
g0
(g15
g2
Ntp29628
Rp29629
(dp29630
g4120
(lp29631
g2628
asg2143
(lp29632
g2146
asbsg2147
(dp29633
sg206
g1021
sbsg177
g10007
sb(g29340
g29489
tp29634
sg28350
(tsg0
(g7
g2
Ntp29635
Rp29636
(dp29637
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29638
sg11
S'auto_1583'
p29639
sg14
g0
(g15
g2
Ntp29640
Rp29641
(dp29642
g19
g8893
sbsg53
g0
(g54
g2
Ntp29643
Rp29644
(dp29645
g58
(lp29646
g29530
asg1883
g16854
sg204
(lp29647
g29636
asg14
g0
(g15
g2
Ntp29648
Rp29649
(dp29650
g4120
(lp29651
g4913
asg2143
(lp29652
g2146
ag2146
asbsg2147
(dp29653
sg206
g8919
sbsg177
g8934
sb(g27960
g27960
tp29654
sg18854
(g27960
g27960
tp29655
sg17356
(g27960
g27914
tp29656
sg27583
(g27960
tp29657
sg0
(g7
g2
Ntp29658
Rp29659
(dp29660
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29661
sg11
S'auto_1960'
p29662
sg14
g0
(g15
g2
Ntp29663
Rp29664
(dp29665
g19
(lp29666
sbsg53
g0
(g54
g2
Ntp29667
Rp29668
(dp29669
g58
(lp29670
g28370
asg1883
g16854
sg204
(lp29671
g29659
asg14
g0
(g15
g2
Ntp29672
Rp29673
(dp29674
g4120
(lp29675
g28488
asg2143
(lp29676
g18942
asbsg2147
(dp29677
sg206
g0
(g207
g2
Ntp29678
Rp29679
(dp29680
g211
(lp29681
sg213
(lp29682
sg215
(lp29683
I0
aI1
asg217
g218
sg219
(tsg220
(lp29684
g222
asg223
I01
sg224
g8013
sg227
(dp29685
S'support_code_apply'
p29686
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p29687
ssg231
(dp29688
I0
(lp29689
I0
assg234
(lp29690
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p29691
asbsbsg177
g0
(g178
g2
Ntp29692
Rp29693
(dp29694
g182
(I01
I01
tp29695
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp29696
sg0
(g7
g2
Ntp29697
Rp29698
(dp29699
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29700
sg11
S'auto_1584'
p29701
sg14
g0
(g15
g2
Ntp29702
Rp29703
(dp29704
g19
g8864
sbsg53
g0
(g54
g2
Ntp29705
Rp29706
(dp29707
g58
(lp29708
g17411
ag0
(g7
g2
Ntp29709
Rp29710
(dp29711
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29712
sg11
S'auto_1581'
p29713
sg14
g0
(g15
g2
Ntp29714
Rp29715
(dp29716
g19
g8944
sbsg53
g0
(g54
g2
Ntp29717
Rp29718
(dp29719
g58
(lp29720
g23113
ag0
(g7
g2
Ntp29721
Rp29722
(dp29723
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29724
sg11
S'auto_1580'
p29725
sg14
g0
(g15
g2
Ntp29726
Rp29727
(dp29728
g19
g9532
sbsg53
g0
(g54
g2
Ntp29729
Rp29730
(dp29731
g58
(lp29732
g23113
asg1883
g16854
sg204
(lp29733
g29722
asg14
g0
(g15
g2
Ntp29734
Rp29735
(dp29736
g4120
(lp29737
g2628
asg2143
(lp29738
g2146
asbsg2147
(dp29739
sg206
g499
sbsg177
g9558
sbasg1883
g16854
sg204
(lp29740
g29710
asg14
g0
(g15
g2
Ntp29741
Rp29742
(dp29743
g4120
(lp29744
g2628
asg2143
(lp29745
g2146
asbsg2147
(dp29746
sg206
g1153
sbsg177
g9565
sbasg1883
g16854
sg204
(lp29747
g29698
asg14
g0
(g15
g2
Ntp29748
Rp29749
(dp29750
g4120
(lp29751
g2628
asg2143
(lp29752
g2146
asbsg2147
(dp29753
sg206
g1220
sbsg177
g9572
sb(g28310
g27041
tp29754
sg0
(g7
g2
Ntp29755
Rp29756
(dp29757
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29758
sg11
S'auto_1651'
p29759
sg14
g0
(g15
g2
Ntp29760
Rp29761
(dp29762
g19
g7733
sbsg53
g0
(g54
g2
Ntp29763
Rp29764
(dp29765
g58
(lp29766
g28831
ag28370
asg1883
g16854
sg204
(lp29767
g29756
asg14
g0
(g15
g2
Ntp29768
Rp29769
(dp29770
g4120
(lp29771
g18942
asg2143
(lp29772
g2146
asbsg2147
(dp29773
sg206
g7850
sbsg177
g7868
sb(tsg0
(g7
g2
Ntp29774
Rp29775
(dp29776
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29777
sg11
S'auto_1917'
p29778
sg14
g0
(g15
g2
Ntp29779
Rp29780
(dp29781
g19
(lp29782
sbsg53
g0
(g54
g2
Ntp29783
Rp29784
(dp29785
g58
(lp29786
g28341
asg1883
g16854
sg204
(lp29787
g29775
asg14
g0
(g15
g2
Ntp29788
Rp29789
(dp29790
g2188
g0
(g54
g2
Ntp29791
Rp29792
(dp29793
g58
(lp29794
g0
(g2193
g2
Ntp29795
Rp29796
(dp29797
g11
S'auto_4146'
p29798
sg13
Nsg14
g0
(g15
g2
Ntp29799
Rp29800
sg52
Nsg53
Nsg177
g0
(g2200
g2
Ntp29801
Rp29802
(dp29803
g183
S'int8'
p29804
sbsbasg14
g0
(g15
g2
Ntp29805
Rp29806
sg204
(lp29807
g0
(g2193
g2
Ntp29808
Rp29809
(dp29810
g11
S'auto_4147'
p29811
sg13
I0
sg14
g0
(g15
g2
Ntp29812
Rp29813
sg52
Nsg53
g29792
sg177
g2202
sbasg206
g3280
sbsg4120
(lp29814
g18942
ag4913
asg2143
(lp29815
g28386
ag28488
asbsg2147
(dp29816
sg206
g3295
sbsg177
g29051
sb(tsg24299
(g0
(g7
g2
Ntp29817
Rp29818
(dp29819
g11
S'auto_1806'
p29820
sg13
I0
sg14
g0
(g15
g2
Ntp29821
Rp29822
(dp29823
g19
(lp29824
sbsg52
Nsg53
g0
(g54
g2
Ntp29825
Rp29826
(dp29827
g58
(lp29828
g18056
asg14
g0
(g15
g2
Ntp29829
Rp29830
sg204
(lp29831
g29818
asg206
g0
(g2888
g2
Ntp29832
Rp29833
(dp29834
g2892
I0
sbsbsg177
g2894
sbtp29835
sg0
(g7
g2
Ntp29836
Rp29837
(dp29838
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29839
sg11
S'auto_1585'
p29840
sg14
g0
(g15
g2
Ntp29841
Rp29842
(dp29843
g19
g8835
sbsg53
g0
(g54
g2
Ntp29844
Rp29845
(dp29846
g58
(lp29847
g29698
ag29578
asg1883
g16854
sg204
(lp29848
g29837
asg14
g0
(g15
g2
Ntp29849
Rp29850
(dp29851
g4120
(lp29852
g2145
asg2143
(lp29853
g2146
asbsg2147
(dp29854
sg206
g1052
sbsg177
g10014
sb(g28310
g29489
tp29855
sg0
(g7
g2
Ntp29856
Rp29857
(dp29858
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29859
sg11
S'auto_1652'
p29860
sg14
g0
(g15
g2
Ntp29861
Rp29862
(dp29863
g19
g7673
sbsg53
g0
(g54
g2
Ntp29864
Rp29865
(dp29866
g58
(lp29867
g28341
ag29756
asg1883
g16854
sg204
(lp29868
g29857
asg14
g0
(g15
g2
Ntp29869
Rp29870
(dp29871
g4120
(lp29872
g18942
asg2143
(lp29873
g2146
asbsg2147
(dp29874
sg206
g5417
sbsg177
g7874
sb(tsg0
(g149
g2
Ntp29875
Rp29876
(dp29877
g11
S'auto_1906'
p29878
sg13
Nsg14
g0
(g15
g2
Ntp29879
Rp29880
(dp29881
g19
(lp29882
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp29883
Rp29884
(dp29885
g182
(tsg183
S'float32'
p29886
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp29887
sg193
g194
(g195
(I0
tp29888
g197
tp29889
Rp29890
(I1
(tg189
I00
S'\x00\x00\x80?'
p29891
tp29892
bsb(tsg0
(g7
g2
Ntp29893
Rp29894
(dp29895
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29896
sg11
S'auto_4249'
p29897
sg14
g0
(g15
g2
Ntp29898
Rp29899
(dp29900
g23736
g23737
sg19
(lp29901
sbsg53
g0
(g54
g2
Ntp29902
Rp29903
(dp29904
g58
(lp29905
g0
(g7
g2
Ntp29906
Rp29907
(dp29908
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29909
sg11
S'auto_4241'
p29910
sg14
g0
(g15
g2
Ntp29911
Rp29912
(dp29913
g19
(lp29914
sbsg53
g0
(g54
g2
Ntp29915
Rp29916
(dp29917
g58
(lp29918
g16959
ag16926
ag27134
ag29128
asg1883
g16854
sg204
(lp29919
g29907
asg14
g0
(g15
g2
Ntp29920
Rp29921
(dp29922
g4120
(lp29923
g2628
asg2143
(lp29924
g27210
asbsg2147
(dp29925
sg206
g1220
sbsg177
g0
(g178
g2
Ntp29926
Rp29927
(dp29928
g182
(I00
I00
tp29929
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag0
(g7
g2
Ntp29930
Rp29931
(dp29932
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29933
sg11
S'auto_4245'
p29934
sg14
g0
(g15
g2
Ntp29935
Rp29936
(dp29937
g19
(lp29938
sbsg53
g0
(g54
g2
Ntp29939
Rp29940
(dp29941
g58
(lp29942
g27218
ag0
(g7
g2
Ntp29943
Rp29944
(dp29945
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29946
sg11
S'auto_1852'
p29947
sg14
g0
(g15
g2
Ntp29948
Rp29949
(dp29950
g23736
g23737
sg19
(lp29951
sbsg53
g0
(g54
g2
Ntp29952
Rp29953
(dp29954
g58
(lp29955
g20921
ag28757
asg1883
g16854
sg204
(lp29956
g29944
asg14
g0
(g15
g2
Ntp29957
Rp29958
(dp29959
g4120
(lp29960
g2628
asg2143
(lp29961
g23749
asbsg2147
(dp29962
sg206
g1153
sbsg177
g0
(g178
g2
Ntp29963
Rp29964
(dp29965
g182
(I00
I00
tp29966
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp29967
g29931
asg14
g0
(g15
g2
Ntp29968
Rp29969
(dp29970
g4120
(lp29971
g2628
asg2143
(lp29972
g27210
asbsg2147
(dp29973
sg206
g1220
sbsg177
g0
(g178
g2
Ntp29974
Rp29975
(dp29976
g182
(I00
I00
tp29977
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp29978
g29894
asg14
g0
(g15
g2
Ntp29979
Rp29980
(dp29981
g4120
(lp29982
g2628
asg2143
(lp29983
g27210
asbsg2147
(dp29984
sg206
g5326
sbsg177
g0
(g178
g2
Ntp29985
Rp29986
(dp29987
g182
(I00
I00
tp29988
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g29340
g29489
tp29989
sg0
(g7
g2
Ntp29990
Rp29991
(dp29992
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp29993
sg11
S'auto_1653'
p29994
sg14
g0
(g15
g2
Ntp29995
Rp29996
(dp29997
g19
g7648
sbsg53
g0
(g54
g2
Ntp29998
Rp29999
(dp30000
g58
(lp30001
g29857
asg1883
g16854
sg204
(lp30002
g29991
asg14
g0
(g15
g2
Ntp30003
Rp30004
(dp30005
g4120
(lp30006
g18942
asg2143
(lp30007
g2146
asbsg2147
(dp30008
sg206
g7880
sbsg177
g7897
sb(tsg28064
(g27470
g27041
tp30009
sg0
(g7
g2
Ntp30010
Rp30011
(dp30012
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30013
sg11
S'auto_1903'
p30014
sg14
g0
(g15
g2
Ntp30015
Rp30016
(dp30017
g19
(lp30018
sbsg53
g0
(g54
g2
Ntp30019
Rp30020
(dp30021
g58
(lp30022
g29266
asg1883
g16854
sg204
(lp30023
g30011
asg14
g0
(g15
g2
Ntp30024
Rp30025
(dp30026
g4120
(lp30027
g4913
asg2143
(lp30028
g23749
ag2146
asbsg2147
(dp30029
sg206
g0
(g207
g2
Ntp30030
Rp30031
(dp30032
g211
(lp30033
sg213
(lp30034
sg215
(lp30035
I0
asg217
g218
sg219
(tsg220
(lp30036
g222
asg223
I01
sg224
(g225
tp30037
sg227
(dp30038
S'support_code_apply'
p30039
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30040
ssg231
(dp30041
I0
(lp30042
I0
assg234
(lp30043
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30044
asbsbsg177
g22015
sb(g27960
tp30045
sg0
(g7
g2
Ntp30046
Rp30047
(dp30048
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30049
sg11
S'auto_1775'
p30050
sg14
g0
(g15
g2
Ntp30051
Rp30052
(dp30053
g19
g16443
sbsg53
g0
(g54
g2
Ntp30054
Rp30055
(dp30056
g58
(lp30057
g16893
ag17271
asg1883
g16854
sg204
(lp30058
g30047
asg14
g0
(g15
g2
Ntp30059
Rp30060
(dp30061
g4120
(lp30062
g2628
asg2143
(lp30063
g2146
asbsg2147
(dp30064
sg206
g1220
sbsg177
g16548
sb(g27489
tp30065
sg0
(g7
g2
Ntp30066
Rp30067
(dp30068
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30069
sg11
S'auto_1571'
p30070
sg14
g0
(g15
g2
Ntp30071
Rp30072
(dp30073
g19
g9263
sbsg53
g0
(g54
g2
Ntp30074
Rp30075
(dp30076
g58
(lp30077
g16934
ag17200
asg1883
g16854
sg204
(lp30078
g30067
asg14
g0
(g15
g2
Ntp30079
Rp30080
(dp30081
g4120
(lp30082
g2628
asg2143
(lp30083
g2146
asbsg2147
(dp30084
sg206
g621
sbsg177
g9340
sb(g27470
g27041
tp30085
sg0
(g7
g2
Ntp30086
Rp30087
(dp30088
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30089
sg11
S'auto_1654'
p30090
sg14
g0
(g15
g2
Ntp30091
Rp30092
(dp30093
g19
g7623
sbsg53
g0
(g54
g2
Ntp30094
Rp30095
(dp30096
g58
(lp30097
g16916
ag29991
asg1883
g16854
sg204
(lp30098
g30087
asg14
g0
(g15
g2
Ntp30099
Rp30100
(dp30101
g4120
(lp30102
g18942
asg2143
(lp30103
g2146
asbsg2147
(dp30104
sg206
g1220
sbsg177
g7903
sb(tsg0
(g7
g2
Ntp30105
Rp30106
(dp30107
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30108
sg11
S'auto_4552'
p30109
sg14
g0
(g15
g2
Ntp30110
Rp30111
(dp30112
g23736
g23737
sg19
(lp30113
sbsg53
g0
(g54
g2
Ntp30114
Rp30115
(dp30116
g58
(lp30117
g19409
ag0
(g7
g2
Ntp30118
Rp30119
(dp30120
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30121
sg11
S'auto_4551'
p30122
sg14
g0
(g15
g2
Ntp30123
Rp30124
(dp30125
g19
(lp30126
sbsg53
g0
(g54
g2
Ntp30127
Rp30128
(dp30129
g58
(lp30130
g28938
asg1883
g16854
sg204
(lp30131
g30119
asg14
g0
(g15
g2
Ntp30132
Rp30133
(dp30134
g4120
(lp30135
S"('Revert', 'GemmOptimizer')"
p30136
asg2143
(lp30137
g27305
asbsg2147
(dp30138
sg206
g0
(g207
g2
Ntp30139
Rp30140
(dp30141
g211
(lp30142
I0
aI1
asg213
(lp30143
sg215
(lp30144
sg217
g218
sg219
(I01
I01
tp30145
sg220
(lp30146
g222
asg223
I01
sg224
(tsg227
(dp30147
S'support_code_apply'
p30148
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30149
ssg231
(dp30150
I0
(lp30151
I0
assg234
(lp30152
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30153
asbsbsg177
g0
(g178
g2
Ntp30154
Rp30155
(dp30156
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag16867
ag0
(g7
g2
Ntp30157
Rp30158
(dp30159
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30160
sg11
S'auto_1687'
p30161
sg14
g0
(g15
g2
Ntp30162
Rp30163
(dp30164
g19
g12490
sbsg53
g0
(g54
g2
Ntp30165
Rp30166
(dp30167
g58
(lp30168
g0
(g7
g2
Ntp30169
Rp30170
(dp30171
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30172
sg11
S'auto_4599'
p30173
sg14
g0
(g15
g2
Ntp30174
Rp30175
(dp30176
g19
(lp30177
sbsg53
g0
(g54
g2
Ntp30178
Rp30179
(dp30180
g58
(lp30181
g17254
ag17560
ag17594
asg1883
g16854
sg204
(lp30182
g30170
asg14
g0
(g15
g2
Ntp30183
Rp30184
(dp30185
g4120
(lp30186
g28488
asg2143
(lp30187
g17616
asbsg2147
(dp30188
sg206
g17620
sbsg177
g0
(g178
g2
Ntp30189
Rp30190
(dp30191
g182
(I00
I00
tp30192
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag29388
asg1883
g16854
sg204
(lp30193
g30158
asg14
g0
(g15
g2
Ntp30194
Rp30195
(dp30196
g4120
(lp30197
g27305
ag2628
asg2143
(lp30198
g2146
aS"('Revert', 'GemmOptimizer')"
p30199
asbsg2147
(dp30200
sg206
g1153
sbsg177
g13362
sbag0
(g7
g2
Ntp30201
Rp30202
(dp30203
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30204
sg11
S'auto_4550'
p30205
sg14
g0
(g15
g2
Ntp30206
Rp30207
(dp30208
g19
(lp30209
sbsg53
g0
(g54
g2
Ntp30210
Rp30211
(dp30212
g58
(lp30213
g18854
asg1883
g16854
sg204
(lp30214
g30202
asg14
g0
(g15
g2
Ntp30215
Rp30216
(dp30217
g4120
(lp30218
S"('Revert', 'GemmOptimizer')"
p30219
asg2143
(lp30220
g27305
asbsg2147
(dp30221
sg206
g0
(g207
g2
Ntp30222
Rp30223
(dp30224
g211
(lp30225
I0
aI1
asg213
(lp30226
sg215
(lp30227
sg217
g218
sg219
(I01
I01
tp30228
sg220
(lp30229
g222
asg223
I01
sg224
(tsg227
(dp30230
S'support_code_apply'
p30231
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30232
ssg231
(dp30233
I0
(lp30234
I0
assg234
(lp30235
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30236
asbsbsg177
g0
(g178
g2
Ntp30237
Rp30238
(dp30239
g182
(tsg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp30240
g30106
asg14
g0
(g15
g2
Ntp30241
Rp30242
(dp30243
g4120
(lp30244
S"('Revert', 'GemmOptimizer')"
p30245
asg2143
(lp30246
g27305
asbsg2147
(dp30247
sg206
g0
(ctheano.tensor.blas
Gemm
p30248
g2
Ntp30249
Rp30250
(dp30251
g223
I00
sbsbsg177
g8154
sb(g29433
g29451
tp30252
sg28685
(g17152
g17175
tp30253
sg0
(g7
g2
Ntp30254
Rp30255
(dp30256
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30257
sg11
S'auto_1572'
p30258
sg14
g0
(g15
g2
Ntp30259
Rp30260
(dp30261
g19
g9234
sbsg53
g0
(g54
g2
Ntp30262
Rp30263
(dp30264
g58
(lp30265
g30067
ag20941
ag16998
asg1883
g16854
sg204
(lp30266
g30255
asg14
g0
(g15
g2
Ntp30267
Rp30268
(dp30269
g4120
(lp30270
g2628
asg2143
(lp30271
g2146
asbsg2147
(dp30272
sg206
g1021
sbsg177
g9449
sb(g27470
g27041
tp30273
sg0
(g7
g2
Ntp30274
Rp30275
(dp30276
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30277
sg11
S'auto_1655'
p30278
sg14
g0
(g15
g2
Ntp30279
Rp30280
(dp30281
g19
g7598
sbsg53
g0
(g54
g2
Ntp30282
Rp30283
(dp30284
g58
(lp30285
g30087
ag28329
asg1883
g16854
sg204
(lp30286
g30275
asg14
g0
(g15
g2
Ntp30287
Rp30288
(dp30289
g4120
(lp30290
g18942
asg2143
(lp30291
g2146
asbsg2147
(dp30292
sg206
g5326
sbsg177
g8001
sb(tsg30158
(g17152
g29340
tp30293
sg28673
(g17152
g17175
tp30294
sg29907
(g27997
g28015
tp30295
sg0
(g7
g2
Ntp30296
Rp30297
(dp30298
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30299
sg11
S'auto_1656'
p30300
sg14
g0
(g15
g2
Ntp30301
Rp30302
(dp30303
g19
g7573
sbsg53
g0
(g54
g2
Ntp30304
Rp30305
(dp30306
g58
(lp30307
g30275
asg1883
g16854
sg204
(lp30308
g30297
asg14
g0
(g15
g2
Ntp30309
Rp30310
(dp30311
g4120
(lp30312
g18942
asg2143
(lp30313
g2146
asbsg2147
(dp30314
sg206
g8007
sbsg177
g8022
sb(g27960
g27960
tp30315
sg0
(g149
g2
Ntp30316
Rp30317
(dp30318
g11
S'auto_1899'
p30319
sg13
Nsg14
g0
(g15
g2
Ntp30320
Rp30321
(dp30322
g19
(lp30323
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp30324
Rp30325
(dp30326
g182
(tsg183
g22018
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp30327
sg193
g194
(g195
(I0
tp30328
g197
tp30329
Rp30330
(I1
(tg189
I00
S'\x00\x00\x80?'
p30331
tp30332
bsb(tsg0
(g7
g2
Ntp30333
Rp30334
(dp30335
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30336
sg11
S'auto_1922'
p30337
sg14
g0
(g15
g2
Ntp30338
Rp30339
(dp30340
g19
(lp30341
g11951
asbsg53
g0
(g54
g2
Ntp30342
Rp30343
(dp30344
g58
(lp30345
g18905
ag29043
asg1883
g16854
sg204
(lp30346
g30334
asg14
g0
(g15
g2
Ntp30347
Rp30348
(dp30349
g4120
(lp30350
g23749
asg2143
(lp30351
g28386
asbsg2147
(dp30352
sg206
g1153
sbsg177
g0
(g178
g2
Ntp30353
Rp30354
(dp30355
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg0
(g7
g2
Ntp30356
Rp30357
(dp30358
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30359
sg11
S'auto_1968'
p30360
sg14
g0
(g15
g2
Ntp30361
Rp30362
(dp30363
g19
(lp30364
sbsg53
g0
(g54
g2
Ntp30365
Rp30366
(dp30367
g58
(lp30368
g0
(g7
g2
Ntp30369
Rp30370
(dp30371
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30372
sg11
S'auto_1977'
p30373
sg14
g0
(g15
g2
Ntp30374
Rp30375
(dp30376
g19
(lp30377
sbsg53
g0
(g54
g2
Ntp30378
Rp30379
(dp30380
g58
(lp30381
g28341
asg1883
g16854
sg204
(lp30382
g30370
asg14
g0
(g15
g2
Ntp30383
Rp30384
(dp30385
g4120
(lp30386
g23749
asg2143
(lp30387
g18942
asbsg2147
(dp30388
sg206
g0
(g207
g2
Ntp30389
Rp30390
(dp30391
g211
(lp30392
sg213
(lp30393
sg215
(lp30394
I0
aI1
asg217
g218
sg219
(tsg220
(lp30395
g222
asg223
I01
sg224
g8013
sg227
(dp30396
S'support_code_apply'
p30397
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30398
ssg231
(dp30399
I0
(lp30400
I0
assg234
(lp30401
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30402
asbsbsg177
g0
(g178
g2
Ntp30403
Rp30404
(dp30405
g182
(I01
I01
tp30406
sg183
g7715
sg185
g7718
sg192
I00
sg52
Nsbsbag27160
asg1883
g16854
sg204
(lp30407
g30357
asg14
g0
(g15
g2
Ntp30408
Rp30409
(dp30410
g4120
(lp30411
g23749
asg2143
(lp30412
g18942
asbsg2147
(dp30413
sg206
g5417
sbsg177
g0
(g178
g2
Ntp30414
Rp30415
(dp30416
g182
(I01
I01
tp30417
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp30418
sg18892
(tsg27084
(g29433
g29451
tp30419
sg23152
(g17152
g17175
tp30420
sg23287
(g17152
g17175
tp30421
sg0
(g7
g2
Ntp30422
Rp30423
(dp30424
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30425
sg11
S'auto_1576'
p30426
sg14
g0
(g15
g2
Ntp30427
Rp30428
(dp30429
g19
g9060
sbsg53
g0
(g54
g2
Ntp30430
Rp30431
(dp30432
g58
(lp30433
g0
(g7
g2
Ntp30434
Rp30435
(dp30436
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30437
sg11
S'auto_1575'
p30438
sg14
g0
(g15
g2
Ntp30439
Rp30440
(dp30441
g19
g9089
sbsg53
g0
(g54
g2
Ntp30442
Rp30443
(dp30444
g58
(lp30445
g16934
asg1883
g16854
sg204
(lp30446
g30435
asg14
g0
(g15
g2
Ntp30447
Rp30448
(dp30449
g4120
(lp30450
g2628
asg2143
(lp30451
g2146
asbsg2147
(dp30452
sg206
g499
sbsg177
g9115
sbag16942
asg1883
g16854
sg204
(lp30453
g30423
asg14
g0
(g15
g2
Ntp30454
Rp30455
(dp30456
g4120
(lp30457
g2628
asg2143
(lp30458
g2146
asbsg2147
(dp30459
sg206
g621
sbsg177
g9173
sb(g27470
g27041
tp30460
sg27072
(g27470
g27041
tp30461
sg23794
(g29433
g29451
tp30462
sg0
(g7
g2
Ntp30463
Rp30464
(dp30465
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30466
sg11
S'auto_1910'
p30467
sg14
g0
(g15
g2
Ntp30468
Rp30469
(dp30470
g19
(lp30471
sbsg53
g0
(g54
g2
Ntp30472
Rp30473
(dp30474
g58
(lp30475
g29266
asg1883
g16854
sg204
(lp30476
g30464
asg14
g0
(g15
g2
Ntp30477
Rp30478
(dp30479
g4120
(lp30480
g28488
asg2143
(lp30481
g23749
asbsg2147
(dp30482
sg206
g0
(g207
g2
Ntp30483
Rp30484
(dp30485
g211
(lp30486
sg213
(lp30487
sg215
(lp30488
I0
asg217
g218
sg219
(tsg220
(lp30489
g222
asg223
I01
sg224
(g225
tp30490
sg227
(dp30491
S'support_code_apply'
p30492
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30493
ssg231
(dp30494
I0
(lp30495
I0
assg234
(lp30496
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30497
asbsbsg177
g0
(g178
g2
Ntp30498
Rp30499
(dp30500
g182
(I01
tp30501
sg183
g29886
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp30502
sg20319
(g27960
g27960
tp30503
sg0
(g7
g2
Ntp30504
Rp30505
(dp30506
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30507
sg11
S'auto_1787'
p30508
sg14
g0
(g15
g2
Ntp30509
Rp30510
(dp30511
g19
g15820
sbsg53
g0
(g54
g2
Ntp30512
Rp30513
(dp30514
g58
(lp30515
g0
(g7
g2
Ntp30516
Rp30517
(dp30518
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30519
sg11
S'auto_1786'
p30520
sg14
g0
(g15
g2
Ntp30521
Rp30522
(dp30523
g19
g15845
sbsg53
g0
(g54
g2
Ntp30524
Rp30525
(dp30526
g58
(lp30527
g27544
ag0
(g7
g2
Ntp30528
Rp30529
(dp30530
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30531
sg11
S'auto_1784'
p30532
sg14
g0
(g15
g2
Ntp30533
Rp30534
(dp30535
g19
g15917
sbsg53
g0
(g54
g2
Ntp30536
Rp30537
(dp30538
g58
(lp30539
g0
(g7
g2
Ntp30540
Rp30541
(dp30542
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30543
sg11
S'auto_1783'
p30544
sg14
g0
(g15
g2
Ntp30545
Rp30546
(dp30547
g19
g15942
sbsg53
g0
(g54
g2
Ntp30548
Rp30549
(dp30550
g58
(lp30551
g17838
ag17848
asg1883
g16854
sg204
(lp30552
g30541
asg14
g0
(g15
g2
Ntp30553
Rp30554
(dp30555
g4120
(lp30556
g2628
asg2143
(lp30557
g2146
asbsg2147
(dp30558
sg206
g1220
sbsg177
g16047
sbag0
(g7
g2
Ntp30559
Rp30560
(dp30561
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30562
sg11
S'auto_1781'
p30563
sg14
g0
(g15
g2
Ntp30564
Rp30565
(dp30566
g19
g16057
sbsg53
g0
(g54
g2
Ntp30567
Rp30568
(dp30569
g58
(lp30570
g17857
ag17263
asg1883
g16854
sg204
(lp30571
g30560
asg14
g0
(g15
g2
Ntp30572
Rp30573
(dp30574
g4120
(lp30575
g2628
asg2143
(lp30576
g2146
asbsg2147
(dp30577
sg206
g1220
sbsg177
g16344
sbasg1883
g16854
sg204
(lp30578
g30529
asg14
g0
(g15
g2
Ntp30579
Rp30580
(dp30581
g4120
(lp30582
g2628
asg2143
(lp30583
g2146
asbsg2147
(dp30584
sg206
g1153
sbsg177
g16351
sbasg1883
g16854
sg204
(lp30585
g30517
asg14
g0
(g15
g2
Ntp30586
Rp30587
(dp30588
g4120
(lp30589
g2628
asg2143
(lp30590
g2146
asbsg2147
(dp30591
sg206
g1220
sbsg177
g16358
sbag0
(g7
g2
Ntp30592
Rp30593
(dp30594
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30595
sg11
S'auto_1826'
p30596
sg14
g0
(g15
g2
Ntp30597
Rp30598
(dp30599
g23736
g23737
sg19
(lp30600
sbsg53
g0
(g54
g2
Ntp30601
Rp30602
(dp30603
g58
(lp30604
g18218
ag0
(g7
g2
Ntp30605
Rp30606
(dp30607
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30608
sg11
S'auto_1777'
p30609
sg14
g0
(g15
g2
Ntp30610
Rp30611
(dp30612
g19
g16393
sbsg53
g0
(g54
g2
Ntp30613
Rp30614
(dp30615
g58
(lp30616
g0
(g7
g2
Ntp30617
Rp30618
(dp30619
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30620
sg11
S'auto_1776'
p30621
sg14
g0
(g15
g2
Ntp30622
Rp30623
(dp30624
g19
g16418
sbsg53
g0
(g54
g2
Ntp30625
Rp30626
(dp30627
g58
(lp30628
g30047
ag0
(g7
g2
Ntp30629
Rp30630
(dp30631
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30632
sg11
S'auto_1773'
p30633
sg14
g0
(g15
g2
Ntp30634
Rp30635
(dp30636
g19
g16558
sbsg53
g0
(g54
g2
Ntp30637
Rp30638
(dp30639
g58
(lp30640
g17280
ag0
(g7
g2
Ntp30641
Rp30642
(dp30643
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30644
sg11
S'auto_4615'
p30645
sg14
g0
(g15
g2
Ntp30646
Rp30647
(dp30648
g19
(lp30649
sbsg53
g0
(g54
g2
Ntp30650
Rp30651
(dp30652
g58
(lp30653
g17263
asg1883
g16854
sg204
(lp30654
g30642
asg14
g0
(g15
g2
Ntp30655
Rp30656
(dp30657
g4120
(lp30658
g2628
asg2143
(lp30659
g27037
asbsg2147
(dp30660
sg206
g6009
sbsg177
g0
(g178
g2
Ntp30661
Rp30662
(dp30663
g182
(I00
tp30664
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp30665
g30630
asg14
g0
(g15
g2
Ntp30666
Rp30667
(dp30668
g4120
(lp30669
g2628
asg2143
(lp30670
g2146
asbsg2147
(dp30671
sg206
g1220
sbsg177
g16737
sbasg1883
g16854
sg204
(lp30672
g30618
asg14
g0
(g15
g2
Ntp30673
Rp30674
(dp30675
g4120
(lp30676
g2628
asg2143
(lp30677
g2146
asbsg2147
(dp30678
sg206
g1153
sbsg177
g16744
sbasg1883
g16854
sg204
(lp30679
g30606
asg14
g0
(g15
g2
Ntp30680
Rp30681
(dp30682
g4120
(lp30683
g2628
asg2143
(lp30684
g2146
asbsg2147
(dp30685
sg206
g7880
sbsg177
g16751
sbasg1883
g16854
sg204
(lp30686
g30593
asg14
g0
(g15
g2
Ntp30687
Rp30688
(dp30689
g4120
(lp30690
g2628
asg2143
(lp30691
g23749
asbsg2147
(dp30692
sg206
g1153
sbsg177
g0
(g178
g2
Ntp30693
Rp30694
(dp30695
g182
(I00
tp30696
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp30697
g30505
asg14
g0
(g15
g2
Ntp30698
Rp30699
(dp30700
g4120
(lp30701
g2628
asg2143
(lp30702
g2146
asbsg2147
(dp30703
sg206
g5326
sbsg177
g16812
sb(g0
(g7
g2
Ntp30704
Rp30705
(dp30706
g11
S'auto_1812'
p30707
sg13
I0
sg14
g0
(g15
g2
Ntp30708
Rp30709
(dp30710
g19
(lp30711
sbsg52
Nsg53
g0
(g54
g2
Ntp30712
Rp30713
(dp30714
g58
(lp30715
g17848
asg14
g0
(g15
g2
Ntp30716
Rp30717
sg204
(lp30718
g30705
asg206
g0
(g2888
g2
Ntp30719
Rp30720
(dp30721
g2892
I0
sbsbsg177
g2894
sbtp30722
sg26150
(g17152
g29340
tp30723
sg0
(g7
g2
Ntp30724
Rp30725
(dp30726
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30727
sg11
S'auto_1708'
p30728
sg14
g0
(g15
g2
Ntp30729
Rp30730
(dp30731
g19
g12064
sbsg53
g0
(g54
g2
Ntp30732
Rp30733
(dp30734
g58
(lp30735
g28362
ag28465
asg1883
g16854
sg204
(lp30736
g30725
asg14
g0
(g15
g2
Ntp30737
Rp30738
(dp30739
g4120
(lp30740
g18942
asg2143
(lp30741
g2146
asbsg2147
(dp30742
sg206
g7850
sbsg177
g12086
sb(tsg0
(g7
g2
Ntp30743
Rp30744
(dp30745
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30746
sg11
S'auto_1926'
p30747
sg14
g0
(g15
g2
Ntp30748
Rp30749
(dp30750
g19
(lp30751
sbsg53
g0
(g54
g2
Ntp30752
Rp30753
(dp30754
g58
(lp30755
g28341
asg1883
g16854
sg204
(lp30756
g30744
asg14
g0
(g15
g2
Ntp30757
Rp30758
(dp30759
g4120
(lp30760
g28488
asg2143
(lp30761
g18942
asbsg2147
(dp30762
sg206
g3295
sbsg177
g0
(g178
g2
Ntp30763
Rp30764
(dp30765
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg30370
(g27960
g27960
tp30766
sg0
(g7
g2
Ntp30767
Rp30768
(dp30769
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30770
sg11
S'auto_1788'
p30771
sg14
g0
(g15
g2
Ntp30772
Rp30773
(dp30774
g19
g15795
sbsg53
g0
(g54
g2
Ntp30775
Rp30776
(dp30777
g58
(lp30778
g17310
ag30505
asg1883
g16854
sg204
(lp30779
g30768
asg14
g0
(g15
g2
Ntp30780
Rp30781
(dp30782
g4120
(lp30783
g2628
asg2143
(lp30784
g2146
asbsg2147
(dp30785
sg206
g5417
sbsg177
g16819
sb(g0
(g7
g2
Ntp30786
Rp30787
(dp30788
g11
S'auto_1790'
p30789
sg13
I0
sg14
g0
(g15
g2
Ntp30790
Rp30791
(dp30792
g19
(lp30793
sbsg52
Nsg53
g0
(g54
g2
Ntp30794
Rp30795
(dp30796
g58
(lp30797
g17310
asg14
g0
(g15
g2
Ntp30798
Rp30799
sg204
(lp30800
g30787
asg206
g0
(g2888
g2
Ntp30801
Rp30802
(dp30803
g2892
I0
sbsbsg177
g2894
sbtp30804
sg0
(g7
g2
Ntp30805
Rp30806
(dp30807
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30808
sg11
S'auto_1709'
p30809
sg14
g0
(g15
g2
Ntp30810
Rp30811
(dp30812
g19
g12039
sbsg53
g0
(g54
g2
Ntp30813
Rp30814
(dp30815
g58
(lp30816
g28341
ag30725
asg1883
g16854
sg204
(lp30817
g30806
asg14
g0
(g15
g2
Ntp30818
Rp30819
(dp30820
g4120
(lp30821
g18942
asg2143
(lp30822
g2146
asbsg2147
(dp30823
sg206
g5417
sbsg177
g12092
sb(tsg26708
(g27960
tp30824
sg0
(g7
g2
Ntp30825
Rp30826
(dp30827
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30828
sg11
S'auto_1710'
p30829
sg14
g0
(g15
g2
Ntp30830
Rp30831
(dp30832
g19
g11925
sbsg53
g0
(g54
g2
Ntp30833
Rp30834
(dp30835
g58
(lp30836
g28831
ag28465
asg1883
g16854
sg204
(lp30837
g30826
asg14
g0
(g15
g2
Ntp30838
Rp30839
(dp30840
g4120
(lp30841
g18942
asg2143
(lp30842
g2146
asbsg2147
(dp30843
sg206
g7850
sbsg177
g12012
sb(tsg0
(g149
g2
Ntp30844
Rp30845
(dp30846
g11
S'auto_2038'
p30847
sg13
Nsg14
g0
(g15
g2
Ntp30848
Rp30849
(dp30850
g19
(lp30851
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp30852
Rp30853
(dp30854
g182
(tsg183
S'float32'
p30855
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp30856
sg193
g194
(g195
(I0
tp30857
g197
tp30858
Rp30859
(I1
(tg189
I00
S'\x00\x00\x00?'
p30860
tp30861
bsb(tsg0
(g7
g2
Ntp30862
Rp30863
(dp30864
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30865
sg11
S'auto_1711'
p30866
sg14
g0
(g15
g2
Ntp30867
Rp30868
(dp30869
g19
g11900
sbsg53
g0
(g54
g2
Ntp30870
Rp30871
(dp30872
g58
(lp30873
g28341
ag30826
asg1883
g16854
sg204
(lp30874
g30863
asg14
g0
(g15
g2
Ntp30875
Rp30876
(dp30877
g4120
(lp30878
g18942
asg2143
(lp30879
g2146
asbsg2147
(dp30880
sg206
g5417
sbsg177
g12018
sb(tsg0
(g7
g2
Ntp30881
Rp30882
(dp30883
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30884
sg11
S'auto_1712'
p30885
sg14
g0
(g15
g2
Ntp30886
Rp30887
(dp30888
g19
g11875
sbsg53
g0
(g54
g2
Ntp30889
Rp30890
(dp30891
g58
(lp30892
g30863
asg1883
g16854
sg204
(lp30893
g30882
asg14
g0
(g15
g2
Ntp30894
Rp30895
(dp30896
g4120
(lp30897
g18942
asg2143
(lp30898
g2146
asbsg2147
(dp30899
sg206
g7880
sbsg177
g12024
sb(tsg0
(g7
g2
Ntp30900
Rp30901
(dp30902
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30903
sg11
S'auto_1979'
p30904
sg14
g0
(g15
g2
Ntp30905
Rp30906
(dp30907
g19
(lp30908
sbsg53
g0
(g54
g2
Ntp30909
Rp30910
(dp30911
g58
(lp30912
g28362
asg1883
g16854
sg204
(lp30913
g30901
asg14
g0
(g15
g2
Ntp30914
Rp30915
(dp30916
g4120
(lp30917
g28488
asg2143
(lp30918
g18942
asbsg2147
(dp30919
sg206
g0
(g207
g2
Ntp30920
Rp30921
(dp30922
g211
(lp30923
sg213
(lp30924
sg215
(lp30925
I0
aI1
asg217
g218
sg219
(tsg220
(lp30926
g222
asg223
I01
sg224
g8013
sg227
(dp30927
S'support_code_apply'
p30928
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30929
ssg231
(dp30930
I0
(lp30931
I0
assg234
(lp30932
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p30933
asbsbsg177
g0
(g178
g2
Ntp30934
Rp30935
(dp30936
g182
(I01
I01
tp30937
sg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp30938
sg17594
(tsg0
(g7
g2
Ntp30939
Rp30940
(dp30941
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30942
sg11
S'auto_1713'
p30943
sg14
g0
(g15
g2
Ntp30944
Rp30945
(dp30946
g19
g11850
sbsg53
g0
(g54
g2
Ntp30947
Rp30948
(dp30949
g58
(lp30950
g16916
ag30882
asg1883
g16854
sg204
(lp30951
g30940
asg14
g0
(g15
g2
Ntp30952
Rp30953
(dp30954
g4120
(lp30955
g18942
asg2143
(lp30956
g2146
asbsg2147
(dp30957
sg206
g1220
sbsg177
g12030
sb(tsg19848
(g28273
g28291
tp30958
sg19602
(g27960
g27960
tp30959
sg0
(g7
g2
Ntp30960
Rp30961
(dp30962
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30963
sg11
S'auto_1714'
p30964
sg14
g0
(g15
g2
Ntp30965
Rp30966
(dp30967
g19
g11825
sbsg53
g0
(g54
g2
Ntp30968
Rp30969
(dp30970
g58
(lp30971
g30940
ag30806
asg1883
g16854
sg204
(lp30972
g30961
asg14
g0
(g15
g2
Ntp30973
Rp30974
(dp30975
g4120
(lp30976
g18942
asg2143
(lp30977
g2146
asbsg2147
(dp30978
sg206
g5326
sbsg177
g12098
sb(tsg18862
(g27960
g27960
tp30979
sg0
(g7
g2
Ntp30980
Rp30981
(dp30982
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp30983
sg11
S'auto_1563'
p30984
sg14
g0
(g15
g2
Ntp30985
Rp30986
(dp30987
g19
g9676
sbsg53
g0
(g54
g2
Ntp30988
Rp30989
(dp30990
g58
(lp30991
g29380
asg1883
g16854
sg204
(lp30992
g30981
asg14
g0
(g15
g2
Ntp30993
Rp30994
(dp30995
g4120
(lp30996
g4913
asg2143
(lp30997
g2146
ag2146
asbsg2147
(dp30998
sg206
g9702
sbsg177
g9717
sb(g27960
g27960
tp30999
sg28109
(g27041
g17175
tp31000
sg0
(g7
g2
Ntp31001
Rp31002
(dp31003
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31004
sg11
S'auto_1715'
p31005
sg14
g0
(g15
g2
Ntp31006
Rp31007
(dp31008
g19
g11800
sbsg53
g0
(g54
g2
Ntp31009
Rp31010
(dp31011
g58
(lp31012
g30961
asg1883
g16854
sg204
(lp31013
g31002
asg14
g0
(g15
g2
Ntp31014
Rp31015
(dp31016
g4120
(lp31017
g18942
asg2143
(lp31018
g2146
asbsg2147
(dp31019
sg206
g12104
sbsg177
g12119
sb(g27960
tp31020
sg17088
(tsg0
(g7
g2
Ntp31021
Rp31022
(dp31023
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31024
sg11
S'auto_2036'
p31025
sg14
g0
(g15
g2
Ntp31026
Rp31027
(dp31028
g23736
g23737
sg19
(lp31029
sbsg53
g0
(g54
g2
Ntp31030
Rp31031
(dp31032
g58
(lp31033
g17411
ag0
(g7
g2
Ntp31034
Rp31035
(dp31036
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31037
sg11
S'auto_4484'
p31038
sg14
g0
(g15
g2
Ntp31039
Rp31040
(dp31041
g19
(lp31042
g12549
asbsg53
g0
(g54
g2
Ntp31043
Rp31044
(dp31045
g58
(lp31046
g29197
ag17560
asg1883
g16854
sg204
(lp31047
g31035
asg14
g0
(g15
g2
Ntp31048
Rp31049
(dp31050
g4120
(lp31051
g17616
asg2143
(lp31052
g2145
asbsg2147
(dp31053
sg206
g2151
sbsg177
g0
(g178
g2
Ntp31054
Rp31055
(dp31056
g182
(I00
I00
tp31057
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag29401
asg1883
g16854
sg204
(lp31058
g31022
asg14
g0
(g15
g2
Ntp31059
Rp31060
(dp31061
g4120
(lp31062
g17616
asg2143
(lp31063
g27210
asbsg2147
(dp31064
sg206
g1220
sbsg177
g0
(g178
g2
Ntp31065
Rp31066
(dp31067
g182
(I00
I00
tp31068
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g17152
g29340
tp31069
sg0
(g7
g2
Ntp31070
Rp31071
(dp31072
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31073
sg11
S'auto_1941'
p31074
sg14
g0
(g15
g2
Ntp31075
Rp31076
(dp31077
g23736
g23737
sg19
(lp31078
sbsg53
g0
(g54
g2
Ntp31079
Rp31080
(dp31081
g58
(lp31082
g27084
asg1883
g16854
sg204
(lp31083
g31071
asg14
g0
(g15
g2
Ntp31084
Rp31085
(dp31086
g4120
(lp31087
g28082
asg2143
(lp31088
g23749
asbsg2147
(dp31089
sg206
g0
(g497
g2
Ntp31090
Rp31091
(dp31092
g501
g502
sg503
g10851
sg52
S'Elemwise{neg,no_inplace}'
p31093
sg511
(dp31094
sg513
g10857
sg516
g0
(g517
g2
Ntp31095
Rp31096
(dp31097
g521
I0
sg522
(dp31098
sbsg524
I00
sg525
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p31099
sbsbsg177
g0
(g178
g2
Ntp31100
Rp31101
(dp31102
g182
(I00
I00
tp31103
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27470
g27041
tp31104
sg0
(g7
g2
Ntp31105
Rp31106
(dp31107
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31108
sg11
S'auto_1833'
p31109
sg14
g0
(g15
g2
Ntp31110
Rp31111
(dp31112
g23736
g23737
sg19
(lp31113
sbsg53
g0
(g54
g2
Ntp31114
Rp31115
(dp31116
g58
(lp31117
g0
(g7
g2
Ntp31118
Rp31119
(dp31120
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31121
sg11
S'auto_1756'
p31122
sg14
g0
(g15
g2
Ntp31123
Rp31124
(dp31125
g19
g14134
sbsg53
g0
(g54
g2
Ntp31126
Rp31127
(dp31128
g58
(lp31129
g0
(g7
g2
Ntp31130
Rp31131
(dp31132
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31133
sg11
S'auto_1755'
p31134
sg14
g0
(g15
g2
Ntp31135
Rp31136
(dp31137
g19
g14159
sbsg53
g0
(g54
g2
Ntp31138
Rp31139
(dp31140
g58
(lp31141
g27108
ag29128
asg1883
g16854
sg204
(lp31142
g31131
asg14
g0
(g15
g2
Ntp31143
Rp31144
(dp31145
g4120
(lp31146
g27210
asg2143
(lp31147
g2146
asbsg2147
(dp31148
sg206
g1220
sbsg177
g15199
sbag29944
asg1883
g16854
sg204
(lp31149
g31119
asg14
g0
(g15
g2
Ntp31150
Rp31151
(dp31152
g4120
(lp31153
g27210
asg2143
(lp31154
g2146
asbsg2147
(dp31155
sg206
g5326
sbsg177
g15653
sbasg1883
g16854
sg204
(lp31156
g31106
asg14
g0
(g15
g2
Ntp31157
Rp31158
(dp31159
g4120
(lp31160
g28082
asg2143
(lp31161
g23749
asbsg2147
(dp31162
sg206
g31091
sbsg177
g0
(g178
g2
Ntp31163
Rp31164
(dp31165
g182
(I00
I00
tp31166
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g29340
g29489
tp31167
sg28154
(g27470
g27041
tp31168
sg27520
(g29818
tp31169
sg0
(g7
g2
Ntp31170
Rp31171
(dp31172
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31173
sg11
S'auto_1988'
p31174
sg14
g0
(g15
g2
Ntp31175
Rp31176
(dp31177
g19
(lp31178
g7574
asbsg53
g0
(g54
g2
Ntp31179
Rp31180
(dp31181
g58
(lp31182
g30370
ag27231
asg1883
g16854
sg204
(lp31183
g31171
asg14
g0
(g15
g2
Ntp31184
Rp31185
(dp31186
g4120
(lp31187
g23749
asg2143
(lp31188
g18942
asbsg2147
(dp31189
sg206
g5417
sbsg177
g0
(g178
g2
Ntp31190
Rp31191
(dp31192
g182
(I01
I01
tp31193
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31194
sg0
(g7
g2
Ntp31195
Rp31196
(dp31197
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31198
sg11
S'auto_1667'
p31199
sg14
g0
(g15
g2
Ntp31200
Rp31201
(dp31202
g19
g13786
sbsg53
g0
(g54
g2
Ntp31203
Rp31204
(dp31205
g58
(lp31206
g0
(g149
g2
Ntp31207
Rp31208
(dp31209
g11
S'auto_1606'
p31210
sg13
Nsg14
g0
(g15
g2
Ntp31211
Rp31212
(dp31213
g19
g10764
sg175
Nsbsg52
Nsg177
g10783
sg1892
(lp31214
sg193
g10788
sbasg1883
g16854
sg204
(lp31215
g31196
asg14
g0
(g15
g2
Ntp31216
Rp31217
(dp31218
g4120
(lp31219
g4913
asg2143
(lp31220
g2146
ag2146
asbsg2147
(dp31221
sg206
g13808
sbsg177
g13823
sb(g27960
tp31222
sg0
(g149
g2
Ntp31223
Rp31224
(dp31225
g11
S'auto_1942'
p31226
sg13
Nsg14
g0
(g15
g2
Ntp31227
Rp31228
(dp31229
g19
(lp31230
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31231
Rp31232
(dp31233
g182
(tsg183
S'float32'
p31234
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31235
sg193
g194
(g195
(I0
tp31236
g197
tp31237
Rp31238
(I1
(tg189
I00
S'\x00\x00\x80\xbf'
p31239
tp31240
bsb(tsg28167
(g29433
g29451
tp31241
sg17074
(g27960
g27960
tp31242
sg29931
(g28273
g28291
tp31243
sg0
(g149
g2
Ntp31244
Rp31245
(dp31246
g11
S'auto_1914'
p31247
sg13
Nsg14
g0
(g15
g2
Ntp31248
Rp31249
(dp31250
g19
(lp31251
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31252
Rp31253
(dp31254
g182
(tsg183
S'int8'
p31255
sg185
g7718
sg192
I00
sg52
Nsbsg1892
(lp31256
sg193
g194
(g195
(I0
tp31257
g197
tp31258
Rp31259
(I1
(tg7718
I00
g7724
tp31260
bsb(tsg0
(g149
g2
Ntp31261
Rp31262
(dp31263
g11
S'auto_4310'
p31264
sg13
Nsg14
g0
(g15
g2
Ntp31265
Rp31266
(dp31267
g19
(lp31268
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31269
Rp31270
(dp31271
g182
(tsg183
S'float32'
p31272
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31273
sg193
g194
(g195
(I0
tp31274
g197
tp31275
Rp31276
(I1
(tg189
I00
S'\x00\x00\x80?'
p31277
tp31278
bsb(tsg0
(g7
g2
Ntp31279
Rp31280
(dp31281
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31282
sg11
S'auto_1874'
p31283
sg14
g0
(g15
g2
Ntp31284
Rp31285
(dp31286
g19
(lp31287
sbsg53
g0
(g54
g2
Ntp31288
Rp31289
(dp31290
g58
(lp31291
g0
(g7
g2
Ntp31292
Rp31293
(dp31294
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31295
sg11
S'auto_1883'
p31296
sg14
g0
(g15
g2
Ntp31297
Rp31298
(dp31299
g19
(lp31300
sbsg53
g0
(g54
g2
Ntp31301
Rp31302
(dp31303
g58
(lp31304
g28341
asg1883
g16854
sg204
(lp31305
g31293
asg14
g0
(g15
g2
Ntp31306
Rp31307
(dp31308
g4120
(lp31309
g23749
asg2143
(lp31310
g18942
asbsg2147
(dp31311
sg206
g0
(g207
g2
Ntp31312
Rp31313
(dp31314
g211
(lp31315
sg213
(lp31316
sg215
(lp31317
I0
asg217
g218
sg219
(tsg220
(lp31318
g222
asg223
I01
sg224
g12110
sg227
(dp31319
S'support_code_apply'
p31320
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31321
ssg231
(dp31322
I0
(lp31323
I0
assg234
(lp31324
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31325
asbsbsg177
g0
(g178
g2
Ntp31326
Rp31327
(dp31328
g182
(I01
tp31329
sg183
g7715
sg185
g7718
sg192
I00
sg52
Nsbsbag27596
asg1883
g16854
sg204
(lp31330
g31280
asg14
g0
(g15
g2
Ntp31331
Rp31332
(dp31333
g4120
(lp31334
g23749
asg2143
(lp31335
g18942
asbsg2147
(dp31336
sg206
g5417
sbsg177
g0
(g178
g2
Ntp31337
Rp31338
(dp31339
g182
(I01
tp31340
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp31341
sg0
(g7
g2
Ntp31342
Rp31343
(dp31344
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31345
sg11
S'auto_2012'
p31346
sg14
g0
(g15
g2
Ntp31347
Rp31348
(dp31349
g19
(lp31350
sbsg53
g0
(g54
g2
Ntp31351
Rp31352
(dp31353
g58
(lp31354
g29775
asg1883
g16854
sg204
(lp31355
g31343
asg14
g0
(g15
g2
Ntp31356
Rp31357
(dp31358
g4120
(lp31359
g18942
asg2143
(lp31360
g28386
asbsg2147
(dp31361
sg206
g0
(g207
g2
Ntp31362
Rp31363
(dp31364
g211
(lp31365
sg213
(lp31366
sg215
(lp31367
sg217
g218
sg219
(tsg220
(lp31368
g222
asg223
I01
sg224
(tsg227
(dp31369
S'support_code_apply'
p31370
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31371
ssg231
(dp31372
I0
(lp31373
I0
assg234
(lp31374
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31375
asbsbsg177
g0
(g178
g2
Ntp31376
Rp31377
(dp31378
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg0
(g7
g2
Ntp31379
Rp31380
(dp31381
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31382
sg11
S'auto_1894'
p31383
sg14
g0
(g15
g2
Ntp31384
Rp31385
(dp31386
g19
(lp31387
g11801
asbsg53
g0
(g54
g2
Ntp31388
Rp31389
(dp31390
g58
(lp31391
g31293
ag27666
asg1883
g16854
sg204
(lp31392
g31380
asg14
g0
(g15
g2
Ntp31393
Rp31394
(dp31395
g4120
(lp31396
g23749
asg2143
(lp31397
g18942
asbsg2147
(dp31398
sg206
g5417
sbsg177
g0
(g178
g2
Ntp31399
Rp31400
(dp31401
g182
(I01
tp31402
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp31403
sg19619
(g27960
g27960
tp31404
sg23918
(g27470
g27041
tp31405
sg27231
(g27960
g27960
tp31406
sg0
(g7
g2
Ntp31407
Rp31408
(dp31409
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31410
sg11
S'auto_1918'
p31411
sg14
g0
(g15
g2
Ntp31412
Rp31413
(dp31414
g19
(lp31415
sbsg53
g0
(g54
g2
Ntp31416
Rp31417
(dp31418
g58
(lp31419
g29775
asg1883
g16854
sg204
(lp31420
g31408
asg14
g0
(g15
g2
Ntp31421
Rp31422
(dp31423
g4120
(lp31424
g18942
asg2143
(lp31425
g28386
asbsg2147
(dp31426
sg206
g0
(g207
g2
Ntp31427
Rp31428
(dp31429
g211
(lp31430
sg213
(lp31431
sg215
(lp31432
sg217
g218
sg219
(tsg220
(lp31433
g222
asg223
I01
sg224
(tsg227
(dp31434
S'support_code_apply'
p31435
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31436
ssg231
(dp31437
I0
(lp31438
I0
assg234
(lp31439
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31440
asbsbsg177
g0
(g178
g2
Ntp31441
Rp31442
(dp31443
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg0
(g7
g2
Ntp31444
Rp31445
(dp31446
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31447
sg11
S'auto_2011'
p31448
sg14
g0
(g15
g2
Ntp31449
Rp31450
(dp31451
g19
(lp31452
sbsg53
g0
(g54
g2
Ntp31453
Rp31454
(dp31455
g58
(lp31456
g28341
asg1883
g16854
sg204
(lp31457
g31445
asg14
g0
(g15
g2
Ntp31458
Rp31459
(dp31460
g4120
(lp31461
g28488
asg2143
(lp31462
g28386
asbsg2147
(dp31463
sg206
g3295
sbsg177
g0
(g178
g2
Ntp31464
Rp31465
(dp31466
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg0
(g7
g2
Ntp31467
Rp31468
(dp31469
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31470
sg11
S'auto_2035'
p31471
sg14
g0
(g15
g2
Ntp31472
Rp31473
(dp31474
g19
(lp31475
sbsg53
g0
(g54
g2
Ntp31476
Rp31477
(dp31478
g58
(lp31479
g29530
asg1883
g16854
sg204
(lp31480
g31468
asg14
g0
(g15
g2
Ntp31481
Rp31482
(dp31483
g4120
(lp31484
g28488
asg2143
(lp31485
g27210
asbsg2147
(dp31486
sg206
g0
(g207
g2
Ntp31487
Rp31488
(dp31489
g211
(lp31490
sg213
(lp31491
sg215
(lp31492
I0
aI1
asg217
g218
sg219
(tsg220
(lp31493
g222
asg223
I01
sg224
(g225
g225
tp31494
sg227
(dp31495
S'support_code_apply'
p31496
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31497
ssg231
(dp31498
I0
(lp31499
I0
assg234
(lp31500
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31501
asbsbsg177
g0
(g178
g2
Ntp31502
Rp31503
(dp31504
g182
(I01
I01
tp31505
sg183
S'float32'
p31506
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31507
sg27096
(g29433
g29451
tp31508
sg0
(g7
g2
Ntp31509
Rp31510
(dp31511
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31512
sg11
S'auto_4291'
p31513
sg14
g0
(g15
g2
Ntp31514
Rp31515
(dp31516
g19
(lp31517
sbsg53
g0
(g54
g2
Ntp31518
Rp31519
(dp31520
g58
(lp31521
g16916
asg1883
g16854
sg204
(lp31522
g31510
asg14
g0
(g15
g2
Ntp31523
Rp31524
(dp31525
g4120
(lp31526
g28488
asg2143
(lp31527
g27210
asbsg2147
(dp31528
sg206
g0
(g207
g2
Ntp31529
Rp31530
(dp31531
g211
(lp31532
sg213
(lp31533
sg215
(lp31534
I0
aI1
asg217
g218
sg219
(tsg220
(lp31535
g222
asg223
I01
sg224
(g225
g225
tp31536
sg227
(dp31537
S'support_code_apply'
p31538
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31539
ssg231
(dp31540
I0
(lp31541
I0
assg234
(lp31542
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31543
asbsbsg177
g0
(g178
g2
Ntp31544
Rp31545
(dp31546
g182
(I01
I01
tp31547
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31548
sg17057
(tsg0
(g7
g2
Ntp31549
Rp31550
(dp31551
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31552
sg11
S'auto_2050'
p31553
sg14
g0
(g15
g2
Ntp31554
Rp31555
(dp31556
g19
(lp31557
sbsg53
g0
(g54
g2
Ntp31558
Rp31559
(dp31560
g58
(lp31561
g0
(g149
g2
Ntp31562
Rp31563
(dp31564
g11
S'auto_1555'
p31565
sg13
Nsg14
g0
(g15
g2
Ntp31566
Rp31567
(dp31568
g19
g883
sg175
Nsbsg52
Nsg177
g902
sg1892
(lp31569
sg193
g907
sbasg1883
g16854
sg204
(lp31570
g31550
asg14
g0
(g15
g2
Ntp31571
Rp31572
(dp31573
g4120
(lp31574
g28488
asg2143
(lp31575
g28082
asbsg2147
(dp31576
sg206
g0
(g207
g2
Ntp31577
Rp31578
(dp31579
g211
(lp31580
sg213
(lp31581
sg215
(lp31582
I0
aI1
asg217
g218
sg219
(tsg220
(lp31583
g222
asg223
I01
sg224
(g225
g225
tp31584
sg227
(dp31585
S'support_code_apply'
p31586
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31587
ssg231
(dp31588
I0
(lp31589
I0
assg234
(lp31590
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31591
asbsbsg177
g0
(g178
g2
Ntp31592
Rp31593
(dp31594
g182
(I01
I01
tp31595
sg183
S'float32'
p31596
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31597
sg25945
(g27960
g27960
tp31598
sg16867
(g29322
g28310
tp31599
sg30593
(g27489
tp31600
sg17175
(tsg0
(g7
g2
Ntp31601
Rp31602
(dp31603
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31604
sg11
S'auto_1629'
p31605
sg14
g0
(g15
g2
Ntp31606
Rp31607
(dp31608
g19
g8275
sbsg53
g0
(g54
g2
Ntp31609
Rp31610
(dp31611
g58
(lp31612
g16867
ag30158
asg1883
g16854
sg204
(lp31613
g31602
asg14
g0
(g15
g2
Ntp31614
Rp31615
(dp31616
g4120
(lp31617
g2145
asg2143
(lp31618
g2146
asbsg2147
(dp31619
sg206
g1052
sbsg177
g11061
sb(g29322
g29340
tp31620
sg28661
(g17152
g17175
tp31621
sg0
(g7
g2
Ntp31622
Rp31623
(dp31624
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31625
sg11
S'auto_1825'
p31626
sg14
g0
(g15
g2
Ntp31627
Rp31628
(dp31629
g19
(lp31630
sbsg53
g0
(g54
g2
Ntp31631
Rp31632
(dp31633
g58
(lp31634
g28416
asg1883
g16854
sg204
(lp31635
g31623
asg14
g0
(g15
g2
Ntp31636
Rp31637
(dp31638
g4120
(lp31639
g28488
asg2143
(lp31640
g23749
asbsg2147
(dp31641
sg206
g0
(g207
g2
Ntp31642
Rp31643
(dp31644
g211
(lp31645
sg213
(lp31646
sg215
(lp31647
I0
asg217
g218
sg219
(tsg220
(lp31648
g222
asg223
I01
sg224
(g225
tp31649
sg227
(dp31650
S'support_code_apply'
p31651
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31652
ssg231
(dp31653
I0
(lp31654
I0
assg234
(lp31655
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31656
asbsbsg177
g0
(g178
g2
Ntp31657
Rp31658
(dp31659
g182
(I01
tp31660
sg183
S'float32'
p31661
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp31662
sg24780
(g27997
g28015
tp31663
sg30435
(g27470
g27041
tp31664
sg0
(g7
g2
Ntp31665
Rp31666
(dp31667
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31668
sg11
S'auto_1957'
p31669
sg14
g0
(g15
g2
Ntp31670
Rp31671
(dp31672
g19
(lp31673
sbsg53
g0
(g54
g2
Ntp31674
Rp31675
(dp31676
g58
(lp31677
g28341
asg1883
g16854
sg204
(lp31678
g31666
asg14
g0
(g15
g2
Ntp31679
Rp31680
(dp31681
g4120
(lp31682
g28488
asg2143
(lp31683
g18942
asbsg2147
(dp31684
sg206
g0
(g207
g2
Ntp31685
Rp31686
(dp31687
g211
(lp31688
sg213
(lp31689
sg215
(lp31690
I0
aI1
asg217
g218
sg219
(tsg220
(lp31691
g222
asg223
I01
sg224
g8013
sg227
(dp31692
S'support_code_apply'
p31693
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31694
ssg231
(dp31695
I0
(lp31696
I0
assg234
(lp31697
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31698
asbsbsg177
g0
(g178
g2
Ntp31699
Rp31700
(dp31701
g182
(I01
I01
tp31702
sg183
g7715
sg185
g7718
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31703
sg28831
(tsg0
(g7
g2
Ntp31704
Rp31705
(dp31706
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31707
sg11
S'auto_4290'
p31708
sg14
g0
(g15
g2
Ntp31709
Rp31710
(dp31711
g19
(lp31712
sbsg53
g0
(g54
g2
Ntp31713
Rp31714
(dp31715
g58
(lp31716
g0
(g149
g2
Ntp31717
Rp31718
(dp31719
g11
S'auto_4284'
p31720
sg13
Nsg14
g0
(g15
g2
Ntp31721
Rp31722
(dp31723
g19
(lp31724
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31725
Rp31726
(dp31727
g182
(tsg183
g21648
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31728
sg193
g194
(g195
(I0
tp31729
g197
tp31730
Rp31731
(I1
(tg189
I00
S'Y\xa6R\xc1'
p31732
tp31733
bsbasg1883
g16854
sg204
(lp31734
g31705
asg14
g0
(g15
g2
Ntp31735
Rp31736
(dp31737
g4120
(lp31738
g4913
asg2143
(lp31739
g27210
ag2146
asbsg2147
(dp31740
sg206
g0
(g207
g2
Ntp31741
Rp31742
(dp31743
g211
(lp31744
sg213
(lp31745
sg215
(lp31746
I0
aI1
asg217
g218
sg219
(tsg220
(lp31747
g222
asg223
I01
sg224
(g225
g225
tp31748
sg227
(dp31749
S'support_code_apply'
p31750
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31751
ssg231
(dp31752
I0
(lp31753
I0
assg234
(lp31754
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31755
asbsbsg177
g21645
sb(g27960
g27960
tp31756
sg0
(g7
g2
Ntp31757
Rp31758
(dp31759
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31760
sg11
S'auto_1630'
p31761
sg14
g0
(g15
g2
Ntp31762
Rp31763
(dp31764
g19
g11386
sbsg53
g0
(g54
g2
Ntp31765
Rp31766
(dp31767
g58
(lp31768
g19639
ag27017
asg1883
g16854
sg204
(lp31769
g31758
asg14
g0
(g15
g2
Ntp31770
Rp31771
(dp31772
g4120
(lp31773
g27037
asg2143
(lp31774
g2146
asbsg2147
(dp31775
sg206
g7850
sbsg177
g11455
sb(g29322
g29340
tp31776
sg28537
(g27960
g27960
tp31777
sg17319
(g27960
g30787
tp31778
sg16858
(g28310
g29322
tp31779
sg17166
(g17152
g17175
tp31780
sg16902
(g27960
tp31781
sg0
(g7
g2
Ntp31782
Rp31783
(dp31784
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31785
sg11
S'auto_1634'
p31786
sg14
g0
(g15
g2
Ntp31787
Rp31788
(dp31789
g19
g11308
sbsg53
g0
(g54
g2
Ntp31790
Rp31791
(dp31792
g58
(lp31793
g0
(g149
g2
Ntp31794
Rp31795
(dp31796
g11
S'auto_2029'
p31797
sg13
Nsg14
g0
(g15
g2
Ntp31798
Rp31799
(dp31800
g23736
g23737
sg19
(lp31801
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31802
Rp31803
(dp31804
g182
(tsg183
S'float32'
p31805
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31806
sg193
g194
(g195
(I0
tp31807
g197
tp31808
Rp31809
(I1
(tg189
I00
S'\x00\x12\x83:'
p31810
tp31811
bsbasg1883
g16854
sg204
(lp31812
g31783
asg14
g0
(g15
g2
Ntp31813
Rp31814
(dp31815
g4120
(lp31816
g4913
asg2143
(lp31817
g2146
ag2146
asbsg2147
(dp31818
sg206
g11361
sbsg177
g11376
sb(g27960
g27960
tp31819
sg16916
(tsg0
(g7
g2
Ntp31820
Rp31821
(dp31822
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31823
sg11
S'auto_1851'
p31824
sg14
g0
(g15
g2
Ntp31825
Rp31826
(dp31827
g19
(lp31828
sbsg53
g0
(g54
g2
Ntp31829
Rp31830
(dp31831
g58
(lp31832
g28416
asg1883
g16854
sg204
(lp31833
g31821
asg14
g0
(g15
g2
Ntp31834
Rp31835
(dp31836
g4120
(lp31837
g28488
asg2143
(lp31838
g23749
asbsg2147
(dp31839
sg206
g0
(g207
g2
Ntp31840
Rp31841
(dp31842
g211
(lp31843
sg213
(lp31844
sg215
(lp31845
I0
aI1
asg217
g218
sg219
(tsg220
(lp31846
g222
asg223
I01
sg224
(g225
g225
tp31847
sg227
(dp31848
S'support_code_apply'
p31849
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31850
ssg231
(dp31851
I0
(lp31852
I0
assg234
(lp31853
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31854
asbsbsg177
g0
(g178
g2
Ntp31855
Rp31856
(dp31857
g182
(I01
I01
tp31858
sg183
g27988
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31859
sg0
(g149
g2
Ntp31860
Rp31861
(dp31862
g11
S'auto_2030'
p31863
sg13
Nsg14
g0
(g15
g2
Ntp31864
Rp31865
(dp31866
g19
(lp31867
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31868
Rp31869
(dp31870
g182
(tsg183
g31506
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31871
sg193
g194
(g195
(I0
tp31872
g197
tp31873
Rp31874
(I1
(tg189
I00
S'\x00\x00\x00?'
p31875
tp31876
bsb(tsg16934
(g27470
g27041
tp31877
sg27381
(g29322
g29340
tp31878
sg17347
(g27914
tp31879
sg0
(g7
g2
Ntp31880
Rp31881
(dp31882
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31883
sg11
S'auto_4331'
p31884
sg14
g0
(g15
g2
Ntp31885
Rp31886
(dp31887
g19
(lp31888
sbsg53
g0
(g54
g2
Ntp31889
Rp31890
(dp31891
g58
(lp31892
g0
(g149
g2
Ntp31893
Rp31894
(dp31895
g11
S'auto_4325'
p31896
sg13
Nsg14
g0
(g15
g2
Ntp31897
Rp31898
(dp31899
g19
(lp31900
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31901
Rp31902
(dp31903
g182
(tsg183
g17012
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31904
sg193
g194
(g195
(I0
tp31905
g197
tp31906
Rp31907
(I1
(tg189
I00
S'\x00\x00\x00\xc0'
p31908
tp31909
bsbasg1883
g16854
sg204
(lp31910
g31881
asg14
g0
(g15
g2
Ntp31911
Rp31912
(dp31913
g4120
(lp31914
g4913
asg2143
(lp31915
g27210
ag2146
asbsg2147
(dp31916
sg206
g0
(g207
g2
Ntp31917
Rp31918
(dp31919
g211
(lp31920
sg213
(lp31921
sg215
(lp31922
I0
aI1
asg217
g218
sg219
(tsg220
(lp31923
g222
asg223
I01
sg224
(g225
g225
tp31924
sg227
(dp31925
S'support_code_apply'
p31926
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31927
ssg231
(dp31928
I0
(lp31929
I0
assg234
(lp31930
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31931
asbsbsg177
g17009
sb(g27960
g27960
tp31932
sg0
(g7
g2
Ntp31933
Rp31934
(dp31935
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31936
sg11
S'auto_1959'
p31937
sg14
g0
(g15
g2
Ntp31938
Rp31939
(dp31940
g19
(lp31941
sbsg53
g0
(g54
g2
Ntp31942
Rp31943
(dp31944
g58
(lp31945
g28831
asg1883
g16854
sg204
(lp31946
g31934
asg14
g0
(g15
g2
Ntp31947
Rp31948
(dp31949
g4120
(lp31950
g28488
asg2143
(lp31951
g18942
asbsg2147
(dp31952
sg206
g0
(g207
g2
Ntp31953
Rp31954
(dp31955
g211
(lp31956
sg213
(lp31957
sg215
(lp31958
I0
aI1
asg217
g218
sg219
(tsg220
(lp31959
g222
asg223
I01
sg224
g8013
sg227
(dp31960
S'support_code_apply'
p31961
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31962
ssg231
(dp31963
I0
(lp31964
I0
assg234
(lp31965
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p31966
asbsbsg177
g0
(g178
g2
Ntp31967
Rp31968
(dp31969
g182
(I01
I01
tp31970
sg183
g7775
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp31971
sg16950
(g29340
g29489
tp31972
sg17152
(tsg0
(g149
g2
Ntp31973
Rp31974
(dp31975
g11
S'auto_1834'
p31976
sg13
Nsg14
g0
(g15
g2
Ntp31977
Rp31978
(dp31979
g19
(lp31980
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp31981
Rp31982
(dp31983
g182
(tsg183
S'float32'
p31984
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp31985
sg193
g194
(g195
(I0
tp31986
g197
tp31987
Rp31988
(I1
(tg189
I00
S'\x00\x00\x80\xbf'
p31989
tp31990
bsb(tsg0
(g7
g2
Ntp31991
Rp31992
(dp31993
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp31994
sg11
S'auto_2042'
p31995
sg14
g0
(g15
g2
Ntp31996
Rp31997
(dp31998
g19
(lp31999
sbsg53
g0
(g54
g2
Ntp32000
Rp32001
(dp32002
g58
(lp32003
g29530
asg1883
g16854
sg204
(lp32004
g31992
asg14
g0
(g15
g2
Ntp32005
Rp32006
(dp32007
g4120
(lp32008
g28488
asg2143
(lp32009
g27210
asbsg2147
(dp32010
sg206
g0
(g207
g2
Ntp32011
Rp32012
(dp32013
g211
(lp32014
sg213
(lp32015
sg215
(lp32016
I0
aI1
asg217
g218
sg219
(tsg220
(lp32017
g222
asg223
I01
sg224
(g225
g225
tp32018
sg227
(dp32019
S'support_code_apply'
p32020
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32021
ssg231
(dp32022
I0
(lp32023
I0
assg234
(lp32024
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32025
asbsbsg177
g0
(g178
g2
Ntp32026
Rp32027
(dp32028
g182
(I01
I01
tp32029
sg183
g30855
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp32030
sg0
(g7
g2
Ntp32031
Rp32032
(dp32033
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32034
sg11
S'auto_2024'
p32035
sg14
g0
(g15
g2
Ntp32036
Rp32037
(dp32038
g19
(lp32039
sbsg53
g0
(g54
g2
Ntp32040
Rp32041
(dp32042
g58
(lp32043
g28416
asg1883
g16854
sg204
(lp32044
g32032
asg14
g0
(g15
g2
Ntp32045
Rp32046
(dp32047
g4120
(lp32048
g28488
asg2143
(lp32049
g23749
asbsg2147
(dp32050
sg206
g0
(g207
g2
Ntp32051
Rp32052
(dp32053
g211
(lp32054
sg213
(lp32055
sg215
(lp32056
I0
aI1
asg217
g218
sg219
(tsg220
(lp32057
g222
asg223
I01
sg224
(g225
g225
tp32058
sg227
(dp32059
S'support_code_apply'
p32060
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32061
ssg231
(dp32062
I0
(lp32063
I0
assg234
(lp32064
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32065
asbsbsg177
g0
(g178
g2
Ntp32066
Rp32067
(dp32068
g182
(I01
I01
tp32069
sg183
S'float32'
p32070
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp32071
sg19409
(g29433
g29451
tp32072
sg27362
(g0
(g7
g2
Ntp32073
Rp32074
(dp32075
g11
S'auto_1801'
p32076
sg13
I0
sg14
g0
(g15
g2
Ntp32077
Rp32078
(dp32079
g19
(lp32080
sbsg52
Nsg53
g0
(g54
g2
Ntp32081
Rp32082
(dp32083
g58
(lp32084
g19610
asg14
g0
(g15
g2
Ntp32085
Rp32086
sg204
(lp32087
g32074
asg206
g0
(g2888
g2
Ntp32088
Rp32089
(dp32090
g2892
I0
sbsbsg177
g2894
sbg0
(g7
g2
Ntp32091
Rp32092
(dp32093
g11
S'auto_1802'
p32094
sg13
I0
sg14
g0
(g15
g2
Ntp32095
Rp32096
(dp32097
g19
(lp32098
sbsg52
Nsg53
g0
(g54
g2
Ntp32099
Rp32100
(dp32101
g58
(lp32102
g19610
asg14
g0
(g15
g2
Ntp32103
Rp32104
sg204
(lp32105
g32092
asg206
g0
(g2888
g2
Ntp32106
Rp32107
(dp32108
g2892
I1
sbsbsg177
g2894
sbtp32109
sg19610
(g32074
g32092
tp32110
sg19025
(tsg27350
(g32074
g32092
tp32111
sg29944
(g28273
g28291
tp32112
sg0
(g149
g2
Ntp32113
Rp32114
(dp32115
g11
S'auto_2046'
p32116
sg13
Nsg14
g0
(g15
g2
Ntp32117
Rp32118
(dp32119
g19
(lp32120
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32121
Rp32122
(dp32123
g182
(tsg183
g31596
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp32124
sg193
g194
(g195
(I0
tp32125
g197
tp32126
Rp32127
(I1
(tg189
I00
S'\x00\x00\x80\xbf'
p32128
tp32129
bsb(tsg31563
(tsg28341
(tsg27338
(g32074
g32092
tp32130
sg0
(g7
g2
Ntp32131
Rp32132
(dp32133
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32134
sg11
S'auto_1770'
p32135
sg14
g0
(g15
g2
Ntp32136
Rp32137
(dp32138
g19
g16661
sbsg53
g0
(g54
g2
Ntp32139
Rp32140
(dp32141
g58
(lp32142
g17263
ag0
(g149
g2
Ntp32143
Rp32144
(dp32145
g11
S'auto_4164'
p32146
sg13
Nsg14
g0
(g15
g2
Ntp32147
Rp32148
(dp32149
g19
(lp32150
g13787
asg175
g2038
(g7718
g10789
tp32151
Rp32152
sbsg52
Nsg177
g13823
sg1892
(lp32153
sg193
g194
(g195
(I0
tp32154
g197
tp32155
Rp32156
(I1
(I1
tp32157
g7718
I00
g10789
tp32158
bsbasg1883
g16854
sg204
(lp32159
g32132
asg14
g0
(g15
g2
Ntp32160
Rp32161
(dp32162
g4120
(lp32163
g27037
asg2143
(lp32164
g2146
asbsg2147
(dp32165
sg206
g7850
sbsg177
g16730
sb(g17175
tp32166
sg18056
(g29818
tp32167
sg26035
(g17152
g29340
tp32168
sg22267
(g28965
tp32169
sg0
(g149
g2
Ntp32170
Rp32171
(dp32172
g11
S'auto_4233'
p32173
sg13
Nsg14
g0
(g15
g2
Ntp32174
Rp32175
(dp32176
g19
(lp32177
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32178
Rp32179
(dp32180
g182
(tsg183
g16965
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp32181
sg193
g194
(g195
(I0
tp32182
g197
tp32183
Rp32184
(I1
(tg189
I00
S'\xb8\xc2\xe0\xc0'
p32185
tp32186
bsb(tsg0
(g7
g2
Ntp32187
Rp32188
(dp32189
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32190
sg11
S'auto_1640'
p32191
sg14
g0
(g15
g2
Ntp32192
Rp32193
(dp32194
g19
g11093
sbsg53
g0
(g54
g2
Ntp32195
Rp32196
(dp32197
g58
(lp32198
g27338
ag28789
asg1883
g16854
sg204
(lp32199
g32188
asg14
g0
(g15
g2
Ntp32200
Rp32201
(dp32202
g4120
(lp32203
g23749
asg2143
(lp32204
g2146
asbsg2147
(dp32205
sg206
g1153
sbsg177
g11560
sb(g32074
g32092
tp32206
sg18905
(tsg0
(g7
g2
Ntp32207
Rp32208
(dp32209
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32210
sg11
S'auto_1558'
p32211
sg14
g0
(g15
g2
Ntp32212
Rp32213
(dp32214
g19
g9843
sbsg53
g0
(g54
g2
Ntp32215
Rp32216
(dp32217
g58
(lp32218
g0
(g149
g2
Ntp32219
Rp32220
(dp32221
g11
S'auto_1557'
p32222
sg13
Nsg14
g0
(g15
g2
Ntp32223
Rp32224
(dp32225
g19
g682
sg175
Nsbsg52
Nsg177
g701
sg1892
(lp32226
sg193
g706
sbasg1883
g16854
sg204
(lp32227
g32208
asg14
g0
(g15
g2
Ntp32228
Rp32229
(dp32230
g4120
(lp32231
g4913
asg2143
(lp32232
g2146
ag2146
asbsg2147
(dp32233
sg206
g9869
sbsg177
g9884
sb(g27960
g27960
tp32234
sg17848
(g30705
tp32235
sg27666
(g27960
tp32236
sg0
(g7
g2
Ntp32237
Rp32238
(dp32239
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32240
sg11
S'auto_1838'
p32241
sg14
g0
(g15
g2
Ntp32242
Rp32243
(dp32244
g19
(lp32245
sbsg53
g0
(g54
g2
Ntp32246
Rp32247
(dp32248
g58
(lp32249
g31563
asg1883
g16854
sg204
(lp32250
g32238
asg14
g0
(g15
g2
Ntp32251
Rp32252
(dp32253
g4120
(lp32254
g28488
asg2143
(lp32255
g28082
asbsg2147
(dp32256
sg206
g0
(g207
g2
Ntp32257
Rp32258
(dp32259
g211
(lp32260
sg213
(lp32261
sg215
(lp32262
I0
aI1
asg217
g218
sg219
(tsg220
(lp32263
g222
asg223
I01
sg224
(g225
g225
tp32264
sg227
(dp32265
S'support_code_apply'
p32266
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32267
ssg231
(dp32268
I0
(lp32269
I0
assg234
(lp32270
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32271
asbsbsg177
g0
(g178
g2
Ntp32272
Rp32273
(dp32274
g182
(I01
I01
tp32275
sg183
g31984
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp32276
sg17271
(g27489
tp32277
sg30560
(g17175
tp32278
sg24421
(tsg29602
(g29340
g29489
tp32279
sg0
(g7
g2
Ntp32280
Rp32281
(dp32282
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32283
sg11
S'auto_1839'
p32284
sg14
g0
(g15
g2
Ntp32285
Rp32286
(dp32287
g19
(lp32288
sbsg53
g0
(g54
g2
Ntp32289
Rp32290
(dp32291
g58
(lp32292
g20941
ag31119
asg1883
g16854
sg204
(lp32293
g32281
asg14
g0
(g15
g2
Ntp32294
Rp32295
(dp32296
g4120
(lp32297
g27210
asg2143
(lp32298
g28082
asbsg2147
(dp32299
sg206
g1220
sbsg177
g0
(g178
g2
Ntp32300
Rp32301
(dp32302
g182
(I00
I00
tp32303
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g29340
g29489
tp32304
sg0
(g7
g2
Ntp32305
Rp32306
(dp32307
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32308
sg11
S'auto_1593'
p32309
sg14
g0
(g15
g2
Ntp32310
Rp32311
(dp32312
g19
g10498
sbsg53
g0
(g54
g2
Ntp32313
Rp32314
(dp32315
g58
(lp32316
g23287
asg1883
g16854
sg204
(lp32317
g32306
asg14
g0
(g15
g2
Ntp32318
Rp32319
(dp32320
g4120
(lp32321
g2886
asg2143
(lp32322
g2146
asbsg2147
(dp32323
sg206
g5677
sbsg177
g5679
sb(g0
(g149
g2
Ntp32324
Rp32325
(dp32326
g11
S'auto_1800'
p32327
sg13
Nsg14
g0
(g15
g2
Ntp32328
Rp32329
(dp32330
g19
(lp32331
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32332
Rp32333
(dp32334
g182
(tsg183
S'int64'
p32335
sg185
g2899
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp32336
g197
tp32337
Rp32338
(I1
(tg2899
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p32339
tp32340
bsbtp32341
sg0
(g7
g2
Ntp32342
Rp32343
(dp32344
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32345
sg11
S'auto_1643'
p32346
sg14
g0
(g15
g2
Ntp32347
Rp32348
(dp32349
g19
g8197
sbsg53
g0
(g54
g2
Ntp32350
Rp32351
(dp32352
g58
(lp32353
g0
(g149
g2
Ntp32354
Rp32355
(dp32356
g11
S'auto_2019'
p32357
sg13
Nsg14
g0
(g15
g2
Ntp32358
Rp32359
(dp32360
g23736
g23737
sg19
(lp32361
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32362
Rp32363
(dp32364
g182
(tsg183
S'float32'
p32365
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp32366
sg193
g194
(g195
(I0
tp32367
g197
tp32368
Rp32369
(I1
(tg189
I00
S'\xd0\xcc\xcc='
p32370
tp32371
bsbasg1883
g16854
sg204
(lp32372
g32343
asg14
g0
(g15
g2
Ntp32373
Rp32374
(dp32375
g4120
(lp32376
g4913
asg2143
(lp32377
g2146
ag2146
asbsg2147
(dp32378
sg206
g8250
sbsg177
g8265
sb(g27960
g27960
tp32379
sg29590
(g29340
g29489
tp32380
sg17378
(g27470
g27041
tp32381
sg0
(g7
g2
Ntp32382
Rp32383
(dp32384
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32385
sg11
S'auto_4598'
p32386
sg14
g0
(g15
g2
Ntp32387
Rp32388
(dp32389
g19
(lp32390
sbsg53
g0
(g54
g2
Ntp32391
Rp32392
(dp32393
g58
(lp32394
g17411
asg1883
g16854
sg204
(lp32395
g32383
asg14
g0
(g15
g2
Ntp32396
Rp32397
(dp32398
g4120
(lp32399
g4913
asg2143
(lp32400
g17616
ag2146
asbsg2147
(dp32401
sg206
g0
(g207
g2
Ntp32402
Rp32403
(dp32404
g211
(lp32405
I0
aI1
asg213
(lp32406
sg215
(lp32407
sg217
g218
sg219
(I01
I01
tp32408
sg220
(lp32409
g222
asg223
I01
sg224
(tsg227
(dp32410
S'support_code_apply'
p32411
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32412
ssg231
(dp32413
I0
(lp32414
I0
assg234
(lp32415
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32416
asbsbsg177
g29157
sb(tsg0
(g7
g2
Ntp32417
Rp32418
(dp32419
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32420
sg11
S'auto_1633'
p32421
sg14
g0
(g15
g2
Ntp32422
Rp32423
(dp32424
g19
g11333
sbsg53
g0
(g54
g2
Ntp32425
Rp32426
(dp32427
g58
(lp32428
g28341
ag28831
asg1883
g16854
sg204
(lp32429
g32418
asg14
g0
(g15
g2
Ntp32430
Rp32431
(dp32432
g4120
(lp32433
g23749
asg2143
(lp32434
g2146
asbsg2147
(dp32435
sg206
g5417
sbsg177
g11355
sb(tsg0
(g7
g2
Ntp32436
Rp32437
(dp32438
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32439
sg11
S'auto_1692'
p32440
sg14
g0
(g15
g2
Ntp32441
Rp32442
(dp32443
g19
g13761
sbsg53
g0
(g54
g2
Ntp32444
Rp32445
(dp32446
g58
(lp32447
g16885
ag32144
asg1883
g16854
sg204
(lp32448
g32437
asg14
g0
(g15
g2
Ntp32449
Rp32450
(dp32451
g4120
(lp32452
g27037
asg2143
(lp32453
g2146
asbsg2147
(dp32454
sg206
g7850
sbsg177
g13830
sb(g29340
tp32455
sg29197
(g17152
g17175
tp32456
sg0
(g7
g2
Ntp32457
Rp32458
(dp32459
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32460
sg11
S'auto_1772'
p32461
sg14
g0
(g15
g2
Ntp32462
Rp32463
(dp32464
g19
g16583
sbsg53
g0
(g54
g2
Ntp32465
Rp32466
(dp32467
g58
(lp32468
g31795
asg1883
g16854
sg204
(lp32469
g32458
asg14
g0
(g15
g2
Ntp32470
Rp32471
(dp32472
g4120
(lp32473
g4913
asg2143
(lp32474
g2146
ag2146
asbsg2147
(dp32475
sg206
g16636
sbsg177
g16651
sb(g27960
tp32476
sg17138
(g0
(g149
g2
Ntp32477
Rp32478
(dp32479
g11
S'auto_2078'
p32480
sg13
Nsg14
g0
(g15
g2
Ntp32481
Rp32482
(dp32483
g19
(lp32484
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32485
Rp32486
(dp32487
g182
(tsg183
S'int64'
p32488
sg185
g2899
sg192
I00
sg52
Nsbsg193
g194
(g195
(I0
tp32489
g197
tp32490
Rp32491
(I1
(tg2899
I00
S'\x02\x00\x00\x00\x00\x00\x00\x00'
p32492
tp32493
bsbtp32494
sg29072
(g17152
g17175
tp32495
sg0
(g7
g2
Ntp32496
Rp32497
(dp32498
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32499
sg11
S'auto_1863'
p32500
sg14
g0
(g15
g2
Ntp32501
Rp32502
(dp32503
g19
(lp32504
sbsg53
g0
(g54
g2
Ntp32505
Rp32506
(dp32507
g58
(lp32508
g28341
asg1883
g16854
sg204
(lp32509
g32497
asg14
g0
(g15
g2
Ntp32510
Rp32511
(dp32512
g4120
(lp32513
g28488
asg2143
(lp32514
g18942
asbsg2147
(dp32515
sg206
g0
(g207
g2
Ntp32516
Rp32517
(dp32518
g211
(lp32519
sg213
(lp32520
sg215
(lp32521
I0
asg217
g218
sg219
(tsg220
(lp32522
g222
asg223
I01
sg224
g12110
sg227
(dp32523
S'support_code_apply'
p32524
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32525
ssg231
(dp32526
I0
(lp32527
I0
assg234
(lp32528
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32529
asbsbsg177
g0
(g178
g2
Ntp32530
Rp32531
(dp32532
g182
(I01
tp32533
sg183
g7715
sg185
g7718
sg192
I00
sg52
Nsbsb(g27960
tp32534
sg0
(g7
g2
Ntp32535
Rp32536
(dp32537
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32538
sg11
S'auto_4340'
p32539
sg14
g0
(g15
g2
Ntp32540
Rp32541
(dp32542
g19
(lp32543
sbsg53
g0
(g54
g2
Ntp32544
Rp32545
(dp32546
g58
(lp32547
g0
(g7
g2
Ntp32548
Rp32549
(dp32550
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32551
sg11
S'auto_4336'
p32552
sg14
g0
(g15
g2
Ntp32553
Rp32554
(dp32555
g19
(lp32556
sbsg53
g0
(g54
g2
Ntp32557
Rp32558
(dp32559
g58
(lp32560
g17088
ag17057
asg1883
g16854
sg204
(lp32561
g32549
asg14
g0
(g15
g2
Ntp32562
Rp32563
(dp32564
g4120
(lp32565
g18942
asg2143
(lp32566
g27210
asbsg2147
(dp32567
sg206
g1220
sbsg177
g0
(g178
g2
Ntp32568
Rp32569
(dp32570
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp32571
g32536
asg14
g0
(g15
g2
Ntp32572
Rp32573
(dp32574
g4120
(lp32575
g18942
asg2143
(lp32576
g27210
asbsg2147
(dp32577
sg206
g0
(g207
g2
Ntp32578
Rp32579
(dp32580
g211
(lp32581
sg213
(lp32582
sg215
(lp32583
I0
aI1
asg217
g218
sg219
(tsg220
(lp32584
g222
asg223
I01
sg224
g20305
sg227
(dp32585
S'support_code_apply'
p32586
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32587
ssg231
(dp32588
I0
(lp32589
I0
assg234
(lp32590
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32591
asbsbsg177
g0
(g178
g2
Ntp32592
Rp32593
(dp32594
g182
(I01
I01
tp32595
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp32596
sg24880
(g29340
g29489
tp32597
sg27832
(g29340
tp32598
sg31894
(tsg0
(g7
g2
Ntp32599
Rp32600
(dp32601
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32602
sg11
S'auto_2066'
p32603
sg14
g0
(g15
g2
Ntp32604
Rp32605
(dp32606
g19
(lp32607
sbsg53
g0
(g54
g2
Ntp32608
Rp32609
(dp32610
g58
(lp32611
g29266
asg1883
g16854
sg204
(lp32612
g32600
asg14
g0
(g15
g2
Ntp32613
Rp32614
(dp32615
g4120
(lp32616
g28488
asg2143
(lp32617
g18942
asbsg2147
(dp32618
sg206
g0
(g207
g2
Ntp32619
Rp32620
(dp32621
g211
(lp32622
sg213
(lp32623
sg215
(lp32624
I0
aI1
asg217
g218
sg219
(tsg220
(lp32625
g222
asg223
I01
sg224
g10686
sg227
(dp32626
S'support_code_apply'
p32627
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32628
ssg231
(dp32629
I0
(lp32630
I0
assg234
(lp32631
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32632
asbsbsg177
g0
(g178
g2
Ntp32633
Rp32634
(dp32635
g182
(I01
I01
tp32636
sg183
g989
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp32637
sg18915
(tsg0
(g7
g2
Ntp32638
Rp32639
(dp32640
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32641
sg11
S'auto_1696'
p32642
sg14
g0
(g15
g2
Ntp32643
Rp32644
(dp32645
g19
g13568
sbsg53
g0
(g54
g2
Ntp32646
Rp32647
(dp32648
g58
(lp32649
g28831
asg1883
g16854
sg204
(lp32650
g32639
asg14
g0
(g15
g2
Ntp32651
Rp32652
(dp32653
g4120
(lp32654
g4913
asg2143
(lp32655
g2146
ag2146
asbsg2147
(dp32656
sg206
g13590
sbsg177
g13605
sb(g27960
tp32657
sg0
(g7
g2
Ntp32658
Rp32659
(dp32660
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32661
sg11
S'auto_4564'
p32662
sg14
g0
(g15
g2
Ntp32663
Rp32664
(dp32665
g19
(lp32666
sbsg53
g0
(g54
g2
Ntp32667
Rp32668
(dp32669
g58
(lp32670
g17411
asg1883
g16854
sg204
(lp32671
g32659
asg14
g0
(g15
g2
Ntp32672
Rp32673
(dp32674
g4120
(lp32675
S"('Revert', 'GemmOptimizer')"
p32676
asg2143
(lp32677
g27305
asbsg2147
(dp32678
sg206
g0
(g207
g2
Ntp32679
Rp32680
(dp32681
g211
(lp32682
I0
aI1
asg213
(lp32683
sg215
(lp32684
sg217
g218
sg219
(I01
I01
tp32685
sg220
(lp32686
g222
asg223
I01
sg224
(tsg227
(dp32687
S'support_code_apply'
p32688
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32689
ssg231
(dp32690
I0
(lp32691
I0
assg234
(lp32692
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32693
asbsbsg177
g0
(g178
g2
Ntp32694
Rp32695
(dp32696
g182
(tsg183
g184
sg185
g189
sg192
I00
sg52
Nsbsb(tsg30618
(g27489
tp32697
sg27813
(g28965
tp32698
sg23589
(g32074
g32092
tp32699
sg30606
(g27489
tp32700
sg16875
(g17152
g29340
tp32701
sg27801
(g28965
tp32702
sg0
(g7
g2
Ntp32703
Rp32704
(dp32705
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32706
sg11
S'auto_1778'
p32707
sg14
g0
(g15
g2
Ntp32708
Rp32709
(dp32710
g19
g16368
sbsg53
g0
(g54
g2
Ntp32711
Rp32712
(dp32713
g58
(lp32714
g30606
ag28404
asg1883
g16854
sg204
(lp32715
g32704
asg14
g0
(g15
g2
Ntp32716
Rp32717
(dp32718
g4120
(lp32719
g23749
asg2143
(lp32720
g2146
asbsg2147
(dp32721
sg206
g1153
sbsg177
g16805
sb(g27489
tp32722
sg27789
(g28965
tp32723
sg17030
(g17152
g17175
tp32724
sg0
(g7
g2
Ntp32725
Rp32726
(dp32727
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32728
sg11
S'auto_4239'
p32729
sg14
g0
(g15
g2
Ntp32730
Rp32731
(dp32732
g19
(lp32733
sbsg53
g0
(g54
g2
Ntp32734
Rp32735
(dp32736
g58
(lp32737
g32171
asg1883
g16854
sg204
(lp32738
g32726
asg14
g0
(g15
g2
Ntp32739
Rp32740
(dp32741
g4120
(lp32742
g4913
asg2143
(lp32743
g27210
ag2146
asbsg2147
(dp32744
sg206
g0
(g207
g2
Ntp32745
Rp32746
(dp32747
g211
(lp32748
sg213
(lp32749
sg215
(lp32750
I0
aI1
asg217
g218
sg219
(tsg220
(lp32751
g222
asg223
I01
sg224
(g225
g225
tp32752
sg227
(dp32753
S'support_code_apply'
p32754
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32755
ssg231
(dp32756
I0
(lp32757
I0
assg234
(lp32758
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32759
asbsbsg177
g16962
sb(g27960
g27960
tp32760
sg0
(g7
g2
Ntp32761
Rp32762
(dp32763
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32764
sg11
S'auto_1700'
p32765
sg14
g0
(g15
g2
Ntp32766
Rp32767
(dp32768
g19
g13468
sbsg53
g0
(g54
g2
Ntp32769
Rp32770
(dp32771
g58
(lp32772
g27789
ag28404
asg1883
g16854
sg204
(lp32773
g32762
asg14
g0
(g15
g2
Ntp32774
Rp32775
(dp32776
g4120
(lp32777
g23749
asg2143
(lp32778
g2146
asbsg2147
(dp32779
sg206
g1153
sbsg177
g13905
sb(g28965
tp32780
sg16998
(g27960
g27960
tp32781
sg0
(g7
g2
Ntp32782
Rp32783
(dp32784
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32785
sg11
S'auto_1780'
p32786
sg14
g0
(g15
g2
Ntp32787
Rp32788
(dp32789
g19
g16082
sbsg53
g0
(g54
g2
Ntp32790
Rp32791
(dp32792
g58
(lp32793
g32355
asg1883
g16854
sg204
(lp32794
g32783
asg14
g0
(g15
g2
Ntp32795
Rp32796
(dp32797
g4120
(lp32798
g4913
asg2143
(lp32799
g2146
ag2146
asbsg2147
(dp32800
sg206
g16135
sbsg177
g16150
sb(g27960
tp32801
sg0
(g7
g2
Ntp32802
Rp32803
(dp32804
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32805
sg11
S'auto_4240'
p32806
sg14
g0
(g15
g2
Ntp32807
Rp32808
(dp32809
g19
(lp32810
sbsg53
g0
(g54
g2
Ntp32811
Rp32812
(dp32813
g58
(lp32814
g16916
asg1883
g16854
sg204
(lp32815
g32803
asg14
g0
(g15
g2
Ntp32816
Rp32817
(dp32818
g4120
(lp32819
g28488
asg2143
(lp32820
g27210
asbsg2147
(dp32821
sg206
g0
(g207
g2
Ntp32822
Rp32823
(dp32824
g211
(lp32825
sg213
(lp32826
sg215
(lp32827
I0
aI1
asg217
g218
sg219
(tsg220
(lp32828
g222
asg223
I01
sg224
(g225
g225
tp32829
sg227
(dp32830
S'support_code_apply'
p32831
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32832
ssg231
(dp32833
I0
(lp32834
I0
assg234
(lp32835
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32836
asbsbsg177
g0
(g178
g2
Ntp32837
Rp32838
(dp32839
g182
(I01
I01
tp32840
sg183
g351
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp32841
sg29210
(g17152
g17175
tp32842
sg17573
(g29340
g29489
tp32843
sg18846
(g29322
g29340
tp32844
sg19654
(g32074
g32092
tp32845
sg28191
(g32074
g32092
tp32846
sg0
(g7
g2
Ntp32847
Rp32848
(dp32849
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32850
sg11
S'auto_1704'
p32851
sg14
g0
(g15
g2
Ntp32852
Rp32853
(dp32854
g19
g12179
sbsg53
g0
(g54
g2
Ntp32855
Rp32856
(dp32857
g58
(lp32858
g28362
asg1883
g16854
sg204
(lp32859
g32848
asg14
g0
(g15
g2
Ntp32860
Rp32861
(dp32862
g4120
(lp32863
g4913
asg2143
(lp32864
g2146
ag2146
asbsg2147
(dp32865
sg206
g12201
sbsg177
g12216
sb(g27960
tp32866
sg27743
(g29340
tp32867
sg30541
(g30705
tp32868
sg28563
(g27960
g27960
tp32869
sg30529
(g30705
tp32870
sg0
(g149
g2
Ntp32871
Rp32872
(dp32873
g11
S'auto_4667'
p32874
sg13
Nsg14
g0
(g15
g2
Ntp32875
Rp32876
(dp32877
g19
(lp32878
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32879
Rp32880
(dp32881
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp32882
sg193
g194
(g195
(I0
tp32883
g197
tp32884
Rp32885
(I1
(tg189
I00
S'\xd0\xcc\xcc='
p32886
tp32887
bsb(tsg27724
(g29818
tp32888
sg32549
(tsg24152
(g28965
tp32889
sg25235
(g30705
tp32890
sg27712
(g29818
tp32891
sg17280
(g27960
tp32892
sg0
(g7
g2
Ntp32893
Rp32894
(dp32895
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32896
sg11
S'auto_4602'
p32897
sg14
g0
(g15
g2
Ntp32898
Rp32899
(dp32900
g19
(lp32901
sbsg53
g0
(g54
g2
Ntp32902
Rp32903
(dp32904
g58
(lp32905
g28938
asg1883
g16854
sg204
(lp32906
g32894
asg14
g0
(g15
g2
Ntp32907
Rp32908
(dp32909
g4120
(lp32910
g4913
asg2143
(lp32911
g17616
ag2146
asbsg2147
(dp32912
sg206
g0
(g207
g2
Ntp32913
Rp32914
(dp32915
g211
(lp32916
I0
aI1
asg213
(lp32917
sg215
(lp32918
sg217
g218
sg219
(I01
I01
tp32919
sg220
(lp32920
g222
asg223
I01
sg224
(tsg227
(dp32921
S'support_code_apply'
p32922
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32923
ssg231
(dp32924
I0
(lp32925
I0
assg234
(lp32926
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p32927
asbsbsg177
g32880
sb(tsg0
(g149
g2
Ntp32928
Rp32929
(dp32930
g11
S'auto_2000'
p32931
sg13
Nsg14
g0
(g15
g2
Ntp32932
Rp32933
(dp32934
g19
(lp32935
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp32936
Rp32937
(dp32938
g182
(tsg183
S'float32'
p32939
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp32940
sg193
g194
(g195
(I0
tp32941
g197
tp32942
Rp32943
(I1
(tg189
I00
S'\x00\x00\x80?'
p32944
tp32945
bsb(tsg17301
(g27489
tp32946
sg28465
(tsg0
(g7
g2
Ntp32947
Rp32948
(dp32949
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32950
sg11
S'auto_1611'
p32951
sg14
g0
(g15
g2
Ntp32952
Rp32953
(dp32954
g19
g10344
sbsg53
g0
(g54
g2
Ntp32955
Rp32956
(dp32957
g58
(lp32958
g0
(g7
g2
Ntp32959
Rp32960
(dp32961
g13
I0
sg52
g3080
sg1883
g16854
sg1892
(lp32962
sg11
S'auto_1601'
p32963
sg14
g0
(g15
g2
Ntp32964
Rp32965
(dp32966
g19
g10374
sbsg53
g0
(g54
g2
Ntp32967
Rp32968
(dp32969
g58
(lp32970
g0
(g7
g2
Ntp32971
Rp32972
(dp32973
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp32974
sg11
S'auto_1600'
p32975
sg14
g0
(g15
g2
Ntp32976
Rp32977
(dp32978
g19
g10397
sbsg53
g0
(g54
g2
Ntp32979
Rp32980
(dp32981
g58
(lp32982
g17049
ag17057
asg1883
g16854
sg204
(lp32983
g32972
asg14
g0
(g15
g2
Ntp32984
Rp32985
(dp32986
g4120
(lp32987
g2628
asg2143
(lp32988
g2146
asbsg2147
(dp32989
sg206
g5326
sbsg177
g10560
sbag17088
asg1883
g16854
sg204
(lp32990
g32960
asg14
g0
(g15
g2
Ntp32991
Rp32992
(dp32993
g4120
(lp32994
g2628
asg2143
(lp32995
g2146
asbsg2147
(dp32996
sg206
g5326
sbsg177
g10621
sbag29266
asg1883
g16854
sg204
(lp32997
g32948
asg14
g0
(g15
g2
Ntp32998
Rp32999
(dp33000
g4120
(lp33001
S'LocalOptGroup(local_useless_fill,local_useless_alloc,local_subtensor_make_vector,local_useless_elemwise,local_useless_inc_subtensor,local_useless_slice,local_subtensor_of_alloc,local_useless_inc_subtensor_alloc,local_useless_rebroadcast,local_join_1,local_join_empty,local_join_make_vector,local_useless_switch,local_useless_tile,local_useless_split,local_useless_reshape,local_useless_elemwise_comparison,local_useless_reduce,local_view_op,local_merge_alloc,local_useless_topk)'
p33002
asg2143
(lp33003
g2146
asbsg2147
(dp33004
sg206
g10627
sbsg177
g10646
sb(tsg25990
(g27960
g27960
tp33005
sg25502
(g29340
g29489
tp33006
sg17254
(g17152
g17175
tp33007
sg0
(g7
g2
Ntp33008
Rp33009
(dp33010
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33011
sg11
S'auto_1612'
p33012
sg14
g0
(g15
g2
Ntp33013
Rp33014
(dp33015
g19
g10315
sbsg53
g0
(g54
g2
Ntp33016
Rp33017
(dp33018
g58
(lp33019
g29266
ag17088
asg1883
g16854
sg204
(lp33020
g33009
asg14
g0
(g15
g2
Ntp33021
Rp33022
(dp33023
g4120
(lp33024
g18942
asg2143
(lp33025
g2146
asbsg2147
(dp33026
sg206
g10652
sbsg177
g10660
sb(tsg18877
(tsg31718
(tsg17236
(g28310
g27041
tp33027
sg0
(g7
g2
Ntp33028
Rp33029
(dp33030
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33031
sg11
S'auto_1613'
p33032
sg14
g0
(g15
g2
Ntp33033
Rp33034
(dp33035
g19
g10286
sbsg53
g0
(g54
g2
Ntp33036
Rp33037
(dp33038
g58
(lp33039
g33009
ag17057
asg1883
g16854
sg204
(lp33040
g33029
asg14
g0
(g15
g2
Ntp33041
Rp33042
(dp33043
g4120
(lp33044
g18942
asg2143
(lp33045
g2146
asbsg2147
(dp33046
sg206
g10666
sbsg177
g10674
sb(tsg25659
(g27470
g27041
tp33047
sg31795
(tsg30642
(g17175
tp33048
sg23315
(tsg0
(g7
g2
Ntp33049
Rp33050
(dp33051
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33052
sg11
S'auto_1614'
p33053
sg14
g0
(g15
g2
Ntp33054
Rp33055
(dp33056
g19
g10257
sbsg53
g0
(g54
g2
Ntp33057
Rp33058
(dp33059
g58
(lp33060
g33029
asg1883
g16854
sg204
(lp33061
g33050
asg14
g0
(g15
g2
Ntp33062
Rp33063
(dp33064
g4120
(lp33065
g18942
asg2143
(lp33066
g2146
asbsg2147
(dp33067
sg206
g10680
sbsg177
g10695
sb(g27960
g27960
tp33068
sg0
(g7
g2
Ntp33069
Rp33070
(dp33071
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33072
sg11
S'auto_1636'
p33073
sg14
g0
(g15
g2
Ntp33074
Rp33075
(dp33076
g19
g11193
sbsg53
g0
(g54
g2
Ntp33077
Rp33078
(dp33079
g58
(lp33080
g28831
asg1883
g16854
sg204
(lp33081
g33070
asg14
g0
(g15
g2
Ntp33082
Rp33083
(dp33084
g4120
(lp33085
g4913
asg2143
(lp33086
g2146
ag2146
asbsg2147
(dp33087
sg206
g11215
sbsg177
g11230
sb(g27960
g27960
tp33088
sg0
(g7
g2
Ntp33089
Rp33090
(dp33091
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33092
sg11
S'auto_1615'
p33093
sg14
g0
(g15
g2
Ntp33094
Rp33095
(dp33096
g19
g10198
sbsg53
g0
(g54
g2
Ntp33097
Rp33098
(dp33099
g58
(lp33100
g23287
ag33050
asg1883
g16854
sg204
(lp33101
g33090
asg14
g0
(g15
g2
Ntp33102
Rp33103
(dp33104
g4120
(lp33105
g28742
asg2143
(lp33106
g2146
asbsg2147
(dp33107
sg206
g10702
sbsg177
g10710
sb(g17152
g17175
tp33108
sg22012
(g27960
tp33109
sg0
(g7
g2
Ntp33110
Rp33111
(dp33112
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33113
sg11
S'auto_4511'
p33114
sg14
g0
(g15
g2
Ntp33115
Rp33116
(dp33117
g23736
g23737
sg19
(lp33118
sbsg53
g0
(g54
g2
Ntp33119
Rp33120
(dp33121
g58
(lp33122
g19239
ag0
(g7
g2
Ntp33123
Rp33124
(dp33125
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33126
sg11
S'auto_4510'
p33127
sg14
g0
(g15
g2
Ntp33128
Rp33129
(dp33130
g19
(lp33131
sbsg53
g0
(g54
g2
Ntp33132
Rp33133
(dp33134
g58
(lp33135
g28938
asg1883
g16854
sg204
(lp33136
g33124
asg14
g0
(g15
g2
Ntp33137
Rp33138
(dp33139
g4120
(lp33140
S"('Revert', 'GemmOptimizer')"
p33141
asg2143
(lp33142
g27305
asbsg2147
(dp33143
sg206
g0
(g207
g2
Ntp33144
Rp33145
(dp33146
g211
(lp33147
I0
aI1
asg213
(lp33148
sg215
(lp33149
sg217
g218
sg219
(I01
I01
tp33150
sg220
(lp33151
g222
asg223
I01
sg224
(tsg227
(dp33152
S'support_code_apply'
p33153
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33154
ssg231
(dp33155
I0
(lp33156
I0
assg234
(lp33157
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33158
asbsbsg177
g0
(g178
g2
Ntp33159
Rp33160
(dp33161
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsbag17246
ag29197
ag0
(g7
g2
Ntp33162
Rp33163
(dp33164
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33165
sg11
S'auto_4509'
p33166
sg14
g0
(g15
g2
Ntp33167
Rp33168
(dp33169
g19
(lp33170
sbsg53
g0
(g54
g2
Ntp33171
Rp33172
(dp33173
g58
(lp33174
g18854
asg1883
g16854
sg204
(lp33175
g33163
asg14
g0
(g15
g2
Ntp33176
Rp33177
(dp33178
g4120
(lp33179
S"('Revert', 'GemmOptimizer')"
p33180
asg2143
(lp33181
g27305
asbsg2147
(dp33182
sg206
g0
(g207
g2
Ntp33183
Rp33184
(dp33185
g211
(lp33186
I0
aI1
asg213
(lp33187
sg215
(lp33188
sg217
g218
sg219
(I01
I01
tp33189
sg220
(lp33190
g222
asg223
I01
sg224
(tsg227
(dp33191
S'support_code_apply'
p33192
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33193
ssg231
(dp33194
I0
(lp33195
I0
assg234
(lp33196
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33197
asbsbsg177
g0
(g178
g2
Ntp33198
Rp33199
(dp33200
g182
(tsg183
g7979
sg185
g189
sg192
I00
sg52
Nsbsbasg1883
g16854
sg204
(lp33201
g33111
asg14
g0
(g15
g2
Ntp33202
Rp33203
(dp33204
g4120
(lp33205
S"('Revert', 'GemmOptimizer')"
p33206
asg2143
(lp33207
g27305
asbsg2147
(dp33208
sg206
g30250
sbsg177
g14353
sb(g27997
g28015
tp33209
sg17310
(g30787
tp33210
sg0
(g7
g2
Ntp33211
Rp33212
(dp33213
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33214
sg11
S'auto_1616'
p33215
sg14
g0
(g15
g2
Ntp33216
Rp33217
(dp33218
g19
g10169
sbsg53
g0
(g54
g2
Ntp33219
Rp33220
(dp33221
g58
(lp33222
g33090
ag28661
asg1883
g16854
sg204
(lp33223
g33212
asg14
g0
(g15
g2
Ntp33224
Rp33225
(dp33226
g4120
(lp33227
g28742
asg2143
(lp33228
g2146
asbsg2147
(dp33229
sg206
g10717
sbsg177
g10725
sb(g17152
g17175
tp33230
sg0
(g7
g2
Ntp33231
Rp33232
(dp33233
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33234
sg11
S'auto_2016'
p33235
sg14
g0
(g15
g2
Ntp33236
Rp33237
(dp33238
g19
(lp33239
g7789
asbsg53
g0
(g54
g2
Ntp33240
Rp33241
(dp33242
g58
(lp33243
g19025
ag29043
asg1883
g16854
sg204
(lp33244
g33232
asg14
g0
(g15
g2
Ntp33245
Rp33246
(dp33247
g4120
(lp33248
g23749
asg2143
(lp33249
g28386
asbsg2147
(dp33250
sg206
g1153
sbsg177
g0
(g178
g2
Ntp33251
Rp33252
(dp33253
g182
(tsg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(tsg28877
(g17152
g17175
tp33254
sg0
(g149
g2
Ntp33255
Rp33256
(dp33257
g11
S'auto_1821'
p33258
sg13
Nsg14
g0
(g15
g2
Ntp33259
Rp33260
(dp33261
g19
(lp33262
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp33263
Rp33264
(dp33265
g182
(tsg183
g31661
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp33266
sg193
g194
(g195
(I0
tp33267
g197
tp33268
Rp33269
(I1
(tg189
I00
S'w\xcc+2'
p33270
tp33271
bsb(tsg27108
(g27960
g27960
tp33272
sg23450
(g17152
g29340
tp33273
sg19594
(g27041
g17175
tp33274
sg0
(g149
g2
Ntp33275
Rp33276
(dp33277
g11
S'auto_2008'
p33278
sg13
Nsg14
g0
(g15
g2
Ntp33279
Rp33280
(dp33281
g19
(lp33282
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp33283
Rp33284
(dp33285
g182
(tsg183
S'int8'
p33286
sg185
g7718
sg192
I00
sg52
Nsbsg1892
(lp33287
sg193
g194
(g195
(I0
tp33288
g197
tp33289
Rp33290
(I1
(tg7718
I00
g7724
tp33291
bsb(tsg24475
(g27914
tp33292
sg25822
(g28310
g27041
tp33293
sg19639
(g29322
g29340
tp33294
sg27017
(g27960
g27960
tp33295
sg0
(g149
g2
Ntp33296
Rp33297
(dp33298
g11
S'auto_1759'
p33299
sg13
Nsg14
g0
(g15
g2
Ntp33300
Rp33301
(dp33302
g19
g14032
sg175
Nsbsg52
Nsg177
g14047
sg1892
(lp33303
sg193
g14052
sb(tsg19109
(g27960
g27960
tp33304
sg30517
(g30705
tp33305
sg17222
(g28310
g29489
tp33306
sg31035
(g17152
g29340
tp33307
sg28789
(g27960
g27960
tp33308
sg25352
(g30787
tp33309
sg33124
(tsg0
(g149
g2
Ntp33310
Rp33311
(dp33312
g11
S'auto_1993'
p33313
sg13
Nsg14
g0
(g15
g2
Ntp33314
Rp33315
(dp33316
g19
(lp33317
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp33318
Rp33319
(dp33320
g182
(tsg183
g29299
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp33321
sg193
g194
(g195
(I0
tp33322
g197
tp33323
Rp33324
(I1
(tg189
I00
S'\x00\x00\x80?'
p33325
tp33326
bsb(tsg16942
(g27960
g27960
tp33327
sg31131
(g27997
g28015
tp33328
sg19239
(g27997
g28015
tp33329
sg20402
(tsg28046
(g27960
g27960
tp33330
sg31119
(g27997
g28015
tp33331
sg21667
(g27470
g27041
tp33332
sg0
(g7
g2
Ntp33333
Rp33334
(dp33335
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33336
sg11
S'auto_1554'
p33337
sg14
g0
(g15
g2
Ntp33338
Rp33339
(dp33340
g19
g9952
sbsg53
g0
(g54
g2
Ntp33341
Rp33342
(dp33343
g58
(lp33344
g29266
asg1883
g16854
sg204
(lp33345
g33334
asg14
g0
(g15
g2
Ntp33346
Rp33347
(dp33348
g4120
(lp33349
g4913
asg2143
(lp33350
g2146
ag2146
asbsg2147
(dp33351
sg206
g9978
sbsg177
g9993
sb(g27960
g27960
tp33352
sg20921
(g27960
g27960
tp33353
sg0
(g7
g2
Ntp33354
Rp33355
(dp33356
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33357
sg11
S'auto_1757'
p33358
sg14
g0
(g15
g2
Ntp33359
Rp33360
(dp33361
g19
g14109
sbsg53
g0
(g54
g2
Ntp33362
Rp33363
(dp33364
g58
(lp33365
g16950
ag31119
asg1883
g16854
sg204
(lp33366
g33355
asg14
g0
(g15
g2
Ntp33367
Rp33368
(dp33369
g4120
(lp33370
g23749
asg2143
(lp33371
g2146
asbsg2147
(dp33372
sg206
g5417
sbsg177
g15660
sb(g29340
g29489
tp33373
sg17545
(g17152
g29340
tp33374
sg18254
(g27914
tp33375
sg0
(g7
g2
Ntp33376
Rp33377
(dp33378
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33379
sg11
S'auto_1758'
p33380
sg14
g0
(g15
g2
Ntp33381
Rp33382
(dp33383
g19
g14084
sbsg53
g0
(g54
g2
Ntp33384
Rp33385
(dp33386
g58
(lp33387
g33355
ag16950
asg1883
g16854
sg204
(lp33388
g33377
asg14
g0
(g15
g2
Ntp33389
Rp33390
(dp33391
g4120
(lp33392
g23749
asg2143
(lp33393
g2146
asbsg2147
(dp33394
sg206
g5417
sbsg177
g15667
sb(g29340
g29489
tp33395
sg19838
(g28273
g28291
tp33396
sg21642
(g27960
g27960
tp33397
sg0
(g7
g2
Ntp33398
Rp33399
(dp33400
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33401
sg11
S'auto_1760'
p33402
sg14
g0
(g15
g2
Ntp33403
Rp33404
(dp33405
g19
g14007
sbsg53
g0
(g54
g2
Ntp33406
Rp33407
(dp33408
g58
(lp33409
g33297
asg1883
g16854
sg204
(lp33410
g33399
asg14
g0
(g15
g2
Ntp33411
Rp33412
(dp33413
g4120
(lp33414
g4913
asg2143
(lp33415
g2146
ag2146
asbsg2147
(dp33416
sg206
g14059
sbsg177
g14074
sb(g27960
g27960
tp33417
sg18238
(g28965
tp33418
sg31208
(tsg0
(g7
g2
Ntp33419
Rp33420
(dp33421
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33422
sg11
S'auto_1556'
p33423
sg14
g0
(g15
g2
Ntp33424
Rp33425
(dp33426
g19
g9901
sbsg53
g0
(g54
g2
Ntp33427
Rp33428
(dp33429
g58
(lp33430
g31563
asg1883
g16854
sg204
(lp33431
g33420
asg14
g0
(g15
g2
Ntp33432
Rp33433
(dp33434
g4120
(lp33435
g4913
asg2143
(lp33436
g2146
ag2146
asbsg2147
(dp33437
sg206
g9927
sbsg177
g9942
sb(g27960
g27960
tp33438
sg0
(g7
g2
Ntp33439
Rp33440
(dp33441
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33442
sg11
S'auto_1761'
p33443
sg14
g0
(g15
g2
Ntp33444
Rp33445
(dp33446
g19
g13982
sbsg53
g0
(g54
g2
Ntp33447
Rp33448
(dp33449
g58
(lp33450
g29166
ag32281
asg1883
g16854
sg204
(lp33451
g33440
asg14
g0
(g15
g2
Ntp33452
Rp33453
(dp33454
g4120
(lp33455
g27210
asg2143
(lp33456
g2146
asbsg2147
(dp33457
sg206
g1220
sbsg177
g15674
sb(g29340
g29489
tp33458
sg17878
(g30705
tp33459
sg0
(g7
g2
Ntp33460
Rp33461
(dp33462
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33463
sg11
S'auto_1762'
p33464
sg14
g0
(g15
g2
Ntp33465
Rp33466
(dp33467
g19
g13957
sbsg53
g0
(g54
g2
Ntp33468
Rp33469
(dp33470
g58
(lp33471
g16950
ag29894
asg1883
g16854
sg204
(lp33472
g33461
asg14
g0
(g15
g2
Ntp33473
Rp33474
(dp33475
g4120
(lp33476
g2628
asg2143
(lp33477
g2146
asbsg2147
(dp33478
sg206
g1153
sbsg177
g15681
sb(g29340
g29489
tp33479
sg20964
(g29340
g29489
tp33480
sg0
(g7
g2
Ntp33481
Rp33482
(dp33483
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33484
sg11
S'auto_1578'
p33485
sg14
g0
(g15
g2
Ntp33486
Rp33487
(dp33488
g19
g9002
sbsg53
g0
(g54
g2
Ntp33489
Rp33490
(dp33491
g58
(lp33492
g16858
ag0
(g7
g2
Ntp33493
Rp33494
(dp33495
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33496
sg11
S'auto_1577'
p33497
sg14
g0
(g15
g2
Ntp33498
Rp33499
(dp33500
g19
g9031
sbsg53
g0
(g54
g2
Ntp33501
Rp33502
(dp33503
g58
(lp33504
g30423
ag17200
ag30255
asg1883
g16854
sg204
(lp33505
g33494
asg14
g0
(g15
g2
Ntp33506
Rp33507
(dp33508
g4120
(lp33509
g2628
asg2143
(lp33510
g2146
asbsg2147
(dp33511
sg206
g1021
sbsg177
g9456
sbasg1883
g16854
sg204
(lp33512
g33482
asg14
g0
(g15
g2
Ntp33513
Rp33514
(dp33515
g4120
(lp33516
g2145
asg2143
(lp33517
g2146
asbsg2147
(dp33518
sg206
g1052
sbsg177
g9463
sb(g28310
g27041
tp33519
sg0
(g7
g2
Ntp33520
Rp33521
(dp33522
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33523
sg11
S'auto_1763'
p33524
sg14
g0
(g15
g2
Ntp33525
Rp33526
(dp33527
g19
g13932
sbsg53
g0
(g54
g2
Ntp33528
Rp33529
(dp33530
g58
(lp33531
g33461
ag20941
ag16998
asg1883
g16854
sg204
(lp33532
g33521
asg14
g0
(g15
g2
Ntp33533
Rp33534
(dp33535
g4120
(lp33536
g2628
asg2143
(lp33537
g2146
asbsg2147
(dp33538
sg206
g11696
sbsg177
g15782
sb(g29340
g29489
tp33539
sg18218
(g27960
tp33540
sg27844
(g29340
tp33541
sg19419
(g29433
g29451
tp33542
sg0
(g7
g2
Ntp33543
Rp33544
(dp33545
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33546
sg11
S'auto_2004'
p33547
sg14
g0
(g15
g2
Ntp33548
Rp33549
(dp33550
g19
(lp33551
sbsg53
g0
(g54
g2
Ntp33552
Rp33553
(dp33554
g58
(lp33555
g29266
asg1883
g16854
sg204
(lp33556
g33544
asg14
g0
(g15
g2
Ntp33557
Rp33558
(dp33559
g4120
(lp33560
g28488
asg2143
(lp33561
g23749
asbsg2147
(dp33562
sg206
g0
(g207
g2
Ntp33563
Rp33564
(dp33565
g211
(lp33566
sg213
(lp33567
sg215
(lp33568
I0
aI1
asg217
g218
sg219
(tsg220
(lp33569
g222
asg223
I01
sg224
(g225
g225
tp33570
sg227
(dp33571
S'support_code_apply'
p33572
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33573
ssg231
(dp33574
I0
(lp33575
I0
assg234
(lp33576
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33577
asbsbsg177
g0
(g178
g2
Ntp33578
Rp33579
(dp33580
g182
(I01
I01
tp33581
sg183
g32939
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp33582
sg0
(g7
g2
Ntp33583
Rp33584
(dp33585
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33586
sg11
S'auto_1946'
p33587
sg14
g0
(g15
g2
Ntp33588
Rp33589
(dp33590
g19
(lp33591
sbsg53
g0
(g54
g2
Ntp33592
Rp33593
(dp33594
g58
(lp33595
g31563
asg1883
g16854
sg204
(lp33596
g33584
asg14
g0
(g15
g2
Ntp33597
Rp33598
(dp33599
g4120
(lp33600
g28488
asg2143
(lp33601
g28082
asbsg2147
(dp33602
sg206
g0
(g207
g2
Ntp33603
Rp33604
(dp33605
g211
(lp33606
sg213
(lp33607
sg215
(lp33608
I0
aI1
asg217
g218
sg219
(tsg220
(lp33609
g222
asg223
I01
sg224
(g225
g225
tp33610
sg227
(dp33611
S'support_code_apply'
p33612
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33613
ssg231
(dp33614
I0
(lp33615
I0
assg234
(lp33616
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33617
asbsbsg177
g0
(g178
g2
Ntp33618
Rp33619
(dp33620
g182
(I01
I01
tp33621
sg183
g31234
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
g27960
tp33622
sg17200
(g27960
g27960
tp33623
sg27325
(g32074
g32092
tp33624
sg0
(g149
g2
Ntp33625
Rp33626
(dp33627
g11
S'auto_1929'
p33628
sg13
Nsg14
g0
(g15
g2
Ntp33629
Rp33630
(dp33631
g19
(lp33632
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp33633
Rp33634
(dp33635
g182
(tsg183
S'float32'
p33636
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp33637
sg193
g194
(g195
(I0
tp33638
g197
tp33639
Rp33640
(I1
(tg189
I00
S'w\xcc+2'
p33641
tp33642
bsb(tsg17263
(g17175
tp33643
sg0
(g7
g2
Ntp33644
Rp33645
(dp33646
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33647
sg11
S'auto_4600'
p33648
sg14
g0
(g15
g2
Ntp33649
Rp33650
(dp33651
g19
(lp33652
sbsg53
g0
(g54
g2
Ntp33653
Rp33654
(dp33655
g58
(lp33656
g28938
asg1883
g16854
sg204
(lp33657
g33645
asg14
g0
(g15
g2
Ntp33658
Rp33659
(dp33660
g4120
(lp33661
g4913
asg2143
(lp33662
g17616
ag2146
asbsg2147
(dp33663
sg206
g0
(g207
g2
Ntp33664
Rp33665
(dp33666
g211
(lp33667
I0
aI1
asg213
(lp33668
sg215
(lp33669
sg217
g218
sg219
(I01
I01
tp33670
sg220
(lp33671
g222
asg223
I01
sg224
(tsg227
(dp33672
S'support_code_apply'
p33673
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33674
ssg231
(dp33675
I0
(lp33676
I0
assg234
(lp33677
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33678
asbsbsg177
g18837
sb(tsg18460
(g30787
tp33679
sg29550
(g27960
g17175
tp33680
sg16959
(g27960
g27960
tp33681
sg0
(g7
g2
Ntp33682
Rp33683
(dp33684
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33685
sg11
S'auto_4592'
p33686
sg14
g0
(g15
g2
Ntp33687
Rp33688
(dp33689
g19
(lp33690
sbsg53
g0
(g54
g2
Ntp33691
Rp33692
(dp33693
g58
(lp33694
g17411
asg1883
g16854
sg204
(lp33695
g33683
asg14
g0
(g15
g2
Ntp33696
Rp33697
(dp33698
g4120
(lp33699
g4913
asg2143
(lp33700
g17616
ag2146
asbsg2147
(dp33701
sg206
g0
(g207
g2
Ntp33702
Rp33703
(dp33704
g211
(lp33705
I0
aI1
asg213
(lp33706
sg215
(lp33707
sg217
g218
sg219
(I01
I01
tp33708
sg220
(lp33709
g222
asg223
I01
sg224
(tsg227
(dp33710
S'support_code_apply'
p33711
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33712
ssg231
(dp33713
I0
(lp33714
I0
assg234
(lp33715
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p33716
asbsbsg177
g17597
sb(tsg32220
(tsg0
(g7
g2
Ntp33717
Rp33718
(dp33719
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33720
sg11
S'auto_1768'
p33721
sg14
g0
(g15
g2
Ntp33722
Rp33723
(dp33724
g19
g16190
sbsg53
g0
(g54
g2
Ntp33725
Rp33726
(dp33727
g58
(lp33728
g29550
asg1883
g16854
sg204
(lp33729
g33718
asg14
g0
(g15
g2
Ntp33730
Rp33731
(dp33732
g4120
(lp33733
S'LocalOptGroup(local_useless_fill,local_useless_alloc,local_subtensor_make_vector,local_useless_elemwise,local_useless_inc_subtensor,local_useless_slice,local_subtensor_of_alloc,local_useless_inc_subtensor_alloc,local_useless_rebroadcast,local_join_1,local_join_empty,local_join_make_vector,local_useless_switch,local_useless_tile,local_useless_split,local_useless_reshape,local_useless_elemwise_comparison,local_useless_reduce,local_view_op,local_merge_alloc,local_useless_topk)'
p33734
asg2143
(lp33735
g2146
asbsg2147
(dp33736
sg206
g16307
sbsg177
g16315
sb(g27960
g17175
tp33737
sg28612
(g27960
g27960
tp33738
sg23113
(g28310
g27041
tp33739
sg17066
(g27960
g27960
tp33740
sg27147
(g27960
g27960
tp33741
sg24641
(g28273
g28291
tp33742
sg16893
(g27960
tp33743
sg27218
(g27960
g27960
tp33744
sg19248
(g27041
g17175
tp33745
sg17411
(g27960
g27960
tp33746
sg30119
(tsg28938
(g27960
g27960
tp33747
sg17102
(g32325
tp33748
sg31293
(g27960
tp33749
sg28362
(tsg20275
(tsg17823
(g29818
tp33750
sg0
(g149
g2
Ntp33751
Rp33752
(dp33753
g11
S'auto_2020'
p33754
sg13
Nsg14
g0
(g15
g2
Ntp33755
Rp33756
(dp33757
g19
(lp33758
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp33759
Rp33760
(dp33761
g182
(tsg183
g32070
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp33762
sg193
g194
(g195
(I0
tp33763
g197
tp33764
Rp33765
(I1
(tg189
I00
S'w\xcc+2'
p33766
tp33767
bsb(tsg33163
(tsg0
(g7
g2
Ntp33768
Rp33769
(dp33770
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33771
sg11
S'auto_1642'
p33772
sg14
g0
(g15
g2
Ntp33773
Rp33774
(dp33775
g19
g8222
sbsg53
g0
(g54
g2
Ntp33776
Rp33777
(dp33778
g58
(lp33779
g28341
ag28362
asg1883
g16854
sg204
(lp33780
g33769
asg14
g0
(g15
g2
Ntp33781
Rp33782
(dp33783
g2188
g0
(g54
g2
Ntp33784
Rp33785
(dp33786
g58
(lp33787
g0
(g2193
g2
Ntp33788
Rp33789
(dp33790
g11
S'auto_1817'
p33791
sg13
Nsg14
g0
(g15
g2
Ntp33792
Rp33793
sg52
Nsg53
Nsg177
g29802
sbag0
(g2193
g2
Ntp33794
Rp33795
(dp33796
g11
S'auto_1818'
p33797
sg13
Nsg14
g0
(g15
g2
Ntp33798
Rp33799
sg52
Nsg53
Nsg177
g2202
sbasg14
g0
(g15
g2
Ntp33800
Rp33801
sg204
(lp33802
g0
(g2193
g2
Ntp33803
Rp33804
(dp33805
g11
S'auto_1819'
p33806
sg13
I0
sg14
g0
(g15
g2
Ntp33807
Rp33808
sg52
Nsg53
g33785
sg177
g2202
sbasg206
g3526
sbsg4120
(lp33809
g23749
asg2143
(lp33810
g2146
asS'sig'
p33811
S'ff->f'
p33812
sbsg2147
(dp33813
sg206
g5417
sbsg177
g8244
sb(tsg26521
(g27960
tp33814
sg26387
(g27960
g27960
tp33815
sg17111
(tsg29722
(g28310
g27041
tp33816
sg27532
(g29818
tp33817
sg17049
(tsg27557
(g27960
tp33818
sg30170
(g17152
g29340
tp33819
sg32972
(tsg32960
(tsg18834
(tsg27121
(g27960
g27960
tp33820
sg17040
(g17152
g17175
tp33821
sg27544
(g27960
tp33822
sg0
(g7
g2
Ntp33823
Rp33824
(dp33825
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33826
sg11
S'auto_1684'
p33827
sg14
g0
(g15
g2
Ntp33828
Rp33829
(dp33830
g19
g12548
sbsg53
g0
(g54
g2
Ntp33831
Rp33832
(dp33833
g58
(lp33834
g29197
ag17560
asg1883
g16854
sg204
(lp33835
g33824
asg14
g0
(g15
g2
Ntp33836
Rp33837
(dp33838
g4120
(lp33839
g2145
asg2143
(lp33840
g2146
asbsg2147
(dp33841
sg206
g1052
sbsg177
g13251
sb(g17152
g29340
tp33842
sg27134
(g27960
g27960
tp33843
sg16983
(g27960
g27960
tp33844
sg0
(g7
g2
Ntp33845
Rp33846
(dp33847
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33848
sg11
S'auto_1685'
p33849
sg14
g0
(g15
g2
Ntp33850
Rp33851
(dp33852
g19
g12519
sbsg53
g0
(g54
g2
Ntp33853
Rp33854
(dp33855
g58
(lp33856
g33824
ag29636
asg1883
g16854
sg204
(lp33857
g33846
asg14
g0
(g15
g2
Ntp33858
Rp33859
(dp33860
g4120
(lp33861
g27210
asg2143
(lp33862
g2146
asbsg2147
(dp33863
sg206
g13259
sbsg177
g13267
sb(g17152
g29340
tp33864
sg32144
(g27960
tp33865
sg27393
(g29322
g29340
tp33866
sg29710
(g28310
g27041
tp33867
sg28416
(tsg30202
(tsg27653
(g27960
tp33868
sg27160
(g27960
g27960
tp33869
sg32355
(tsg0
(g7
g2
Ntp33870
Rp33871
(dp33872
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33873
sg11
S'auto_1607'
p33874
sg14
g0
(g15
g2
Ntp33875
Rp33876
(dp33877
g19
g11411
sbsg53
g0
(g54
g2
Ntp33878
Rp33879
(dp33880
g58
(lp33881
g31208
asg1883
g16854
sg204
(lp33882
g33871
asg14
g0
(g15
g2
Ntp33883
Rp33884
(dp33885
g4120
(lp33886
g4913
asg2143
(lp33887
g2146
ag2146
asbsg2147
(dp33888
sg206
g11433
sbsg177
g11448
sb(g27960
g27960
tp33889
sg0
(g7
g2
Ntp33890
Rp33891
(dp33892
g13
I0
sg52
g12391
sg1883
g16854
sg1892
(lp33893
sg11
S'auto_1691'
p33894
sg14
g0
(g15
g2
Ntp33895
Rp33896
(dp33897
g19
g12372
sbsg53
g0
(g54
g2
Ntp33898
Rp33899
(dp33900
g58
(lp33901
g0
(g7
g2
Ntp33902
Rp33903
(dp33904
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33905
sg11
S'auto_1689'
p33906
sg14
g0
(g15
g2
Ntp33907
Rp33908
(dp33909
g19
g12432
sbsg53
g0
(g54
g2
Ntp33910
Rp33911
(dp33912
g58
(lp33913
g16885
asg1883
g16854
sg204
(lp33914
g33903
asg14
g0
(g15
g2
Ntp33915
Rp33916
(dp33917
g4120
(lp33918
g18942
asg2143
(lp33919
g2146
asbsg2147
(dp33920
sg206
g13380
sbsg177
g13395
sbasg1883
g16854
sg204
(lp33921
g33891
asg14
g0
(g15
g2
Ntp33922
Rp33923
(dp33924
g4120
(lp33925
g18942
asg2143
(lp33926
g2146
asbsg2147
(dp33927
sg206
g13422
sbsg177
g13437
sb(g29340
tp33928
sg16885
(g29340
tp33929
sg29401
(g28310
g27041
tp33930
sg33903
(g27960
g29340
tp33931
sg0
(g7
g2
Ntp33932
Rp33933
(dp33934
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33935
sg11
S'auto_1686'
p33936
sg14
g0
(g15
g2
Ntp33937
Rp33938
(dp33939
g19
g13277
sbsg53
g0
(g54
g2
Ntp33940
Rp33941
(dp33942
g58
(lp33943
g33846
ag29401
asg1883
g16854
sg204
(lp33944
g33933
asg14
g0
(g15
g2
Ntp33945
Rp33946
(dp33947
g4120
(lp33948
g27210
asg2143
(lp33949
g2146
asbsg2147
(dp33950
sg206
g13347
sbsg177
g13355
sb(g17152
g29340
tp33951
sg17560
(g29489
g29340
tp33952
sg33494
(g27470
g27041
tp33953
sg0
(g7
g2
Ntp33954
Rp33955
(dp33956
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33957
sg11
S'auto_1690'
p33958
sg14
g0
(g15
g2
Ntp33959
Rp33960
(dp33961
g19
g12403
sbsg53
g0
(g54
g2
Ntp33962
Rp33963
(dp33964
g58
(lp33965
g33903
asg1883
g16854
sg204
(lp33966
g33955
asg14
g0
(g15
g2
Ntp33967
Rp33968
(dp33969
g4120
(lp33970
S'LocalOptGroup(local_useless_fill,local_useless_alloc,local_subtensor_make_vector,local_useless_elemwise,local_useless_inc_subtensor,local_useless_slice,local_subtensor_of_alloc,local_useless_inc_subtensor_alloc,local_useless_rebroadcast,local_join_1,local_join_empty,local_join_make_vector,local_useless_switch,local_useless_tile,local_useless_split,local_useless_reshape,local_useless_elemwise_comparison,local_useless_reduce,local_view_op,local_merge_alloc,local_useless_topk)'
p33971
asg2143
(lp33972
g2146
asbsg2147
(dp33973
sg206
g13402
sbsg177
g13415
sb(g27960
g29340
tp33974
sg0
(g7
g2
Ntp33975
Rp33976
(dp33977
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp33978
sg11
S'auto_4567'
p33979
sg14
g0
(g15
g2
Ntp33980
Rp33981
(dp33982
g23736
g23737
sg19
(lp33983
sbsg53
g0
(g54
g2
Ntp33984
Rp33985
(dp33986
g58
(lp33987
g31022
ag32659
ag29197
ag17560
ag0
(g149
g2
Ntp33988
Rp33989
(dp33990
g11
S'auto_4566'
p33991
sg13
Nsg14
g0
(g15
g2
Ntp33992
Rp33993
(dp33994
g19
(lp33995
sg175
Nsbsg52
Nsg177
g0
(g178
g2
Ntp33996
Rp33997
(dp33998
g182
(tsg183
S'float32'
p33999
sg185
g189
sg192
I00
sg52
Nsbsg1892
(lp34000
sg193
g194
(g195
(I0
tp34001
g197
tp34002
Rp34003
(I1
(tg189
I00
S'\x00\x00\x80?'
p34004
tp34005
bsbasg1883
g16854
sg204
(lp34006
g33976
asg14
g0
(g15
g2
Ntp34007
Rp34008
(dp34009
g4120
(lp34010
S"('Revert', 'GemmOptimizer')"
p34011
asg2143
(lp34012
g27305
asbsg2147
(dp34013
sg206
g30250
sbsg177
g31066
sb(g17152
g29340
tp34014
sg29266
(tsg0
(g7
g2
Ntp34015
Rp34016
(dp34017
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp34018
sg11
S'auto_2043'
p34019
sg14
g0
(g15
g2
Ntp34020
Rp34021
(dp34022
g23736
g23737
sg19
(lp34023
sbsg53
g0
(g54
g2
Ntp34024
Rp34025
(dp34026
g58
(lp34027
g17411
ag31035
asg1883
g16854
sg204
(lp34028
g34016
asg14
g0
(g15
g2
Ntp34029
Rp34030
(dp34031
g4120
(lp34032
g27305
ag17616
asg2143
(lp34033
g27210
aS"('Revert', 'GemmOptimizer')"
p34034
asbsg2147
(dp34035
sg206
g1220
sbsg177
g0
(g178
g2
Ntp34036
Rp34037
(dp34038
g182
(I00
I00
tp34039
sg183
g531
sg185
g189
sg192
I00
sg52
Nsbsb(g17152
g29340
tp34040
sg33989
(tsg17339
(g27960
tp34041
sg30630
(g17175
tp34042
sg0
(g7
g2
Ntp34043
Rp34044
(dp34045
g13
I0
sg52
Nsg1883
g16854
sg1892
(lp34046
sg11
S'auto_1933'
p34047
sg14
g0
(g15
g2
Ntp34048
Rp34049
(dp34050
g19
(lp34051
sbsg53
g0
(g54
g2
Ntp34052
Rp34053
(dp34054
g58
(lp34055
g28416
asg1883
g16854
sg204
(lp34056
g34044
asg14
g0
(g15
g2
Ntp34057
Rp34058
(dp34059
g4120
(lp34060
g28488
asg2143
(lp34061
g23749
asbsg2147
(dp34062
sg206
g0
(g207
g2
Ntp34063
Rp34064
(dp34065
g211
(lp34066
sg213
(lp34067
sg215
(lp34068
I0
asg217
g218
sg219
(tsg220
(lp34069
g222
asg223
I01
sg224
(g225
tp34070
sg227
(dp34071
S'support_code_apply'
p34072
S'\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p34073
ssg231
(dp34074
I0
(lp34075
I0
assg234
(lp34076
S'#section support_code_apply\n\nint APPLY_SPECIFIC(cpu_dimshuffle)(PyArrayObject* input, PyArrayObject** res, PARAMS_TYPE* params) {\n    npy_bool* input_broadcastable;\n    npy_int64* new_order;\n    npy_intp nd_in;\n    npy_intp nd_out;\n    PyArrayObject* basename;\n    npy_intp* dimensions;\n    npy_intp* strides;\n\n    if (!PyArray_IS_C_CONTIGUOUS(params->input_broadcastable)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param input_broadcastable must be C-contiguous.");\n        return 1;\n    }\n    if (!PyArray_IS_C_CONTIGUOUS(params->_new_order)) {\n        PyErr_SetString(PyExc_RuntimeError, "DimShuffle: param _new_order must be C-contiguous.");\n        return 1;\n    }\n    input_broadcastable = (npy_bool*) PyArray_DATA(params->input_broadcastable);\n    new_order = (npy_int64*) PyArray_DATA(params->_new_order);\n    nd_in = PyArray_SIZE(params->input_broadcastable);\n    nd_out = PyArray_SIZE(params->_new_order);\n\n    /* check_input_nd */\n    if (PyArray_NDIM(input) != nd_in) {\n        PyErr_SetString(PyExc_NotImplementedError, "input nd");\n        return 1;\n    }\n\n    /* clear_output */\n    if (*res)\n        Py_XDECREF(*res);\n\n    /* get_base */\n    if (params->inplace) {\n        basename = input;\n        Py_INCREF((PyObject*)basename);\n    } else {\n        basename =\n            (PyArrayObject*)PyArray_FromAny((PyObject*)input,\n                                            NULL, 0, 0, NPY_ARRAY_ALIGNED|NPY_ARRAY_ENSURECOPY, NULL);\n    }\n\n    /* shape_statements and strides_statements */\n    dimensions = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    strides = (npy_intp*) malloc(nd_out * sizeof(npy_intp));\n    if (dimensions == NULL || strides == NULL) {\n        PyErr_NoMemory();\n        free(dimensions);\n        free(strides);\n        return 1;\n    };\n\n    for (npy_intp i = 0; i < nd_out; ++i) {\n        if (new_order[i] != -1) {\n            dimensions[i] = PyArray_DIMS(basename)[new_order[i]];\n            strides[i] = PyArray_DIMS(basename)[new_order[i]] == 1 ?\n                            0 : PyArray_STRIDES(basename)[new_order[i]];\n        } else {\n            dimensions[i] = 1;\n            strides[i] = 0;\n        }\n    }\n\n    /* set the strides of the broadcasted dimensions.\n     * This algorithm is from numpy: PyArray_Newshape() in\n     * cvs/numpy/numpy/core/src/multiarraymodule.c */\n    if (nd_out > 0) {\n        if (strides[nd_out - 1] == 0)\n            strides[nd_out - 1] = PyArray_DESCR(basename)->elsize;\n        for (npy_intp i = nd_out - 2; i > -1; --i) {\n            if (strides[i] == 0)\n                strides[i] = strides[i + 1] * dimensions[i + 1];\n        }\n    }\n\n    /* close_bracket */\n    // create a new array.\n    *res = (PyArrayObject*)PyArray_New(&PyArray_Type, nd_out, dimensions,\n                                       PyArray_TYPE(basename), strides,\n                                       PyArray_DATA(basename), PyArray_ITEMSIZE(basename),\n                                       // borrow only the writable flag from the base\n                                       // the NPY_OWNDATA flag will default to 0.\n                                       (NPY_ARRAY_WRITEABLE * PyArray_ISWRITEABLE(basename)),\n                                       NULL);\n\n    if (*res == NULL) {\n        free(dimensions);\n        free(strides);\n        return 1;\n    }\n\n    // recalculate flags: CONTIGUOUS, FORTRAN, ALIGNED\n    PyArray_UpdateFlags(*res, NPY_ARRAY_UPDATE_ALL);\n\n    // we are making a view in both inplace and non-inplace cases\n    PyArray_SetBaseObject(*res, (PyObject*)basename);\n\n    free(strides);\n    free(dimensions);\n\n    return 0;\n}\n'
p34077
asbsbsg177
g0
(g178
g2
Ntp34078
Rp34079
(dp34080
g182
(I01
tp34081
sg183
g33636
sg185
g189
sg192
I00
sg52
Nsbsb(g27960
tp34082
ssg6036
g27960
sg6037
(dp34083
g24880
g3796
((lp34084
tp34085
Rp34086
sg27978
g3796
((lp34087
tp34088
Rp34089
sg27060
g3796
((lp34090
tp34091
Rp34092
sg32383
g3796
((lp34093
tp34094
Rp34095
sg26150
g3796
((lp34096
tp34097
Rp34098
sg28965
g3796
((lp34099
g22267
ag32762
ag18238
ag27776
ag27789
ag27813
ag27801
ag24152
atp34100
Rp34101
sg27508
g3796
((lp34102
tp34103
Rp34104
sg30744
g3796
((lp34105
tp34106
Rp34107
sg25945
g3796
((lp34108
tp34109
Rp34110
sg32458
g3796
((lp34111
tp34112
Rp34113
sg23450
g3796
((lp34114
tp34115
Rp34116
sg33824
g3796
((lp34117
tp34118
Rp34119
sg32803
g3796
((lp34120
tp34121
Rp34122
sg27941
g3796
((lp34123
tp34124
Rp34125
sg33334
g3796
((lp34126
tp34127
Rp34128
sg31881
g3796
((lp34129
tp34130
Rp34131
sg29818
g3796
((lp34132
g17823
ag27712
ag27532
ag18056
ag24299
ag27724
ag27520
atp34133
Rp34134
sg26708
g3796
((lp34135
tp34136
Rp34137
sg32536
g3796
((lp34138
tp34139
Rp34140
sg27997
g3796
((lp34141
g29128
ag31131
ag19239
ag29894
ag32281
ag19263
ag29104
ag31106
ag31119
ag24780
ag33111
ag29907
atp34142
Rp34143
sg30845
g3796
((lp34144
tp34145
Rp34146
sg28273
g3796
((lp34147
g28777
ag19848
ag29944
ag24641
ag29931
ag28757
ag28432
ag28254
ag19838
atp34148
Rp34149
sg32437
g3796
((lp34150
tp34151
Rp34152
sg33377
g3796
((lp34153
tp34154
Rp34155
sg33232
g3796
((lp34156
tp34157
Rp34158
sg30158
g3796
((lp34159
tp34160
Rp34161
sg29876
g3796
((lp34162
tp34163
Rp34164
sg32600
g3796
((lp34165
tp34166
Rp34167
sg33440
g3796
((lp34168
tp34169
Rp34170
sg28310
g3796
((lp34171
g16858
ag23113
ag29710
ag17246
ag17403
ag17222
ag25822
ag29698
ag28697
ag17236
ag29401
ag29722
ag17364
ag16867
ag29837
ag33482
atp34172
Rp34173
sg33399
g3796
((lp34174
tp34175
Rp34176
sg27914
g3796
((lp34177
g24475
ag17356
ag18254
ag17347
ag27508
atp34178
Rp34179
sg28234
g3796
((lp34180
tp34181
Rp34182
sg32092
g3796
((lp34183
g23589
ag32188
ag19654
ag27325
ag28191
ag27350
ag27338
ag27362
ag19610
atp34184
Rp34185
sg30901
g3796
((lp34186
tp34187
Rp34188
sg31705
g3796
((lp34189
tp34190
Rp34191
sg32074
g3796
((lp34192
g23589
ag32188
ag19654
ag27325
ag28191
ag27350
ag27338
ag27362
ag19610
atp34193
Rp34194
sg29322
g3796
((lp34195
g16858
ag29302
ag31602
ag16867
ag18846
ag19639
ag27381
ag31758
ag27393
atp34196
Rp34197
sg25235
g3796
((lp34198
tp34199
Rp34200
sg28404
g3796
((lp34201
tp34202
Rp34203
sg28432
g3796
((lp34204
tp34205
Rp34206
sg29197
g3796
((lp34207
tp34208
Rp34209
sg28452
g3796
((lp34210
tp34211
Rp34212
sg28015
g3796
((lp34213
g29128
ag31131
ag19239
ag29894
ag32281
ag19263
ag29104
ag31106
ag31119
ag24780
ag33111
ag29907
atp34214
Rp34215
sg27218
g3796
((lp34216
tp34217
Rp34218
sg32704
g3796
((lp34219
tp34220
Rp34221
sg27801
g3796
((lp34222
tp34223
Rp34224
sg31002
g3796
((lp34225
tp34226
Rp34227
sg33482
g3796
((lp34228
tp34229
Rp34230
sg32726
g3796
((lp34231
tp34232
Rp34233
sg33683
g3796
((lp34234
tp34235
Rp34236
sg24152
g3796
((lp34237
tp34238
Rp34239
sg17175
g3796
((lp34240
g29210
ag27005
ag29550
ag28524
ag19594
ag29197
ag17030
ag28685
ag28865
ag30630
ag29185
ag30642
ag28906
ag28926
ag17263
ag28673
ag28097
ag28984
ag33090
ag28512
ag29060
ag33212
ag28109
ag28661
ag30560
ag29538
ag17166
ag33718
ag23152
ag17254
ag23287
ag32132
ag28877
ag19248
ag17040
ag29072
atp34241
Rp34242
sg28984
g3796
((lp34243
tp34244
Rp34245
sg32762
g3796
((lp34246
tp34247
Rp34248
sg31022
g3796
((lp34249
tp34250
Rp34251
sg30787
g3796
((lp34252
g30768
ag18460
ag17310
ag25352
ag17319
atp34253
Rp34254
sg31071
g3796
((lp34255
tp34256
Rp34257
sg30768
g3796
((lp34258
tp34259
Rp34260
sg30705
g3796
((lp34261
g30541
ag25235
ag30505
ag17878
ag30529
ag17848
ag30517
atp34262
Rp34263
sg29149
g3796
((lp34264
tp34265
Rp34266
sg33544
g3796
((lp34267
tp34268
Rp34269
sg30297
g3796
((lp34270
tp34271
Rp34272
sg27544
g3796
((lp34273
tp34274
Rp34275
sg31171
g3796
((lp34276
tp34277
Rp34278
sg30529
g3796
((lp34279
tp34280
Rp34281
sg29302
g3796
((lp34282
tp34283
Rp34284
sg17152
g3796
((lp34285
g33824
ag26035
ag34016
ag31022
ag33976
ag29197
ag33846
ag28685
ag16875
ag28865
ag29210
ag17545
ag29388
ag28906
ag30158
ag28524
ag26150
ag30170
ag28673
ag28984
ag33090
ag31035
ag29060
ag33212
ag28661
ag33933
ag17166
ag17254
ag23152
ag23287
ag23450
ag28512
ag28877
ag17040
ag29072
ag17030
atp34286
Rp34287
sg17339
g3796
((lp34288
tp34289
Rp34290
sg31224
g3796
((lp34291
tp34292
Rp34293
sg30981
g3796
((lp34294
tp34295
Rp34296
sg32497
g3796
((lp34297
tp34298
Rp34299
sg28926
g3796
((lp34300
tp34301
Rp34302
sg33645
g3796
((lp34303
tp34304
Rp34305
sg31245
g3796
((lp34306
tp34307
Rp34308
sg30106
g3796
((lp34309
tp34310
Rp34311
sg31262
g3796
((lp34312
tp34313
Rp34314
sg32960
g3796
((lp34315
tp34316
Rp34317
sg25990
g3796
((lp34318
tp34319
Rp34320
sg31280
g3796
((lp34321
tp34322
Rp34323
sg29004
g3796
((lp34324
tp34325
Rp34326
sg27470
g3796
((lp34327
g30067
ag28234
ag33494
ag28142
ag30435
ag27060
ag25659
ag28034
ag31071
ag30423
ag16934
ag21667
ag28154
ag28064
ag23918
ag17378
ag30255
ag27072
atp34328
Rp34329
sg32848
g3796
((lp34330
tp34331
Rp34332
sg31343
g3796
((lp34333
tp34334
Rp34335
sg27960
g3796
((lp34336
g16942
ag27653
ag28046
ag25945
ag30370
ag29636
ag32803
ag29550
ag32458
ag27941
ag20319
ag17006
ag27570
ag17074
ag26708
ag32536
ag27557
ag26282
ag27160
ag32600
ag19602
ag32639
ag33399
ag30901
ag28404
ag28452
ag17857
ag31196
ag31002
ag31293
ag28938
ag28550
ag18218
ag16902
ag32783
ag28818
ag33544
ag30297
ag31171
ag18925
ag18862
ag17200
ag17066
ag27596
ag32497
ag28563
ag25990
ag31280
ag29004
ag32848
ag19109
ag19619
ag28612
ag27108
ag20941
ag20921
ag22012
ag27147
ag33718
ag27231
ag17280
ag16893
ag27218
ag31468
ag29253
ag16983
ag33334
ag31934
ag31510
ag31550
ag29360
ag30981
ag26521
ag33050
ag17838
ag16926
ag26387
ag32726
ag31666
ag34044
ag31623
ag28537
ag17319
ag18854
ag17356
ag27583
ag16998
ag31783
ag31821
ag29166
ag27121
ag31881
ag27544
ag33070
ag31992
ag32032
ag16959
ag32144
ag30011
ag28789
ag27017
ag29659
ag21642
ag33420
ag33871
ag33584
ag31380
ag32208
ag33903
ag32238
ag30357
ag33955
ag27134
ag17411
ag32343
ag17339
ag27666
ag30464
ag31705
atp34337
Rp34338
sg33718
g3796
((lp34339
tp34340
Rp34341
sg29253
g3796
((lp34342
tp34343
Rp34344
sg24299
g3796
((lp34345
tp34346
Rp34347
sg29340
g3796
((lp34348
g33521
ag29302
ag26035
ag32437
ag17573
ag26150
ag31758
ag27844
ag33846
ag33824
ag31106
ag29388
ag16950
ag33933
ag17545
ag31602
ag18846
ag27393
ag29470
ag30158
ag34016
ag27832
ag30170
ag29590
ag29510
ag19639
ag16885
ag33440
ag31035
ag31022
ag29578
ag33903
ag27743
ag29894
ag24880
ag29602
ag17560
ag33955
ag16875
ag32281
ag33976
ag20964
ag33461
ag33891
ag33377
ag33355
ag27381
ag25502
ag23450
atp34349
Rp34350
sg23918
g3796
((lp34351
tp34352
Rp34353
sg23113
g3796
((lp34354
tp34355
Rp34356
sg28777
g3796
((lp34357
tp34358
Rp34359
sg29538
g3796
((lp34360
tp34361
Rp34362
sg29128
g3796
((lp34363
tp34364
Rp34365
sg29060
g3796
((lp34366
tp34367
Rp34368
sg33256
g3796
((lp34369
tp34370
Rp34371
sg27277
g3796
((lp34372
tp34373
Rp34374
sg24641
g3796
((lp34375
tp34376
Rp34377
sg32894
g3796
((lp34378
tp34379
Rp34380
sg31408
g3796
((lp34381
tp34382
Rp34383
sg32929
g3796
((lp34384
tp34385
Rp34386
sg31445
g3796
((lp34387
tp34388
Rp34389
sg32306
g3796
((lp34390
tp34391
Rp34392
sg31468
g3796
((lp34393
tp34394
Rp34395
sg31861
g3796
((lp34396
tp34397
Rp34398
sg29451
g3796
((lp34399
g27289
ag27084
ag23794
ag27096
ag30106
ag31071
ag28154
ag19409
ag28064
ag19419
ag28167
ag27277
atp34400
Rp34401
sg32948
g3796
((lp34402
tp34403
Rp34404
sg33521
g3796
((lp34405
tp34406
Rp34407
sg25502
g3796
((lp34408
tp34409
Rp34410
sg31510
g3796
((lp34411
tp34412
Rp34413
sg31550
g3796
((lp34414
tp34415
Rp34416
sg29360
g3796
((lp34417
tp34418
Rp34419
sg26387
g3796
((lp34420
tp34421
Rp34422
sg31106
g3796
((lp34423
tp34424
Rp34425
sg23287
g3796
((lp34426
tp34427
Rp34428
sg33626
g3796
((lp34429
tp34430
Rp34431
sg27489
g3796
((lp34432
g30606
ag17301
ag25101
ag17271
ag32704
ag30593
ag30047
ag30618
atp34433
Rp34434
sg17236
g3796
((lp34435
tp34436
Rp34437
sg33752
g3796
((lp34438
tp34439
Rp34440
sg28034
g3796
((lp34441
tp34442
Rp34443
sg31602
g3796
((lp34444
tp34445
Rp34446
sg20319
g3796
((lp34447
tp34448
Rp34449
sg23315
g3796
((lp34450
tp34451
Rp34452
sg30357
g3796
((lp34453
tp34454
Rp34455
sg26521
g3796
((lp34456
tp34457
Rp34458
sg33050
g3796
((lp34459
tp34460
Rp34461
sg32639
g3796
((lp34462
tp34463
Rp34464
sg33070
g3796
((lp34465
tp34466
Rp34467
sg31623
g3796
((lp34468
tp34469
Rp34470
sg28661
g3796
((lp34471
tp34472
Rp34473
sg24780
g3796
((lp34474
tp34475
Rp34476
sg27041
g3796
((lp34477
g19594
ag33494
ag27060
ag25822
ag33482
ag28154
ag28064
ag21667
ag30255
ag27005
ag30067
ag23113
ag25659
ag29185
ag17403
ag28034
ag28926
ag17364
ag29722
ag28142
ag29710
ag17246
ag17236
ag28234
ag16934
ag23918
ag30435
ag29401
ag29698
ag30423
ag28109
ag27072
ag19248
ag17378
ag28097
ag31071
atp34478
Rp34479
sg28370
g3796
((lp34480
tp34481
Rp34482
sg29433
g3796
((lp34483
g27289
ag27084
ag23794
ag27096
ag30106
ag31071
ag28154
ag19409
ag28064
ag19419
ag28167
ag27277
atp34484
Rp34485
sg31666
g3796
((lp34486
tp34487
Rp34488
sg29578
g3796
((lp34489
tp34490
Rp34491
sg32418
g3796
((lp34492
tp34493
Rp34494
sg31758
g3796
((lp34495
tp34496
Rp34497
sg29636
g3796
((lp34498
tp34499
Rp34500
sg30170
g3796
((lp34501
tp34502
Rp34503
sg23589
g3796
((lp34504
tp34505
Rp34506
sg16983
g3796
((lp34507
tp34508
Rp34509
sg31783
g3796
((lp34510
tp34511
Rp34512
sg29698
g3796
((lp34513
tp34514
Rp34515
sg31821
g3796
((lp34516
tp34517
Rp34518
sg17573
g3796
((lp34519
tp34520
Rp34521
sg29775
g3796
((lp34522
tp34523
Rp34524
sg32872
g3796
((lp34525
tp34526
Rp34527
sg29837
g3796
((lp34528
tp34529
Rp34530
sg32783
g3796
((lp34531
tp34532
Rp34533
sg31934
g3796
((lp34534
tp34535
Rp34536
sg33276
g3796
((lp34537
tp34538
Rp34539
sg31196
g3796
((lp34540
tp34541
Rp34542
sg31974
g3796
((lp34543
tp34544
Rp34545
sg31992
g3796
((lp34546
tp34547
Rp34548
sg27134
g3796
((lp34549
tp34550
Rp34551
sg32032
g3796
((lp34552
tp34553
Rp34554
sg33846
g3796
((lp34555
tp34556
Rp34557
sg28818
g3796
((lp34558
tp34559
Rp34560
sg24475
g3796
((lp34561
tp34562
Rp34563
sg26282
g3796
((lp34564
tp34565
Rp34566
sg30011
g3796
((lp34567
tp34568
Rp34569
sg30618
g3796
((lp34570
tp34571
Rp34572
sg25659
g3796
((lp34573
tp34574
Rp34575
sg25822
g3796
((lp34576
tp34577
Rp34578
sg33933
g3796
((lp34579
tp34580
Rp34581
sg33212
g3796
((lp34582
tp34583
Rp34584
sg29185
g3796
((lp34585
tp34586
Rp34587
sg27350
g3796
((lp34588
tp34589
Rp34590
sg32478
g3796
((lp34591
g17138
atp34592
Rp34593
sg32114
g3796
((lp34594
tp34595
Rp34596
sg23729
g3796
((lp34597
tp34598
Rp34599
sg29659
g3796
((lp34600
tp34601
Rp34602
sg28291
g3796
((lp34603
g28777
ag19848
ag29944
ag24641
ag29931
ag28757
ag28432
ag28254
ag19838
atp34604
Rp34605
sg33420
g3796
((lp34606
tp34607
Rp34608
sg19109
g3796
((lp34609
tp34610
Rp34611
sg32132
g3796
((lp34612
tp34613
Rp34614
sg33871
g3796
((lp34615
tp34616
Rp34617
sg29489
g3796
((lp34618
g33521
ag16950
ag25502
ag29894
ag31106
ag33355
ag29470
ag24880
ag33377
ag29590
ag29510
ag33440
ag17222
ag28697
ag29578
ag17560
ag29602
ag32281
ag20964
ag33461
ag17573
ag29837
atp34619
Rp34620
sg26035
g3796
((lp34621
tp34622
Rp34623
sg33584
g3796
((lp34624
tp34625
Rp34626
sg32325
g3796
((lp34627
g17102
ag32306
atp34628
Rp34629
sg32188
g3796
((lp34630
tp34631
Rp34632
sg30334
g3796
((lp34633
tp34634
Rp34635
sg25101
g3796
((lp34636
tp34637
Rp34638
sg31380
g3796
((lp34639
tp34640
Rp34641
sg32208
g3796
((lp34642
tp34643
Rp34644
sg30317
g3796
((lp34645
tp34646
Rp34647
sg28465
g3796
((lp34648
tp34649
Rp34650
sg32238
g3796
((lp34651
tp34652
Rp34653
sg27005
g3796
((lp34654
tp34655
Rp34656
sg33769
g3796
((lp34657
tp34658
Rp34659
sg28789
g3796
((lp34660
tp34661
Rp34662
sg24421
g3796
((lp34663
tp34664
Rp34665
sg33494
g3796
((lp34666
tp34667
Rp34668
sg33955
g3796
((lp34669
tp34670
Rp34671
sg23152
g3796
((lp34672
tp34673
Rp34674
sg33976
g3796
((lp34675
tp34676
Rp34677
sg25352
g3796
((lp34678
tp34679
Rp34680
sg30464
g3796
((lp34681
tp34682
Rp34683
sg34016
g3796
((lp34684
tp34685
Rp34686
sg32343
g3796
((lp34687
tp34688
Rp34689
sg33891
g3796
((lp34690
tp34691
Rp34692
sg23794
g3796
((lp34693
tp34694
Rp34695
sg17378
g3796
((lp34696
tp34697
Rp34698
sg27712
g3796
((lp34699
tp34700
Rp34701
sg33311
g3796
((lp34702
tp34703
Rp34704
sg33111
g3796
((lp34705
tp34706
Rp34707
sg34044
g3796
((lp34708
tp34709
Rp34710
ssbsg6153
g3796
((lp34711
g17241
ag16889
ag17541
ag17844
ag19598
ag17070
ag16880
ag17306
ag17834
ag16862
ag19606
ag16898
ag16938
ag17053
ag16930
ag18873
ag17170
ag18920
ag17232
ag18901
ag18841
ag17002
ag17084
ag18850
ag17162
ag16994
ag17148
ag19235
ag17267
ag17556
ag16921
ag17134
ag17407
ag16912
ag17343
ag17258
ag17044
ag16955
ag17351
ag18888
ag18830
ag17250
ag18858
ag17374
ag17196
ag17061
ag16946
ag17360
ag17569
ag17098
ag17035
ag16871
ag17314
ag17107
atp34712
Rp34713
sg6157
g3796
((lp34714
g17857
ag20319
ag17006
ag17074
ag19263
ag17319
ag19848
ag16858
ag17175
ag17838
ag16902
ag18925
ag18846
ag19654
ag18915
ag20941
ag17246
ag17280
ag17823
ag17254
ag19419
ag16950
ag17236
ag16926
ag16875
ag22012
ag18854
ag17356
ag17040
ag17573
ag19594
ag17403
ag17138
ag16893
ag19639
ag17222
ag19109
ag16942
ag17030
ag21667
ag20921
ag17301
ag17545
ag18254
ag18877
ag19602
ag21642
ag18238
ag17878
ag18862
ag20964
ag18218
ag22267
ag17200
ag20402
ag17263
ag17364
ag18460
ag16959
ag18905
ag19619
ag17066
ag17594
ag19248
ag17411
ag17102
ag17088
ag16867
ag20275
ag17057
ag18892
ag17111
ag17049
ag17166
ag16998
ag16916
ag16934
ag17347
ag17152
ag17310
ag16983
ag19409
ag19610
ag19025
ag19239
ag19838
ag18056
ag16885
ag17848
ag17271
ag17560
ag18834
ag17339
ag17378
atp34715
Rp34716
sg6161
(lp34717
g0
(g6163
g2
Ntp34718
Rp34719
(dp34720
g4619
I00
sg6167
g3796
((lp34721
g19594
ag31035
ag19639
atp34722
Rp34723
sba(itheano.compile.function_module
Supervisor
p34724
(dp34725
g6173
(lp34726
g16858
ag17166
ag16916
asbag0
(g6175
g2
Ntp34727
Rp34728
ag22476
ag27000
ag22651
asbsg204
(lp34729
g0
(g6179
g2
Ntp34730
Rp34731
(dp34732
g1838
g10368
sg1835
I00
sbasg7018
g7274
sg7019
g0
(g7020
g2
Ntp34733
Rp34734
(dp34735
g7024
I01
sg1827
Nsg7025
Nsg7026
Nsg1883
g16854
sg7027
I01
sg7028
Nsg7029
Nsg7030
I01
sg7031
g3796
((lp34736
g21667
ag20964
ag17823
ag17319
ag17356
ag18915
ag17301
ag19848
ag20402
ag19654
ag17049
ag19263
ag18877
ag18238
ag18862
ag19419
ag17878
ag18254
ag18460
ag18925
atp34737
Rp34738
sg7035
(dp34739
g17310
g18460
sg22267
g18238
sg17347
g18254
sg19610
g19654
sg19239
g19263
sg18905
g18915
sg17271
g17301
sg16950
g20964
sg19838
g19848
sg16934
g21667
sg19409
g19419
sg19025
g18877
sg18056
g17823
sg17848
g17878
ssbsg7037
g7038
sg52
g26998
sg7039
Nsg7040
g7043
sg7084
(lp34740
I00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
aI00
asg7086
(lp34741
(lp34742
g7276
aNa(lp34743
g7276
aaa(lp34744
g7279
aNa(lp34745
g7279
aaa(lp34746
g7282
aNa(lp34747
g7282
aaa(lp34748
g7308
aNa(lp34749
g7308
aaa(lp34750
g11716
aNa(lp34751
g11716
aaa(lp34752
g13923
aNa(lp34753
g13923
aaa(lp34754
g15786
aNa(lp34755
g15786
aaa(lp34756
g16823
aNa(lp34757
g16823
aaa(lp34758
g16826
aNa(lp34759
g16826
aaa(lp34760
g16829
aNa(lp34761
g16829
aaa(lp34762
g16832
aNa(lp34763
g16832
aaa(lp34764
g16835
aNa(lp34765
g16835
aaa(lp34766
g16838
aNa(lp34767
g16838
aaa(lp34768
g16841
aNa(lp34769
g16841
aaa(lp34770
g16844
aNa(lp34771
g16844
aaa(lp34772
g16847
aNa(lp34773
g16847
aaa(lp34774
g16850
aNa(lp34775
g16850
aaasg7100
I00
sg7101
I00
sb(lp34776
g0
(g473
g2
Ntp34777
Rp34778
(dp34779
g7106
I1
sg52
g58
sg1879
I01
sg477
(lp34780
Nasg1836
I00
sg485
I00
sg486
I00
sg177
g348
sg492
Nsbag0
(g473
g2
Ntp34781
Rp34782
(dp34783
g7106
I1
sg52
g1843
sg1879
I01
sg477
(lp34784
Nasg1836
I00
sg485
I00
sg486
I00
sg177
g1864
sg492
Nsbag0
(g473
g2
Ntp34785
Rp34786
(dp34787
g7106
I1
sg52
g7284
sg1879
I01
sg477
(lp34788
Nasg1836
I00
sg485
I00
sg486
I00
sg177
g7305
sg492
Nsbag0
(g473
g2
Ntp34789
Rp34790
(dp34791
g7106
I0
sg52
g493
sg1879
I00
sg477
g478
sg1836
I01
sg485
I00
sg486
I00
sg177
g488
sg492
Nsbag0
(g473
g2
Ntp34792
Rp34793
(dp34794
g7106
I0
sg52
g197
sg1879
I00
sg477
g1115
sg1836
I01
sg485
I00
sg486
I00
sg177
g1123
sg492
Nsbag0
(g473
g2
Ntp34795
Rp34796
(dp34797
g7106
I0
sg52
g493
sg1879
I00
sg477
g1355
sg1836
I01
sg485
I00
sg486
I00
sg177
g1363
sg492
Nsbag0
(g473
g2
Ntp34798
Rp34799
(dp34800
g7106
I0
sg52
g197
sg1879
I00
sg477
g1780
sg1836
I01
sg485
I00
sg486
I00
sg177
g1788
sg492
Nsbag0
(g473
g2
Ntp34801
Rp34802
(dp34803
g7106
I0
sg52
Nsg1879
I00
sg477
g8146
sg1836
I01
sg485
I00
sg486
I00
sg177
g8154
sg492
Nsbag0
(g473
g2
Ntp34804
Rp34805
(dp34806
g7106
I0
sg52
Nsg1879
I00
sg477
g11257
sg1836
I01
sg485
I00
sg486
I00
sg177
g11265
sg492
Nsbag0
(g473
g2
Ntp34807
Rp34808
(dp34809
g7106
I0
sg52
Nsg1879
I00
sg477
g7830
sg1836
I01
sg485
I00
sg486
I00
sg177
g7837
sg492
Nsbag0
(g473
g2
Ntp34810
Rp34811
(dp34812
g7106
I0
sg52
Nsg1879
I00
sg477
g14345
sg1836
I01
sg485
I00
sg486
I00
sg177
g14353
sg492
Nsbag0
(g473
g2
Ntp34813
Rp34814
(dp34815
g7106
I0
sg52
Nsg1879
I00
sg477
g15373
sg1836
I01
sg485
I00
sg486
I00
sg177
g15381
sg492
Nsbag0
(g473
g2
Ntp34816
Rp34817
(dp34818
g7106
I0
sg52
Nsg1879
I00
sg477
g12243
sg1836
I01
sg485
I00
sg486
I00
sg177
g12251
sg492
Nsbag0
(g473
g2
Ntp34819
Rp34820
(dp34821
g7106
I0
sg52
Nsg1879
I00
sg477
g13632
sg1836
I01
sg485
I00
sg486
I00
sg177
g13640
sg492
Nsbag0
(g473
g2
Ntp34822
Rp34823
(dp34824
g7106
I0
sg52
Nsg1879
I00
sg477
g11992
sg1836
I01
sg485
I00
sg486
I00
sg177
g11999
sg492
Nsbag0
(g473
g2
Ntp34825
Rp34826
(dp34827
g7106
I0
sg52
Nsg1879
I00
sg477
g16031
sg1836
I01
sg485
I00
sg486
I00
sg177
g16039
sg492
Nsbag0
(g473
g2
Ntp34828
Rp34829
(dp34830
g7106
I0
sg52
Nsg1879
I00
sg477
g16532
sg1836
I01
sg485
I00
sg486
I00
sg177
g16540
sg492
Nsba(lp34831
NaNaNag481
ag1118
ag1358
ag1783
ag8149
ag11260
ag7833
ag14348
ag15376
ag12246
ag13635
ag11995
ag16034
ag16535
aI00
tp34832
Rp34833
sS'input'
p34834
g329
sb.